{"version":3,"file":"WordCloud.js","sourceRoot":"","sources":["../../../../../src/.internal/charts/wordcloud/WordCloud.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DataItem } from \"../../core/render/Component\";\nimport type { CanvasLayer } from \"../../core/render/backend/CanvasRenderer\";\nimport type { ColorSet } from \"../../core/util/ColorSet\";\nimport type { Percent } from \"../../core/util/Percent\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { IDisposer } from \"../../core/util/Disposer\";\nimport type { Time } from \"../../core/util/Animation\";\n\nimport { WordCloudDefaultTheme } from \"./WordCloudDefaultTheme\";\nimport { Series, ISeriesSettings, ISeriesDataItem, ISeriesPrivate } from \"../../core/render/Series\";\nimport { Template } from \"../../core/util/Template\";\nimport { Label } from \"../../core/render/Label\";\nimport { Container } from \"../../core/render/Container\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Color } from \"../../core/util/Color\";\nimport type { IBounds } from \"../../core/util/IBounds\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $math from \"../../core/util/Math\";\n\nexport interface IWordCloudDataItem extends ISeriesDataItem {\n\n    /**\n     * Category.\n     */\n    category: string;\n\n    /**\n     * Label.\n     */\n    label: Label;\n\n    /**\n     * Label.\n     */\n    ghostLabel: Label;\n\n    /**\n     * Fill color used for the slice and related elements, e.g. legend marker.\n     */\n    fill: Color;\n\n    /**\n     * @ignore\n     */\n    set: number;\n\n    /**\n     * @ignore\n     */\n    angle: number;\n\n    /**\n     * @ignore\n     */\n    fontSize: number;\n}\n\nexport interface IWordCloudSettings extends ISeriesSettings {\n\n    /**\n     * Duration of word animation when chart resizes.\n     */\n    animationDuration?: number;\n\n    /**\n     * An easing function to use for word animations.\n     *\n     * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Easing_functions} for more info\n     * @default am5.ease.out($ease.cubic)\n     */\n    animationEasing?: (t: Time) => Time;\n\n    /**\n     * @default false\n     */\n    autoFit?: boolean;\n\n    /**\n     * @readonly\n     */\n\n    progress?: number;\n\n    /**\n     * A [[ColorSet]] to use when asigning colors for slices.\n     */\n    colors?: ColorSet;\n\n    /**\n     * A field in data that holds category names.\n     */\n    categoryField?: string;\n\n    /**\n     * A field that holds color for slice fill.\n     */\n    fillField?: string;\n\n    /**\n     * Source text from which words are extracted.\n     */\n    text?: string;\n\n    /**\n     * Absolute or relative font size for the smallest words.\n     */\n    minFontSize?: number | Percent;\n\n    /**\n     * Absolute or relative font size for the biggest words.\n     */\n    maxFontSize?: number | Percent;\n\n    /**\n     * Minimum occurances for a word to be included into cloud.\n     */\n    minValue?: number;\n\n    /**\n     * Maximum number of words to show.\n     */\n    maxCount?: number;\n\n    /**\n     * Array of words  exclude from cloud.\n     */\n    excludeWords?: Array<string>;\n\n    /**\n     * Randomness of word placement (0-1).\n     */\n    randomness?: number;\n\n    /**\n     * Minimum number of characters for a word to be included in the cloud.\n     */\n    minWordLength?: number;\n\n    /**\n     * An array of possible rotation angles for words.\n     */\n    angles?: number[];\n\n    /**\n     * Step for next word placement.\n     */\n    step?: number;\n}\n\nexport interface IWordCloudPrivate extends ISeriesPrivate {\n    adjustedFontSize: number;\n}\n\n/**\n * Creates a [[WordlCloud]] series.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/word-cloud/} for more info\n * @important\n */\nexport class WordCloud extends Series {\n\n    public static className: string = \"WordCloud\";\n    public static classNames: Array<string> = Series.classNames.concat([WordCloud.className]);\n\n    declare public _settings: IWordCloudSettings;\n    declare public _privateSettings: IWordCloudPrivate;\n    declare public _dataItemSettings: IWordCloudDataItem;\n\n    protected _currentIndex: number = 0;\n    protected _timeoutDP?: IDisposer;\n\n    protected _ghostContainer = this.children.push(Container.new(this._root, { layer: 99, opacity: 0.01 }))\n\n    protected _pointSets: Array<Array<IPoint>> = [];\n    protected _sets: number = 3;\n\n    protected _process = false;\n\n    protected _buffer: Array<number> = [];\n\n    protected _boundsToAdd?: IBounds;\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(WordCloudDefaultTheme.new(this._root));\n\n        this.fields.push(\"category\", \"fill\");\n        this._setDefault(\"valueField\", \"value\");\n        this._setDefault(\"categoryField\", \"category\");\n\n        super._afterNew();\n\n        this._root.events.on(\"frameended\", () => {\n            this.set(\"progress\", this._currentIndex / this.dataItems.length);\n        })\n    }\n\n\n    /**\n     * A [[ListTemplate]] of all labels in series.\n     *\n     * `labels.template` can also be used to configure labels.\n     */\n    public readonly labels: ListTemplate<Label> = this._makeLabels();\n\n    /**\n     * @ignore\n     */\n    public makeLabel(dataItem: DataItem<this[\"_dataItemSettings\"]>): Label {\n        const label = this.children.push(this.labels.make());\n        label._setDataItem(dataItem);\n        label._setDefault(\"fill\", dataItem.get(\"fill\"));\n        label.set(\"x\", -999999); // do not change!\n\n        dataItem.set(\"label\", label);\n        this.labels.push(label);\n\n        const ghostLabel = this._ghostContainer.children.push(this.labels.make());\n        ghostLabel._setDataItem(dataItem);\n        ghostLabel.setAll({ fill: Color.fromHex(0x000000), fontWeight: \"900\" });\n        dataItem.set(\"ghostLabel\", ghostLabel);\n        this.labels.push(ghostLabel);\n\n        return label;\n    }\n\n    protected _makeLabels(): ListTemplate<Label> {\n        return new ListTemplate(\n            Template.new({}),\n            () => Label._new(this._root, {\n                themeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [\"wordcloud\", \"series\"])\n            }, [this.labels.template]),\n        );\n    }\n\n\n    protected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n        super.processDataItem(dataItem);\n\n\n        if (dataItem.get(\"fill\") == null) {\n            let colors = this.get(\"colors\");\n            if (colors) {\n                dataItem.setRaw(\"fill\", colors.next());\n            }\n        }\n\n        this.makeLabel(dataItem);\n    }\n\n    public _prepareChildren() {\n        super._prepareChildren();\n\n        if (this.isDirty(\"text\")) {\n            this.data.setAll(this._getWords(this.get(\"text\")));\n            this._dirty[\"text\"] = false;\n        }\n    }\n\n    public _updateChildren() {\n        super._updateChildren();\n\n        const resolution = this._root._renderer.resolution;\n        const cols = Math.round(this._root.width() * resolution);\n        //const rows = Math.round(this._root.height() * resolution);\n        let step = this.get(\"step\", 1) * 2;\n\n        if (this._valuesDirty || this._sizeDirty || this.isPrivateDirty(\"adjustedFontSize\")) {\n            const adjustedFontSize = this.getPrivate(\"adjustedFontSize\", 1);\n\n            const w = this.innerWidth();\n            const h = this.innerHeight();\n\n            const smaller = Math.min(w, h);\n            const bigger = Math.max(w, h);\n\n            this._buffer = Array(Math.ceil(this._root.width() * this._root.height() * resolution * resolution)).fill(0);\n\n            if (smaller < 800) {\n                step = step / 2;\n            }\n\n            this._ghostContainer._display.clear();\n            this._pointSets = [];\n\n            for (let i = 0; i < this._sets; i++) {\n                // bigger step at the beginning\n                const setStep = step * (this._sets - i);\n                const points = this._spiralPoints(w / 2, h / 2, w, h, 0, setStep * h / bigger, setStep * w / bigger, 0, 0)\n\n                // generated more points and remove those out of bounds\n                for (let i = points.length - 1; i >= 0; i--) {\n                    let point = points[i];\n\n                    if (point.x < 0 || point.x > w || point.y < 0 || point.y > h) {\n                        points.splice(i, 1);\n                        continue;\n                    }\n                }\n                this._pointSets.push(points);\n            }\n\n            let sum = 0;\n            let absSum = 0;\n            let valueHigh = 0;\n            let valueLow = Infinity;\n            let count = 0;\n            $array.each(this._dataItems, (dataItem) => {\n                const valueWorking = dataItem.get(\"valueWorking\", 0);\n                sum += valueWorking;\n                absSum += Math.abs(valueWorking);\n            });\n\n            this._dataItems.sort((a, b) => {\n                let aValue = a.get(\"value\");\n                let bValue = b.get(\"value\");\n\n                if (aValue > bValue) return -1;\n                if (aValue < bValue) return 1;\n                return 0;\n\n            })\n\n            $array.each(this._dataItems, (dataItem) => {\n\n                const value = dataItem.get(\"valueWorking\", 0);\n\n                if (value >= absSum) {\n                    sum = dataItem.get(\"value\", 0);\n                }\n\n                if (value > valueHigh) {\n                    valueHigh = value;\n                }\n\n                if (value < valueLow) {\n                    valueLow = value;\n                }\n\n                count++;\n            });\n\n            this.setPrivateRaw(\"valueLow\", valueLow);\n            this.setPrivateRaw(\"valueHigh\", valueHigh);\n            this.setPrivateRaw(\"valueSum\", sum);\n            this.setPrivateRaw(\"valueAverage\", sum / count);\n            this.setPrivateRaw(\"valueAbsoluteSum\", absSum);\n\n            const smallerSize = Math.min(w, h);\n            const minFontSize = $utils.relativeToValue(this.get(\"minFontSize\", 10), smallerSize) * adjustedFontSize;\n            const maxFontSize = $utils.relativeToValue(this.get(\"maxFontSize\", 100), smallerSize) * adjustedFontSize;\n\n            const angles = this.get(\"angles\", [0]);\n\n            $array.each(this._dataItems, (dataItem) => {\n                const value = dataItem.get(\"valueWorking\", 0);\n                const ghostLabel = dataItem.get(\"ghostLabel\");\n                const fontSize = minFontSize + (maxFontSize - minFontSize) * (value - valueLow) / (valueHigh - valueLow);\n\n                const set = this._sets - 1 - Math.floor((fontSize - minFontSize) / (maxFontSize - minFontSize) * (this._sets - 1));\n                dataItem.setRaw(\"set\", set);\n                dataItem.setRaw(\"fontSize\", fontSize);\n\n                let angle = angles[Math.floor(Math.random() * (angles.length))];\n\n                dataItem.setRaw(\"angle\", angle);\n\n                ghostLabel.setAll({ fontSize: fontSize, rotation: angle, x: -10000 });\n            })\n\n            this._process = false;\n            this._currentIndex = 0;\n\n            this._root.events.once(\"frameended\", () => {\n                this.setTimeout(() => {\n                    this._process = true;\n                    this._markDirtyKey(\"progress\");\n                }, 50)\n            })\n        }\n\n        const boundsToAdd = this._boundsToAdd;\n        if (boundsToAdd) {\n            const context = (this._ghostContainer._display.getLayer() as CanvasLayer).context;\n            const y = Math.round(boundsToAdd.top);\n            const x = Math.round(boundsToAdd.left);\n            const w = Math.round(boundsToAdd.right - boundsToAdd.left);\n            const h = Math.round(boundsToAdd.bottom - boundsToAdd.top);\n\n            const imageData = context.getImageData(x, y, w, h).data;\n            const buffer = this._buffer;\n\n            let n = 3;\n            for (let r = y; r < y + h; r++) {\n                for (let c = x; c < x + w; c++) {\n                    let i = ((r + 1) * cols - (cols - c));\n                    if (imageData[n] != 0) {\n                        buffer[i] = 1;\n                    }\n                    n += 4;\n                }\n            }\n            this._boundsToAdd = undefined;\n        }\n\n        if (this._process && this.isDirty(\"progress\")) {\n            this._processItem();\n        }\n    }\n\n    protected _processItem() {\n        this._boundsToAdd = undefined;\n\n        if (this._currentIndex < this.dataItems.length) {\n            const dataItem = this.dataItems[this._currentIndex];\n            const label = dataItem.get(\"label\");\n            const ghostLabel = dataItem.get(\"ghostLabel\");\n\n            const resolution = this._root._renderer.resolution;\n\n            let lw = ghostLabel.width();\n            let lh = ghostLabel.height();\n\n            const context = (ghostLabel._display.getLayer() as CanvasLayer).context;\n            const set = dataItem.get(\"set\");\n\n            const points = this._pointSets[set];\n\n            const w = this.innerWidth();\n            const h = this.innerHeight();\n\n            const cols = Math.round(this._root.width() * resolution);\n\n            const x = this.x();\n            const y = this.y();\n\n            const angles = this.get(\"angles\", [0]);\n            if (w > h) {\n                if (lw >= w / 2) {\n                    $array.each(angles, (angle) => {\n                        if (angle == 0 && dataItem.get(\"angle\") != 0) {\n                            dataItem.setRaw(\"angle\", 0);\n                            ghostLabel.set(\"rotation\", 0);\n                            [lw, lh] = [lh, lw];\n                        }\n                    })\n                }\n            }\n\n            if (h > w) {\n                if (lw >= w / 2) {\n                    $array.each(angles, (angle) => {\n                        if (Math.abs(angle) == 90 && dataItem.get(\"angle\") == 0) {\n                            dataItem.setRaw(\"angle\", angle);\n                            ghostLabel.set(\"rotation\", angle);\n                            [lw, lh] = [lh, lw];\n                        }\n                    })\n                }\n            }\n\n            const rw = Math.ceil(lw * resolution);\n            const rh = Math.ceil(lh * resolution);\n\n            if (context && lw > 0 && lh > 0) {\n                let pIndex = Math.round(Math.random() * points.length * this.get(\"randomness\", 0));\n\n                let intersects = true;\n\n                while (intersects) {\n\n                    let p = points[pIndex];\n                    if (p) {\n                        intersects = false;\n\n                        if (this._currentIndex > 0) {\n                            let cx = Math.round((p.x + x) * resolution - rw / 2);\n                            let cy = Math.round((p.y + y) * resolution - rh / 2);\n                            intersects = this._hasColor(cx, cy, rw, rh, cols);\n                        }\n\n                        if (p.x - lw / 2 < 0 || p.x + lw / 2 > w || p.y - lh / 2 < 0 || p.y + lh / 2 > h) {\n                            pIndex++;\n                            intersects = true;\n                        }\n                        else {\n                            if (!intersects) {\n                                const angle = dataItem.get(\"angle\", 0);\n                                const fontSize = dataItem.get(\"fontSize\", 0);\n                                if (label.get(\"x\") != -999999) {\n                                    label.animate({ key: \"x\", to: p.x, duration: this.get(\"animationDuration\", 0), easing: this.get(\"animationEasing\") })\n                                    label.animate({ key: \"y\", to: p.y, duration: this.get(\"animationDuration\", 0), easing: this.get(\"animationEasing\") })\n                                    label.animate({ key: \"rotation\", to: angle, duration: this.get(\"animationDuration\", 0), easing: this.get(\"animationEasing\") })\n                                    label.animate({ key: \"fontSize\", to: fontSize, duration: this.get(\"animationDuration\", 0), easing: this.get(\"animationEasing\") })\n                                }\n                                else {\n                                    label.setAll({ x: p.x, y: p.y, rotation: angle, fontSize: fontSize });\n                                    label.appear();\n                                }\n\n                                ghostLabel.setAll({ x: p.x, y: p.y });\n\n                                for (let i = points.length - 1; i >= 0; i--) {\n                                    let point = points[i]\n                                    if (point.x >= p.x - lw / 2 && point.x <= p.x + lw / 2 && point.y >= p.y - lh / 2 && point.y <= p.y + lh / 2) {\n                                        points.splice(i, 1);\n                                    }\n                                }\n                                this._boundsToAdd = { left: (p.x + x - lw / 2) * resolution, right: (p.x + x + lw / 2) * resolution, top: (p.y + y - lh / 2) * resolution, bottom: (p.y + y + lh / 2) * resolution };\n                            }\n                            else {\n                                pIndex += 2;\n                            }\n                        }\n                    }\n                    else {\n                        if (this.get(\"autoFit\")) {\n                            this.setTimeout(() => {\n                                this.setPrivate(\"adjustedFontSize\", this.getPrivate(\"adjustedFontSize\", 1) * 0.9);\n                            }, 50);\n                            return;\n                        }\n                        label.set(\"x\", -999999);\n                        intersects = false;\n                    }\n                }\n            }\n\n            this._currentIndex++;\n        }\n    }\n    /**\n* @ignore\n*/\n    public disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n        super.disposeDataItem(dataItem);\n        const label = dataItem.get(\"label\");\n        if (label) {\n            this.labels.removeValue(label);\n            label.dispose();\n        }\n\n        const ghostLabel = dataItem.get(\"ghostLabel\");\n        if (ghostLabel) {\n            this.labels.removeValue(ghostLabel);\n            ghostLabel.dispose();\n        }\n    }\n    /**\n * Extracts words and number of their appearances from a text.\n *\n * @ignore\n* @param  input  Source text\n*/\n    protected _getWords(input?: string): Array<{ category: string, value: number }> {\n        let words: Array<{ category: string, value: number }> = [];\n\n        if (input) {\n            const chars = \"\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376-\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0523\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u064A\\u066E-\\u066F\\u0671-\\u06D3\\u06D5\\u06E5-\\u06E6\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4-\\u07F5\\u07FA\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0972\\u097B-\\u097F\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0-\\u0AE1\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58-\\u0C59\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0-\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D3D\\u0D60-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E46\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8B\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065-\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10D0-\\u10FA\\u10FC\\u1100-\\u1159\\u115F-\\u11A2\\u11A8-\\u11F9\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u1676\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19A9\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE-\\u1BAF\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u2094\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2C6F\\u2C71-\\u2C7D\\u2C80-\\u2CE4\\u2D00-\\u2D25\\u2D30-\\u2D65\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31B7\\u31F0-\\u31FF\\u3400\\u4DB5\\u4E00\\u9FC3\\uA000-\\uA48C\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A-\\uA62B\\uA640-\\uA65F\\uA662-\\uA66E\\uA67F-\\uA697\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78C\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA90A-\\uA925\\uA930-\\uA946\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAC00-\\uD7A3\\uF900-\\uFA2D\\uFA30-\\uFA6A\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC0-9@+\";\n            const reg = new RegExp(\"([\" + chars + \"]+[\\-\" + chars + \"]*[\" + chars + \"]+)|([\" + chars + \"]+)\", \"ig\");\n            let res = input.match(reg);\n            if (!res) {\n                return [];\n            }\n\n            let word;\n            while (true) {\n                word = res.pop();\n\n                if (!word) {\n                    break;\n                }\n\n                let item;\n                for (let i = 0; i < words.length; i++) {\n                    if (words[i].category.toLowerCase() == word.toLowerCase()) {\n                        item = words[i];\n                        break;\n                    }\n                }\n                if (item) {\n                    item.value++;\n                    if (!this.isCapitalized(word)) {\n                        item.category = word;\n                    }\n                }\n                else {\n                    words.push({\n                        category: word,\n                        value: 1\n                    })\n                }\n            }\n\n            let excludeWords = this.get(\"excludeWords\");\n\n            const minValue = this.get(\"minValue\", 1);\n            const minWordLength = this.get(\"minWordLength\", 1);\n\n            if (minValue > 1 || minWordLength > 1 || (excludeWords && excludeWords.length > 0)) {\n                for (let i = words.length - 1; i >= 0; i--) {\n                    let w = words[i];\n                    let word = w.category;\n\n                    if (w.value < minValue) {\n                        words.splice(i, 1);\n                    }\n                    if (word.length < minWordLength) {\n                        words.splice(i, 1);\n                    }\n                    if (excludeWords && excludeWords.indexOf(word) !== -1) {\n                        words.splice(i, 1);\n                    }\n                }\n            }\n\n            words.sort(function(a, b) {\n                if (a.value == b.value) {\n                    return 0;\n                }\n                else if (a.value > b.value) {\n                    return -1;\n                }\n                else {\n                    return 1;\n                }\n            });\n\n            const maxCount = this.get(\"maxCount\", Infinity);\n            if (words.length > maxCount) {\n                words = words.slice(0, maxCount);\n            }\n        }\n\n        return words;\n    }\n    /**\n * Checks if word is capitalized (starts with an uppercase) or not.\n *\n * @ignore\n * @param   word  Word\n* @return        Capitalized?\n*/\n    public isCapitalized(word: string): boolean {\n        let lword = word.toLowerCase();\n        return word[0] != lword[0]\n            && word.substr(1) == lword.substr(1)\n            && word != lword;\n    }\n\n\n    public _spiralPoints(cx: number, cy: number, radius: number, radiusY: number, innerRadius: number, step: number, radiusStep: number, startAngle: number, endAngle: number): IPoint[] {\n\n        let r = innerRadius + 0.01;\n        let angle = startAngle * $math.RADIANS;\n        let points = [];\n\n        while (r < radius + radiusStep) {\n\n            let stepSize = step;\n            if (stepSize / 2 > r) {\n                stepSize = 2 * r;\n            }\n\n            angle += 2 * Math.asin(stepSize / 2 / r);\n\n            if (angle * $math.DEGREES > endAngle + ((radius - innerRadius) / radiusStep) * 360) {\n                break;\n            }\n\n            let degrees = angle * $math.DEGREES;\n\n            let point = { x: cx + r * Math.cos(angle), y: cy + r * radiusY / radius * Math.sin(angle) };\n            points.push(point);\n\n            r = innerRadius + degrees / 360 * radiusStep;\n        }\n\n        points.shift();\n\n        return points;\n    }\n\n    protected _hasColor(x: number, y: number, w: number, h: number, cols: number): boolean {\n        const buffer = this._buffer;\n        if (buffer) {\n            for (let r = y; r < y + h; r += 4) {\n                for (let c = x; c < x + w; c += 4) {\n                    let i = ((r + 1) * cols - (cols - c));\n                    if (buffer[i] != 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false\n    }\n}\n"]}