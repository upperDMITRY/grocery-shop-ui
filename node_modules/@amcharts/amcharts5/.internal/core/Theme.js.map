{"version":3,"file":"Theme.js","sourceRoot":"","sources":["../../../../src/.internal/core/Theme.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAG3C,OAAO,KAAK,MAAM,MAAM,cAAc,CAAC;AACvC,OAAO,KAAK,MAAM,MAAM,cAAc,CAAC;AAOvC;;;;;GAKG;AACH;IAmBC,eAAY,IAAU,EAAE,MAAc;QAjBtC;;;;;WAAuB;QA0BvB;;;;mBAA8D,EAAE;WAAC;QARhE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,MAAM,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;SAC3E;IACF,CAAC;IApBD;;;;;;;;OAQG;;;;;eACH,UAA4C,IAAU;YACrD,IAAM,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAoB,CAAC;YACpD,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACtB,OAAO,CAAC,CAAC;QACV,CAAC;;;;;;eASD,cAAqC,CAAC;;IAItC;;;;;;OAMG;;;;;eACH,UAAsC,UAAkB;YACvD,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAA2C,CAAC;QAC1E,CAAC;;IAED;;;;;;;;;;OAUG;;;;;eACH,UAAiC,UAAkB,EAAE,SAA6B;YAA7B,0BAAA,EAAA,cAA6B;YACjF,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAEpC,IAAI,CAAC,KAAK,EAAE;gBACX,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;aACrC;YAED,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAEzB,IAAA,KAAmB,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,UAAC,CAAC;gBACvD,IAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;gBAE9D,IAAI,KAAK,KAAK,CAAC,EAAE;oBAChB,OAAO,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;iBAE9D;qBAAM;oBACN,OAAO,KAAK,CAAC;iBACb;YACF,CAAC,CAAC,EATM,KAAK,WAAA,EAAE,KAAK,WASlB,CAAC;YAEH,IAAI,KAAK,EAAE;gBACV,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,QAAuB,CAAC;aAE5C;iBAAM;gBACN,IAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAI,EAAE,CAAC,CAAC;gBAErC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE;oBACtB,IAAI,EAAE,SAAS;oBACf,QAAQ,UAAA;iBACR,CAAC,CAAC;gBAEH,OAAO,QAAQ,CAAC;aAChB;QACF,CAAC;;IAED;;;;;;;OAOG;;;;;eACH,UAAsC,UAAa,EAAE,SAA6B;YAA7B,0BAAA,EAAA,cAA6B;YACjF,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,SAAS,CAA0B,CAAC;QACrE,CAAC;;IACF,YAAC;AAAD,CAAC,AAlGD,IAkGC","sourcesContent":["import type { Entity } from \"./util/Entity\";\nimport { Template } from \"./util/Template\";\nimport type { Root } from \"./Root\";\nimport type { IClasses } from \"./Classes\";\nimport * as $order from \"./util/Order\";\nimport * as $array from \"./util/Array\";\n\nexport interface IRule<A extends Entity> {\n\ttags: Array<string>;\n\ttemplate: Template<A>;\n}\n\n/**\n * A base class for an amCharts theme.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info\n * @important\n */\nexport class Theme {\n\n\tprotected _root!: Root;\n\n\t/**\n\t * Use this method to create an instance of this class.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\n\t * @param   root      Root element\n\t * @param   settings  Settings\n\t * @param   template  Template\n\t * @return            Instantiated object\n\t */\n\tstatic new<T extends typeof Theme>(this: T, root: Root): InstanceType<T> {\n\t\tconst x = (new this(root, true)) as InstanceType<T>;\n\t\tx.setupDefaultRules();\n\t\treturn x;\n\t}\n\n\tconstructor(root: Root, isReal:boolean) {\n\t\tthis._root = root;\n\t\tif (!isReal) {\n\t\t\tthrow new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n\t\t}\n\t}\n\n\tprotected setupDefaultRules(): void {}\n\n\tprotected _rules: { [type: string]: Array<IRule<Entity>>; } = {};\n\n\t/**\n\t * Looks up the rules for a specific theme class.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\n\t * @param   themeClass Theme class\n\t * @return             Array<IRule<A>>\n\t */\n\tpublic _lookupRules<A extends Entity>(themeClass: string): Array<IRule<A>> | undefined {\n\t\treturn this._rules[themeClass] as unknown as Array<IRule<A>> | undefined;\n\t}\n\n\t/**\n\t * Creates a [[Template]] for specific theme class and tags.\n\t *\n\t * NOTE: the difference from `rule()` is that `ruleRaw()` does not do any\n\t * type checks.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\n\t * @param   themeClass Theme class\n\t * @param   themeTags  Theme tags\n\t * @return             Template\n\t */\n\tpublic ruleRaw<A extends Entity>(themeClass: string, themeTags: Array<string> = []): Template<A> {\n\t\tlet rules = this._rules[themeClass];\n\n\t\tif (!rules) {\n\t\t\trules = this._rules[themeClass] = [];\n\t\t}\n\n\t\tthemeTags.sort($order.compare);\n\n\t\tconst { index, found } = $array.getSortedIndex(rules, (x) => {\n\t\t\tconst order = $order.compare(x.tags.length, themeTags.length);\n\n\t\t\tif (order === 0) {\n\t\t\t\treturn $order.compareArray(x.tags, themeTags, $order.compare);\n\n\t\t\t} else {\n\t\t\t\treturn order;\n\t\t\t}\n\t\t});\n\n\t\tif (found) {\n\t\t\treturn rules[index].template as Template<A>;\n\n\t\t} else {\n\t\t\tconst template = Template.new<A>({});\n\n\t\t\trules.splice(index, 0, {\n\t\t\t\ttags: themeTags,\n\t\t\t\ttemplate,\n\t\t\t});\n\n\t\t\treturn template;\n\t\t}\n\t}\n\n\t/**\n\t * Creates a [[Template]] for specific theme class and tags.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\n\t * @param   themeClass Theme class\n\t * @param   themeTags  Theme tags\n\t * @return             Template\n\t */\n\tpublic rule<K extends keyof IClasses>(themeClass: K, themeTags: Array<string> = []): Template<IClasses[K]> {\n\t\treturn this.ruleRaw(themeClass, themeTags) as Template<IClasses[K]>;\n\t}\n}\n"]}