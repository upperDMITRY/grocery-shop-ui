{"version":3,"file":"Disposer.js","sourceRoot":"","sources":["../../../../../src/.internal/core/util/Disposer.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;AACH,OAAO,KAAK,MAAM,MAAM,SAAS,CAAC;AAalC;;;;GAIG;AACH;IAYC;;;;OAIG;IACH,kBAAY,OAAmB;QAf/B;;WAEG;QACH;;;;;WAA2B;QAE3B;;WAEG;QACH;;;;;WAA6B;QAQ5B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IACzB,CAAC;IAED;;;;OAIG;;;;;eACH;YACC,OAAO,IAAI,CAAC,SAAS,CAAC;QACvB,CAAC;;IAED;;OAEG;;;;;eACH;YACC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACtB,IAAI,CAAC,QAAQ,EAAE,CAAC;aAChB;QACF,CAAC;;IAEF,eAAC;AAAD,CAAC,AAzCD,IAyCC;;AAED;;;;GAIG;AACH;IAAmC,iCAAQ;IAC1C,uBAAY,SAA2B;eACtC,kBAAM;YACL,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,UAAC,CAAC;gBACxB,CAAC,CAAC,OAAO,EAAE,CAAC;YACb,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC;IACH,CAAC;IACF,oBAAC;AAAD,CAAC,AARD,CAAmC,QAAQ,GAQ1C;;AAED;;;;;;;;GAQG;AACH;IAA+D,wCAAQ;IAYtE;;OAEG;IACH;QAAA,YACC,kBAAM;YACL,IAAI,KAAI,CAAC,SAAS,IAAI,IAAI,EAAE;gBAC3B,KAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;gBACzB,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;aAC3B;QACF,CAAC,CAAC,SACF;QApBD;;WAEG;QACH;;;;;WAAuC;QAEvC;;WAEG;QACH;;;;;WAA4B;;IAY5B,CAAC;IAED;;;;OAIG;;;;;eACH;YACC,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;;IAED;;;;;OAKG;;;;;eACH,UAAW,KAAkB,EAAE,QAA6B;YAC3D,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;gBAC3B,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;aACzB;YAED,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACrB,CAAC;;IAED;;OAEG;;;;;eACH;YACC,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAChC,CAAC;;IAEF,2BAAC;AAAD,CAAC,AAvDD,CAA+D,QAAQ,GAuDtE;;AAED;;;GAGG;AACH;IAAqC,mCAAQ;IAA7C;QAAA,qEA4BC;QA1BA;;;;WAIG;QACH;;;;mBAA2B,CAAC;WAAC;;IAqB9B,CAAC;IAnBA;;;;OAIG;;;;;eACH;YAAA,iBAYC;YAXA,wCAAwC;YACxC,EAAE,IAAI,CAAC,QAAQ,CAAC;YAEhB,gCAAgC;YAChC,OAAO,IAAI,QAAQ,CAAC;gBACnB,EAAE,KAAI,CAAC,QAAQ,CAAC;gBAEhB,IAAI,KAAI,CAAC,QAAQ,KAAK,CAAC,EAAE;oBACxB,KAAI,CAAC,OAAO,EAAE,CAAC;iBACf;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;;IAEF,sBAAC;AAAD,CAAC,AA5BD,CAAqC,QAAQ,GA4B5C","sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport * as $array from \"./Array\";\nimport type { Optional } from \"./Type\";\n\n/**\n * Defines interface for disposable objects.\n *\n * @ignore Exclude from docs\n */\nexport interface IDisposer {\n\tisDisposed(): boolean;\n\tdispose(): void;\n}\n\n/**\n * A base class for disposable objects.\n *\n * @ignore Exclude from docs\n */\nexport class Disposer implements IDisposer {\n\n\t/**\n\t * Is object disposed?\n\t */\n\tprivate _disposed: boolean;\n\n\t/**\n\t * Method that disposes the object.\n\t */\n\tprivate _dispose: () => void;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param dispose  Function that disposes object\n\t */\n\tconstructor(dispose: () => void) {\n\t\tthis._disposed = false;\n\t\tthis._dispose = dispose;\n\t}\n\n\t/**\n\t * Checks if object is disposed.\n\t *\n\t * @return Disposed?\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Disposes the object.\n\t */\n\tpublic dispose(): void {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\t\t\tthis._dispose();\n\t\t}\n\t}\n\n}\n\n/**\n * A collection of related disposers that can be disposed in one go.\n *\n * @ignore Exclude from docs\n */\nexport class MultiDisposer extends Disposer {\n\tconstructor(disposers: Array<IDisposer>) {\n\t\tsuper(() => {\n\t\t\t$array.each(disposers, (x) => {\n\t\t\t\tx.dispose();\n\t\t\t});\n\t\t});\n\t}\n}\n\n/**\n * A special kind of Disposer that has attached value set.\n *\n * If a new value is set using `set()` method, the old disposer value is\n * disposed.\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport class MutableValueDisposer<T extends IDisposer> extends Disposer {\n\n\t/**\n\t * Current disposer.\n\t */\n\tprivate _disposer: Optional<IDisposer>;\n\n\t/**\n\t * Current value.\n\t */\n\tprivate _value: Optional<T>;\n\n\t/**\n\t * Constructor.\n\t */\n\tconstructor() {\n\t\tsuper(() => {\n\t\t\tif (this._disposer != null) {\n\t\t\t\tthis._disposer.dispose();\n\t\t\t\tthis._disposer = undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Returns current value.\n\t *\n\t * @return Value\n\t */\n\tpublic get(): Optional<T> {\n\t\treturn this._value;\n\t}\n\n\t/**\n\t * Sets value and disposes previous disposer if it was set.\n\t *\n\t * @param value     New value\n\t * @param disposer  Disposer\n\t */\n\tpublic set(value: Optional<T>, disposer: Optional<IDisposer>): void {\n\t\tif (this._disposer != null) {\n\t\t\tthis._disposer.dispose();\n\t\t}\n\n\t\tthis._disposer = disposer;\n\t\tthis._value = value;\n\t}\n\n\t/**\n\t * Resets the disposer value.\n\t */\n\tpublic reset(): void {\n\t\tthis.set(undefined, undefined);\n\t}\n\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport class CounterDisposer extends Disposer {\n\n\t/**\n\t * [_counter description]\n\t *\n\t * @todo Description\n\t */\n\tprivate _counter: number = 0;\n\n\t/**\n\t * [increment description]\n\t *\n\t * @todo Description\n\t */\n\tpublic increment() {\n\t\t// TODO throw an error if it is disposed\n\t\t++this._counter;\n\n\t\t// TODO make this more efficient\n\t\treturn new Disposer(() => {\n\t\t\t--this._counter;\n\n\t\t\tif (this._counter === 0) {\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t});\n\t}\n\n}\n"]}