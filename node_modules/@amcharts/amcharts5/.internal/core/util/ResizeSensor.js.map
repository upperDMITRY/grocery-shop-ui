{"version":3,"file":"ResizeSensor.js","sourceRoot":"","sources":["../../../../../src/.internal/core/util/ResizeSensor.ts"],"names":[],"mappings":"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","sourcesContent":["/** @ignore *//** */\n\nimport type { IDisposer } from \"./Disposer\";\nimport * as $array from \"./Array\";\n\n/**\n * @ignore\n */\ninterface Sensor {\n\taddTarget(target: Element, callback: () => void): void;\n\tremoveTarget(target: Element): void;\n}\n\n/**\n * @ignore\n */\ndeclare const ResizeObserver: any;\n\n/**\n * @ignore\n */\nclass Native implements Sensor {\n\tprivate _observer: any;\n\tprivate _targets: Array<{ target: Element, callback: () => void }> = [];\n\n\tconstructor() {\n\t\tthis._observer = new ResizeObserver((entries: Array<any>) => {\n\t\t\t$array.each(entries, (entry) => {\n\t\t\t\t$array.each(this._targets, (x) => {\n\t\t\t\t\tif (x.target === entry.target) {\n\t\t\t\t\t\tx.callback();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\taddTarget(target: Element, callback: () => void) {\n\t\tthis._observer.observe(target, { box: \"content-box\" });\n\t\tthis._targets.push({ target, callback });\n\t}\n\n\tremoveTarget(target: Element) {\n\t\tthis._observer.unobserve(target);\n\n\t\t$array.keepIf(this._targets, (x) => {\n\t\t\treturn x.target !== target;\n\t\t});\n\t}\n}\n\n/**\n * @ignore\n */\nclass Raf implements Sensor {\n\tpublic static delay: number = 200;\n\n\tprivate _timer: number | null = null;\n\tprivate _targets: Array<{ target: Element, callback: () => void, size: ClientRect | DOMRect }> = [];\n\n\taddTarget(target: Element, callback: () => void) {\n\t\tif (this._timer === null) {\n\t\t\tlet lastTime: number | null = null;\n\n\t\t\tconst loop = () => {\n\t\t\t\tconst currentTime = Date.now();\n\n\t\t\t\tif (lastTime === null || currentTime > (lastTime + Raf.delay)) {\n\t\t\t\t\tlastTime = currentTime;\n\n\t\t\t\t\t$array.each(this._targets, (x) => {\n\t\t\t\t\t\tlet newSize = x.target.getBoundingClientRect();\n\n\t\t\t\t\t\tif (newSize.width !== x.size.width || newSize.height !== x.size.height) {\n\t\t\t\t\t\t\tx.size = newSize;\n\t\t\t\t\t\t\tx.callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (this._targets.length === 0) {\n\t\t\t\t\tthis._timer = null;\n\n\t\t\t\t} else {\n\t\t\t\t\tthis._timer = requestAnimationFrame(loop);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis._timer = requestAnimationFrame(loop);\n\t\t}\n\n\t\t// We start off with fake bounds so that sensor always kicks in\n\t\t//let size = target.getBoundingClientRect();\n\t\tlet size = { width: 0, height: 0, left: 0, right: 0, top: 0, bottom: 0 };\n\t\tthis._targets.push({ target, callback, size });\n\t}\n\n\tremoveTarget(target: Element) {\n\t\t$array.keepIf(this._targets, (x) => {\n\t\t\treturn x.target !== target;\n\t\t});\n\n\t\tif (this._targets.length === 0) {\n\t\t\tif (this._timer !== null) {\n\t\t\t\tcancelAnimationFrame(this._timer);\n\t\t\t\tthis._timer = null;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * @ignore\n */\nlet observer: Sensor | null = null;\n\n/**\n * @ignore\n */\nfunction makeSensor(): Sensor {\n\tif (observer === null) {\n\t\tif (typeof ResizeObserver !== \"undefined\") {\n\t\t\tobserver = new Native();\n\n\t\t} else {\n\t\t\tobserver = new Raf();\n\t\t}\n\t}\n\n\treturn observer;\n}\n\n/**\n * @ignore\n */\nexport class ResizeSensor implements IDisposer {\n\tprivate _sensor: Sensor;\n\tprivate _element: Element;\n\tprivate _disposed: boolean = false;\n\n\tconstructor(element: Element, callback: () => void) {\n\t\tthis._sensor = makeSensor();\n\t\tthis._element = element;\n\t\tthis._sensor.addTarget(element, callback);\n\t}\n\n\tpublic isDisposed() {\n\t\treturn this._disposed;\n\t}\n\n\tpublic dispose() {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\t\t\tthis._sensor.removeTarget(this._element);\n\t\t}\n\t}\n\n\tpublic get sensor(): Sensor {\n\t\treturn this._sensor;\n\t}\n}\n"]}