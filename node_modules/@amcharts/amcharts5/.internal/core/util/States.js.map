{"version":3,"file":"States.js","sourceRoot":"","sources":["../../../../../src/.internal/core/util/States.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Entity, Dirty } from \"./Entity\";\nimport type { Animations } from \"./Animation\";\nimport * as $object from \"./Object\";\nimport * as $ease from \"./Ease\";\n\n/**\n * An object representing a collection of setting values to apply as required.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info\n */\nexport class State<E extends Entity> {\n\tprivate _entity: E;\n\tpublic _settings: Partial<E[\"_settings\"]>;\n\tpublic _userSettings: Dirty<E[\"_settings\"]> = {};\n\n\tconstructor(entity: E, settings: Partial<E[\"_settings\"]>) {\n\t\tthis._entity = entity;\n\t\tthis._settings = settings;\n\t}\n\n\t/**\n\t * Returns settings value for the specified `key`.\n\t *\n\t * If there is no value, `fallback` is returned instead (if set).\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Settings value\n\t * @param   callback  Fallback value\n\t * @return            Value\n\t */\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key): this[\"_settings\"][Key];\n\tpublic get<Key extends keyof this[\"_settings\"], F>(key: Key, fallback: F): NonNullable<this[\"_settings\"][Key]> | F;\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key, fallback?: any): any {\n\t\tconst value = this._settings[key];\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic setRaw<Key extends keyof E[\"_settings\"]>(key: Key, value: E[\"_settings\"][Key]) {\n\t\tthis._settings[key] = value;\n\t}\n\n\t/**\n\t * Sets a setting `value` for the specified `key` to be set when the state\n\t * is applied.\n\t *\n\t * @param   key       Setting key\n\t * @param   value     Setting value\n\t * @return            Setting value\n\t */\n\tpublic set<Key extends keyof E[\"_settings\"]>(key: Key, value: E[\"_settings\"][Key]) {\n\t\tthis._userSettings[key] = true;\n\t\tthis.setRaw(key, value);\n\t}\n\n\t/**\n\t * Removes a setting value for the specified `key`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Setting key\n\t */\n\tpublic remove<Key extends keyof this[\"_settings\"]>(key: Key) {\n\t\tdelete this._userSettings[key];\n\t\tdelete this._settings[key];\n\t}\n\n\t/**\n\t * Sets multiple settings at once.\n\t *\n\t * `settings` must be an object with key: value pairs.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param settings Settings\n\t */\n\tpublic setAll(settings: this[\"_settings\"]) {\n\t\t$object.keys(settings).forEach((key) => {\n\t\t\tthis.set(key, settings[key]);\n\t\t});\n\t}\n\n\tprivate _eachSetting<Key extends keyof E[\"_settings\"], Value extends E[\"_settings\"][Key]>(f: (key: Key, value: Value) => void): void {\n\t\t$object.each(this._settings, f as any);\n\t}\n\n\t/**\n\t * Applies the state to the target element.\n\t *\n\t * All setting values are set immediately.\n\t */\n\tpublic apply() {\n\t\tconst seen: Dirty<E[\"_settings\"]> = {};\n\n\t\tseen[\"stateAnimationEasing\"] = true;\n\t\tseen[\"stateAnimationDuration\"] = true;\n\n\t\tconst defaultState = this._entity.states.lookup(\"default\")!;\n\n\t\tthis._eachSetting((key, value) => {\n\t\t\tif (!seen[key]) {\n\t\t\t\tseen[key] = true;\n\n\t\t\t\t// save values to default state\n\t\t\t\tif (this !== defaultState) {\n\t\t\t\t\tif (!(key in defaultState._settings)) {\n\t\t\t\t\t\tdefaultState._settings[key] = this._entity.get(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._entity.set(key, value);\n\t\t\t}\n\t\t});\n\t}\n\n\n\n\t/**\n\t * Applies the state to the target element.\n\t *\n\t * Returns an object representing all [[Animation]] objects created for\n\t * each setting key transition.\n\t *\n\t * @return           Animations\n\t */\n\tpublic applyAnimate(duration?: number): Animations<E[\"_settings\"]> {\n\n\t\tif (duration == null) {\n\t\t\tduration = this._settings.stateAnimationDuration;\n\t\t}\n\t\tif (duration == null) {\n\t\t\tduration = this.get(\"stateAnimationDuration\", this._entity.get(\"stateAnimationDuration\", 0));\n\t\t}\n\n\t\tlet easing = this._settings.stateAnimationEasing;\n\t\tif (easing == null) {\n\t\t\teasing = this.get(\"stateAnimationEasing\", this._entity.get(\"stateAnimationEasing\", $ease.cubic));\n\t\t}\n\n\t\tconst defaultState = this._entity.states.lookup(\"default\")!;\n\n\t\tconst seen: Dirty<E[\"_settings\"]> = {};\n\n\t\tseen[\"stateAnimationEasing\"] = true;\n\t\tseen[\"stateAnimationDuration\"] = true;\n\n\t\tconst animations: Animations<E[\"_settings\"]> = {};\n\n\t\tthis._eachSetting((key, value) => {\n\t\t\tif (!seen[key]) {\n\t\t\t\tseen[key] = true;\n\n\t\t\t\t// save values to default state\n\t\t\t\tif (this != defaultState) {\n\t\t\t\t\tif (!(key in defaultState._settings)) {\n\t\t\t\t\t\tdefaultState._settings[key] = this._entity.get(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst animation = this._entity.animate({\n\t\t\t\t\tkey: key,\n\t\t\t\t\tto: value,\n\t\t\t\t\tduration: duration!,\n\t\t\t\t\teasing: easing\n\t\t\t\t});\n\n\t\t\t\tif (animation) {\n\t\t\t\t\tanimations[key] = animation;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn animations;\n\t}\n}\n\n/**\n * Collection of [[State]] objects for an element.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info\n */\nexport class States<E extends Entity> {\n\tprivate _states: { [key: string]: State<E> } = {};\n\tprivate _entity: E;\n\n\tconstructor(entity: E) {\n\t\tthis._entity = entity;\n\t}\n\n\t/**\n\t * Checks if a state by `name` exists. Returns it there is one.\n\t *\n\t * @param  name  State name\n\t * @return       State\n\t */\n\tpublic lookup(name: string): State<E> | undefined {\n\t\treturn this._states[name];\n\t}\n\n\t/**\n\t * Sets supplied `settings` on a state by the `name`.\n\t *\n\t * If such state does not yet exists, it is created.\n\t *\n\t * @param   name      State name\n\t * @param   settings  Settings\n\t * @return            New State\n\t */\n\tpublic create(name: string, settings: Partial<E[\"_settings\"]>): State<E> {\n\t\tconst state = this._states[name];\n\n\t\tif (state) {\n\t\t\tstate.setAll(settings);\n\t\t\treturn state;\n\n\t\t} else {\n\t\t\tconst state = new State(this._entity, settings);\n\t\t\tthis._states[name] = state;\n\t\t\treturn state;\n\t\t}\n\t}\n\n\t/**\n\t * Removes the state called `name`.\n\t *\n\t * @param   name      State name\n\t */\n\tpublic remove(name: string): void {\n\t\tdelete this._states[name];\n\t}\n\n\t/**\n\t * Applies a named state to the target element.\n\t *\n\t * @param  newState  State name\n\t */\n\tpublic apply(newState: string) {\n\t\tconst state = this._states[newState];\n\n\t\tif (state) {\n\t\t\tstate.apply();\n\t\t}\n\n\t\tthis._entity._applyState(newState);\n\t}\n\n\t/**\n\t * Applies a named state to the element.\n\t *\n\t * Returns an object representing all [[Animation]] objects created for\n\t * each setting key transition.\n\t *\n\t * @param   newState  State name\n\t * @return            Animations\n\t */\n\tpublic applyAnimate(newState: string, duration?: number): Animations<E[\"_settings\"]> | undefined {\n\t\tlet animations;\n\t\tconst state = this._states[newState];\n\n\t\tif (state) {\n\t\t\tanimations = state.applyAnimate(duration);\n\t\t}\n\n\t\tthis._entity._applyStateAnimated(newState, duration);\n\t\treturn animations;\n\t}\n}\n"]}