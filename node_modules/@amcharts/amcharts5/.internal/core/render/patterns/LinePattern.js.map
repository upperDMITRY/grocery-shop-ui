{"version":3,"file":"LinePattern.js","sourceRoot":"","sources":["../../../../../../src/.internal/core/render/patterns/LinePattern.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,OAAO,EAAqC,MAAM,WAAW,CAAC;AACvE,OAAO,KAAK,KAAK,MAAM,kBAAkB,CAAC;AAgB1C;;;;GAIG;AACH;IAAiC,+BAAO;IAAxC;;IA2DA,CAAC;;;;;eAnDA;YACC,iBAAM,cAAc,WAAE,CAAC;YAEvB,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACxB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;aACnB;QACF,CAAC;;;;;;eAED;YACC,iBAAM,KAAK,WAAE,CAAC;YAEd,IAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YACjC,IAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YAClC,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC/B,IAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YAE/C,IAAI,CAAC,GAAG,EAAE;gBACT,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aAC3B;iBACI;gBACJ,IAAI,IAAI,GAAG,GAAG,GAAG,WAAW,CAAC;gBAC7B,IAAI,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC;gBAErB,KAAK,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACxC,IAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;oBAChD,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC5B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC/B;aACD;YAED,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;YAElF,IAAI,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;YAClD,IAAI,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE;gBACpC,IAAI,eAAe,GAAG,GAAG,EAAE;oBAC1B,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC;iBACtB;qBACI;oBACJ,eAAe,GAAG,CAAC,eAAe,CAAC,CAAA;iBACnC;aACD;YACD,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,eAA2B,CAAC,CAAC;YAEvD,IAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;YACtD,IAAI,gBAAgB,EAAE;gBACrB,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;aAClD;YAED,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;QAC3B,CAAC;;IArDD;;;;eAAkC,aAAa;OAAC;IAChD;;;;eAA0C,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;OAAC;IAqD9F,kBAAC;CAAA,AA3DD,CAAiC,OAAO,GA2DvC;SA3DY,WAAW","sourcesContent":["import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\nimport * as $type from \"../../util//Type\";\n\nexport interface ILinePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between  lines, in pixels.\n\t *\n\t * @default 6\n\t */\n\tgap?: number;\n\n}\n\nexport interface ILinePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Line pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class LinePattern extends Pattern {\n\n\tdeclare public _settings: ILinePatternSettings;\n\tdeclare public _privateSettings: ILinePatternPrivate;\n\n\tpublic static className: string = \"LinePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([LinePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst w = this.get(\"width\", 100);\n\t\tconst h = this.get(\"height\", 100);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst strokeWidth = this.get(\"strokeWidth\", 1);\n\n\t\tif (!gap) {\n\t\t\tthis._display.moveTo(0, 0);\n\t\t\tthis._display.lineTo(w, 0);\n\t\t}\n\t\telse {\n\t\t\tlet step = gap + strokeWidth;\n\t\t\tlet count = h / step;\n\n\t\t\tfor (let i = -count; i < count * 2; i++) {\n\t\t\t\tconst y = Math.round(i * step - step / 2) + 0.5;\n\t\t\t\tthis._display.moveTo(-w, y);\n\t\t\t\tthis._display.lineTo(w * 2, y);\n\t\t\t}\n\t\t}\n\n\t\tthis._display.lineStyle(strokeWidth, this.get(\"color\"), this.get(\"colorOpacity\"));\n\n\t\tlet strokeDasharray = this.get(\"strokeDasharray\");\n\t\tif ($type.isNumber(strokeDasharray)) {\n\t\t\tif (strokeDasharray < 0.5) {\n\t\t\t\tstrokeDasharray = [0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrokeDasharray = [strokeDasharray]\n\t\t\t}\n\t\t}\n\t\tthis._display.setLineDash(strokeDasharray as number[]);\n\n\t\tconst strokeDashoffset = this.get(\"strokeDashoffset\");\n\t\tif (strokeDashoffset) {\n\t\t\tthis._display.setLineDashOffset(strokeDashoffset);\n\t\t}\n\n\t\tthis._display.endStroke();\n\t}\n}\n"]}