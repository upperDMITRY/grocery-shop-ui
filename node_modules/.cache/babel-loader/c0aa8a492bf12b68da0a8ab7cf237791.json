{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\n/**\r\n * Draws a triangle.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\n\nvar Triangle =\n/** @class */\nfunction (_super) {\n  __extends(Triangle, _super);\n\n  function Triangle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(Triangle.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"width\") || this.isDirty(\"height\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Triangle.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear && !this.get(\"draw\")) {\n        this._draw();\n      }\n    }\n  });\n  Object.defineProperty(Triangle.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var w = this.width();\n      var h = this.height();\n      var display = this._display;\n      display.moveTo(-w / 2, h / 2);\n      display.lineTo(0, -h / 2);\n      display.lineTo(w / 2, h / 2);\n      display.lineTo(-w / 2, h / 2);\n    }\n  });\n  Object.defineProperty(Triangle.prototype, \"_updateSize\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.markDirty();\n      this._clear = true;\n    }\n  });\n  Object.defineProperty(Triangle, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Triangle\"\n  });\n  Object.defineProperty(Triangle, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([Triangle.className])\n  });\n  return Triangle;\n}(Graphics);\n\nexport { Triangle };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/Triangle.ts"],"names":[],"mappings":";AAAA,SAAS,QAAT,QAA8D,YAA9D;AAQA;;;;;AAKG;;AACH,IAAA,QAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8B,EAAA,SAAA,CAAA,QAAA,EAAA,MAAA,CAAA;;AAA9B,WAAA,QAAA,GAAA;;AAuCC;;;;;;WA/BA,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB;;AAEA,UAAI,KAAK,OAAL,CAAa,OAAb,KAAyB,KAAK,OAAL,CAAa,QAAb,CAAzB,IAAmD,KAAK,cAAL,CAAoB,OAApB,CAAnD,IAAmF,KAAK,cAAL,CAAoB,QAApB,CAAvF,EAAsH;AACrH,aAAK,MAAL,GAAc,IAAd;AACA;AACD;;;;;;WAED,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd;;AAEA,UAAI,KAAK,MAAL,IAAe,CAAC,KAAK,GAAL,CAAS,MAAT,CAApB,EAAsC;AACrC,aAAK,KAAL;AACA;AACD;;;;;;WAED,YAAA;AACC,UAAM,CAAC,GAAG,KAAK,KAAL,EAAV;AACA,UAAM,CAAC,GAAG,KAAK,MAAL,EAAV;AACA,UAAM,OAAO,GAAG,KAAK,QAArB;AACA,MAAA,OAAO,CAAC,MAAR,CAAe,CAAC,CAAD,GAAK,CAApB,EAAuB,CAAC,GAAG,CAA3B;AACA,MAAA,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,CAAC,CAAD,GAAK,CAAvB;AACA,MAAA,OAAO,CAAC,MAAR,CAAe,CAAC,GAAG,CAAnB,EAAsB,CAAC,GAAG,CAA1B;AACA,MAAA,OAAO,CAAC,MAAR,CAAe,CAAC,CAAD,GAAK,CAApB,EAAuB,CAAC,GAAG,CAA3B;AAEA;;;;;;WAED,YAAA;AACC,WAAK,SAAL;AACA,WAAK,MAAL,GAAc,IAAd;AACA;;AAjCD,EAAA,MAAA,CAAA,cAAA,CAAA,QAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,QAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,QAAQ,CAAC,UAAT,CAAoB,MAApB,CAA2B,CAAC,QAAQ,CAAC,SAAV,CAA3B;AAA1C,GAAA;AAiCD,SAAA,QAAA;AAAC,CAvCD,CAA8B,QAA9B,CAAA;;SAAa,Q","sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\r\n\r\nexport interface ITriangleSettings extends IGraphicsSettings {\r\n}\r\n\r\nexport interface ITrianglePrivate extends IGraphicsPrivate {\r\n}\r\n\r\n/**\r\n * Draws a triangle.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\r\nexport class Triangle extends Graphics {\r\n\r\n\tdeclare public _settings: ITriangleSettings;\r\n\tdeclare public _privateSettings: ITrianglePrivate;\r\n\r\n\tpublic static className: string = \"Triangle\";\r\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Triangle.className]);\r\n\r\n\tpublic _beforeChanged() {\r\n\t\tsuper._beforeChanged();\r\n\r\n\t\tif (this.isDirty(\"width\") || this.isDirty(\"height\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\r\n\t\t\tthis._clear = true;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _changed() {\r\n\t\tsuper._changed();\r\n\r\n\t\tif (this._clear && !this.get(\"draw\")) {\r\n\t\t\tthis._draw();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _draw() {\r\n\t\tconst w = this.width();\r\n\t\tconst h = this.height();\r\n\t\tconst display = this._display;\r\n\t\tdisplay.moveTo(-w / 2, h / 2);\r\n\t\tdisplay.lineTo(0, -h / 2);\r\n\t\tdisplay.lineTo(w / 2, h / 2);\r\n\t\tdisplay.lineTo(-w / 2, h / 2);\r\n\r\n\t}\r\n\r\n\tpublic _updateSize() {\r\n\t\tthis.markDirty()\r\n\t\tthis._clear = true;\r\n\t}\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}