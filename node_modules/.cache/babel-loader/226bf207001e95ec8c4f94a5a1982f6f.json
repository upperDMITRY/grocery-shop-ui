{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Entity } from \"./Entity\";\nimport { TextFormatter } from \"./TextFormatter\";\nimport * as $object from \"./Object\";\nimport * as $utils from \"./Utils\";\nimport * as $type from \"./Type\";\n/**\r\n * Number formatter\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-numbers/} for more info\r\n * @important\r\n */\nvar NumberFormatter = /** @class */function (_super) {\n  __extends(NumberFormatter, _super);\n  function NumberFormatter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(NumberFormatter.prototype, \"_setDefaults\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      // Defaults\n      this._setDefault(\"negativeBase\", 0);\n      this._setDefault(\"numberFormat\", \"#,###.#####\");\n      this._setDefault(\"smallNumberThreshold\", 1.00);\n      var bns = \"_big_number_suffix_\";\n      var sns = \"_small_number_suffix_\";\n      var bs = \"_byte_suffix_\";\n      this._setDefault(\"bigNumberPrefixes\", [{\n        \"number\": 1e+3,\n        \"suffix\": this._t(bns + \"3\")\n      }, {\n        \"number\": 1e+6,\n        \"suffix\": this._t(bns + \"6\")\n      }, {\n        \"number\": 1e+9,\n        \"suffix\": this._t(bns + \"9\")\n      }, {\n        \"number\": 1e+12,\n        \"suffix\": this._t(bns + \"12\")\n      }, {\n        \"number\": 1e+15,\n        \"suffix\": this._t(bns + \"15\")\n      }, {\n        \"number\": 1e+18,\n        \"suffix\": this._t(bns + \"18\")\n      }, {\n        \"number\": 1e+21,\n        \"suffix\": this._t(bns + \"21\")\n      }, {\n        \"number\": 1e+24,\n        \"suffix\": this._t(bns + \"24\")\n      }]);\n      this._setDefault(\"smallNumberPrefixes\", [{\n        \"number\": 1e-24,\n        \"suffix\": this._t(sns + \"24\")\n      }, {\n        \"number\": 1e-21,\n        \"suffix\": this._t(sns + \"21\")\n      }, {\n        \"number\": 1e-18,\n        \"suffix\": this._t(sns + \"18\")\n      }, {\n        \"number\": 1e-15,\n        \"suffix\": this._t(sns + \"15\")\n      }, {\n        \"number\": 1e-12,\n        \"suffix\": this._t(sns + \"12\")\n      }, {\n        \"number\": 1e-9,\n        \"suffix\": this._t(sns + \"9\")\n      }, {\n        \"number\": 1e-6,\n        \"suffix\": this._t(sns + \"6\")\n      }, {\n        \"number\": 1e-3,\n        \"suffix\": this._t(sns + \"3\")\n      }]);\n      this._setDefault(\"bytePrefixes\", [{\n        \"number\": 1,\n        suffix: this._t(bs + \"B\")\n      }, {\n        \"number\": 1024,\n        suffix: this._t(bs + \"KB\")\n      }, {\n        \"number\": 1048576,\n        suffix: this._t(bs + \"MB\")\n      }, {\n        \"number\": 1073741824,\n        suffix: this._t(bs + \"GB\")\n      }, {\n        \"number\": 1099511627776,\n        suffix: this._t(bs + \"TB\")\n      }, {\n        \"number\": 1125899906842624,\n        suffix: this._t(bs + \"PB\")\n      }]);\n      _super.prototype._setDefaults.call(this);\n    }\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n    }\n  });\n  /**\r\n   * Formats the number according to specific format.\r\n   *\r\n   * @param value   Value to format\r\n   * @param format  Format to apply\r\n   * @return Formatted number\r\n   */\n  Object.defineProperty(NumberFormatter.prototype, \"format\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, format, precision) {\n      // no format passed in or \"Number\"\n      if (format == null || $type.isString(format) && format.toLowerCase() === \"number\") {\n        format = this.get(\"numberFormat\", \"\");\n      }\n      // Init return value\n      var formatted;\n      // Cast to number just in case\n      // TODO: maybe use better casting\n      var source = Number(value);\n      // Is it a built-in format or Intl.NumberFormatOptions\n      if ($type.isObject(format)) {\n        try {\n          if (this.get(\"intlLocales\")) {\n            return new Intl.NumberFormat(this.get(\"intlLocales\"), format).format(source);\n          } else {\n            return new Intl.NumberFormat(undefined, format).format(source);\n          }\n        } catch (e) {\n          return \"Invalid\";\n        }\n      } else {\n        // Clean format\n        format = $utils.cleanFormat(format);\n        // Get format info (it will also deal with parser caching)\n        var info = this.parseFormat(format, this._root.language);\n        // format and replace the number\n        var details = void 0;\n        if (source > this.get(\"negativeBase\")) {\n          details = info.positive;\n        } else if (source < this.get(\"negativeBase\")) {\n          details = info.negative;\n        } else {\n          details = info.zero;\n        }\n        // Adjust precision\n        if (precision != null && !details.mod) {\n          details = $object.copy(details);\n          details.decimals.active = source == 0 ? 0 : precision;\n        }\n        // Format\n        formatted = details.template.split($type.PLACEHOLDER).join(this.applyFormat(source, details));\n      }\n      return formatted;\n    }\n  });\n  /**\r\n   * Parses supplied format into structured object which can be used to format\r\n   * the number.\r\n   *\r\n   * @param format Format string, i.e. \"#,###.00\"\r\n   * @param language Language\r\n   * @ignore\r\n   */\n  Object.defineProperty(NumberFormatter.prototype, \"parseFormat\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (format, language) {\n      // Check cache\n      // TODO\n      // let cached = this.getCache(format);\n      // if (cached != null) {\n      // \treturn cached;\n      // }\n      var _this = this;\n      var thousandSeparator = language.translateEmpty(\"_thousandSeparator\");\n      var decimalSeparator = language.translateEmpty(\"_decimalSeparator\");\n      // init format parse info holder\n      var info = {\n        \"positive\": {\n          \"thousands\": {\n            \"active\": -1,\n            \"passive\": -1,\n            \"interval\": -1,\n            \"separator\": thousandSeparator\n          },\n          \"decimals\": {\n            \"active\": -1,\n            \"passive\": -1,\n            \"separator\": decimalSeparator\n          },\n          \"template\": \"\",\n          \"source\": \"\",\n          \"parsed\": false\n        },\n        \"negative\": {\n          \"thousands\": {\n            \"active\": -1,\n            \"passive\": -1,\n            \"interval\": -1,\n            \"separator\": thousandSeparator\n          },\n          \"decimals\": {\n            \"active\": -1,\n            \"passive\": -1,\n            \"separator\": decimalSeparator\n          },\n          \"template\": \"\",\n          \"source\": \"\",\n          \"parsed\": false\n        },\n        \"zero\": {\n          \"thousands\": {\n            \"active\": -1,\n            \"passive\": -1,\n            \"interval\": -1,\n            \"separator\": thousandSeparator\n          },\n          \"decimals\": {\n            \"active\": -1,\n            \"passive\": -1,\n            \"separator\": decimalSeparator\n          },\n          \"template\": \"\",\n          \"source\": \"\",\n          \"parsed\": false\n        }\n      };\n      // Escape double vertical bars (that mean display one vertical bar)\n      format = format.replace(\"||\", $type.PLACEHOLDER2);\n      // Split it up and deal with different formats\n      var parts = format.split(\"|\");\n      info.positive.source = parts[0];\n      if (typeof parts[2] === \"undefined\") {\n        info.zero = info.positive;\n      } else {\n        info.zero.source = parts[2];\n      }\n      if (typeof parts[1] === \"undefined\") {\n        info.negative = info.positive;\n      } else {\n        info.negative.source = parts[1];\n      }\n      // Parse each\n      $object.each(info, function (_part, item) {\n        // Already parsed\n        if (item.parsed) {\n          return;\n        }\n        // Check cached\n        // TODO\n        // if (typeof this.getCache(item.source) !== \"undefined\") {\n        // \tinfo[part] = this.getCache(item.source);\n        // \treturn;\n        // }\n        // Begin parsing\n        var partFormat = item.source;\n        // Just \"Number\"?\n        if (partFormat.toLowerCase() === \"number\") {\n          partFormat = _this.get(\"numberFormat\", \"#,###.#####\");\n        }\n        // Let TextFormatter split into chunks\n        var chunks = TextFormatter.chunk(partFormat, true);\n        for (var i = 0; i < chunks.length; i++) {\n          var chunk = chunks[i];\n          // replace back double vertical bar\n          chunk.text = chunk.text.replace($type.PLACEHOLDER2, \"|\");\n          if (chunk.type === \"value\") {\n            // Parse format\n            // Look for codes\n            var matches = chunk.text.match(/[#0.,]+[ ]?[abesABES%!]?[abesABES‰!]?/);\n            if (matches) {\n              if (matches === null || matches[0] === \"\") {\n                // no codes here - assume string\n                // nothing to do here\n                item.template += chunk.text;\n              } else {\n                // look for the format modifiers at the end\n                var mods = matches[0].match(/[abesABES%‰!]{2}|[abesABES%‰]{1}$/);\n                if (mods) {\n                  item.mod = mods[0].toLowerCase();\n                  item.modSpacing = matches[0].match(/[ ]{1}[abesABES%‰!]{1}$/) ? true : false;\n                }\n                // break the format up\n                var a = matches[0].split(\".\");\n                // Deal with thousands\n                if (a[0] === \"\") {\n                  // No directives for thousands\n                  // Leave default settings (no formatting)\n                } else {\n                  // Counts\n                  item.thousands.active = (a[0].match(/0/g) || []).length;\n                  item.thousands.passive = (a[0].match(/\\#/g) || []).length + item.thousands.active;\n                  // Separator interval\n                  var b = a[0].split(\",\");\n                  if (b.length === 1) {\n                    // No thousands separators\n                    // Do nothing\n                  } else {\n                    // Use length fo the last chunk as thousands length\n                    item.thousands.interval = (b.pop() || \"\").length;\n                    if (item.thousands.interval === 0) {\n                      item.thousands.interval = -1;\n                    }\n                  }\n                }\n                // Deal with decimals\n                if (typeof a[1] === \"undefined\") {\n                  // No directives for decimals\n                  // Leave at defaults (no formatting)\n                } else {\n                  // Counts\n                  item.decimals.active = (a[1].match(/0/g) || []).length;\n                  item.decimals.passive = (a[1].match(/\\#/g) || []).length + item.decimals.active;\n                }\n                // Add special code to template\n                item.template += chunk.text.split(matches[0]).join($type.PLACEHOLDER);\n              }\n            }\n          } else {\n            // Quoted string - take it as it is\n            item.template += chunk.text;\n          }\n        }\n        // Apply style formatting\n        //item.template = getTextFormatter().format(item.template, this.outputFormat);\n        // Save cache\n        // TODO\n        //this.setCache(item.source, item);\n        // Mark this as parsed\n        item.parsed = true;\n      });\n      // Save cache (the whole thing)\n      // TODO\n      //this.setCache(format, info);\n      return info;\n    }\n  });\n  /**\r\n   * Applies parsed format to a numeric value.\r\n   *\r\n   * @param value    Value\r\n   * @param details  Parsed format as returned by parseFormat()\r\n   * @return Formatted number\r\n   * @ignore\r\n   */\n  Object.defineProperty(NumberFormatter.prototype, \"applyFormat\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, details) {\n      // Use absolute values\n      var negative = value < 0;\n      value = Math.abs(value);\n      // Recalculate according to modifier\n      var prefix = \"\",\n        suffix = \"\";\n      var mods = details.mod ? details.mod.split(\"\") : [];\n      if (mods.indexOf(\"b\") !== -1) {\n        var a_1 = this.applyPrefix(value, this.get(\"bytePrefixes\"), mods.indexOf(\"!\") !== -1);\n        value = a_1[0];\n        prefix = a_1[1];\n        suffix = a_1[2];\n        if (details.modSpacing) {\n          suffix = \" \" + suffix;\n        }\n      } else if (mods.indexOf(\"a\") !== -1) {\n        var a_2 = this.applyPrefix(value, value < this.get(\"smallNumberThreshold\") ? this.get(\"smallNumberPrefixes\") : this.get(\"bigNumberPrefixes\"), mods.indexOf(\"!\") !== -1);\n        value = a_2[0];\n        prefix = a_2[1];\n        suffix = a_2[2];\n        if (details.modSpacing) {\n          suffix = \" \" + suffix;\n        }\n      } else if (mods.indexOf(\"%\") !== -1) {\n        var ol = Math.min(value.toString().length + 2, 21);\n        value *= 100;\n        value = parseFloat(value.toPrecision(ol));\n        suffix = \"%\";\n      } else if (mods.indexOf(\"‰\") !== -1) {\n        var ol = Math.min(value.toString().length + 3, 21);\n        value *= 1000;\n        value = parseFloat(value.toPrecision(ol));\n        suffix = \"‰\";\n      }\n      // Round to passive\n      if (mods.indexOf(\"e\") !== -1) {\n        // convert the value to exponential\n        var exp = void 0;\n        if (details.decimals.passive >= 0) {\n          exp = value.toExponential(details.decimals.passive).split(\"e\");\n        } else {\n          exp = value.toExponential().split(\"e\");\n        }\n        value = Number(exp[0]);\n        suffix = \"e\" + exp[1];\n        if (details.modSpacing) {\n          suffix = \" \" + suffix;\n        }\n      } else if (details.decimals.passive === 0) {\n        value = Math.round(value);\n      } else if (details.decimals.passive > 0) {\n        var d = Math.pow(10, details.decimals.passive);\n        value = Math.round(value * d) / d;\n      }\n      // Init return value\n      var res = \"\";\n      // Calc integer and decimal parts\n      var a = $type.numberToString(value).split(\".\");\n      // Format integers\n      var ints = a[0];\n      // Pad integers to active length\n      if (ints.length < details.thousands.active) {\n        ints = Array(details.thousands.active - ints.length + 1).join(\"0\") + ints;\n      }\n      // Insert thousands separators\n      if (details.thousands.interval > 0) {\n        var ip = [];\n        var intsr = ints.split(\"\").reverse().join(\"\");\n        for (var i = 0, len = ints.length; i <= len; i += details.thousands.interval) {\n          var c = intsr.substr(i, details.thousands.interval).split(\"\").reverse().join(\"\");\n          if (c !== \"\") {\n            ip.unshift(c);\n          }\n        }\n        ints = ip.join(details.thousands.separator);\n      }\n      // Add integers\n      res += ints;\n      // Add decimals\n      if (a.length === 1) {\n        a.push(\"\");\n      }\n      var decs = a[1];\n      // Fill zeros?\n      if (decs.length < details.decimals.active) {\n        decs += Array(details.decimals.active - decs.length + 1).join(\"0\");\n      }\n      if (decs !== \"\") {\n        res += details.decimals.separator + decs;\n      }\n      // Can't have empty return value\n      if (res === \"\") {\n        res = \"0\";\n      }\n      // Add minus sign back\n      if (value !== 0 && negative && mods.indexOf(\"s\") === -1) {\n        res = \"-\" + res;\n      }\n      // Add suffixes/prefixes\n      if (prefix) {\n        res = prefix + res;\n      }\n      if (suffix) {\n        res += suffix;\n      }\n      return res;\n    }\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"applyPrefix\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, prefixes, force) {\n      if (force === void 0) {\n        force = false;\n      }\n      var newvalue = value;\n      var prefix = \"\";\n      var suffix = \"\";\n      var applied = false;\n      var k = 1;\n      for (var i = 0, len = prefixes.length; i < len; i++) {\n        if (prefixes[i].number <= value) {\n          if (prefixes[i].number === 0) {\n            newvalue = 0;\n          } else {\n            newvalue = value / prefixes[i].number;\n            k = prefixes[i].number;\n          }\n          prefix = prefixes[i].prefix;\n          suffix = prefixes[i].suffix;\n          applied = true;\n        }\n      }\n      if (!applied && force && prefixes.length && value != 0) {\n        // Prefix was not applied. Use the first prefix.\n        newvalue = value / prefixes[0].number;\n        prefix = prefixes[0].prefix;\n        suffix = prefixes[0].suffix;\n        applied = true;\n      }\n      if (applied) {\n        newvalue = parseFloat(newvalue.toPrecision(Math.min(k.toString().length + Math.floor(newvalue).toString().replace(/[^0-9]*/g, \"\").length, 21)));\n      }\n      return [newvalue, prefix, suffix];\n    }\n  });\n  /**\r\n   * Replaces brackets with temporary placeholders.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Input text\r\n   * @return Escaped text\r\n   */\n  Object.defineProperty(NumberFormatter.prototype, \"escape\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (text) {\n      return text.replace(\"||\", $type.PLACEHOLDER2);\n    }\n  });\n  /**\r\n   * Replaces placeholders back to brackets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Escaped text\r\n   * @return Unescaped text\r\n   */\n  Object.defineProperty(NumberFormatter.prototype, \"unescape\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (text) {\n      return text.replace($type.PLACEHOLDER2, \"|\");\n    }\n  });\n  return NumberFormatter;\n}(Entity);\nexport { NumberFormatter };","map":{"version":3,"names":["Entity","TextFormatter","$object","$utils","$type","NumberFormatter","_super","__extends","value","_setDefault","bns","sns","bs","_t","suffix","prototype","_setDefaults","call","_beforeChanged","format","precision","isString","toLowerCase","get","formatted","source","Number","isObject","Intl","NumberFormat","undefined","e","cleanFormat","info","parseFormat","_root","language","details","positive","negative","zero","mod","copy","decimals","active","template","split","PLACEHOLDER","join","applyFormat","_this","thousandSeparator","translateEmpty","decimalSeparator","replace","PLACEHOLDER2","parts","each","_part","item","parsed","partFormat","chunks","chunk","i","length","text","type","matches","match","mods","modSpacing","a","thousands","passive","b","interval","pop","Math","abs","prefix","indexOf","a_1","applyPrefix","a_2","ol","min","toString","parseFloat","toPrecision","exp","toExponential","round","d","pow","res","numberToString","ints","Array","ip","intsr","reverse","len","c","substr","unshift","separator","push","decs","prefixes","force","newvalue","applied","k","number","floor"],"sources":["../../../../../src/.internal/core/util/NumberFormatter.ts"],"sourcesContent":["import type { Language } from \"./Language\";\n\nimport { Entity, IEntitySettings, IEntityPrivate } from \"./Entity\"\nimport { TextFormatter } from \"./TextFormatter\";\n\nimport * as $object from \"./Object\";\nimport * as $utils from \"./Utils\";\nimport * as $type from \"./Type\";\n\n/**\n * @ignore\n */\nexport interface INumberSuffix {\n\tnumber: number;\n\tsuffix: string;\n}\n\nexport interface INumberFormatterSettings extends IEntitySettings {\n\n\t/**\n\t * Number format to be used when formatting numbers.\n\t *\n\t * @default \"#,###.#####\"\n\t */\n\tnumberFormat?: string | Intl.NumberFormatOptions;\n\n\t/**\n\t * A threshold value for negative numbers.\n\t *\n\t * @default 0\n\t */\n\tnegativeBase?: number;\n\n\t/**\n\t * Prefixes and thresholds to group big numbers into, e.g. 1M.\n\t *\n\t * Used in conjunction with `a` modifier of the number format.\n\t */\n\tbigNumberPrefixes?: INumberSuffix[];\n\n\t/**\n\t * Prefixes and thresholds to group small numbers into, e.g. 1m.\n\t *\n\t * Used in conjunction with `a` modifier of the number format.\n\t */\n\tsmallNumberPrefixes?: INumberSuffix[];\n\n\t/**\n\t * All numbers below this value are considered small.\n\t *\n\t * @default 1\n\t */\n\tsmallNumberThreshold?: number;\n\n\t/**\n\t * Prefixes to and thresholds to use when grouping data size numbers, e.g. 1MB.\n\t *\n\t * Used in conjunction with `b` modifier of the number format.\n\t */\n\tbytePrefixes?: INumberSuffix[];\n\n\t/**\n\t * Indicates which fields in data should be considered numeric.\n\t *\n\t * It is used when formatting data placeholder values.\n\t */\n\tnumericFields?: string[];\n\n\t/**\n\t * Locales if you are using date formats in `Intl.NumberFormatOptions` syntax.\n\t *\n\t * @see (@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) about using Intl for number formatting\n\t * @param value Locales\n\t */\n\tintlLocales?: string;\n\n}\n\nexport interface INumberFormatterPrivate extends IEntityPrivate {\n}\n\n/**\n * Number formatter\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-numbers/} for more info\n * @important\n */\nexport class NumberFormatter extends Entity {\n\tdeclare public _settings: INumberFormatterSettings;\n\tdeclare public _privateSettings: INumberFormatterPrivate;\n\n\tprotected _setDefaults() {\n\t\t// Defaults\n\t\tthis._setDefault(\"negativeBase\", 0);\n\t\tthis._setDefault(\"numberFormat\", \"#,###.#####\");\n\t\tthis._setDefault(\"smallNumberThreshold\", 1.00);\n\n\t\tconst bns = \"_big_number_suffix_\";\n\t\tconst sns = \"_small_number_suffix_\";\n\t\tconst bs = \"_byte_suffix_\";\n\n\t\tthis._setDefault(\"bigNumberPrefixes\", [\n\t\t\t{ \"number\": 1e+3, \"suffix\": this._t(bns + \"3\") },\n\t\t\t{ \"number\": 1e+6, \"suffix\": this._t(bns + \"6\") },\n\t\t\t{ \"number\": 1e+9, \"suffix\": this._t(bns + \"9\") },\n\t\t\t{ \"number\": 1e+12, \"suffix\": this._t(bns + \"12\") },\n\t\t\t{ \"number\": 1e+15, \"suffix\": this._t(bns + \"15\") },\n\t\t\t{ \"number\": 1e+18, \"suffix\": this._t(bns + \"18\") },\n\t\t\t{ \"number\": 1e+21, \"suffix\": this._t(bns + \"21\") },\n\t\t\t{ \"number\": 1e+24, \"suffix\": this._t(bns + \"24\") }\n\t\t]);\n\n\t\tthis._setDefault(\"smallNumberPrefixes\", [\n\t\t\t{ \"number\": 1e-24, \"suffix\": this._t(sns + \"24\") },\n\t\t\t{ \"number\": 1e-21, \"suffix\": this._t(sns + \"21\") },\n\t\t\t{ \"number\": 1e-18, \"suffix\": this._t(sns + \"18\") },\n\t\t\t{ \"number\": 1e-15, \"suffix\": this._t(sns + \"15\") },\n\t\t\t{ \"number\": 1e-12, \"suffix\": this._t(sns + \"12\") },\n\t\t\t{ \"number\": 1e-9, \"suffix\": this._t(sns + \"9\") },\n\t\t\t{ \"number\": 1e-6, \"suffix\": this._t(sns + \"6\") },\n\t\t\t{ \"number\": 1e-3, \"suffix\": this._t(sns + \"3\") }\n\t\t]);\n\n\t\tthis._setDefault(\"bytePrefixes\", [\n\t\t\t{ \"number\": 1, suffix: this._t(bs + \"B\") },\n\t\t\t{ \"number\": 1024, suffix: this._t(bs + \"KB\") },\n\t\t\t{ \"number\": 1048576, suffix: this._t(bs + \"MB\") },\n\t\t\t{ \"number\": 1073741824, suffix: this._t(bs + \"GB\") },\n\t\t\t{ \"number\": 1099511627776, suffix: this._t(bs + \"TB\") },\n\t\t\t{ \"number\": 1125899906842624, suffix: this._t(bs + \"PB\") }\n\t\t]);\n\n\t\tsuper._setDefaults();\n\t}\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\t}\n\n\t/**\n\t * Formats the number according to specific format.\n\t *\n\t * @param value   Value to format\n\t * @param format  Format to apply\n\t * @return Formatted number\n\t */\n\tpublic format(value: number | string, format?: string | Intl.NumberFormatOptions, precision?: number): string {\n\n\t\t// no format passed in or \"Number\"\n\t\tif (format == null || ($type.isString(format) && format.toLowerCase() === \"number\")) {\n\t\t\tformat = this.get(\"numberFormat\", \"\");\n\t\t}\n\n\t\t// Init return value\n\t\tlet formatted;\n\n\t\t// Cast to number just in case\n\t\t// TODO: maybe use better casting\n\t\tlet source: number = Number(value);\n\n\t\t// Is it a built-in format or Intl.NumberFormatOptions\n\t\tif ($type.isObject(format)) {\n\t\t\ttry {\n\t\t\t\tif (this.get(\"intlLocales\")) {\n\t\t\t\t\treturn new Intl.NumberFormat(this.get(\"intlLocales\"), <Intl.NumberFormatOptions>format).format(source);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn new Intl.NumberFormat(undefined, <Intl.NumberFormatOptions>format).format(source);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\treturn \"Invalid\";\n\t\t\t}\n\n\t\t}\n\t\telse {\n\n\t\t\t// Clean format\n\t\t\tformat = $utils.cleanFormat(format!);\n\n\t\t\t// Get format info (it will also deal with parser caching)\n\t\t\tlet info = this.parseFormat(format, this._root.language);\n\n\n\t\t\t// format and replace the number\n\t\t\tlet details;\n\t\t\tif (source > this.get(\"negativeBase\")) {\n\t\t\t\tdetails = info.positive;\n\t\t\t}\n\t\t\telse if (source < this.get(\"negativeBase\")) {\n\t\t\t\tdetails = info.negative;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdetails = info.zero;\n\t\t\t}\n\n\t\t\t// Adjust precision\n\t\t\tif (precision != null && !details.mod) {\n\t\t\t\tdetails = $object.copy(details);\n\t\t\t\tdetails.decimals.active = source == 0 ? 0 : precision;\n\t\t\t}\n\n\t\t\t// Format\n\t\t\tformatted = details.template.split($type.PLACEHOLDER).join(this.applyFormat(source, details));\n\n\t\t}\n\n\t\treturn formatted;\n\t}\n\n\t/**\n\t * Parses supplied format into structured object which can be used to format\n\t * the number.\n\t *\n\t * @param format Format string, i.e. \"#,###.00\"\n\t * @param language Language\n\t * @ignore\n\t */\n\tprotected parseFormat(format: string, language: Language): any {\n\n\t\t// Check cache\n\t\t// TODO\n\t\t// let cached = this.getCache(format);\n\t\t// if (cached != null) {\n\t\t// \treturn cached;\n\t\t// }\n\n\t\tconst thousandSeparator = language.translateEmpty(\"_thousandSeparator\");\n\t\tconst decimalSeparator = language.translateEmpty(\"_decimalSeparator\")\n\n\t\t// init format parse info holder\n\t\tlet info: any = {\n\t\t\t\"positive\": {\n\t\t\t\t\"thousands\": {\n\t\t\t\t\t\"active\": -1,\n\t\t\t\t\t\"passive\": -1,\n\t\t\t\t\t\"interval\": -1,\n\t\t\t\t\t\"separator\": thousandSeparator\n\t\t\t\t},\n\t\t\t\t\"decimals\": {\n\t\t\t\t\t\"active\": -1,\n\t\t\t\t\t\"passive\": -1,\n\t\t\t\t\t\"separator\": decimalSeparator\n\t\t\t\t},\n\t\t\t\t\"template\": \"\",\n\t\t\t\t\"source\": \"\",\n\t\t\t\t\"parsed\": false\n\t\t\t},\n\t\t\t\"negative\": {\n\t\t\t\t\"thousands\": {\n\t\t\t\t\t\"active\": -1,\n\t\t\t\t\t\"passive\": -1,\n\t\t\t\t\t\"interval\": -1,\n\t\t\t\t\t\"separator\": thousandSeparator\n\t\t\t\t},\n\t\t\t\t\"decimals\": {\n\t\t\t\t\t\"active\": -1,\n\t\t\t\t\t\"passive\": -1,\n\t\t\t\t\t\"separator\": decimalSeparator\n\t\t\t\t},\n\t\t\t\t\"template\": \"\",\n\t\t\t\t\"source\": \"\",\n\t\t\t\t\"parsed\": false\n\t\t\t},\n\t\t\t\"zero\": {\n\t\t\t\t\"thousands\": {\n\t\t\t\t\t\"active\": -1,\n\t\t\t\t\t\"passive\": -1,\n\t\t\t\t\t\"interval\": -1,\n\t\t\t\t\t\"separator\": thousandSeparator\n\t\t\t\t},\n\t\t\t\t\"decimals\": {\n\t\t\t\t\t\"active\": -1,\n\t\t\t\t\t\"passive\": -1,\n\t\t\t\t\t\"separator\": decimalSeparator\n\t\t\t\t},\n\t\t\t\t\"template\": \"\",\n\t\t\t\t\"source\": \"\",\n\t\t\t\t\"parsed\": false\n\t\t\t}\n\t\t};\n\n\t\t// Escape double vertical bars (that mean display one vertical bar)\n\t\tformat = format.replace(\"||\", $type.PLACEHOLDER2);\n\n\t\t// Split it up and deal with different formats\n\t\tlet parts = format.split(\"|\");\n\t\tinfo.positive.source = parts[0];\n\n\t\tif (typeof parts[2] === \"undefined\") {\n\t\t\tinfo.zero = info.positive;\n\t\t}\n\t\telse {\n\t\t\tinfo.zero.source = parts[2];\n\t\t}\n\n\t\tif (typeof parts[1] === \"undefined\") {\n\t\t\tinfo.negative = info.positive;\n\t\t}\n\t\telse {\n\t\t\tinfo.negative.source = parts[1];\n\t\t}\n\n\t\t// Parse each\n\t\t$object.each(info, (_part, item) => {\n\t\t\t// Already parsed\n\t\t\tif (item.parsed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check cached\n\t\t\t// TODO\n\t\t\t// if (typeof this.getCache(item.source) !== \"undefined\") {\n\t\t\t// \tinfo[part] = this.getCache(item.source);\n\t\t\t// \treturn;\n\t\t\t// }\n\n\t\t\t// Begin parsing\n\t\t\tlet partFormat = item.source;\n\n\t\t\t// Just \"Number\"?\n\t\t\tif (partFormat.toLowerCase() === \"number\") {\n\t\t\t\tpartFormat = this.get(\"numberFormat\", \"#,###.#####\");\n\t\t\t}\n\n\t\t\t// Let TextFormatter split into chunks\n\t\t\tlet chunks = TextFormatter.chunk(partFormat, true);\n\t\t\tfor (let i: number = 0; i < chunks.length; i++) {\n\t\t\t\tlet chunk = chunks[i];\n\n\t\t\t\t// replace back double vertical bar\n\t\t\t\tchunk.text = chunk.text.replace($type.PLACEHOLDER2, \"|\");\n\n\t\t\t\tif (chunk.type === \"value\") {\n\t\t\t\t\t// Parse format\n\n\t\t\t\t\t// Look for codes\n\t\t\t\t\tlet matches: string[] | null = chunk.text.match(/[#0.,]+[ ]?[abesABES%!]?[abesABES‰!]?/);\n\n\t\t\t\t\tif (matches) {\n\t\t\t\t\t\tif (matches === null || matches[0] === \"\") {\n\t\t\t\t\t\t\t// no codes here - assume string\n\t\t\t\t\t\t\t// nothing to do here\n\t\t\t\t\t\t\titem.template += chunk.text;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\t// look for the format modifiers at the end\n\t\t\t\t\t\t\tlet mods: string[] | null = matches[0].match(/[abesABES%‰!]{2}|[abesABES%‰]{1}$/);\n\n\t\t\t\t\t\t\tif (mods) {\n\t\t\t\t\t\t\t\titem.mod = mods[0].toLowerCase();\n\t\t\t\t\t\t\t\titem.modSpacing = matches[0].match(/[ ]{1}[abesABES%‰!]{1}$/) ? true : false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// break the format up\n\t\t\t\t\t\t\tlet a = matches[0].split(\".\");\n\n\t\t\t\t\t\t\t// Deal with thousands\n\t\t\t\t\t\t\tif (a[0] === \"\") {\n\t\t\t\t\t\t\t\t// No directives for thousands\n\t\t\t\t\t\t\t\t// Leave default settings (no formatting)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t// Counts\n\t\t\t\t\t\t\t\titem.thousands.active = (a[0].match(/0/g) || []).length;\n\t\t\t\t\t\t\t\titem.thousands.passive = (a[0].match(/\\#/g) || []).length + item.thousands.active;\n\n\t\t\t\t\t\t\t\t// Separator interval\n\t\t\t\t\t\t\t\tlet b = a[0].split(\",\");\n\t\t\t\t\t\t\t\tif (b.length === 1) {\n\t\t\t\t\t\t\t\t\t// No thousands separators\n\t\t\t\t\t\t\t\t\t// Do nothing\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t// Use length fo the last chunk as thousands length\n\t\t\t\t\t\t\t\t\titem.thousands.interval = (b.pop() || \"\").length;\n\n\t\t\t\t\t\t\t\t\tif (item.thousands.interval === 0) {\n\t\t\t\t\t\t\t\t\t\titem.thousands.interval = -1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Deal with decimals\n\t\t\t\t\t\t\tif (typeof (a[1]) === \"undefined\") {\n\t\t\t\t\t\t\t\t// No directives for decimals\n\t\t\t\t\t\t\t\t// Leave at defaults (no formatting)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t// Counts\n\t\t\t\t\t\t\t\titem.decimals.active = (a[1].match(/0/g) || []).length;\n\t\t\t\t\t\t\t\titem.decimals.passive = (a[1].match(/\\#/g) || []).length + item.decimals.active;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Add special code to template\n\t\t\t\t\t\t\titem.template += chunk.text.split(matches[0]).join($type.PLACEHOLDER);\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Quoted string - take it as it is\n\t\t\t\t\titem.template += chunk.text;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Apply style formatting\n\t\t\t//item.template = getTextFormatter().format(item.template, this.outputFormat);\n\n\t\t\t// Save cache\n\t\t\t// TODO\n\t\t\t//this.setCache(item.source, item);\n\n\t\t\t// Mark this as parsed\n\t\t\titem.parsed = true;\n\n\t\t});\n\n\t\t// Save cache (the whole thing)\n\t\t// TODO\n\t\t//this.setCache(format, info);\n\n\t\treturn info;\n\t}\n\n\t/**\n\t * Applies parsed format to a numeric value.\n\t *\n\t * @param value    Value\n\t * @param details  Parsed format as returned by parseFormat()\n\t * @return Formatted number\n\t * @ignore\n\t */\n\tprotected applyFormat(value: number, details: any): string {\n\n\t\t// Use absolute values\n\t\tlet negative: boolean = value < 0;\n\t\tvalue = Math.abs(value);\n\n\t\t// Recalculate according to modifier\n\t\tlet prefix: string = \"\", suffix: string = \"\";\n\t\tlet mods: string[] = details.mod ? details.mod.split(\"\") : [];\n\t\tif (mods.indexOf(\"b\") !== -1) {\n\t\t\tlet a = this.applyPrefix(value, this.get(\"bytePrefixes\")!, mods.indexOf(\"!\") !== -1);\n\t\t\tvalue = a[0];\n\t\t\tprefix = a[1];\n\t\t\tsuffix = a[2];\n\t\t\tif (details.modSpacing) {\n\t\t\t\tsuffix = \" \" + suffix;\n\t\t\t}\n\t\t}\n\t\telse if (mods.indexOf(\"a\") !== -1) {\n\t\t\tlet a = this.applyPrefix(value, value < this.get(\"smallNumberThreshold\")! ? this.get(\"smallNumberPrefixes\")! : this.get(\"bigNumberPrefixes\")!, mods.indexOf(\"!\") !== -1);\n\t\t\tvalue = a[0];\n\t\t\tprefix = a[1];\n\t\t\tsuffix = a[2];\n\t\t\tif (details.modSpacing) {\n\t\t\t\tsuffix = \" \" + suffix;\n\t\t\t}\n\t\t}\n\t\telse if (mods.indexOf(\"%\") !== -1) {\n\t\t\tlet ol = Math.min(value.toString().length + 2, 21);\n\t\t\tvalue *= 100;\n\t\t\tvalue = parseFloat(value.toPrecision(ol));\n\t\t\tsuffix = \"%\";\n\t\t}\n\t\telse if (mods.indexOf(\"‰\") !== -1) {\n\t\t\tlet ol = Math.min(value.toString().length + 3, 21);\n\t\t\tvalue *= 1000;\n\t\t\tvalue = parseFloat(value.toPrecision(ol));\n\t\t\tsuffix = \"‰\";\n\t\t}\n\n\t\t// Round to passive\n\t\tif (mods.indexOf(\"e\") !== -1) {\n\t\t\t// convert the value to exponential\n\t\t\tlet exp: string[];\n\t\t\tif (details.decimals.passive >= 0) {\n\t\t\t\texp = value.toExponential(details.decimals.passive).split(\"e\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\texp = value.toExponential().split(\"e\");\n\t\t\t}\n\t\t\tvalue = Number(exp[0]);\n\t\t\tsuffix = \"e\" + exp[1];\n\t\t\tif (details.modSpacing) {\n\t\t\t\tsuffix = \" \" + suffix;\n\t\t\t}\n\t\t}\n\t\telse if (details.decimals.passive === 0) {\n\t\t\tvalue = Math.round(value);\n\t\t}\n\t\telse if (details.decimals.passive > 0) {\n\t\t\tlet d: number = Math.pow(10, details.decimals.passive);\n\t\t\tvalue = Math.round(value * d) / d;\n\t\t}\n\n\t\t// Init return value\n\t\tlet res: string = \"\";\n\n\t\t// Calc integer and decimal parts\n\t\tlet a = $type.numberToString(value).split(\".\");\n\n\t\t// Format integers\n\t\tlet ints = a[0];\n\n\t\t// Pad integers to active length\n\t\tif (ints.length < details.thousands.active) {\n\t\t\tints = Array(details.thousands.active - ints.length + 1).join(\"0\") + ints;\n\t\t}\n\n\t\t// Insert thousands separators\n\t\tif (details.thousands.interval > 0) {\n\t\t\tlet ip: string[] = [];\n\t\t\tlet intsr: string = ints.split(\"\").reverse().join(\"\");\n\t\t\tfor (let i = 0, len = ints.length; i <= len; i += details.thousands.interval) {\n\t\t\t\tlet c: string = intsr.substr(i, details.thousands.interval).split(\"\").reverse().join(\"\");\n\t\t\t\tif (c !== \"\") {\n\t\t\t\t\tip.unshift(c);\n\t\t\t\t}\n\t\t\t}\n\t\t\tints = ip.join(details.thousands.separator);\n\t\t}\n\n\t\t// Add integers\n\t\tres += ints;\n\n\t\t// Add decimals\n\t\tif (a.length === 1) {\n\t\t\ta.push(\"\");\n\t\t}\n\t\tlet decs: string = a[1];\n\n\t\t// Fill zeros?\n\t\tif (decs.length < details.decimals.active) {\n\t\t\tdecs += Array(details.decimals.active - decs.length + 1).join(\"0\");\n\t\t}\n\n\t\tif (decs !== \"\") {\n\t\t\tres += details.decimals.separator + decs;\n\t\t}\n\n\t\t// Can't have empty return value\n\t\tif (res === \"\") {\n\t\t\tres = \"0\";\n\t\t}\n\n\t\t// Add minus sign back\n\t\tif (value !== 0 && negative && (mods.indexOf(\"s\") === -1)) {\n\t\t\tres = \"-\" + res;\n\t\t}\n\n\t\t// Add suffixes/prefixes\n\t\tif (prefix) {\n\t\t\tres = prefix + res;\n\t\t}\n\t\tif (suffix) {\n\t\t\tres += suffix;\n\t\t}\n\n\t\treturn res;\n\t}\n\n\n\tprotected applyPrefix(value: number, prefixes: any[], force: boolean = false): any[] {\n\t\tlet newvalue = value;\n\t\tlet prefix = \"\";\n\t\tlet suffix = \"\";\n\t\tlet applied = false;\n\t\tlet k = 1;\n\n\t\tfor (let i = 0, len = prefixes.length; i < len; i++) {\n\t\t\tif (prefixes[i].number <= value) {\n\t\t\t\tif (prefixes[i].number === 0) {\n\t\t\t\t\tnewvalue = 0;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnewvalue = value / prefixes[i].number;\n\t\t\t\t\tk = prefixes[i].number;\n\t\t\t\t}\n\t\t\t\tprefix = prefixes[i].prefix;\n\t\t\t\tsuffix = prefixes[i].suffix;\n\t\t\t\tapplied = true;\n\t\t\t}\n\t\t}\n\n\n\t\tif (!applied && force && prefixes.length && value != 0) {\n\t\t\t// Prefix was not applied. Use the first prefix.\n\t\t\tnewvalue = value / prefixes[0].number;\n\t\t\tprefix = prefixes[0].prefix;\n\t\t\tsuffix = prefixes[0].suffix;\n\t\t\tapplied = true;\n\t\t}\n\n\t\tif (applied) {\n\t\t\tnewvalue = parseFloat(\n\t\t\t\tnewvalue.toPrecision(\n\t\t\t\t\tMath.min(k.toString().length + Math.floor(newvalue).toString().replace(/[^0-9]*/g, \"\").length, 21)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\treturn [newvalue, prefix, suffix];\n\t}\n\n\t/**\n\t * Replaces brackets with temporary placeholders.\n\t *\n\t * @ignore Exclude from docs\n\t * @param text  Input text\n\t * @return Escaped text\n\t */\n\tpublic escape(text: string): string {\n\t\treturn text.replace(\"||\", $type.PLACEHOLDER2);\n\t}\n\n\t/**\n\t * Replaces placeholders back to brackets.\n\t *\n\t * @ignore Exclude from docs\n\t * @param text  Escaped text\n\t * @return Unescaped text\n\t */\n\tpublic unescape(text: string): string {\n\t\treturn text.replace($type.PLACEHOLDER2, \"|\");\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}