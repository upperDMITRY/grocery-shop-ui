{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\nimport * as $draw from \"../util/Draw\";\n/**\r\n * Draws a line.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\nvar Line = /** @class */function (_super) {\n  __extends(Line, _super);\n  function Line() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(Line.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n      if (this.isDirty(\"points\") || this._sizeDirty || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Line.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n      if (this._clear) {\n        var points = this.get(\"points\");\n        if (points && points.length > 0) {\n          var point = points[0];\n          this._display.moveTo(point.x, point.y);\n          $draw.segmentedLine(this._display, [[points]]);\n        } else {\n          var w = this.width();\n          var h = this.height();\n          this._display.moveTo(0, 0);\n          this._display.lineTo(w, h);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Line, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Line\"\n  });\n  Object.defineProperty(Line, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([Line.className])\n  });\n  return Line;\n}(Graphics);\nexport { Line };","map":{"version":3,"names":["Graphics","$draw","Line","_super","__extends","value","prototype","_beforeChanged","call","isDirty","_sizeDirty","isPrivateDirty","_clear","_changed","points","get","length","point","_display","moveTo","x","y","segmentedLine","w","width","h","height","lineTo","Object","defineProperty","classNames","concat","className"],"sources":["../../../../../src/.internal/core/render/Line.ts"],"sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\nimport type { IPoint } from \"../util/IPoint\";\nimport * as $draw from \"../util/Draw\";\n\nexport interface ILineSettings extends IGraphicsSettings {\n\n\t/**\n\t * A list of [[IPoint]] (x/y coordinates) points for the line.\n\t */\n\tpoints?: Array<IPoint>;\n\n}\n\nexport interface ILinePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a line.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n * @important\n */\nexport class Line extends Graphics {\n\n\tdeclare public _settings: ILineSettings;\n\tdeclare public _privateSettings: ILinePrivate;\n\n\tpublic static className: string = \"Line\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Line.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"points\") || this._sizeDirty || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\n\t\t\tconst points = this.get(\"points\")!;\n\n\t\t\tif (points && points.length > 0) {\n\t\t\t\tlet point = points[0];\n\n\t\t\t\tthis._display.moveTo(point.x, point.y);\n\t\t\t\t$draw.segmentedLine(this._display, [[points]]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet w = this.width();\n\t\t\t\tlet h = this.height();\n\n\t\t\t\tthis._display.moveTo(0, 0);\n\t\t\t\tthis._display.lineTo(w, h);\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAA6C,YAAY;AAE1E,OAAO,KAAKC,KAAK,MAAM,cAAc;AAcrC;;;;;;AAMA,IAAAC,IAAA,0BAAAC,MAAA;EAA0BC,SAAA,CAAAF,IAAA,EAAAC,MAAA;EAA1B,SAAAD,KAAA;;EAsCA;;;;;WA9BC,SAAAG,CAAA;MACCF,MAAA,CAAAG,SAAA,CAAMC,cAAc,CAAAC,IAAA,MAAE;MAEtB,IAAI,IAAI,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CAACC,UAAU,IAAI,IAAI,CAACC,cAAc,CAAC,OAAO,CAAC,IAAI,IAAI,CAACA,cAAc,CAAC,QAAQ,CAAC,EAAE;QAC/G,IAAI,CAACC,MAAM,GAAG,IAAI;;IAEpB;;;;;;WAEA,SAAAP,CAAA;MACCF,MAAA,CAAAG,SAAA,CAAMO,QAAQ,CAAAL,IAAA,MAAE;MAEhB,IAAI,IAAI,CAACI,MAAM,EAAE;QAEhB,IAAME,MAAM,GAAG,IAAI,CAACC,GAAG,CAAC,QAAQ,CAAE;QAElC,IAAID,MAAM,IAAIA,MAAM,CAACE,MAAM,GAAG,CAAC,EAAE;UAChC,IAAIC,KAAK,GAAGH,MAAM,CAAC,CAAC,CAAC;UAErB,IAAI,CAACI,QAAQ,CAACC,MAAM,CAACF,KAAK,CAACG,CAAC,EAAEH,KAAK,CAACI,CAAC,CAAC;UACtCpB,KAAK,CAACqB,aAAa,CAAC,IAAI,CAACJ,QAAQ,EAAE,CAAC,CAACJ,MAAM,CAAC,CAAC,CAAC;SAC9C,MACI;UACJ,IAAIS,CAAC,GAAG,IAAI,CAACC,KAAK,EAAE;UACpB,IAAIC,CAAC,GAAG,IAAI,CAACC,MAAM,EAAE;UAErB,IAAI,CAACR,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;UAC1B,IAAI,CAACD,QAAQ,CAACS,MAAM,CAACJ,CAAC,EAAEE,CAAC,CAAC;;;IAG7B;;EAhCAG,MAAA,CAAAC,cAAA,CAAA3B,IAAA;;;;WAAkC;;EAClC0B,MAAA,CAAAC,cAAA,CAAA3B,IAAA;;;;WAA0CF,QAAQ,CAAC8B,UAAU,CAACC,MAAM,CAAC,CAAC7B,IAAI,CAAC8B,SAAS,CAAC;;EAgCtF,OAAA9B,IAAC;CAAA,CAtCyBF,QAAQ;SAArBE,IAAI"},"metadata":{},"sourceType":"module"}