{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { DataItem } from \"../../../core/render/Component\";\nimport { Axis } from \"./Axis\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $math from \"../../../core/util/Math\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport { MultiDisposer } from \"../../../core/util/Disposer\";\n/**\r\n * Creates a value axis.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/} for more info\r\n * @important\r\n */\n\nvar ValueAxis =\n/** @class */\nfunction (_super) {\n  __extends(ValueAxis, _super);\n\n  function ValueAxis() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_dirtyExtremes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_dirtySelectionExtremes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_deltaMinMax\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(_this, \"_minReal\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_maxReal\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_baseValue\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_syncDp\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(ValueAxis.prototype, \"markDirtyExtremes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._dirtyExtremes = true;\n      this.markDirty();\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"markDirtySelectionExtremes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._dirtySelectionExtremes = true;\n      this.markDirty();\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n      this.setPrivateRaw(\"name\", \"value\");\n      this.addTag(\"value\");\n\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._prepareChildren.call(this);\n\n      if (this.isDirty(\"syncWithAxis\")) {\n        var previousValue = this._prevSettings.syncWithAxis;\n\n        if (previousValue) {\n          if (this._syncDp) {\n            this._syncDp.dispose();\n          }\n        }\n\n        var syncWithAxis = this.get(\"syncWithAxis\");\n\n        if (syncWithAxis) {\n          this._syncDp = new MultiDisposer([syncWithAxis.onPrivate(\"selectionMinFinal\", function () {\n            _this._dirtySelectionExtremes = true;\n          }), syncWithAxis.onPrivate(\"selectionMaxFinal\", function () {\n            _this._dirtySelectionExtremes = true;\n          })]);\n        }\n      } //if (this._dirtyExtremes || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"min\") || this.isDirty(\"max\") || this.isDirty(\"extraMin\") || this.isDirty(\"extraMax\") || this.isDirty(\"logarithmic\") || this.isDirty(\"treatZeroAs\") || this.isDirty(\"baseValue\") || this.isDirty(\"strictMinMax\") || this.isDirty(\"maxPrecision\")) {\n\n\n      if (this._sizeDirty || this._dirtyExtremes || this._valuesDirty || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"min\") || this.isDirty(\"max\") || this.isDirty(\"extraMin\") || this.isDirty(\"extraMax\") || this.isDirty(\"logarithmic\") || this.isDirty(\"treatZeroAs\") || this.isDirty(\"baseValue\") || this.isDirty(\"strictMinMax\") || this.isDirty(\"maxPrecision\") || this.isDirty(\"numberFormat\")) {\n        this._getMinMax();\n\n        this._dirtyExtremes = false;\n      }\n\n      if (this._dirtySelectionExtremes && !this._isPanning) {\n        this._getSelectionMinMax();\n\n        this._dirtySelectionExtremes = false;\n      }\n\n      this._groupData();\n\n      if (this._sizeDirty || this._valuesDirty || this.isDirty(\"start\") || this.isDirty(\"end\") || this.isPrivateDirty(\"min\") || this.isPrivateDirty(\"selectionMax\") || this.isPrivateDirty(\"selectionMin\") || this.isPrivateDirty(\"max\") || this.isPrivateDirty(\"step\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"logarithmic\")) {\n        this._handleRangeChange();\n\n        this._prepareAxisItems();\n\n        this._updateAxisRanges();\n      }\n\n      this._baseValue = this.baseValue();\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_groupData\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_formatText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      var numberFormat = this.get(\"numberFormat\");\n      var formatter = this.getNumberFormatter();\n      var text = \"\";\n\n      if (numberFormat) {\n        text = formatter.format(value, numberFormat);\n      } else {\n        text = formatter.format(value, undefined, this.getPrivate(\"stepDecimalPlaces\"));\n      }\n\n      return text;\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_prepareAxisItems\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var min = this.getPrivate(\"min\");\n      var max = this.getPrivate(\"max\");\n\n      if ($type.isNumber(min) && $type.isNumber(max)) {\n        var logarithmic = this.get(\"logarithmic\");\n        var step = this.getPrivate(\"step\");\n        var selectionMin = this.getPrivate(\"selectionMin\");\n        var selectionMax = this.getPrivate(\"selectionMax\") + step;\n        var value = selectionMin - step;\n        var i = 0;\n\n        if (logarithmic) {\n          value = selectionMin;\n        }\n\n        while (value < selectionMax) {\n          var dataItem = void 0;\n\n          if (this.dataItems.length < i + 1) {\n            dataItem = new DataItem(this, undefined, {});\n\n            this._dataItems.push(dataItem);\n\n            this.processDataItem(dataItem);\n          } else {\n            dataItem = this.dataItems[i];\n          }\n\n          this._createAssets(dataItem, []);\n\n          if (dataItem.isHidden()) {\n            dataItem.show();\n          }\n\n          dataItem.setRaw(\"value\", value);\n          var label = dataItem.get(\"label\");\n\n          if (label) {\n            label.set(\"text\", this._formatText(value));\n          }\n\n          this._prepareDataItem(dataItem);\n\n          if (!logarithmic) {\n            value += step;\n          } else {\n            var differencePower = Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E;\n\n            if (differencePower > 1) {\n              value = Math.pow(10, Math.log(min) * Math.LOG10E + i);\n            } else {\n              value += step;\n            }\n          }\n\n          var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\n\n          if (stepPower < 1) {\n            // exponent is less then 1 too. Count decimals of exponent\n            var decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2; // round value to avoid floating point issues\n\n            value = $math.round(value, decCount);\n          }\n\n          i++;\n        }\n\n        for (var j = i; j < this.dataItems.length; j++) {\n          this.dataItems[j].hide();\n        }\n\n        $array.each(this.series, function (series) {\n          if (series.inited) {\n            series._markDirtyAxes();\n          }\n        });\n\n        this._updateGhost();\n      }\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_prepareDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, count) {\n      var renderer = this.get(\"renderer\");\n      var value = dataItem.get(\"value\");\n      var endValue = dataItem.get(\"endValue\");\n      var position = this.valueToPosition(value);\n      var endPosition = position;\n      var fillEndPosition = this.valueToPosition(value + this.getPrivate(\"step\"));\n\n      if ($type.isNumber(endValue)) {\n        endPosition = this.valueToPosition(endValue);\n        fillEndPosition = endPosition;\n      }\n\n      renderer.updateLabel(dataItem.get(\"label\"), position, endPosition, count);\n      var grid = dataItem.get(\"grid\");\n      renderer.updateGrid(grid, position, endPosition);\n\n      if (grid) {\n        if (value == this.get(\"baseValue\", 0)) {\n          grid.addTag(\"base\");\n\n          grid._applyThemes();\n        } else if (grid.hasTag(\"base\")) {\n          grid.removeTag(\"base\");\n\n          grid._applyThemes();\n        }\n      }\n\n      renderer.updateTick(dataItem.get(\"tick\"), position, endPosition, count);\n      renderer.updateFill(dataItem.get(\"axisFill\"), position, fillEndPosition);\n\n      this._processBullet(dataItem);\n\n      renderer.updateBullet(dataItem.get(\"bullet\"), position, endPosition);\n\n      if (!dataItem.get(\"isRange\")) {\n        var fillRule = this.get(\"fillRule\");\n\n        if (fillRule) {\n          fillRule(dataItem);\n        }\n      }\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_handleRangeChange\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var selectionMin = this.positionToValue(this.get(\"start\", 0));\n      var selectionMax = this.positionToValue(this.get(\"end\", 1));\n      var gridCount = this.get(\"renderer\").gridCount();\n\n      var minMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n\n      var stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\n      this.setPrivateRaw(\"stepDecimalPlaces\", stepDecimalPlaces);\n      selectionMin = $math.round(selectionMin, stepDecimalPlaces);\n      selectionMax = $math.round(selectionMax, stepDecimalPlaces);\n      minMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n      var step = minMaxStep.step;\n      selectionMin = minMaxStep.min;\n      selectionMax = minMaxStep.max;\n\n      if (this.getPrivate(\"selectionMin\") !== selectionMin || this.getPrivate(\"selectionMax\") !== selectionMax || this.getPrivate(\"step\") !== step) {\n        this.setPrivateRaw(\"selectionMin\", selectionMin);\n        this.setPrivateRaw(\"selectionMax\", selectionMax);\n        this.setPrivateRaw(\"step\", step);\n      }\n    }\n  });\n  /**\r\n   * Converts a relative position to a corresponding numeric value from axis\r\n   * scale.\r\n   *\r\n   * @param   position  Relative position\r\n   * @return            Value\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"positionToValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (position) {\n      var min = this.getPrivate(\"min\");\n      var max = this.getPrivate(\"max\");\n\n      if (!this.get(\"logarithmic\")) {\n        return position * (max - min) + min;\n      } else {\n        return Math.pow(Math.E, (position * (Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E) + Math.log(min) * Math.LOG10E) / Math.LOG10E);\n      }\n    }\n  });\n  /**\r\n   * Convers value to a relative position on axis.\r\n   *\r\n   * @param   value  Value\r\n   * @return         Relative position\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"valueToPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      var min = this.getPrivate(\"min\");\n      var max = this.getPrivate(\"max\");\n\n      if (!this.get(\"logarithmic\")) {\n        return (value - min) / (max - min);\n      } else {\n        if (value <= 0) {\n          var treatZeroAs = this.get(\"treatZeroAs\");\n\n          if ($type.isNumber(treatZeroAs)) {\n            value = treatZeroAs;\n          }\n        }\n\n        return (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / (Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E);\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"valueToFinalPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      var min = this.getPrivate(\"minFinal\");\n      var max = this.getPrivate(\"maxFinal\");\n\n      if (!this.get(\"logarithmic\")) {\n        return (value - min) / (max - min);\n      } else {\n        if (value <= 0) {\n          var treatZeroAs = this.get(\"treatZeroAs\");\n\n          if ($type.isNumber(treatZeroAs)) {\n            value = treatZeroAs;\n          }\n        }\n\n        return (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / (Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E);\n      }\n    }\n  });\n  /**\r\n   * Returns X coordinate in pixels corresponding to specific value.\r\n   *\r\n   * @param   value     Numeric value\r\n   * @param   location  Location\r\n   * @param   baseValue Base value\r\n   * @return            X coordinate\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getX\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, location, baseValue) {\n      value = baseValue + (value - baseValue) * location;\n      var position = this.valueToPosition(value);\n      return this._settings.renderer.positionToCoordinate(position);\n    }\n  });\n  /**\r\n   * Returns X coordinate in pixels corresponding to specific value.\r\n   *\r\n   * @param   value     Numeric value\r\n   * @param   location  Location\r\n   * @param   baseValue Base value\r\n   * @return            X coordinate\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getY\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, location, baseValue) {\n      value = baseValue + (value - baseValue) * location;\n      var position = this.valueToPosition(value);\n      return this._settings.renderer.positionToCoordinate(position);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getDataItemCoordinateX\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, field, _cellLocation, axisLocation) {\n      return this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, _cellLocation, axisLocation));\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getDataItemPositionX\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, field, _cellLocation, axisLocation) {\n      var value = dataItem.get(field);\n      var stackToItem = dataItem.get(\"stackToItemX\");\n\n      if (stackToItem) {\n        var series = dataItem.component;\n        value = value * axisLocation + series.getStackedXValueWorking(dataItem, field);\n      } else {\n        value = this._baseValue + (value - this._baseValue) * axisLocation;\n      }\n\n      return this.valueToPosition(value);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getDataItemCoordinateY\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, field, _cellLocation, axisLocation) {\n      return this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, _cellLocation, axisLocation));\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getDataItemPositionY\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, field, _cellLocation, axisLocation) {\n      var value = dataItem.get(field);\n      var stackToItem = dataItem.get(\"stackToItemY\");\n\n      if (stackToItem) {\n        var series = dataItem.component;\n        value = value * axisLocation + series.getStackedYValueWorking(dataItem, field);\n      } else {\n        value = this._baseValue + (value - this._baseValue) * axisLocation;\n      }\n\n      return this.valueToPosition(value);\n    }\n  });\n  /**\r\n   * Returns relative position of axis' `baseValue`.\r\n   *\r\n   * @return  Base value position\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"basePosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this.valueToPosition(this.baseValue());\n    }\n  });\n  /**\r\n   * Base value of the [[ValueAxis]], which determines positive and negative\r\n   * values.\r\n   *\r\n   * @return Base value\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"baseValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var min = Math.min(this.getPrivate(\"minFinal\", -Infinity), this.getPrivate(\"selectionMin\", -Infinity));\n      var max = Math.max(this.getPrivate(\"maxFinal\", Infinity), this.getPrivate(\"selectionMax\", Infinity));\n      var baseValue = this.get(\"baseValue\", 0);\n\n      if (baseValue < min) {\n        baseValue = min;\n      }\n\n      if (baseValue > max) {\n        baseValue = max;\n      }\n\n      return baseValue;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"cellEndValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      return value;\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"fixSmallStep\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (step) {\n      // happens because of floating point error\n      if (1 + step === 1) {\n        step *= 2;\n        return this.fixSmallStep(step);\n      }\n\n      return step;\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_fixMin\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (min) {\n      return min;\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_fixMax\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (max) {\n      return max;\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_calculateTotals\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.get(\"calculateTotals\")) {\n        var series = this.series[0];\n\n        if (series) {\n          var startIndex = series.getPrivate(\"startIndex\", 0);\n\n          if (series.dataItems.length > 0) {\n            if (startIndex > 0) {\n              startIndex--;\n            }\n\n            var endIndex = series.getPrivate(\"endIndex\", series.dataItems.length);\n\n            if (endIndex < series.dataItems.length) {\n              endIndex++;\n            }\n\n            var field_1;\n            var vc_1;\n\n            if (series.get(\"yAxis\") == this) {\n              field_1 = \"valueY\";\n              vc_1 = \"vcy\";\n            } else if (series.get(\"xAxis\") == this) {\n              field_1 = \"valueX\";\n              vc_1 = \"vcx\";\n            }\n\n            var fieldWorking_1 = field_1 + \"Working\";\n\n            if (field_1) {\n              var _loop_1 = function (i) {\n                var sum = 0;\n                var total = 0;\n                $array.each(this_1.series, function (series) {\n                  if (!series.get(\"excludeFromTotal\")) {\n                    var dataItem = series.dataItems[i];\n\n                    if (dataItem) {\n                      var value = dataItem.get(fieldWorking_1) * series.get(vc_1);\n\n                      if (value != undefined) {\n                        sum += value;\n                        total += Math.abs(value);\n                      }\n                    }\n                  }\n                });\n                $array.each(this_1.series, function (series) {\n                  if (!series.get(\"excludeFromTotal\")) {\n                    var dataItem = series.dataItems[i];\n\n                    if (dataItem) {\n                      var value = dataItem.get(fieldWorking_1) * series.get(vc_1);\n\n                      if (value != undefined) {\n                        dataItem.set(field_1 + \"Total\", total);\n                        dataItem.set(field_1 + \"Sum\", sum);\n                        dataItem.set(field_1 + \"TotalPercent\", value / total * 100);\n                      }\n                    }\n                  }\n                });\n              };\n\n              var this_1 = this;\n\n              for (var i = startIndex; i < endIndex; i++) {\n                _loop_1(i);\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_getSelectionMinMax\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _a;\n\n      var _this = this;\n\n      var min = this.getPrivate(\"minFinal\");\n      var max = this.getPrivate(\"maxFinal\");\n      var minDefined = this.get(\"min\");\n      var maxDefined = this.get(\"max\");\n      var extraMin = this.get(\"extraMin\", 0);\n      var extraMax = this.get(\"extraMax\", 0);\n      var gridCount = this.get(\"renderer\").gridCount();\n      var strictMinMax = this.get(\"strictMinMax\", false);\n\n      if ($type.isNumber(min) && $type.isNumber(max)) {\n        var selectionMin_1 = max;\n        var selectionMax_1 = min;\n        $array.each(this.series, function (series) {\n          if (!series.get(\"ignoreMinMax\")) {\n            var seriesMin = void 0;\n            var seriesMax = void 0;\n\n            if (series.get(\"xAxis\") === _this) {\n              seriesMin = series.getPrivate(\"selectionMinX\", series.getPrivate(\"minX\"));\n              seriesMax = series.getPrivate(\"selectionMaxX\", series.getPrivate(\"maxX\"));\n            } else if (series.get(\"yAxis\") === _this) {\n              seriesMin = series.getPrivate(\"selectionMinY\", series.getPrivate(\"minY\"));\n              seriesMax = series.getPrivate(\"selectionMaxY\", series.getPrivate(\"maxY\"));\n            }\n\n            if (!series.isHidden() && !series.isShowing()) {\n              if ($type.isNumber(seriesMin)) {\n                selectionMin_1 = Math.min(selectionMin_1, seriesMin);\n              }\n\n              if ($type.isNumber(seriesMax)) {\n                selectionMax_1 = Math.max(selectionMax_1, seriesMax);\n              }\n            }\n          }\n        });\n\n        if (selectionMin_1 > selectionMax_1) {\n          _a = __read([selectionMax_1, selectionMin_1], 2), selectionMin_1 = _a[0], selectionMax_1 = _a[1];\n        }\n\n        if ($type.isNumber(minDefined)) {\n          if (strictMinMax) {\n            selectionMin_1 = minDefined;\n          } else {\n            selectionMin_1 = min;\n          }\n        } else if (strictMinMax) {\n          if ($type.isNumber(this._minReal)) {\n            selectionMin_1 = this._minReal;\n          }\n        }\n\n        if ($type.isNumber(maxDefined)) {\n          if (strictMinMax) {\n            selectionMax_1 = maxDefined;\n          } else {\n            selectionMax_1 = max;\n          }\n        } else if (strictMinMax) {\n          if ($type.isNumber(this._maxReal)) {\n            selectionMax_1 = this._maxReal;\n          }\n        }\n\n        if (selectionMin_1 === selectionMax_1) {\n          selectionMin_1 -= this._deltaMinMax;\n          selectionMax_1 += this._deltaMinMax;\n\n          var minMaxStep2 = this._adjustMinMax(selectionMin_1, selectionMax_1, gridCount, strictMinMax);\n\n          selectionMin_1 = minMaxStep2.min;\n          selectionMax_1 = minMaxStep2.max;\n        }\n\n        var minMaxStep = this._adjustMinMax(selectionMin_1, selectionMax_1, gridCount);\n\n        selectionMin_1 = minMaxStep.min;\n        selectionMax_1 = minMaxStep.max;\n        selectionMin_1 -= (selectionMax_1 - selectionMin_1) * extraMin;\n        selectionMax_1 += (selectionMax_1 - selectionMin_1) * extraMax;\n        selectionMin_1 = $math.fitToRange(selectionMin_1, min, max);\n        selectionMax_1 = $math.fitToRange(selectionMax_1, min, max); // do it for the second time !important\t\t\t\n\n        minMaxStep = this._adjustMinMax(selectionMin_1, selectionMax_1, gridCount, true);\n\n        if (!strictMinMax) {\n          selectionMin_1 = minMaxStep.min;\n          selectionMax_1 = minMaxStep.max;\n        }\n\n        var syncWithAxis = this.get(\"syncWithAxis\");\n\n        if (syncWithAxis) {\n          minMaxStep = this._syncAxes(selectionMin_1, selectionMax_1, minMaxStep.step, syncWithAxis.getPrivate(\"selectionMinFinal\", syncWithAxis.getPrivate(\"minFinal\", 0)), syncWithAxis.getPrivate(\"selectionMaxFinal\", syncWithAxis.getPrivate(\"maxFinal\", 1)), syncWithAxis.getPrivate(\"selectionStepFinal\", syncWithAxis.getPrivate(\"step\", 1)));\n          selectionMin_1 = minMaxStep.min;\n          selectionMax_1 = minMaxStep.max;\n        }\n\n        if (strictMinMax) {\n          if ($type.isNumber(minDefined)) {\n            selectionMin_1 = Math.max(selectionMin_1, minDefined);\n          }\n\n          if ($type.isNumber(maxDefined)) {\n            selectionMax_1 = Math.min(selectionMax_1, maxDefined);\n          }\n        }\n\n        var start = this.valueToFinalPosition(selectionMin_1);\n        var end = this.valueToFinalPosition(selectionMax_1);\n        this.setPrivateRaw(\"selectionMinFinal\", selectionMin_1);\n        this.setPrivateRaw(\"selectionMaxFinal\", selectionMax_1);\n        this.setPrivateRaw(\"selectionStepFinal\", minMaxStep.step);\n        this.zoom(start, end);\n      }\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_getMinMax\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var minDefined = this.get(\"min\");\n      var maxDefined = this.get(\"max\");\n      var min = Infinity;\n      var max = -Infinity;\n      var extraMin = this.get(\"extraMin\", 0);\n      var extraMax = this.get(\"extraMax\", 0);\n      var minDiff = Infinity;\n      $array.each(this.series, function (series) {\n        if (!series.get(\"ignoreMinMax\")) {\n          var seriesMin = void 0;\n          var seriesMax = void 0;\n\n          if (series.get(\"xAxis\") === _this) {\n            seriesMin = series.getPrivate(\"minX\");\n            seriesMax = series.getPrivate(\"maxX\");\n          } else if (series.get(\"yAxis\") === _this) {\n            seriesMin = series.getPrivate(\"minY\");\n            seriesMax = series.getPrivate(\"maxY\");\n          }\n\n          if ($type.isNumber(seriesMin) && $type.isNumber(seriesMax)) {\n            min = Math.min(min, seriesMin);\n            max = Math.max(max, seriesMax);\n            var diff = seriesMax - seriesMin;\n\n            if (diff <= 0) {\n              diff = Math.abs(seriesMax / 100);\n            }\n\n            if (diff < minDiff) {\n              minDiff = diff;\n            }\n          }\n        }\n      });\n\n      if (this.get(\"logarithmic\")) {\n        var treatZeroAs = this.get(\"treatZeroAs\");\n\n        if ($type.isNumber(treatZeroAs)) {\n          if (min <= 0) {\n            min = treatZeroAs;\n          }\n        }\n\n        if (min <= 0) {\n          new Error(\"Logarithmic value axis can not have values <= 0.\");\n        }\n      }\n\n      if (min === 0 && max === 0) {\n        max = 0.9;\n        min = -0.9;\n      }\n\n      if ($type.isNumber(minDefined)) {\n        min = minDefined;\n      }\n\n      if ($type.isNumber(maxDefined)) {\n        max = maxDefined;\n      } // meaning no min/max found on series/ranges and no min/max was defined\n\n\n      if (min === Infinity && max === -Infinity) {\n        return;\n      } // adapter\n\n\n      var minAdapted = this.adapters.fold(\"min\", min);\n      var maxAdapted = this.adapters.fold(\"max\", max);\n\n      if ($type.isNumber(minAdapted)) {\n        min = minAdapted;\n      }\n\n      if ($type.isNumber(maxAdapted)) {\n        max = maxAdapted;\n      } // DateAxis does some magic here\n\n\n      min = this._fixMin(min);\n      max = this._fixMax(max); // this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\n\n      if (max - min <= 1 / Math.pow(10, 15)) {\n        if (max - min !== 0) {\n          this._deltaMinMax = (max - min) / 2;\n        } else {\n          // the number by which we need to raise 10 to get difference\n          var exponent = Math.log(Math.abs(max)) * Math.LOG10E; // here we find a number which is power of 10 and has the same count of numbers as difference has\n\n          var power = Math.pow(10, Math.floor(exponent)); // reduce this number by 10 times\n\n          power = power / 10;\n          this._deltaMinMax = power;\n        }\n\n        min -= this._deltaMinMax;\n        max += this._deltaMinMax;\n      } // add extras\n\n\n      min -= (max - min) * extraMin;\n      max += (max - min) * extraMax;\n      this._minReal = min;\n      this._maxReal = max;\n      var strict = this.get(\"strictMinMax\");\n\n      if ($type.isNumber(maxDefined)) {\n        strict = true;\n      }\n\n      var gridCount = this.get(\"renderer\").gridCount();\n\n      var minMaxStep = this._adjustMinMax(min, max, gridCount, strict);\n\n      min = minMaxStep.min;\n      max = minMaxStep.max; // do it for the second time with strict true (importat!)\n\n      minMaxStep = this._adjustMinMax(min, max, gridCount, true);\n      min = minMaxStep.min;\n      max = minMaxStep.max; // return min max if strict\n\n      if (this.get(\"strictMinMax\")) {\n        if ($type.isNumber(minDefined)) {\n          min = minDefined;\n        } else {\n          min = this._minReal;\n        }\n\n        if ($type.isNumber(maxDefined)) {\n          max = maxDefined;\n        } else {\n          max = this._maxReal;\n        }\n\n        if (max - min <= 0.00000001) {\n          min -= this._deltaMinMax;\n          max += this._deltaMinMax;\n        }\n\n        min -= (max - min) * extraMin;\n        max += (max - min) * extraMax;\n      }\n\n      minAdapted = this.adapters.fold(\"min\", min);\n      maxAdapted = this.adapters.fold(\"max\", max);\n\n      if ($type.isNumber(minAdapted)) {\n        min = minAdapted;\n      }\n\n      if ($type.isNumber(maxAdapted)) {\n        max = maxAdapted;\n      }\n\n      if (minDiff == Infinity) {\n        minDiff = max - min;\n      }\n\n      var syncWithAxis = this.get(\"syncWithAxis\");\n\n      if (syncWithAxis) {\n        minMaxStep = this._syncAxes(min, max, minMaxStep.step, syncWithAxis.getPrivate(\"minFinal\", syncWithAxis.getPrivate(\"min\", 0)), syncWithAxis.getPrivate(\"maxFinal\", syncWithAxis.getPrivate(\"max\", 1)), syncWithAxis.getPrivate(\"step\", 1));\n        min = minMaxStep.min;\n        max = minMaxStep.max;\n      }\n\n      this.setPrivateRaw(\"maxZoomFactor\", (max - min) / minDiff * this.get(\"maxZoomFactor\", 100));\n\n      if ($type.isNumber(min) && $type.isNumber(max)) {\n        if (this.getPrivate(\"minFinal\") !== min || this.getPrivate(\"maxFinal\") !== max) {\n          this.setPrivate(\"minFinal\", min);\n          this.setPrivate(\"maxFinal\", max);\n          var duration = this.get(\"interpolationDuration\", 0);\n          var easing = this.get(\"interpolationEasing\");\n          this.animatePrivate({\n            key: \"min\",\n            to: min,\n            duration: duration,\n            easing: easing\n          });\n          this.animatePrivate({\n            key: \"max\",\n            to: max,\n            duration: duration,\n            easing: easing\n          });\n        }\n      }\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_adjustMinMax\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (min, max, gridCount, strictMode) {\n      var logarithmic = this.get(\"logarithmic\"); // will fail if 0\n\n      if (gridCount <= 1) {\n        gridCount = 1;\n      }\n\n      gridCount = Math.round(gridCount);\n      var initialMin = min;\n      var initialMax = max;\n      var difference = max - min; // in case min and max is the same, use max\n\n      if (difference === 0) {\n        difference = Math.abs(max);\n      } // the number by which we need to raise 10 to get difference\n\n\n      var exponent = Math.log(Math.abs(difference)) * Math.LOG10E; // here we find a number which is power of 10 and has the same count of numbers as difference has\n\n      var power = Math.pow(10, Math.floor(exponent)); // reduce this number by 10 times\n\n      power = power / 10;\n      var extra = power;\n\n      if (strictMode) {\n        extra = 0;\n      }\n\n      if (!logarithmic) {\n        // round down min\n        if (strictMode) {\n          min = Math.floor(min / power) * power; // round up max\n\n          max = Math.ceil(max / power) * power;\n        } else {\n          min = Math.ceil(min / power) * power - extra; // round up max\n\n          max = Math.floor(max / power) * power + extra;\n        } // don't let min go below 0 if real min is >= 0\n\n\n        if (min < 0 && initialMin >= 0) {\n          min = 0;\n        } // don't let max go above 0 if real max is <= 0\n\n\n        if (max > 0 && initialMax <= 0) {\n          max = 0;\n        }\n      } // logarithmic\n      else {\n        if (min <= 0) {\n          //throw Error(\"Logarithmic value axis can not have values <= 0.\");\n          min = this.get(\"baseValue\", 0);\n        }\n\n        if (min === Infinity) {\n          min = 1;\n        }\n\n        if (max === -Infinity) {\n          max = 10;\n        }\n\n        min = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\n        max = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\n\n        if (this.get(\"strictMinMax\")) {\n          var minDefined = this.get(\"min\");\n          var maxDefined = this.get(\"max\");\n\n          if ($type.isNumber(minDefined) && minDefined > 0) {\n            min = minDefined;\n          }\n\n          if ($type.isNumber(maxDefined) && maxDefined > 0) {\n            max = maxDefined;\n          }\n        }\n      }\n\n      exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\n      power = Math.pow(10, Math.floor(exponent));\n      power = power / 100; // used to be 10 in v4, but this caused issue that there could be limited number of grids with even very small minGridDistance\n      // approximate difference between two grid lines\n\n      var step = Math.ceil(difference / gridCount / power) * power;\n      var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E)); // the step should divide by  2, 5, and 10.\n\n      var stepDivisor = Math.ceil(step / stepPower); // number 0 - 10\n\n      if (stepDivisor > 5) {\n        stepDivisor = 10;\n      } else if (stepDivisor <= 5 && stepDivisor > 2) {\n        stepDivisor = 5;\n      } // now get real step\n\n\n      step = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\n      var maxPrecision = this.get(\"maxPrecision\");\n\n      if ($type.isNumber(maxPrecision)) {\n        var ceiledStep = $math.ceil(step, maxPrecision);\n\n        if (maxPrecision < Number.MAX_VALUE && step !== ceiledStep) {\n          step = ceiledStep;\n        }\n      }\n\n      var decCount = 0; // in case numbers are smaller than 1\n\n      if (stepPower < 1) {\n        // exponent is less then 1 too. Count decimals of exponent\n        decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1; // round step\n\n        step = $math.round(step, decCount);\n      }\n\n      if (!logarithmic) {\n        // final min and max\n        var minCount = Math.floor(min / step);\n        min = $math.round(step * minCount, decCount);\n        var maxCount = void 0;\n\n        if (!strictMode) {\n          maxCount = Math.ceil(max / step);\n        } else {\n          maxCount = Math.floor(max / step);\n        }\n\n        if (maxCount === minCount) {\n          maxCount++;\n        }\n\n        max = $math.round(step * maxCount, decCount);\n\n        if (max < initialMax) {\n          max = max + step;\n        }\n\n        if (min > initialMin) {\n          min = min - step;\n        }\n      }\n\n      step = this.fixSmallStep(step);\n      return {\n        min: min,\n        max: max,\n        step: step\n      };\n    }\n  });\n  /**\r\n   * Returns text to be used in an axis tooltip for specific relative position.\r\n   *\r\n   * @param   position  Position\r\n   * @return            Tooltip text\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getTooltipText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (position) {\n      var numberFormat = this.get(\"tooltipNumberFormat\", this.get(\"numberFormat\"));\n      var formatter = this.getNumberFormatter();\n      var extraDecimals = this.get(\"extraTooltipPrecision\", 0);\n      var decimals = this.getPrivate(\"stepDecimalPlaces\", 0) + extraDecimals;\n      var value = $math.round(this.positionToValue(position), decimals);\n\n      if (numberFormat) {\n        return formatter.format(value, numberFormat);\n      } else {\n        return formatter.format(value, undefined, decimals); //label.set(\"text\", this.getNumberFormatter().format(value, undefined, this.getPrivate(\"stepDecimalPlaces\")));\n      } // //@todo number formatter + tag\n      // return $math.round(this.positionToValue(position), this.getPrivate(\"stepDecimalPlaces\")).toString();\n\n    }\n  });\n  /**\r\n   * Returns a data item from series that is closest to the `position`.\r\n   *\r\n   * @param   series    Series\r\n   * @param   position  Relative position\r\n   * @return            Data item\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getSeriesItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (series, position) {\n      var fieldName = this.getPrivate(\"name\") + this.get(\"renderer\").getPrivate(\"letter\");\n      var value = this.positionToValue(position);\n      var index = undefined;\n      var oldDiff;\n      $array.each(series.dataItems, function (dataItem, i) {\n        var diff = Math.abs(dataItem.get(fieldName) - value);\n\n        if (index === undefined || diff < oldDiff) {\n          index = i;\n          oldDiff = diff;\n        }\n      });\n\n      if (index != null) {\n        return series.dataItems[index];\n      }\n    }\n  });\n  /**\r\n   * Zooms the axis to specific `start` and `end` values.\r\n   *\r\n   * Optional `duration` specifies duration of zoom animation in milliseconds.\r\n   *\r\n   * @param  start     Start value\r\n   * @param  end       End value\r\n   * @param  duration  Duration in milliseconds\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"zoomToValues\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (start, end, duration) {\n      var min = this.getPrivate(\"minFinal\", 0);\n      var max = this.getPrivate(\"maxFinal\", 0);\n\n      if (this.getPrivate(\"min\") != null && this.getPrivate(\"max\") != null) {\n        this.zoom((start - min) / (max - min), (end - min) / (max - min), duration);\n      }\n    }\n  });\n  /**\r\n   * Syncs with a target axis.\r\n   *\r\n   * @param  min  Min\r\n   * @param  max  Max\r\n   * @param  step Step\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"_syncAxes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (min, max, step, syncMin, syncMax, syncStep) {\n      var axis = this.get(\"syncWithAxis\");\n\n      if (axis) {\n        var count = Math.round(syncMax - syncMin) / syncStep;\n        var currentCount = Math.round((max - min) / step);\n        var gridCount = this.get(\"renderer\").gridCount();\n\n        if ($type.isNumber(count) && $type.isNumber(currentCount)) {\n          var synced = false;\n          var c = 0;\n          var diff = (max - min) * 0.01;\n          var omin = min;\n          var omax = max;\n          var ostep = step;\n\n          while (synced != true) {\n            synced = this._checkSync(omin, omax, ostep, count);\n            c++;\n\n            if (c > 500) {\n              synced = true;\n            }\n\n            if (!synced) {\n              if (c / 3 == Math.round(c / 3)) {\n                omin = min - diff * c;\n\n                if (min >= 0 && omin < 0) {\n                  omin = 0;\n                }\n              } else {\n                omax = max + diff * c;\n\n                if (omax <= 0 && omax > 0) {\n                  omax = 0;\n                }\n              }\n\n              var minMaxStep = this._adjustMinMax(omin, omax, gridCount, true);\n\n              omin = minMaxStep.min;\n              omax = minMaxStep.max;\n              ostep = minMaxStep.step;\n            } else {\n              min = omin;\n              max = omax;\n              step = ostep;\n            }\n          }\n        }\n      }\n\n      return {\n        min: min,\n        max: max,\n        step: step\n      };\n    }\n  });\n  /**\r\n   * Returns `true` if axis needs to be resunced with some other axis.\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"_checkSync\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (min, max, step, count) {\n      var currentCount = (max - min) / step;\n\n      for (var i = 1; i < count; i++) {\n        if ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  });\n  Object.defineProperty(ValueAxis, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"ValueAxis\"\n  });\n  Object.defineProperty(ValueAxis, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Axis.classNames.concat([ValueAxis.className])\n  });\n  return ValueAxis;\n}(Axis);\n\nexport { ValueAxis };","map":{"version":3,"sources":["../../../../../../src/.internal/charts/xy/axes/ValueAxis.ts"],"names":[],"mappings":"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","sourcesContent":["import { DataItem } from \"../../../core/render/Component\";\nimport type { AxisRenderer } from \"./AxisRenderer\";\nimport { Axis, IAxisSettings, IAxisPrivate, IAxisDataItem, IAxisEvents } from \"./Axis\";\nimport type { IXYSeriesDataItem, XYSeries } from \"../series/XYSeries\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $math from \"../../../core/util/Math\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport { MultiDisposer } from \"../../../core/util/Disposer\";\n//import * as $order from \"../../../core/util/Order\";\n\nexport interface IValueAxisSettings<R extends AxisRenderer> extends IAxisSettings<R> {\n\n\t/**\n\t * Override minimum value for the axis scale.\n\t *\n\t * NOTE: the axis might modify the minimum value to fit into its scale better,\n\t * unless `strictMinMax` is set to `true`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Custom_scope} for more info\n\t */\n\tmin?: number;\n\n\t/**\n\t * Override maximum value for the axis scale.\n\t *\n\t * NOTE: the axis might modify the maximum value to fit into its scale better,\n\t * unless `strictMinMax` is set to `true`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Custom_scope} for more info\n\t */\n\tmax?: number;\n\n\t/**\n\t * Force axis scale to be precisely at values as set in `min` and/or `max`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Custom_scope} for more info\n\t */\n\tstrictMinMax?: boolean;\n\n\t/**\n\t * If set to `true` axis will use logarithmic scale.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Logarithmic_scale} for more info\n\t */\n\tlogarithmic?: boolean;\n\n\t/**\n\t * Treat zero values as some other value.\n\t *\n\t * Useful in situations where zero would result in error, i.e. logarithmic\n\t * scale.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Logarithmic_scale} for more info\n\t */\n\ttreatZeroAs?: number;\n\n\t/**\n\t * Relative extension to the automatically-calculated minimum value of the\n\t * axis scale.\n\t *\n\t * E..g. `0.1` will extend the scale by 10%, so if max value is `1000` and\n\t * minimum value is `0`, the new minimum value will be `-100`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Relative_scope_extension} for more info\n\t */\n\textraMin?: number;\n\n\t/**\n\t * Relative extension to the automatically-calculated maximum value of the\n\t * axis scale.\n\t *\n\t * E..g. `0.1` will extend the scale by 10%, so if max value is `1000`, the\n\t * axis will now show maximum value of `1100`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Relative_scope_extension} for more info\n\t */\n\textraMax?: number;\n\n\t/**\n\t * Base value, which indicates the threshold between \"positive\" and \"negative\"\n\t * values.\n\t *\n\t * @default 0\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Base_value} for more info\n\t */\n\tbaseValue?: number;\n\n\t/**\n\t * Maximum number of decimals to allow in axis labels.\n\t *\n\t * This setting not only affects formatting of the labels, but also where and\n\t * how many grid/labels are placed on the axis.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Label_format} for more info\n\t */\n\tmaxPrecision?: number;\n\n\t/**\n\t * A function that can be used to specify how to configure axis fills.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Axis_fills} for more info\n\t */\n\tfillRule?: (dataItem: DataItem<IValueAxisDataItem>) => void;\n\n\t/**\n\t * Number format to use for axis labels.\n\t *\n\t * If not set, will use format set in global number formatter.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Label_format} for more info\n\t */\n\tnumberFormat?: string;\n\n\t/**\n\t * A numeric format used for numbers displayed in axis tooltip.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Tooltip_number_format} for more info\n\t */\n\ttooltipNumberFormat?: string | Intl.NumberFormatOptions;\n\n\t/**\n\t * If set, will use greater precision for the axis fooltip than the one for\n\t * axis' actual labels.\n\t *\n\t * E.g. if axis displays labels with one decimal (`1.0`, `1.1`, `1.2`) setting\n\t * this setting to `1` would allow two decimals in axis tooltip, e.g. `1.15`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Tooltip_number_format} for more info\n\t */\n\textraTooltipPrecision?: number;\n\n\t/**\n\t * If your series relies on dynamically calculated values, like value\n\t * changes, percents, or total sums, set this to `true`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Calculated_values} for more info\n\t */\n\tcalculateTotals?: boolean;\n\n\t/**\n\t * This setting can be set to an instance of another [[ValueAxis]].\n\t *\n\t * If set the grid of this axis will be synced with grid of the target axis.\n\t *\n\t * NOTE: this is not 100% guaranteed to work. In some rare cases perfect\n\t * sync might not be possible.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Syncing_grid} for more info\n\t */\n\tsyncWithAxis?: ValueAxis<AxisRenderer>;\n\n}\n\nexport interface IValueAxisDataItem extends IAxisDataItem {\n\n\t/**\n\t * Value of the data item.\n\t */\n\tvalue?: number;\n\n\t/**\n\t * End value for axis items that span multiple values, like axis ranges.\n\t */\n\tendValue?: number;\n\n}\n\nexport interface IMinMaxStep {\n\tmin: number;\n\tmax: number;\n\tstep: number;\n}\n\nexport interface IValueAxisPrivate extends IAxisPrivate {\n\tmin?: number;\n\tmax?: number;\n\tminFinal?: number;\n\tmaxFinal?: number;\n\tselectionMin?: number;\n\tselectionMax?: number;\n\tselectionMinFinal?: number;\n\tselectionMaxFinal?: number;\n\tselectionStepFinal?: number;\n\tstep?: number;\n\tstepDecimalPlaces?: number;\n}\n\nexport interface IValueAxisEvents extends IAxisEvents {\n\n}\n\n/**\n * Creates a value axis.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/} for more info\n * @important\n */\nexport class ValueAxis<R extends AxisRenderer> extends Axis<R> {\n\tpublic static className: string = \"ValueAxis\";\n\tpublic static classNames: Array<string> = Axis.classNames.concat([ValueAxis.className]);\n\n\tdeclare public _settings: IValueAxisSettings<R>;\n\tdeclare public _privateSettings: IValueAxisPrivate;\n\tdeclare public _dataItemSettings: IValueAxisDataItem;\n\tdeclare public _events: IValueAxisEvents;\n\n\tprotected _dirtyExtremes: boolean = false;\n\tprotected _dirtySelectionExtremes: boolean = false;\n\tprotected _deltaMinMax: number = 1;\n\tprotected _minReal: number | undefined;\n\tprotected _maxReal: number | undefined;\n\n\tprotected _baseValue: number = 0;\n\tprotected _syncDp?: MultiDisposer;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyExtremes() {\n\t\tthis._dirtyExtremes = true;\n\t\tthis.markDirty();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtySelectionExtremes() {\n\t\tthis._dirtySelectionExtremes = true;\n\t\tthis.markDirty();\n\t}\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n\t\tthis.setPrivateRaw(\"name\", \"value\");\n\t\tthis.addTag(\"value\");\n\t\tsuper._afterNew();\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isDirty(\"syncWithAxis\")) {\n\t\t\tlet previousValue = this._prevSettings.syncWithAxis;\n\t\t\tif (previousValue) {\n\t\t\t\tif (this._syncDp) {\n\t\t\t\t\tthis._syncDp.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet syncWithAxis = this.get(\"syncWithAxis\");\n\t\t\tif (syncWithAxis) {\n\t\t\t\tthis._syncDp = new MultiDisposer([\n\t\t\t\t\tsyncWithAxis.onPrivate(\"selectionMinFinal\", () => {\n\t\t\t\t\t\tthis._dirtySelectionExtremes = true;\n\t\t\t\t\t}),\n\t\t\t\t\tsyncWithAxis.onPrivate(\"selectionMaxFinal\", () => {\n\t\t\t\t\t\tthis._dirtySelectionExtremes = true;\n\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t}\n\t\t}\n\n\t\t//if (this._dirtyExtremes || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"min\") || this.isDirty(\"max\") || this.isDirty(\"extraMin\") || this.isDirty(\"extraMax\") || this.isDirty(\"logarithmic\") || this.isDirty(\"treatZeroAs\") || this.isDirty(\"baseValue\") || this.isDirty(\"strictMinMax\") || this.isDirty(\"maxPrecision\")) {\n\t\tif (this._sizeDirty || this._dirtyExtremes || this._valuesDirty || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"min\") || this.isDirty(\"max\") || this.isDirty(\"extraMin\") || this.isDirty(\"extraMax\") || this.isDirty(\"logarithmic\") || this.isDirty(\"treatZeroAs\") || this.isDirty(\"baseValue\") || this.isDirty(\"strictMinMax\") || this.isDirty(\"maxPrecision\") || this.isDirty(\"numberFormat\")) {\n\t\t\tthis._getMinMax();\n\t\t\tthis._dirtyExtremes = false;\n\t\t}\n\n\t\tif (this._dirtySelectionExtremes && !this._isPanning) {\n\t\t\tthis._getSelectionMinMax();\n\t\t\tthis._dirtySelectionExtremes = false;\n\t\t}\n\n\t\tthis._groupData();\n\n\t\tif (this._sizeDirty || this._valuesDirty || this.isDirty(\"start\") || this.isDirty(\"end\") || this.isPrivateDirty(\"min\") || this.isPrivateDirty(\"selectionMax\") || this.isPrivateDirty(\"selectionMin\") || this.isPrivateDirty(\"max\") || this.isPrivateDirty(\"step\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"logarithmic\")) {\n\t\t\tthis._handleRangeChange();\n\t\t\tthis._prepareAxisItems();\n\t\t\tthis._updateAxisRanges();\n\t\t}\n\n\t\tthis._baseValue = this.baseValue();\n\n\t}\n\n\tprotected _groupData() {\n\n\t}\n\n\tprotected _formatText(value: number) {\n\t\tconst numberFormat = this.get(\"numberFormat\");\n\t\tconst formatter = this.getNumberFormatter();\n\n\t\tlet text = \"\";\n\n\t\tif (numberFormat) {\n\t\t\ttext = formatter.format(value, numberFormat);\n\t\t}\n\t\telse {\n\t\t\ttext = formatter.format(value, undefined, this.getPrivate(\"stepDecimalPlaces\"));\n\t\t}\n\t\treturn text;\n\t}\n\n\tprotected _prepareAxisItems() {\n\t\tconst min = this.getPrivate(\"min\");\n\t\tconst max = this.getPrivate(\"max\");\n\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\n\n\t\t\tconst logarithmic = this.get(\"logarithmic\");\n\t\t\tconst step = this.getPrivate(\"step\")!;\n\t\t\tconst selectionMin = this.getPrivate(\"selectionMin\")!;\n\t\t\tconst selectionMax = this.getPrivate(\"selectionMax\")! + step;\n\n\t\t\tlet value = selectionMin - step;\n\t\t\tlet i = 0;\n\n\t\t\tif (logarithmic) {\n\t\t\t\tvalue = selectionMin;\n\t\t\t}\n\n\t\t\twhile (value < selectionMax) {\n\t\t\t\tlet dataItem: DataItem<this[\"_dataItemSettings\"]>;\n\t\t\t\tif (this.dataItems.length < i + 1) {\n\t\t\t\t\tdataItem = new DataItem(this, undefined, {});\n\t\t\t\t\tthis._dataItems.push(dataItem);\n\t\t\t\t\tthis.processDataItem(dataItem);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdataItem = this.dataItems[i];\n\t\t\t\t}\n\n\t\t\t\tthis._createAssets(dataItem, []);\n\n\t\t\t\tif (dataItem.isHidden()) {\n\t\t\t\t\tdataItem.show();\n\t\t\t\t}\n\n\t\t\t\tdataItem.setRaw(\"value\", value);\n\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tif (label) {\n\t\t\t\t\tlabel.set(\"text\", this._formatText(value));\n\t\t\t\t}\n\n\t\t\t\tthis._prepareDataItem(dataItem);\n\n\t\t\t\tif (!logarithmic) {\n\t\t\t\t\tvalue += step;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlet differencePower = Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E;\n\t\t\t\t\tif (differencePower > 1) {\n\t\t\t\t\t\tvalue = Math.pow(10, Math.log(min) * Math.LOG10E + i);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvalue += step;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\n\t\t\t\tif (stepPower < 1) {\n\t\t\t\t\t// exponent is less then 1 too. Count decimals of exponent\n\t\t\t\t\tlet decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\n\t\t\t\t\t// round value to avoid floating point issues\n\t\t\t\t\tvalue = $math.round(value, decCount);\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\tfor (let j = i; j < this.dataItems.length; j++) {\n\t\t\t\tthis.dataItems[j].hide();\n\t\t\t}\n\n\t\t\t$array.each(this.series, (series) => {\n\t\t\t\tif (series.inited) {\n\t\t\t\t\tseries._markDirtyAxes();\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tthis._updateGhost();\n\t\t}\n\t}\n\n\n\tpublic _prepareDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, count?: number) {\n\t\tlet renderer = this.get(\"renderer\");\n\t\tlet value = dataItem.get(\"value\")!;\n\t\tlet endValue = dataItem.get(\"endValue\");\n\n\t\tlet position = this.valueToPosition(value);\n\n\t\tlet endPosition = position;\n\t\tlet fillEndPosition = this.valueToPosition(value + this.getPrivate(\"step\")!);\n\n\t\tif ($type.isNumber(endValue)) {\n\t\t\tendPosition = this.valueToPosition(endValue);\n\t\t\tfillEndPosition = endPosition;\n\t\t}\n\n\t\trenderer.updateLabel(dataItem.get(\"label\"), position, endPosition, count);\n\n\t\tconst grid = dataItem.get(\"grid\");\n\t\trenderer.updateGrid(grid, position, endPosition);\n\t\tif (grid) {\n\t\t\tif (value == this.get(\"baseValue\", 0)) {\n\t\t\t\tgrid.addTag(\"base\");\n\t\t\t\tgrid._applyThemes();\n\t\t\t}\n\t\t\telse if (grid.hasTag(\"base\")) {\n\t\t\t\tgrid.removeTag(\"base\");\n\t\t\t\tgrid._applyThemes();\n\t\t\t}\n\t\t}\n\n\t\trenderer.updateTick(dataItem.get(\"tick\"), position, endPosition, count);\n\t\trenderer.updateFill(dataItem.get(\"axisFill\"), position, fillEndPosition);\n\t\tthis._processBullet(dataItem);\n\t\trenderer.updateBullet(dataItem.get(\"bullet\"), position, endPosition);\n\n\t\tif (!dataItem.get(\"isRange\")) {\n\t\t\tconst fillRule = this.get(\"fillRule\");\n\t\t\tif (fillRule) {\n\t\t\t\tfillRule(dataItem)\n\t\t\t}\n\t\t}\n\t}\n\n\n\tprotected _handleRangeChange() {\n\t\tlet selectionMin: number = this.positionToValue(this.get(\"start\", 0));\n\t\tlet selectionMax: number = this.positionToValue(this.get(\"end\", 1));\n\n\t\tconst gridCount = this.get(\"renderer\").gridCount();\n\t\tlet minMaxStep: IMinMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n\n\t\tlet stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\n\t\tthis.setPrivateRaw(\"stepDecimalPlaces\", stepDecimalPlaces);\n\n\t\tselectionMin = $math.round(selectionMin, stepDecimalPlaces);\n\t\tselectionMax = $math.round(selectionMax, stepDecimalPlaces);\n\n\t\tminMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n\n\t\tlet step = minMaxStep.step;\n\t\tselectionMin = minMaxStep.min;\n\t\tselectionMax = minMaxStep.max;\n\n\t\tif (this.getPrivate(\"selectionMin\") !== selectionMin || this.getPrivate(\"selectionMax\") !== selectionMax || this.getPrivate(\"step\") !== step) {\n\t\t\tthis.setPrivateRaw(\"selectionMin\", selectionMin);\n\t\t\tthis.setPrivateRaw(\"selectionMax\", selectionMax);\n\t\t\tthis.setPrivateRaw(\"step\", step);\n\t\t}\n\t}\n\n\t/**\n\t * Converts a relative position to a corresponding numeric value from axis\n\t * scale.\n\t *\n\t * @param   position  Relative position\n\t * @return            Value\n\t */\n\tpublic positionToValue(position: number): number {\n\t\tconst min = this.getPrivate(\"min\")!;\n\t\tconst max = this.getPrivate(\"max\")!;\n\n\t\tif (!this.get(\"logarithmic\")) {\n\t\t\treturn position * (max - min) + min;\n\t\t}\n\t\telse {\n\t\t\treturn Math.pow(Math.E, (position * ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E)) + Math.log(min) * Math.LOG10E) / Math.LOG10E);\n\t\t}\n\t}\n\n\t/**\n\t * Convers value to a relative position on axis.\n\t *\n\t * @param   value  Value\n\t * @return         Relative position\n\t */\n\tpublic valueToPosition(value: number): number {\n\n\t\tconst min = this.getPrivate(\"min\")!;\n\t\tconst max = this.getPrivate(\"max\")!;\n\n\t\tif (!this.get(\"logarithmic\")) {\n\t\t\treturn (value - min) / (max - min);\n\t\t}\n\t\telse {\n\t\t\tif (value <= 0) {\n\t\t\t\tlet treatZeroAs = this.get(\"treatZeroAs\");\n\t\t\t\tif ($type.isNumber(treatZeroAs)) {\n\t\t\t\t\tvalue = treatZeroAs;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic valueToFinalPosition(value: number): number {\n\n\t\tconst min = this.getPrivate(\"minFinal\")!;\n\t\tconst max = this.getPrivate(\"maxFinal\")!;\n\n\t\tif (!this.get(\"logarithmic\")) {\n\t\t\treturn (value - min) / (max - min);\n\t\t}\n\t\telse {\n\t\t\tif (value <= 0) {\n\t\t\t\tlet treatZeroAs = this.get(\"treatZeroAs\");\n\t\t\t\tif ($type.isNumber(treatZeroAs)) {\n\t\t\t\t\tvalue = treatZeroAs;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E));\n\t\t}\n\t}\n\n\t/**\n\t * Returns X coordinate in pixels corresponding to specific value.\n\t *\n\t * @param   value     Numeric value\n\t * @param   location  Location\n\t * @param   baseValue Base value\n\t * @return            X coordinate\n\t */\n\tpublic getX(value: number, location: number, baseValue: number) {\n\t\tvalue = baseValue + (value - baseValue) * location;\n\n\t\tconst position = this.valueToPosition(value);\n\t\treturn this._settings.renderer.positionToCoordinate(position);\n\t}\n\n\t/**\n\t * Returns X coordinate in pixels corresponding to specific value.\n\t *\n\t * @param   value     Numeric value\n\t * @param   location  Location\n\t * @param   baseValue Base value\n\t * @return            X coordinate\n\t */\n\tpublic getY(value: number, location: number, baseValue: number) {\n\t\tvalue = baseValue + (value - baseValue) * location;\n\n\t\tconst position = this.valueToPosition(value)\n\t\treturn this._settings.renderer.positionToCoordinate(position);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemCoordinateX(dataItem: DataItem<IXYSeriesDataItem>, field: string, _cellLocation: number, axisLocation: number): number {\n\t\treturn this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, _cellLocation, axisLocation));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemPositionX(dataItem: DataItem<IXYSeriesDataItem>, field: string, _cellLocation: number, axisLocation: number) {\n\t\tlet value = dataItem.get(field as any);\n\n\t\tconst stackToItem = dataItem.get(\"stackToItemX\");\n\t\tif (stackToItem) {\n\t\t\tconst series = dataItem.component as XYSeries;\n\t\t\tvalue = value * axisLocation + series.getStackedXValueWorking(dataItem, field);\n\t\t}\n\t\telse {\n\t\t\tvalue = this._baseValue + (value - this._baseValue) * axisLocation;\n\t\t}\n\n\t\treturn this.valueToPosition(value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemCoordinateY(dataItem: DataItem<IXYSeriesDataItem>, field: string, _cellLocation: number, axisLocation: number): number {\n\t\treturn this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, _cellLocation, axisLocation));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemPositionY(dataItem: DataItem<IXYSeriesDataItem>, field: string, _cellLocation: number, axisLocation: number): number {\n\t\tlet value = dataItem.get(field as any);\n\n\t\tconst stackToItem = dataItem.get(\"stackToItemY\");\n\t\tif (stackToItem) {\n\t\t\tconst series = dataItem.component as XYSeries;\n\t\t\tvalue = value * axisLocation + series.getStackedYValueWorking(dataItem, field);\n\t\t}\n\t\telse {\n\t\t\tvalue = this._baseValue + (value - this._baseValue) * axisLocation;\n\t\t}\n\n\t\treturn this.valueToPosition(value);\n\t}\n\n\t/**\n\t * Returns relative position of axis' `baseValue`.\n\t *\n\t * @return  Base value position\n\t */\n\tpublic basePosition(): number {\n\t\treturn this.valueToPosition(this.baseValue());\n\t}\n\n\t/**\n\t * Base value of the [[ValueAxis]], which determines positive and negative\n\t * values.\n\t *\n\t * @return Base value\n\t */\n\tpublic baseValue(): number {\n\t\tconst min = Math.min(this.getPrivate(\"minFinal\", -Infinity), this.getPrivate(\"selectionMin\", -Infinity));\n\t\tconst max = Math.max(this.getPrivate(\"maxFinal\", Infinity), this.getPrivate(\"selectionMax\", Infinity));\n\t\tlet baseValue = this.get(\"baseValue\", 0);\n\n\t\tif (baseValue < min) {\n\t\t\tbaseValue = min;\n\t\t}\n\n\t\tif (baseValue > max) {\n\t\t\tbaseValue = max\n\t\t}\n\n\t\treturn baseValue;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic cellEndValue(value: number): number {\n\t\treturn value;\n\t}\n\n\tprotected fixSmallStep(step: number): number {\n\t\t// happens because of floating point error\n\t\tif (1 + step === 1) {\n\t\t\tstep *= 2;\n\t\t\treturn this.fixSmallStep(step);\n\t\t}\n\t\treturn step;\n\t}\n\n\tprotected _fixMin(min: number) {\n\t\treturn min;\n\t}\n\n\tprotected _fixMax(max: number) {\n\t\treturn max;\n\t}\n\n\tpublic _calculateTotals() {\n\t\tif (this.get(\"calculateTotals\")) {\n\t\t\tlet series = this.series[0];\n\t\t\tif (series) {\n\t\t\t\tlet startIndex = series.getPrivate(\"startIndex\", 0);\n\n\t\t\t\tif (series.dataItems.length > 0) {\n\n\t\t\t\t\tif (startIndex > 0) {\n\t\t\t\t\t\tstartIndex--;\n\t\t\t\t\t}\n\t\t\t\t\tlet endIndex = series.getPrivate(\"endIndex\", series.dataItems.length);\n\t\t\t\t\tif (endIndex < series.dataItems.length) {\n\t\t\t\t\t\tendIndex++;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet field: string | undefined;\n\t\t\t\t\tlet vc: string | undefined;\n\n\t\t\t\t\tif (series.get(\"yAxis\") == this) {\n\t\t\t\t\t\tfield = \"valueY\";\n\t\t\t\t\t\tvc = \"vcy\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (series.get(\"xAxis\") == this) {\n\t\t\t\t\t\tfield = \"valueX\";\n\t\t\t\t\t\tvc = \"vcx\";\n\t\t\t\t\t}\n\n\t\t\t\t\tlet fieldWorking = field + \"Working\";\n\n\t\t\t\t\tif (field) {\n\t\t\t\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\t\t\t\tlet sum = 0;\n\t\t\t\t\t\t\tlet total = 0;\n\n\t\t\t\t\t\t\t$array.each(this.series, (series) => {\n\t\t\t\t\t\t\t\tif (!series.get(\"excludeFromTotal\")) {\n\t\t\t\t\t\t\t\t\tlet dataItem = series.dataItems[i];\n\t\t\t\t\t\t\t\t\tif (dataItem) {\n\t\t\t\t\t\t\t\t\t\tlet value = dataItem.get(fieldWorking as any) * series.get(vc as any);\n\n\t\t\t\t\t\t\t\t\t\tif (value != undefined) {\n\t\t\t\t\t\t\t\t\t\t\tsum += value;\n\t\t\t\t\t\t\t\t\t\t\ttotal += Math.abs(value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t$array.each(this.series, (series) => {\n\t\t\t\t\t\t\t\tif (!series.get(\"excludeFromTotal\")) {\n\t\t\t\t\t\t\t\t\tlet dataItem = series.dataItems[i];\n\t\t\t\t\t\t\t\t\tif (dataItem) {\n\t\t\t\t\t\t\t\t\t\tlet value = dataItem.get(fieldWorking as any) * series.get(vc as any);\n\n\t\t\t\t\t\t\t\t\t\tif (value != undefined) {\n\t\t\t\t\t\t\t\t\t\t\tdataItem.set((field + \"Total\") as any, total);\n\t\t\t\t\t\t\t\t\t\t\tdataItem.set((field + \"Sum\") as any, sum);\n\t\t\t\t\t\t\t\t\t\t\tdataItem.set((field + \"TotalPercent\") as any, value / total * 100);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _getSelectionMinMax() {\n\t\tconst min = this.getPrivate(\"minFinal\");\n\t\tconst max = this.getPrivate(\"maxFinal\");\n\n\t\tconst minDefined = this.get(\"min\");\n\t\tconst maxDefined = this.get(\"max\");\n\n\t\tconst extraMin = this.get(\"extraMin\", 0);\n\t\tconst extraMax = this.get(\"extraMax\", 0);\n\n\t\tconst gridCount = this.get(\"renderer\").gridCount();\n\n\t\tconst strictMinMax = this.get(\"strictMinMax\", false);\n\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\n\n\t\t\tlet selectionMin = max;\n\t\t\tlet selectionMax = min;\n\n\t\t\t$array.each(this.series, (series) => {\n\t\t\t\tif (!series.get(\"ignoreMinMax\")) {\n\t\t\t\t\tlet seriesMin: number | undefined;\n\t\t\t\t\tlet seriesMax: number | undefined;\n\t\t\t\t\tif (series.get(\"xAxis\") === this) {\n\t\t\t\t\t\tseriesMin = series.getPrivate(\"selectionMinX\", series.getPrivate(\"minX\"));\n\t\t\t\t\t\tseriesMax = series.getPrivate(\"selectionMaxX\", series.getPrivate(\"maxX\"));\n\t\t\t\t\t}\n\t\t\t\t\telse if (series.get(\"yAxis\") === this) {\n\t\t\t\t\t\tseriesMin = series.getPrivate(\"selectionMinY\", series.getPrivate(\"minY\"));\n\t\t\t\t\t\tseriesMax = series.getPrivate(\"selectionMaxY\", series.getPrivate(\"maxY\"));\n\t\t\t\t\t}\n\t\t\t\t\tif (!series.isHidden() && !series.isShowing()) {\n\t\t\t\t\t\tif ($type.isNumber(seriesMin)) {\n\t\t\t\t\t\t\tselectionMin = Math.min(selectionMin, seriesMin);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($type.isNumber(seriesMax)) {\n\t\t\t\t\t\t\tselectionMax = Math.max(selectionMax, seriesMax);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tif (selectionMin > selectionMax) {\n\t\t\t\t[selectionMin, selectionMax] = [selectionMax, selectionMin]\n\t\t\t}\n\n\t\t\tif ($type.isNumber(minDefined)) {\n\t\t\t\tif (strictMinMax) {\n\t\t\t\t\tselectionMin = minDefined;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tselectionMin = min;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (strictMinMax) {\n\t\t\t\tif ($type.isNumber(this._minReal)) {\n\t\t\t\t\tselectionMin = this._minReal;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($type.isNumber(maxDefined)) {\n\t\t\t\tif (strictMinMax) {\n\t\t\t\t\tselectionMax = maxDefined;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tselectionMax = max;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (strictMinMax) {\n\t\t\t\tif ($type.isNumber(this._maxReal)) {\n\t\t\t\t\tselectionMax = this._maxReal;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (selectionMin === selectionMax) {\n\t\t\t\tselectionMin -= this._deltaMinMax;\n\t\t\t\tselectionMax += this._deltaMinMax;\n\n\t\t\t\tlet minMaxStep2 = this._adjustMinMax(selectionMin, selectionMax, gridCount, strictMinMax);\n\t\t\t\tselectionMin = minMaxStep2.min;\n\t\t\t\tselectionMax = minMaxStep2.max;\n\t\t\t}\n\n\t\t\tlet minMaxStep: IMinMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount);\n\n\t\t\tselectionMin = minMaxStep.min;\n\t\t\tselectionMax = minMaxStep.max;\n\n\t\t\tselectionMin -= (selectionMax - selectionMin) * extraMin;\n\t\t\tselectionMax += (selectionMax - selectionMin) * extraMax;\n\n\t\t\tselectionMin = $math.fitToRange(selectionMin, min, max);\n\t\t\tselectionMax = $math.fitToRange(selectionMax, min, max);\n\n\t\t\t// do it for the second time !important\t\t\t\n\t\t\tminMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n\n\t\t\tif (!strictMinMax) {\n\t\t\t\tselectionMin = minMaxStep.min;\n\t\t\t\tselectionMax = minMaxStep.max;\n\t\t\t}\n\n\t\t\tconst syncWithAxis = this.get(\"syncWithAxis\");\n\t\t\tif (syncWithAxis) {\n\t\t\t\tminMaxStep = this._syncAxes(selectionMin, selectionMax, minMaxStep.step, syncWithAxis.getPrivate(\"selectionMinFinal\", syncWithAxis.getPrivate(\"minFinal\", 0)), syncWithAxis.getPrivate(\"selectionMaxFinal\", syncWithAxis.getPrivate(\"maxFinal\", 1)), syncWithAxis.getPrivate(\"selectionStepFinal\", syncWithAxis.getPrivate(\"step\", 1)));\n\n\t\t\t\tselectionMin = minMaxStep.min;\n\t\t\t\tselectionMax = minMaxStep.max;\n\t\t\t}\n\n\t\t\tif (strictMinMax) {\n\t\t\t\tif ($type.isNumber(minDefined)) {\n\t\t\t\t\tselectionMin = Math.max(selectionMin, minDefined);\n\t\t\t\t}\n\t\t\t\tif ($type.isNumber(maxDefined)) {\n\t\t\t\t\tselectionMax = Math.min(selectionMax, maxDefined);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet start = this.valueToFinalPosition(selectionMin);\n\t\t\tlet end = this.valueToFinalPosition(selectionMax);\n\n\t\t\tthis.setPrivateRaw(\"selectionMinFinal\", selectionMin);\n\t\t\tthis.setPrivateRaw(\"selectionMaxFinal\", selectionMax);\n\t\t\tthis.setPrivateRaw(\"selectionStepFinal\", minMaxStep.step);\n\n\t\t\tthis.zoom(start, end);\n\t\t}\n\t}\n\n\n\tprotected _getMinMax() {\n\t\tlet minDefined = this.get(\"min\");\n\t\tlet maxDefined = this.get(\"max\");\n\n\t\tlet min = Infinity;\n\t\tlet max = -Infinity;\n\n\t\tlet extraMin = this.get(\"extraMin\", 0);\n\t\tlet extraMax = this.get(\"extraMax\", 0);\n\t\tlet minDiff = Infinity;\n\n\t\t$array.each(this.series, (series) => {\n\t\t\tif (!series.get(\"ignoreMinMax\")) {\n\t\t\t\tlet seriesMin: number | undefined;\n\t\t\t\tlet seriesMax: number | undefined;\n\t\t\t\tif (series.get(\"xAxis\") === this) {\n\t\t\t\t\tseriesMin = series.getPrivate(\"minX\");\n\t\t\t\t\tseriesMax = series.getPrivate(\"maxX\");\n\t\t\t\t}\n\t\t\t\telse if (series.get(\"yAxis\") === this) {\n\t\t\t\t\tseriesMin = series.getPrivate(\"minY\");\n\t\t\t\t\tseriesMax = series.getPrivate(\"maxY\");\n\t\t\t\t}\n\n\t\t\t\tif ($type.isNumber(seriesMin) && $type.isNumber(seriesMax)) {\n\t\t\t\t\tmin = Math.min(min, seriesMin);\n\t\t\t\t\tmax = Math.max(max, seriesMax);\n\n\t\t\t\t\tlet diff = seriesMax - seriesMin;\n\n\t\t\t\t\tif (diff <= 0) {\n\t\t\t\t\t\tdiff = Math.abs(seriesMax / 100);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diff < minDiff) {\n\t\t\t\t\t\tminDiff = diff;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tif (this.get(\"logarithmic\")) {\n\t\t\tlet treatZeroAs = this.get(\"treatZeroAs\");\n\t\t\tif ($type.isNumber(treatZeroAs)) {\n\t\t\t\tif (min <= 0) {\n\t\t\t\t\tmin = treatZeroAs;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (min <= 0) {\n\t\t\t\tnew Error(\"Logarithmic value axis can not have values <= 0.\");\n\t\t\t}\n\t\t}\n\n\t\tif (min === 0 && max === 0) {\n\t\t\tmax = 0.9;\n\t\t\tmin = -0.9;\n\t\t}\n\n\t\tif ($type.isNumber(minDefined)) {\n\t\t\tmin = minDefined;\n\t\t}\n\t\tif ($type.isNumber(maxDefined)) {\n\t\t\tmax = maxDefined;\n\t\t}\n\n\t\t// meaning no min/max found on series/ranges and no min/max was defined\n\t\tif (min === Infinity && max === -Infinity) {\n\t\t\treturn;\n\t\t}\n\n\t\t// adapter\n\t\tlet minAdapted = this.adapters.fold(\"min\", min);\n\t\tlet maxAdapted = this.adapters.fold(\"max\", max);\n\n\t\tif ($type.isNumber(minAdapted)) {\n\t\t\tmin = minAdapted;\n\t\t}\n\n\t\tif ($type.isNumber(maxAdapted)) {\n\t\t\tmax = maxAdapted;\n\t\t}\n\n\t\t// DateAxis does some magic here\n\t\tmin = this._fixMin(min);\n\t\tmax = this._fixMax(max);\n\n\t\t// this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\n\t\tif (max - min <= 1 / Math.pow(10, 15)) {\n\t\t\tif (max - min !== 0) {\n\t\t\t\tthis._deltaMinMax = (max - min) / 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// the number by which we need to raise 10 to get difference\n\t\t\t\tlet exponent: number = Math.log(Math.abs(max)) * Math.LOG10E;\n\n\t\t\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\n\t\t\t\tlet power = Math.pow(10, Math.floor(exponent));\n\n\t\t\t\t// reduce this number by 10 times\n\t\t\t\tpower = power / 10;\n\n\t\t\t\tthis._deltaMinMax = power;\n\t\t\t}\n\n\t\t\tmin -= this._deltaMinMax;\n\t\t\tmax += this._deltaMinMax;\n\t\t}\n\n\t\t// add extras\n\t\tmin -= (max - min) * extraMin;\n\t\tmax += (max - min) * extraMax;\n\n\t\tthis._minReal = min;\n\t\tthis._maxReal = max;\n\n\t\tlet strict = this.get(\"strictMinMax\");\n\t\tif ($type.isNumber(maxDefined)) {\n\t\t\tstrict = true;\n\t\t}\n\n\t\tlet gridCount = this.get(\"renderer\").gridCount();\n\n\t\tlet minMaxStep: IMinMaxStep = this._adjustMinMax(min, max, gridCount, strict);\n\n\t\tmin = minMaxStep.min;\n\t\tmax = minMaxStep.max;\n\n\t\t// do it for the second time with strict true (importat!)\n\t\tminMaxStep = this._adjustMinMax(min, max, gridCount, true);\n\n\t\tmin = minMaxStep.min;\n\t\tmax = minMaxStep.max;\n\n\t\t// return min max if strict\n\t\tif (this.get(\"strictMinMax\")) {\n\t\t\tif ($type.isNumber(minDefined)) {\n\t\t\t\tmin = minDefined;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmin = this._minReal;\n\t\t\t}\n\n\t\t\tif ($type.isNumber(maxDefined)) {\n\t\t\t\tmax = maxDefined;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmax = this._maxReal;\n\t\t\t}\n\n\t\t\tif (max - min <= 0.00000001) {\n\t\t\t\tmin -= this._deltaMinMax;\n\t\t\t\tmax += this._deltaMinMax;\n\t\t\t}\n\n\t\t\tmin -= (max - min) * extraMin;\n\t\t\tmax += (max - min) * extraMax;\n\t\t}\n\n\t\tminAdapted = this.adapters.fold(\"min\", min);\n\t\tmaxAdapted = this.adapters.fold(\"max\", max);\n\n\t\tif ($type.isNumber(minAdapted)) {\n\t\t\tmin = minAdapted;\n\t\t}\n\n\t\tif ($type.isNumber(maxAdapted)) {\n\t\t\tmax = maxAdapted;\n\t\t}\n\n\t\tif (minDiff == Infinity) {\n\t\t\tminDiff = (max - min)\n\t\t}\n\n\t\tconst syncWithAxis = this.get(\"syncWithAxis\");\n\t\tif (syncWithAxis) {\n\t\t\tminMaxStep = this._syncAxes(min, max, minMaxStep.step, syncWithAxis.getPrivate(\"minFinal\", syncWithAxis.getPrivate(\"min\", 0)), syncWithAxis.getPrivate(\"maxFinal\", syncWithAxis.getPrivate(\"max\", 1)), syncWithAxis.getPrivate(\"step\", 1));\n\t\t\tmin = minMaxStep.min;\n\t\t\tmax = minMaxStep.max;\n\t\t}\n\n\t\tthis.setPrivateRaw(\"maxZoomFactor\", (max - min) / minDiff * this.get(\"maxZoomFactor\", 100));\n\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\n\t\t\tif (this.getPrivate(\"minFinal\") !== min || this.getPrivate(\"maxFinal\") !== max) {\n\t\t\t\tthis.setPrivate(\"minFinal\", min);\n\t\t\t\tthis.setPrivate(\"maxFinal\", max);\n\n\t\t\t\tconst duration = this.get(\"interpolationDuration\", 0);\n\t\t\t\tconst easing = this.get(\"interpolationEasing\");\n\n\t\t\t\tthis.animatePrivate({ key: \"min\", to: min, duration, easing });\n\t\t\t\tthis.animatePrivate({ key: \"max\", to: max, duration, easing });\n\t\t\t}\n\t\t}\n\t}\n\n\n\tprotected _adjustMinMax(min: number, max: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\n\t\tconst logarithmic = this.get(\"logarithmic\");\n\t\t// will fail if 0\n\t\tif (gridCount <= 1) {\n\t\t\tgridCount = 1;\n\t\t}\n\n\t\tgridCount = Math.round(gridCount);\n\n\t\tlet initialMin: number = min;\n\t\tlet initialMax: number = max;\n\n\t\tlet difference = max - min;\n\n\t\t// in case min and max is the same, use max\n\t\tif (difference === 0) {\n\t\t\tdifference = Math.abs(max);\n\t\t}\n\n\t\t// the number by which we need to raise 10 to get difference\n\t\tlet exponent: number = Math.log(Math.abs(difference)) * Math.LOG10E;\n\n\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\n\t\tlet power = Math.pow(10, Math.floor(exponent));\n\n\t\t// reduce this number by 10 times\n\t\tpower = power / 10;\n\n\t\tlet extra: number = power;\n\t\tif (strictMode) {\n\t\t\textra = 0;\n\t\t}\n\n\t\tif (!logarithmic) {\n\t\t\t// round down min\n\t\t\tif (strictMode) {\n\t\t\t\tmin = Math.floor(min / power) * power;\n\t\t\t\t// round up max\n\t\t\t\tmax = Math.ceil(max / power) * power;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmin = Math.ceil(min / power) * power - extra;\n\t\t\t\t// round up max\n\t\t\t\tmax = Math.floor(max / power) * power + extra;\n\t\t\t}\n\n\t\t\t// don't let min go below 0 if real min is >= 0\n\t\t\tif (min < 0 && initialMin >= 0) {\n\t\t\t\tmin = 0;\n\t\t\t}\n\t\t\t// don't let max go above 0 if real max is <= 0\n\t\t\tif (max > 0 && initialMax <= 0) {\n\t\t\t\tmax = 0;\n\t\t\t}\n\t\t}\n\t\t// logarithmic\n\t\telse {\n\t\t\tif (min <= 0) {\n\t\t\t\t//throw Error(\"Logarithmic value axis can not have values <= 0.\");\n\t\t\t\tmin = this.get(\"baseValue\", 0);\n\t\t\t}\n\n\t\t\tif (min === Infinity) {\n\t\t\t\tmin = 1;\n\t\t\t}\n\n\t\t\tif (max === -Infinity) {\n\t\t\t\tmax = 10;\n\t\t\t}\n\n\t\t\tmin = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\n\t\t\tmax = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\n\n\t\t\tif (this.get(\"strictMinMax\")) {\n\t\t\t\tlet minDefined = this.get(\"min\");\n\t\t\t\tlet maxDefined = this.get(\"max\");\n\t\t\t\tif ($type.isNumber(minDefined) && minDefined > 0) {\n\t\t\t\t\tmin = minDefined;\n\t\t\t\t}\n\t\t\t\tif ($type.isNumber(maxDefined) && maxDefined > 0) {\n\t\t\t\t\tmax = maxDefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\texponent = Math.log(Math.abs(difference)) * Math.LOG10E;\n\t\tpower = Math.pow(10, Math.floor(exponent));\n\t\tpower = power / 100; // used to be 10 in v4, but this caused issue that there could be limited number of grids with even very small minGridDistance\n\n\t\t// approximate difference between two grid lines\n\t\tlet step = Math.ceil((difference / gridCount) / power) * power;\n\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\n\n\t\t// the step should divide by  2, 5, and 10.\n\t\tlet stepDivisor: number = Math.ceil(step / stepPower); // number 0 - 10\n\n\n\t\tif (stepDivisor > 5) {\n\t\t\tstepDivisor = 10;\n\t\t}\n\t\telse if (stepDivisor <= 5 && stepDivisor > 2) {\n\t\t\tstepDivisor = 5;\n\t\t}\n\n\t\t// now get real step\n\t\tstep = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\n\n\t\tlet maxPrecision = this.get(\"maxPrecision\");\n\t\tif ($type.isNumber(maxPrecision)) {\n\t\t\tlet ceiledStep = $math.ceil(step, maxPrecision);\n\t\t\tif (maxPrecision < Number.MAX_VALUE && step !== ceiledStep) {\n\t\t\t\tstep = ceiledStep;\n\t\t\t}\n\t\t}\n\n\t\tlet decCount: number = 0;\n\t\t// in case numbers are smaller than 1\n\t\tif (stepPower < 1) {\n\t\t\t// exponent is less then 1 too. Count decimals of exponent\n\t\t\tdecCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\n\t\t\t// round step\n\t\t\tstep = $math.round(step, decCount);\n\t\t}\n\t\tif (!logarithmic) {\n\t\t\t// final min and max\n\t\t\tlet minCount = Math.floor(min / step);\n\n\t\t\tmin = $math.round(step * minCount, decCount);\n\n\t\t\tlet maxCount: number;\n\n\t\t\tif (!strictMode) {\n\t\t\t\tmaxCount = Math.ceil(max / step);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmaxCount = Math.floor(max / step);\n\t\t\t}\n\n\t\t\tif (maxCount === minCount) {\n\t\t\t\tmaxCount++;\n\t\t\t}\n\n\t\t\tmax = $math.round(step * maxCount, decCount);\n\n\t\t\tif (max < initialMax) {\n\t\t\t\tmax = max + step;\n\t\t\t}\n\n\t\t\tif (min > initialMin) {\n\t\t\t\tmin = min - step;\n\t\t\t}\n\t\t}\n\n\t\tstep = this.fixSmallStep(step);\n\n\t\treturn { min: min, max: max, step: step };\n\t}\n\n\t/**\n\t * Returns text to be used in an axis tooltip for specific relative position.\n\t *\n\t * @param   position  Position\n\t * @return            Tooltip text\n\t */\n\tpublic getTooltipText(position: number): string | undefined {\n\t\tconst numberFormat = this.get(\"tooltipNumberFormat\", this.get(\"numberFormat\"));\n\t\tconst formatter = this.getNumberFormatter();\n\t\tconst extraDecimals = this.get(\"extraTooltipPrecision\", 0);\n\t\tconst decimals = this.getPrivate(\"stepDecimalPlaces\", 0) + extraDecimals;\n\t\tconst value = $math.round(this.positionToValue(position), decimals);\n\n\t\tif (numberFormat) {\n\t\t\treturn formatter.format(value, numberFormat);\n\t\t}\n\t\telse {\n\t\t\treturn formatter.format(value, undefined, decimals);\n\t\t\t//label.set(\"text\", this.getNumberFormatter().format(value, undefined, this.getPrivate(\"stepDecimalPlaces\")));\n\t\t}\n\n\t\t// //@todo number formatter + tag\n\t\t// return $math.round(this.positionToValue(position), this.getPrivate(\"stepDecimalPlaces\")).toString();\n\t}\n\n\t/**\n\t * Returns a data item from series that is closest to the `position`.\n\t *\n\t * @param   series    Series\n\t * @param   position  Relative position\n\t * @return            Data item\n\t */\n\tpublic getSeriesItem(series: XYSeries, position: number): DataItem<IXYSeriesDataItem> | undefined {\n\t\tlet fieldName = <any>(this.getPrivate(\"name\")! + this.get(\"renderer\").getPrivate(\"letter\")!);\n\t\tlet value = this.positionToValue(position);\n\n\t\tlet index: number | undefined = undefined;\n\t\tlet oldDiff: number;\n\t\t$array.each(series.dataItems, (dataItem, i) => {\n\t\t\tconst diff = Math.abs(dataItem.get(fieldName) - value);\n\t\t\tif (index === undefined || diff < oldDiff) {\n\t\t\t\tindex = i;\n\t\t\t\toldDiff = diff;\n\t\t\t}\n\t\t});\n\n\t\tif (index != null) {\n\t\t\treturn series.dataItems[index];\n\t\t}\n\t}\n\n\t/**\n\t * Zooms the axis to specific `start` and `end` values.\n\t *\n\t * Optional `duration` specifies duration of zoom animation in milliseconds.\n\t *\n\t * @param  start     Start value\n\t * @param  end       End value\n\t * @param  duration  Duration in milliseconds\n\t */\n\tpublic zoomToValues(start: number, end: number, duration?: number) {\n\t\tconst min = this.getPrivate(\"minFinal\", 0);\n\t\tconst max = this.getPrivate(\"maxFinal\", 0);\n\t\tif (this.getPrivate(\"min\") != null && this.getPrivate(\"max\") != null) {\n\t\t\tthis.zoom((start - min) / (max - min), (end - min) / (max - min), duration);\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Syncs with a target axis.\n\t *\n\t * @param  min  Min\n\t * @param  max  Max\n\t * @param  step Step\n\t */\n\tprotected _syncAxes(min: number, max: number, step: number, syncMin: number, syncMax: number, syncStep: number) {\n\t\tlet axis = this.get(\"syncWithAxis\");\n\t\tif (axis) {\n\t\t\tlet count: number = Math.round(syncMax - syncMin) / syncStep;\n\t\t\tlet currentCount = Math.round((max - min) / step);\n\n\t\t\tlet gridCount = this.get(\"renderer\").gridCount();\n\n\t\t\tif ($type.isNumber(count) && $type.isNumber(currentCount)) {\n\t\t\t\tlet synced = false;\n\t\t\t\tlet c = 0\n\t\t\t\tlet diff = (max - min) * 0.01;\n\t\t\t\tlet omin = min;\n\t\t\t\tlet omax = max;\n\t\t\t\tlet ostep = step;\n\n\t\t\t\twhile (synced != true) {\n\t\t\t\t\tsynced = this._checkSync(omin, omax, ostep, count);\n\t\t\t\t\tc++;\n\t\t\t\t\tif (c > 500) {\n\t\t\t\t\t\tsynced = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!synced) {\n\t\t\t\t\t\tif (c / 3 == Math.round(c / 3)) {\n\t\t\t\t\t\t\tomin = min - diff * c;\n\t\t\t\t\t\t\tif (min >= 0 && omin < 0) {\n\t\t\t\t\t\t\t\tomin = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tomax = max + diff * c;\n\t\t\t\t\t\t\tif (omax <= 0 && omax > 0) {\n\t\t\t\t\t\t\t\tomax = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet minMaxStep = this._adjustMinMax(omin, omax, gridCount, true);\n\t\t\t\t\t\tomin = minMaxStep.min;\n\t\t\t\t\t\tomax = minMaxStep.max;\n\t\t\t\t\t\tostep = minMaxStep.step;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tmin = omin;\n\t\t\t\t\t\tmax = omax;\n\t\t\t\t\t\tstep = ostep;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { min: min, max: max, step: step };\n\t}\n\n\t/**\n\t * Returns `true` if axis needs to be resunced with some other axis.\n\t */\n\tprotected _checkSync(min: number, max: number, step: number, count: number): boolean {\n\t\tlet currentCount = (max - min) / step;\n\t\tfor (let i = 1; i < count; i++) {\n\t\t\tif ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}