{"ast":null,"code":"import { __extends, __read, __spreadArray } from \"tslib\";\nimport { Disposer } from \"./Disposer\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport { getInterpolate } from \"./Animation\";\nimport { States } from \"./States\";\nimport { registry } from \"../Registry\";\nimport * as $object from \"./Object\";\nimport * as $ease from \"./Ease\";\nimport * as $array from \"./Array\";\nimport * as $order from \"./Order\";\n/**\r\n * Allows to dynamically modify setting value of its target element.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info\r\n */\n\nvar Adapters =\n/** @class */\nfunction () {\n  function Adapters(entity) {\n    Object.defineProperty(this, \"_entity\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_callbacks\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._entity = entity;\n  }\n  /**\r\n   * Add a function (`callback`) that will modify value for setting `key`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info\r\n   */\n\n\n  Object.defineProperty(Adapters.prototype, \"add\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, callback) {\n      var callbacks = this._callbacks[key];\n\n      if (callbacks === undefined) {\n        callbacks = this._callbacks[key] = [];\n      }\n\n      callbacks.push(callback);\n\n      this._entity._markDirtyKey(key);\n\n      return new Disposer(function () {\n        $array.removeFirst(callbacks, callback);\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Adapters.prototype, \"fold\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value) {\n      var callbacks = this._callbacks[key];\n\n      if (callbacks !== undefined) {\n        for (var i = 0, len = callbacks.length; i < len; ++i) {\n          _value = callbacks[i](_value, this._entity, key);\n        }\n      }\n\n      return _value;\n    }\n  });\n  return Adapters;\n}();\n\nexport { Adapters };\n/**\r\n * Animation object.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/} for more info\r\n */\n\nvar Animation =\n/** @class */\nfunction () {\n  function Animation(from, to, duration, easing, loops, startingTime) {\n    Object.defineProperty(this, \"_from\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_to\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_duration\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_easing\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_loops\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_interpolate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_oldTime\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_time\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_stopped\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_playing\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new EventDispatcher()\n    });\n    this._from = from;\n    this._to = to;\n    this._duration = duration;\n    this._easing = easing;\n    this._loops = loops;\n    this._interpolate = getInterpolate(from, to);\n    this._oldTime = startingTime;\n  }\n\n  Object.defineProperty(Animation.prototype, \"to\", {\n    get: function get() {\n      return this._to;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Animation.prototype, \"from\", {\n    get: function get() {\n      return this._from;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Animation.prototype, \"playing\", {\n    get: function get() {\n      return this._playing;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Animation.prototype, \"stopped\", {\n    get: function get() {\n      return this._stopped;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Animation.prototype, \"stop\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      if (!this._stopped) {\n        this._stopped = true;\n        this._playing = false;\n\n        if (this.events.isEnabled(\"stopped\")) {\n          this.events.dispatch(\"stopped\", {\n            type: \"stopped\",\n            target: this\n          });\n        }\n      }\n    }\n  });\n  Object.defineProperty(Animation.prototype, \"pause\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      this._playing = false;\n      this._oldTime = null;\n    }\n  });\n  Object.defineProperty(Animation.prototype, \"play\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      if (!this._stopped) {\n        this._playing = true;\n      }\n    }\n  });\n  Object.defineProperty(Animation.prototype, \"percentage\", {\n    get: function get() {\n      return this._time / this._duration;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Animation.prototype, \"waitForStop\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      return new Promise(function (resolve, _reject) {\n        if (_this._stopped) {\n          resolve();\n        } else {\n          var listener = function listener() {\n            stopped_1.dispose();\n            resolve();\n          };\n\n          var stopped_1 = _this.events.on(\"stopped\", listener);\n        }\n      });\n    }\n  });\n  Object.defineProperty(Animation.prototype, \"_checkEnded\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      if (this._loops > 1) {\n        --this._loops;\n        return false;\n      } else {\n        return true;\n      }\n    }\n  });\n  Object.defineProperty(Animation.prototype, \"_run\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(currentTime) {\n      if (this._oldTime !== null) {\n        this._time += currentTime - this._oldTime;\n\n        if (this._time > this._duration) {\n          this._time = this._duration;\n        }\n      }\n\n      this._oldTime = currentTime;\n    }\n  });\n  Object.defineProperty(Animation.prototype, \"_reset\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(currentTime) {\n      this._oldTime = currentTime;\n      this._time = 0;\n    }\n  });\n  Object.defineProperty(Animation.prototype, \"_value\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(diff) {\n      return this._interpolate(this._easing(diff), this._from, this._to);\n    }\n  });\n  return Animation;\n}();\n\nexport { Animation };\n/**\r\n * @ignore\r\n */\n\nvar counter = 0;\n/**\r\n * Base class for [[Entity]] objects that support Settings.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n */\n\nvar Settings =\n/** @class */\nfunction () {\n  function Settings(settings) {\n    /**\r\n     * Unique ID.\r\n     */\n    Object.defineProperty(this, \"uid\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: ++counter\n    });\n    Object.defineProperty(this, \"_settings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_privateSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_settingEvents\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_privateSettingEvents\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_prevSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_prevPrivateSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_animatingSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_animatingPrivateSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_animatingCount\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    }); // TODO move this into Entity\n\n    Object.defineProperty(this, \"_userProperties\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._settings = settings;\n  }\n\n  Object.defineProperty(Settings.prototype, \"_checkDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      $object.keys(this._settings).forEach(function (key) {\n        _this._userProperties[key] = true;\n\n        _this._markDirtyKey(key);\n      });\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_runAnimation\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(currentTime) {\n      var _this = this;\n\n      if (!this.isDisposed()) {\n        $object.each(this._animatingSettings, function (key, animation) {\n          if (animation._stopped) {\n            _this._stopAnimation(key);\n          } else if (animation._playing) {\n            animation._run(currentTime);\n\n            var diff = animation.percentage;\n\n            if (diff >= 1) {\n              if (animation._checkEnded()) {\n                _this.set(key, animation._value(1));\n              } else {\n                animation._reset(currentTime);\n\n                _this._set(key, animation._value(1));\n              }\n            } else {\n              _this._set(key, animation._value(diff));\n            }\n          }\n        });\n        $object.each(this._animatingPrivateSettings, function (key, animation) {\n          if (animation._stopped) {\n            _this._stopAnimationPrivate(key);\n          } else if (animation._playing) {\n            animation._run(currentTime);\n\n            var diff = animation.percentage;\n\n            if (diff >= 1) {\n              if (animation._checkEnded()) {\n                _this.setPrivate(key, animation._value(1));\n              } else {\n                animation._reset(currentTime);\n\n                _this._setPrivate(key, animation._value(1));\n              }\n            } else {\n              _this._setPrivate(key, animation._value(diff));\n            }\n          }\n        });\n\n        if (this._animatingCount < 0) {\n          throw new Error(\"Invalid animation count\");\n        }\n\n        return this._animatingCount === 0;\n      } else {\n        return true;\n      }\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_markDirtyKey\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_key) {\n      this.markDirty();\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_markDirtyPrivateKey\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_key) {\n      this.markDirty();\n    }\n  });\n  /**\r\n   * Sets a callback function to invoke when specific key of settings changes\r\n   * or is set.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info\r\n   * @param   key       Settings key\r\n   * @param   callback  Callback\r\n   * @return            Disposer for event\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"on\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, callback) {\n      var _this = this;\n\n      var events = this._settingEvents[key];\n\n      if (events === undefined) {\n        events = this._settingEvents[key] = [];\n      }\n\n      events.push(callback);\n      return new Disposer(function () {\n        $array.removeFirst(events, callback);\n\n        if (events.length === 0) {\n          delete _this._settingEvents[key];\n        }\n      });\n    }\n  });\n  /**\r\n   * Sets a callback function to invoke when specific key of private settings\r\n   * changes or is set.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info\r\n   * @ignore\r\n   * @param   key       Private settings key\r\n   * @param   callback  Callback\r\n   * @return            Disposer for event\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"onPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, callback) {\n      var _this = this;\n\n      var events = this._privateSettingEvents[key];\n\n      if (events === undefined) {\n        events = this._privateSettingEvents[key] = [];\n      }\n\n      events.push(callback);\n      return new Disposer(function () {\n        $array.removeFirst(events, callback);\n\n        if (events.length === 0) {\n          delete _this._privateSettingEvents[key];\n        }\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"getRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, fallback) {\n      var value = this._settings[key];\n\n      if (value !== undefined) {\n        return value;\n      } else {\n        return fallback;\n      }\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"get\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, fallback) {\n      return this.getRaw(key, fallback);\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_sendKeyEvent\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value2) {\n      var _this = this;\n\n      var events = this._settingEvents[key];\n\n      if (events !== undefined) {\n        $array.each(events, function (callback) {\n          callback(_value2, _this, key);\n        });\n      }\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_sendPrivateKeyEvent\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value3) {\n      var _this = this;\n\n      var events = this._privateSettingEvents[key];\n\n      if (events !== undefined) {\n        $array.each(events, function (callback) {\n          callback(_value3, _this, key);\n        });\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"_setRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, old, _value4) {\n      this._prevSettings[key] = old;\n\n      this._sendKeyEvent(key, _value4);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"setRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value5) {\n      var old = this._settings[key];\n      this._settings[key] = _value5;\n\n      if (old !== _value5) {\n        this._setRaw(key, old, _value5);\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"_set\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value6) {\n      var old = this._settings[key];\n      this._settings[key] = _value6;\n\n      if (old !== _value6) {\n        this._setRaw(key, old, _value6);\n\n        this._markDirtyKey(key);\n      }\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_stopAnimation\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key) {\n      var animation = this._animatingSettings[key];\n\n      if (animation) {\n        delete this._animatingSettings[key];\n        --this._animatingCount;\n        animation.stop();\n      }\n    }\n  });\n  /**\r\n   * Sets a setting `value` for the specified `key`, and returns the same `value`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   * @param   value     Setting value\r\n   * @return            Setting value\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"set\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value7) {\n      this._set(key, _value7);\n\n      this._stopAnimation(key);\n\n      return _value7;\n    }\n  });\n  /**\r\n   * Removes a setting value for the specified `key`;\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key) {\n      if (key in this._settings) {\n        this._prevSettings[key] = this._settings[key];\n        delete this._settings[key];\n\n        this._sendKeyEvent(key, undefined);\n\n        this._markDirtyKey(key);\n      }\n\n      this._stopAnimation(key);\n    }\n  });\n  /**\r\n   * Removes all keys;\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"removeAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      $array.each($object.keys(this._settings), function (key) {\n        _this.remove(key);\n      });\n    }\n  });\n  /**\r\n   * Returns a value of a private setting.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/#Private_settings} for more info\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"getPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, fallback) {\n      var value = this._privateSettings[key];\n\n      if (value !== undefined) {\n        return value;\n      } else {\n        return fallback;\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"_setPrivateRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, old, _value8) {\n      this._prevPrivateSettings[key] = old;\n\n      this._sendPrivateKeyEvent(key, _value8);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"setPrivateRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value9) {\n      var old = this._privateSettings[key];\n      this._privateSettings[key] = _value9;\n\n      if (old !== _value9) {\n        this._setPrivateRaw(key, old, _value9);\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"_setPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value10) {\n      var old = this._privateSettings[key];\n      this._privateSettings[key] = _value10;\n\n      if (old !== _value10) {\n        this._setPrivateRaw(key, old, _value10);\n\n        this._markDirtyPrivateKey(key);\n      }\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_stopAnimationPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key) {\n      var animation = this._animatingPrivateSettings[key];\n\n      if (animation) {\n        animation.stop();\n        delete this._animatingPrivateSettings[key];\n        --this._animatingCount;\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"setPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value11) {\n      this._setPrivate(key, _value11);\n\n      this._stopAnimationPrivate(key);\n\n      return _value11;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"removePrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key) {\n      if (key in this._privateSettings) {\n        this._prevPrivateSettings[key] = this._privateSettings[key];\n        delete this._privateSettings[key];\n\n        this._markDirtyPrivateKey(key);\n      }\n\n      this._stopAnimationPrivate(key);\n    }\n  });\n  /**\r\n   * Sets multiple settings at once.\r\n   *\r\n   * `settings` must be an object with key: value pairs.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param settings Settings\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"setAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(settings) {\n      var _this = this;\n\n      $object.each(settings, function (key, value) {\n        _this.set(key, value);\n      });\n    }\n  });\n  /**\r\n   * Animates setting values from current/start values to new ones.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Animating_settings} for more info\r\n   * @param   options  Animation options\r\n   * @return           Animation object\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"animate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(options) {\n      var key = options.key;\n      var to = options.to;\n      var duration = options.duration;\n      var loops = options.loops || 1;\n      var from = options.from === undefined ? this.get(key) : options.from;\n      var easing = options.easing === undefined ? $ease.linear : options.easing;\n\n      if (duration === 0) {\n        this.set(key, to);\n      } else {\n        if (from === undefined || from === to) {\n          this.set(key, to);\n        } else {\n          ++this._animatingCount;\n          this.set(key, from);\n          var animation_1 = this._animatingSettings[key] = new Animation(from, to, duration, easing, loops, this._animationTime());\n\n          this._startAnimation();\n\n          return animation_1;\n        }\n      }\n\n      var animation = new Animation(from, to, duration, easing, loops, null);\n      animation.stop();\n      return animation;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"animatePrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(options) {\n      var key = options.key;\n      var to = options.to;\n      var duration = options.duration;\n      var loops = options.loops || 1;\n      var from = options.from === undefined ? this.getPrivate(key) : options.from;\n      var easing = options.easing === undefined ? $ease.linear : options.easing;\n\n      if (duration === 0) {\n        this.setPrivate(key, to);\n      } else {\n        if (from === undefined || from === to) {\n          this.setPrivate(key, to);\n        } else {\n          ++this._animatingCount;\n          this.setPrivate(key, from);\n          var animation_2 = this._animatingPrivateSettings[key] = new Animation(from, to, duration, easing, loops, this._animationTime());\n\n          this._startAnimation();\n\n          return animation_2;\n        }\n      }\n\n      var animation = new Animation(from, to, duration, easing, loops, null);\n      animation.stop();\n      return animation;\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {}\n  });\n  /**\r\n   * Returns `true` if this element is disposed.\r\n   *\r\n   * @return Disposed\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      return this._disposed;\n    }\n  });\n  /**\r\n   * Disposes this object.\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      if (!this._disposed) {\n        this._disposed = true;\n\n        this._dispose();\n      }\n    }\n  });\n  return Settings;\n}();\n\nexport { Settings };\n/**\r\n * Base class.\r\n *\r\n * @important\r\n */\n\nvar Entity =\n/** @class */\nfunction (_super) {\n  __extends(Entity, _super);\n  /**\r\n   * IMPORTANT! Do not instantiate this class via `new Class()` syntax.\r\n   *\r\n   * Use static method `Class.new()` instead.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @ignore\r\n   */\n\n\n  function Entity(root, settings, isReal, templates) {\n    if (templates === void 0) {\n      templates = [];\n    }\n\n    var _this = _super.call(this, settings) || this;\n\n    Object.defineProperty(_this, \"_root\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_user_id\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    }); // for testing purposes\n\n    Object.defineProperty(_this, \"states\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new States(_this)\n    });\n    Object.defineProperty(_this, \"adapters\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Adapters(_this)\n    });\n    Object.defineProperty(_this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._createEvents()\n    });\n    Object.defineProperty(_this, \"_userPrivateProperties\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(_this, \"_dirty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(_this, \"_dirtyPrivate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(_this, \"_template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    }); // Templates for the themes\n\n    Object.defineProperty(_this, \"_templates\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    }); // Internal templates which can be overridden by the user's templates\n\n    Object.defineProperty(_this, \"_internalTemplates\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    }); // Default themes which can be overridden by the user's themes\n\n    Object.defineProperty(_this, \"_defaultThemes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    }); // Disposers for all of the templates\n\n    Object.defineProperty(_this, \"_templateDisposers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(_this, \"_disposers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    }); // Whether the template setup function should be run\n\n    Object.defineProperty(_this, \"_runSetup\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(_this, \"_disposerProperties\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n\n    if (!isReal) {\n      throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n    }\n\n    _this._root = root;\n    _this._internalTemplates = templates;\n    return _this;\n  }\n  /**\r\n   * Use this method to create an instance of this class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @param   root      Root element\r\n   * @param   settings  Settings\r\n   * @param   template  Template\r\n   * @return            Instantiated object\r\n   */\n\n\n  Object.defineProperty(Entity, \"new\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(root, settings, template) {\n      var x = new this(root, settings, true);\n      x._template = template;\n\n      x._afterNew();\n\n      return x;\n    }\n  });\n  Object.defineProperty(Entity, \"_new\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(root, settings, templates) {\n      if (templates === void 0) {\n        templates = [];\n      }\n\n      var x = new this(root, settings, true, templates);\n\n      x._afterNew();\n\n      return x;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      this._checkDirty();\n\n      var shouldApply = false;\n      var template = this._template;\n\n      if (template) {\n        shouldApply = true;\n\n        template._setObjectTemplate(this);\n      }\n\n      $array.each(this._internalTemplates, function (template) {\n        shouldApply = true;\n\n        template._setObjectTemplate(_this);\n      });\n\n      if (shouldApply) {\n        this._applyTemplates(false);\n      }\n\n      this.states.create(\"default\", {});\n\n      this._setDefaults();\n    }\n  }); // This is the same as _afterNew, except it also applies the themes.\n  // This should only be used for classes which don't have a parent (because they extend from Entity and not Sprite).\n\n  Object.defineProperty(Entity.prototype, \"_afterNewApplyThemes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      this._checkDirty();\n\n      var template = this._template;\n\n      if (template) {\n        template._setObjectTemplate(this);\n      }\n\n      $array.each(this._internalTemplates, function (template) {\n        template._setObjectTemplate(_this);\n      });\n      this.states.create(\"default\", {});\n\n      this._setDefaults();\n\n      this._applyThemes();\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_createEvents\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      return new EventDispatcher();\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"classNames\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function get() {\n      return this.constructor.classNames;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Entity.prototype, \"className\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function get() {\n      return this.constructor.className;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Entity.prototype, \"_setDefaults\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {}\n  });\n  Object.defineProperty(Entity.prototype, \"_setDefault\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value12) {\n      if (!(key in this._settings)) {\n        _super.prototype.set.call(this, key, _value12);\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_setRawDefault\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value13) {\n      if (!(key in this._settings)) {\n        _super.prototype.setRaw.call(this, key, _value13);\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_clearDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      $object.keys(this._dirty).forEach(function (key) {\n        _this._dirty[key] = false;\n      });\n      $object.keys(this._dirtyPrivate).forEach(function (key) {\n        _this._dirtyPrivate[key] = false;\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"isDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key) {\n      return !!this._dirty[key];\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"isPrivateDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key) {\n      return !!this._dirtyPrivate[key];\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_markDirtyKey\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key) {\n      this._dirty[key] = true;\n\n      _super.prototype._markDirtyKey.call(this, key);\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_markDirtyPrivateKey\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key) {\n      this._dirtyPrivate[key] = true;\n\n      _super.prototype._markDirtyKey.call(this, key);\n    }\n  });\n  /**\r\n   * Checks if element is of certain class (or inherits one).\r\n   *\r\n   * @param   type  Class name to check\r\n   * @return {boolean} Is of class?\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"isType\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(type) {\n      return this.classNames.indexOf(type) !== -1;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_pushPropertyDisposer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, disposer) {\n      var disposers = this._disposerProperties[key];\n\n      if (disposers === undefined) {\n        disposers = this._disposerProperties[key] = [];\n      }\n\n      disposers.push(disposer);\n      return disposer;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_disposeProperty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key) {\n      var disposers = this._disposerProperties[key];\n\n      if (disposers !== undefined) {\n        $array.each(disposers, function (disposer) {\n          disposer.dispose();\n        });\n        delete this._disposerProperties[key];\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"template\", {\n    get: function get() {\n      return this._template;\n    },\n\n    /**\r\n     * @todo needs description\r\n     * @param  value  Template\r\n     */\n    set: function set(value) {\n      var template = this._template;\n\n      if (template !== value) {\n        this._template = value;\n\n        if (template) {\n          template._removeObjectTemplate(this);\n        }\n\n        if (value) {\n          value._setObjectTemplate(this);\n        }\n\n        this._applyTemplates();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"markDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      this._root._addDirtyEntity(this);\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_startAnimation\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      this._root._addAnimation(this);\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_animationTime\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      return this._root.animationTime;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_applyState\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_name) {}\n  });\n  Object.defineProperty(Entity.prototype, \"_applyStateAnimated\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_name, _duration) {}\n  });\n  Object.defineProperty(Entity.prototype, \"get\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, fallback) {\n      var value = this.adapters.fold(key, this._settings[key]);\n\n      if (value !== undefined) {\n        return value;\n      } else {\n        return fallback;\n      }\n    }\n  });\n  /**\r\n   * Sets a setting `value` for the specified `key`, and returns the same `value`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   * @param   value     Setting value\r\n   * @return            Setting value\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"set\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value14) {\n      this._userProperties[key] = true;\n      return _super.prototype.set.call(this, key, _value14);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"setRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value15) {\n      this._userProperties[key] = true;\n\n      _super.prototype.setRaw.call(this, key, _value15);\n    }\n  });\n  /**\r\n   * Sets a setting `value` for the specified `key` only if the value for this key was not set previously using set method, and returns the same `value`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   * @param   value     Setting value\r\n   * @return            Setting value\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"_setSoft\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value16) {\n      if (!this._userProperties[key]) {\n        return _super.prototype.set.call(this, key, _value16);\n      }\n\n      return _value16;\n    }\n  });\n  /**\r\n   * Removes a setting value for the specified `key`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key) {\n      delete this._userProperties[key];\n\n      this._removeTemplateProperty(key);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"setPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value17) {\n      this._userPrivateProperties[key] = true;\n      return _super.prototype.setPrivate.call(this, key, _value17);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"setPrivateRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key, _value18) {\n      this._userPrivateProperties[key] = true;\n\n      _super.prototype.setPrivateRaw.call(this, key, _value18);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"removePrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key) {\n      delete this._userPrivateProperties[key];\n\n      this._removeTemplatePrivateProperty(key);\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_setTemplateProperty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(template, key, _value19) {\n      if (!this._userProperties[key]) {\n        var match = this._findTemplateByKey(key);\n\n        if (template === match) {\n          _super.prototype.set.call(this, key, _value19);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_setTemplatePrivateProperty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(template, key, _value20) {\n      if (!this._userPrivateProperties[key]) {\n        var match = this._findTemplateByPrivateKey(key);\n\n        if (template === match) {\n          _super.prototype.setPrivate.call(this, key, _value20);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_removeTemplateProperty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key) {\n      if (!this._userProperties[key]) {\n        var match = this._findTemplateByKey(key);\n\n        if (match) {\n          // TODO don't stop the animation if the property didn't change\n          _super.prototype.set.call(this, key, match._settings[key]);\n        } else {\n          _super.prototype.remove.call(this, key);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_removeTemplatePrivateProperty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key) {\n      if (!this._userPrivateProperties[key]) {\n        var match = this._findTemplateByPrivateKey(key);\n\n        if (match) {\n          // TODO don't stop the animation if the property didn't change\n          _super.prototype.setPrivate.call(this, key, match._privateSettings[key]);\n        } else {\n          _super.prototype.removePrivate.call(this, key);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_walkParents\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(f) {\n      f(this._root._rootContainer);\n      f(this);\n    }\n  }); // TODO faster version of this method which is specialized to just 1 key\n\n  Object.defineProperty(Entity.prototype, \"_applyStateByKey\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(name) {\n      var other = this.states.create(name, {});\n      var seen = {};\n\n      this._eachTemplate(function (template) {\n        var state = template.states.lookup(name);\n\n        if (state) {\n          state._apply(other, seen);\n        }\n      });\n\n      $object.each(other._settings, function (key) {\n        if (!seen[key] && !other._userSettings[key]) {\n          other.remove(key);\n        }\n      });\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_applyTemplate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(template, state) {\n      var _this = this;\n\n      this._templateDisposers.push(template._apply(this, state));\n\n      $object.each(template._settings, function (key, value) {\n        if (!state.settings[key] && !_this._userProperties[key]) {\n          state.settings[key] = true;\n\n          _super.prototype.set.call(_this, key, value);\n        }\n      });\n      $object.each(template._privateSettings, function (key, value) {\n        if (!state.privateSettings[key] && !_this._userPrivateProperties[key]) {\n          state.privateSettings[key] = true;\n\n          _super.prototype.setPrivate.call(_this, key, value);\n        }\n      });\n\n      if (this._runSetup && template.setup) {\n        this._runSetup = false;\n        template.setup(this);\n      }\n    }\n  });\n  /**\r\n   * Calls the closure with each template and returns the first template which is true\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"_findStaticTemplate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(f) {\n      if (this._template) {\n        if (f(this._template)) {\n          return this._template;\n        }\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_eachTemplate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(f) {\n      this._findStaticTemplate(function (template) {\n        f(template);\n        return false;\n      }); // _internalTemplates is sorted with most specific to the right\n\n\n      $array.eachReverse(this._internalTemplates, f); // _templates is sorted with most specific to the left\n\n      $array.each(this._templates, f);\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_applyTemplates\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(remove) {\n      var _this = this;\n\n      if (remove === void 0) {\n        remove = true;\n      }\n\n      if (remove) {\n        this._disposeTemplates();\n      }\n\n      var state = {\n        settings: {},\n        privateSettings: {},\n        states: {}\n      };\n\n      this._eachTemplate(function (template) {\n        _this._applyTemplate(template, state);\n      });\n\n      if (remove) {\n        $object.each(this._settings, function (key) {\n          if (!_this._userProperties[key] && !state.settings[key]) {\n            _super.prototype.remove.call(_this, key);\n          }\n        });\n        $object.each(this._privateSettings, function (key) {\n          if (!_this._userPrivateProperties[key] && !state.privateSettings[key]) {\n            _super.prototype.removePrivate.call(_this, key);\n          }\n        });\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_findTemplate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(f) {\n      var value = this._findStaticTemplate(f);\n\n      if (value === undefined) {\n        // _internalTemplates is sorted with most specific to the right\n        var value_1 = $array.findReverse(this._internalTemplates, f);\n\n        if (value_1 === undefined) {\n          // _templates is sorted with most specific to the left\n          return $array.find(this._templates, f);\n        } else {\n          return value_1;\n        }\n      } else {\n        return value;\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_findTemplateByKey\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key) {\n      return this._findTemplate(function (template) {\n        return key in template._settings;\n      });\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_findTemplateByPrivateKey\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(key) {\n      return this._findTemplate(function (template) {\n        return key in template._privateSettings;\n      });\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_disposeTemplates\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      $array.each(this._templateDisposers, function (disposer) {\n        disposer.dispose();\n      });\n      this._templateDisposers.length = 0;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_removeTemplates\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      $array.each(this._templates, function (template) {\n        template._removeObjectTemplate(_this);\n      });\n      this._templates.length = 0;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_applyThemes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      var isConnected = false;\n      var defaults = [];\n      var themes = [];\n      var themeTags = new Set();\n      var tags = this.get(\"themeTagsSelf\");\n\n      if (tags) {\n        $array.each(tags, function (tag) {\n          themeTags.add(tag);\n        });\n      }\n\n      this._walkParents(function (entity) {\n        if (entity === _this._root._rootContainer) {\n          isConnected = true;\n        }\n\n        if (entity._defaultThemes.length > 0) {\n          defaults.push(entity._defaultThemes);\n        }\n\n        var theme = entity.get(\"themes\");\n\n        if (theme) {\n          themes.push(theme);\n        }\n\n        var tags = entity.get(\"themeTags\");\n\n        if (tags) {\n          $array.each(tags, function (tag) {\n            themeTags.add(tag);\n          });\n        }\n      });\n\n      themes = defaults.concat(themes);\n\n      this._removeTemplates();\n\n      if (isConnected) {\n        $array.eachReverse(this.classNames, function (name) {\n          var allRules = [];\n          $array.each(themes, function (themes) {\n            $array.each(themes, function (theme) {\n              var rules = theme._lookupRules(name);\n\n              if (rules) {\n                $array.eachReverse(rules, function (rule) {\n                  var matches = rule.tags.every(function (tag) {\n                    return themeTags.has(tag);\n                  });\n\n                  if (matches) {\n                    var result = $array.getFirstSortedIndex(allRules, function (x) {\n                      var order = $order.compare(rule.tags.length, x.tags.length);\n\n                      if (order === 0) {\n                        return $order.compareArray(rule.tags, x.tags, $order.compare);\n                      } else {\n                        return order;\n                      }\n                    });\n                    allRules.splice(result.index, 0, rule);\n                  }\n                });\n              }\n            });\n          });\n          $array.each(allRules, function (rule) {\n            _this._templates.push(rule.template);\n\n            rule.template._setObjectTemplate(_this);\n          });\n        });\n      }\n\n      this._applyTemplates();\n\n      if (isConnected) {\n        // This causes it to only run the setup function the first time that the themes are applied\n        this._runSetup = false;\n      }\n\n      return isConnected;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {}\n  });\n  Object.defineProperty(Entity.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      if (this.isDirty(\"id\")) {\n        var id = this.get(\"id\");\n\n        if (id) {\n          if (registry.entitiesById[id]) {\n            throw new Error(\"An entity with id \\\"\" + id + \"\\\" already exists.\");\n          }\n\n          registry.entitiesById[id] = this;\n        }\n\n        var prevId = this._prevSettings.id;\n\n        if (prevId) {\n          delete registry.entitiesById[prevId];\n        }\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_afterChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {}\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"addDisposer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(disposer) {\n      this._disposers.push(disposer);\n\n      return disposer;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      _super.prototype._dispose.call(this);\n\n      var template = this._template;\n\n      if (template) {\n        template._removeObjectTemplate(this);\n      }\n\n      $array.each(this._internalTemplates, function (template) {\n        template._removeObjectTemplate(_this);\n      });\n\n      this._removeTemplates();\n\n      this._disposeTemplates();\n\n      this.events.dispose();\n\n      this._disposers.forEach(function (x) {\n        x.dispose();\n      });\n\n      $object.each(this._disposerProperties, function (_, disposers) {\n        $array.each(disposers, function (disposer) {\n          disposer.dispose();\n        });\n      });\n      var id = this.get(\"id\");\n\n      if (id) {\n        delete registry.entitiesById[id];\n      }\n    }\n  });\n  /**\r\n   * Creates and returns a \"disposable\" timeout.\r\n   *\r\n   * @param   fn     Callback\r\n   * @param   delay  Delay in milliseconds\r\n   * @return         Timeout disposer\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"setTimeout\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(fn, delay) {\n      var _this = this;\n\n      var id = setTimeout(function () {\n        _this.removeDispose(disposer);\n\n        fn();\n      }, delay);\n      var disposer = new Disposer(function () {\n        clearTimeout(id);\n      });\n\n      this._disposers.push(disposer);\n\n      return disposer;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"removeDispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(target) {\n      if (!this.isDisposed()) {\n        var index = $array.indexOf(this._disposers, target);\n\n        if (index > -1) {\n          this._disposers.splice(index, 1);\n        }\n      }\n\n      target.dispose();\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"hasTag\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(tag) {\n      return $array.indexOf(this.get(\"themeTags\", []), tag) !== -1;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"addTag\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(tag) {\n      if (!this.hasTag(tag)) {\n        var tags = this.get(\"themeTags\", []);\n        tags.push(tag);\n        this.set(\"themeTags\", tags);\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"removeTag\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(tag) {\n      if (this.hasTag(tag)) {\n        var tags = this.get(\"themeTags\", []);\n        $array.remove(tags, tag);\n        this.set(\"themeTags\", tags);\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_t\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(text, locale) {\n      var _a;\n\n      var rest = [];\n\n      for (var _i = 2; _i < arguments.length; _i++) {\n        rest[_i - 2] = arguments[_i];\n      }\n\n      return (_a = this._root.language).translate.apply(_a, __spreadArray([text, locale], __read(rest)));\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"root\", {\n    /**\r\n     * An instance of [[Root]] object.\r\n     *\r\n     * @readonly\r\n     * @since 5.0.6\r\n     * @return Root object\r\n     */\n    get: function get() {\n      return this._root;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Entity, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Entity\"\n  });\n  Object.defineProperty(Entity, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: [\"Entity\"]\n  });\n  return Entity;\n}(Settings);\n\nexport { Entity };","map":{"version":3,"sources":["../../../../../src/.internal/core/util/Entity.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Root } from \"../Root\";\nimport type { Template, ApplyState } from \"./Template\";\nimport type { Theme, IRule } from \"../Theme\";\nimport type { ILocale } from \"./Language\";\n\nimport { IDisposer, Disposer } from \"./Disposer\";\nimport { EventDispatcher, Events } from \"./EventDispatcher\";\nimport { Time, IAnimation, getInterpolate } from \"./Animation\";\nimport { States } from \"./States\";\nimport { registry } from \"../Registry\";\n\nimport * as $object from \"./Object\";\nimport * as $ease from \"./Ease\";\nimport * as $array from \"./Array\";\nimport * as $order from \"./Order\";\n\n/**\n * @ignore\n */\nexport type Dirty<A> = { [K in keyof A]?: boolean };\n\n\n/**\n * Allows to dynamically modify setting value of its target element.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info\n */\nexport class Adapters<E extends Settings> {\n\tprivate _entity: E;\n\tprivate _callbacks: { [K in keyof E[\"_settings\"]]?: Array<<O extends E[\"_settings\"]>(value: O[K], target?: O, key?: K) => O[K]> } = {};\n\n\tconstructor(entity: E) {\n\t\tthis._entity = entity;\n\t}\n\n\t/**\n\t * Add a function (`callback`) that will modify value for setting `key`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info\n\t */\n\tpublic add<Key extends keyof E[\"_settings\"]>(key: Key, callback: <O extends E[\"_settings\"]>(value: O[Key], target?: O, key?: Key) => O[Key]): IDisposer {\n\t\tlet callbacks = this._callbacks[key];\n\n\t\tif (callbacks === undefined) {\n\t\t\tcallbacks = this._callbacks[key] = [];\n\t\t}\n\n\t\tcallbacks.push(callback);\n\n\t\tthis._entity._markDirtyKey(key);\n\n\t\treturn new Disposer(() => {\n\t\t\t$array.removeFirst(callbacks!, callback);\n\t\t});\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic fold<Key extends keyof E[\"_settings\"]>(key: Key, value: E[\"_settings\"][Key]): E[\"_settings\"][Key] {\n\t\tconst callbacks = this._callbacks[key];\n\n\t\tif (callbacks !== undefined) {\n\t\t\tfor (let i = 0, len = callbacks.length; i < len; ++i) {\n\t\t\t\tvalue = callbacks[i](value, this._entity, key);\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t}\n}\n\n\nexport interface IEntitySettings {\n\n\t/**\n\t * Tags which can be used by the theme rules.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info\n\t */\n\tthemeTags?: Array<string>;\n\n\t/**\n\t * Tags which can be used by the theme rules.\n\t *\n\t * These tags only apply to this object, not any children.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info\n\t */\n\tthemeTagsSelf?: Array<string>;\n\n\t/**\n\t * A list of themes applied to the element.\n\t */\n\tthemes?: Array<Theme>;\n\n\n\t/**\n\t * Duration of transition from one state to another.\n\t */\n\tstateAnimationDuration?:number;\n\n\t/**\n\t * Easing of transition from one state to another.\n\t */\n\tstateAnimationEasing?:$ease.Easing;\n\n\t/**\n\t * A custom string ID for the element.\n\t *\n\t * If set, element can be looked up via `am5.registry.entitiesById`.\n\t *\n\t * Will raise error if an element with the same ID already exists.\n\t */\n\tid?: string;\n\n\t/**\n\t * A storage for any custom user data that needs to be associated with the\n\t * element.\n\t */\n\tuserData?: any;\n\n}\n\nexport interface IEntityPrivate {\n}\n\nexport interface IEntityEvents {\n}\n\n/**\n * Animation options.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/} for more info\n */\nexport interface AnimationOptions<Key, Value> {\n\n\t/**\n\t * A setting key to animate value for.\n\t */\n\tkey: Key,\n\n\t/**\n\t * Initial value to animate from. If not set, will use current value.\n\t */\n\tfrom?: Value;\n\n\t/**\n\t * Target value to animate to.\n\t */\n\tto: Value;\n\n\t/**\n\t * Animation duration in milliseconds.\n\t */\n\tduration: number;\n\n\t/**\n\t * Easing function. Defaults to linear.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Easing_functions} for more info\n\t */\n\teasing?: $ease.Easing;\n\n\t/**\n\t * How many times to play the animation. Defaults to 1.\n\t */\n\tloops?: number;\n}\n\nexport interface IAnimationEvents {\n\t/**\n\t * Invoked when animation was stopped, which happens in these situations:\n\t * 1. When the animation reached the end.\n\t * 2. When the `stop()` method is called.\n\t * 3. When a new animation starts for the same key.\n\t * 4. When calling `set` for the same key.\n\t */\n\tstopped: {};\n}\n\n/**\n * Animation object.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/} for more info\n */\nexport class Animation<Value> {\n\tprivate _from: Value;\n\tprivate _to: Value;\n\tprivate _duration: number;\n\tprivate _easing: $ease.Easing;\n\tprivate _loops: number;\n\tprivate _interpolate: <A extends Value>(diff: Time, from: A, to: A) => A;\n\tprivate _oldTime: number | null;\n\tprivate _time: number = 0;\n\n\tpublic _stopped: boolean = false;\n\tpublic _playing: boolean = true;\n\n\tpublic events: EventDispatcher<Events<this, IAnimationEvents>> = new EventDispatcher();\n\n\tconstructor(from: Value, to: Value, duration: number, easing: $ease.Easing, loops: number, startingTime: number | null) {\n\t\tthis._from = from;\n\t\tthis._to = to;\n\t\tthis._duration = duration;\n\t\tthis._easing = easing;\n\t\tthis._loops = loops;\n\t\tthis._interpolate = getInterpolate(from, to);\n\t\tthis._oldTime = startingTime;\n\t}\n\n\tpublic get to() {\n\t\treturn this._to;\n\t}\n\n\tpublic get from() {\n\t\treturn this._from;\n\t}\n\n\tpublic get playing() {\n\t\treturn this._playing;\n\t}\n\n\tpublic get stopped() {\n\t\treturn this._stopped;\n\t}\n\n\tpublic stop(): void {\n\t\tif (!this._stopped) {\n\t\t\tthis._stopped = true;\n\t\t\tthis._playing = false;\n\n\t\t\tif (this.events.isEnabled(\"stopped\")) {\n\t\t\t\tthis.events.dispatch(\"stopped\", {\n\t\t\t\t\ttype: \"stopped\",\n\t\t\t\t\ttarget: this,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic pause(): void {\n\t\tthis._playing = false;\n\t\tthis._oldTime = null;\n\t}\n\n\tpublic play(): void {\n\t\tif (!this._stopped) {\n\t\t\tthis._playing = true;\n\t\t}\n\t}\n\n\tpublic get percentage(): Time {\n\t\treturn this._time / this._duration;\n\t}\n\n\tpublic waitForStop(): Promise<void> {\n\t\treturn new Promise((resolve, _reject) => {\n\t\t\tif (this._stopped) {\n\t\t\t\tresolve();\n\n\t\t\t} else {\n\t\t\t\tconst listener = () => {\n\t\t\t\t\tstopped.dispose();\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\n\t\t\t\tconst stopped = this.events.on(\"stopped\", listener);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic _checkEnded(): boolean {\n\t\tif (this._loops > 1) {\n\t\t\t--this._loops;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic _run(currentTime: number): void {\n\t\tif (this._oldTime !== null) {\n\t\t\tthis._time += currentTime - this._oldTime;\n\n\t\t\tif (this._time > this._duration) {\n\t\t\t\tthis._time = this._duration;\n\t\t\t}\n\t\t}\n\n\t\tthis._oldTime = currentTime;\n\t}\n\n\tpublic _reset(currentTime: number): void {\n\t\tthis._oldTime = currentTime;\n\t\tthis._time = 0;\n\t}\n\n\tpublic _value(diff: Time): Value {\n\t\treturn this._interpolate(this._easing(diff), this._from, this._to);\n\t}\n}\n\ntype Animated<P> = { [K in keyof P]?: Animation<P[K]> };\n\n\n/**\n * @ignore\n */\nlet counter = 0;\n\n/**\n * Base class for [[Entity]] objects that support Settings.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n */\nexport abstract class Settings implements IDisposer, IAnimation {\n\n\t/**\n\t * Unique ID.\n\t */\n\tpublic uid: number = ++counter;\n\n\tpublic _settings: {};\n\tpublic _privateSettings: {} = {};\n\n\tpublic _settingEvents: { [K in keyof this[\"_settings\"]]?: Array<<V extends this[\"_settings\"][K], O extends this>(value: V, target?: O, key?: K) => void> } = {};\n\tpublic _privateSettingEvents: { [K in keyof this[\"_settings\"]]?: Array<<V extends this[\"_settings\"][K], O extends this>(value: V, target?: O, key?: K) => void> } = {};\n\n\tpublic _prevSettings: this[\"_settings\"] = {};\n\tpublic _prevPrivateSettings: this[\"_privateSettings\"] = {};\n\n\tprotected _animatingSettings: Animated<this[\"_settings\"]> = {};\n\tprotected _animatingPrivateSettings: Animated<this[\"_privateSettings\"]> = {};\n\tprotected _animatingCount: number = 0;\n\n\tprivate _disposed: boolean = false;\n\n\t// TODO move this into Entity\n\tprotected _userProperties: Dirty<this[\"_settings\"]> = {};\n\n\tconstructor(settings: Settings[\"_settings\"]) {\n\t\tthis._settings = settings;\n\t}\n\n\tprotected _checkDirty(): void {\n\t\t$object.keys(this._settings).forEach((key) => {\n\t\t\t(this._userProperties as any)[key] = true;\n\t\t\tthis._markDirtyKey(key);\n\t\t});\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract markDirty(): void;\n\n\tpublic _runAnimation(currentTime: number): boolean {\n\t\tif (!this.isDisposed()) {\n\t\t\t$object.each(this._animatingSettings, (key, animation) => {\n\t\t\t\tif (animation._stopped) {\n\t\t\t\t\tthis._stopAnimation(key);\n\n\t\t\t\t} else if (animation._playing) {\n\t\t\t\t\tanimation._run(currentTime);\n\n\t\t\t\t\tconst diff = animation.percentage;\n\n\t\t\t\t\tif (diff >= 1) {\n\t\t\t\t\t\tif (animation._checkEnded()) {\n\t\t\t\t\t\t\tthis.set(key, animation._value(1));\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tanimation._reset(currentTime);\n\t\t\t\t\t\t\tthis._set(key, animation._value(1));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._set(key, animation._value(diff));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t$object.each(this._animatingPrivateSettings, (key, animation) => {\n\t\t\t\tif (animation._stopped) {\n\t\t\t\t\tthis._stopAnimationPrivate(key);\n\n\t\t\t\t} else if (animation._playing) {\n\t\t\t\t\tanimation._run(currentTime);\n\n\t\t\t\t\tconst diff = animation.percentage;\n\n\t\t\t\t\tif (diff >= 1) {\n\t\t\t\t\t\tif (animation._checkEnded()) {\n\t\t\t\t\t\t\tthis.setPrivate(key, animation._value(1));\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tanimation._reset(currentTime);\n\t\t\t\t\t\t\tthis._setPrivate(key, animation._value(1));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._setPrivate(key, animation._value(diff));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (this._animatingCount < 0) {\n\t\t\t\tthrow new Error(\"Invalid animation count\");\n\t\t\t}\n\n\t\t\treturn this._animatingCount === 0;\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tprotected abstract _startAnimation(): void;\n\tprotected abstract _animationTime(): number | null;\n\n\tpublic _markDirtyKey<Key extends keyof this[\"_settings\"]>(_key: Key) {\n\t\tthis.markDirty();\n\t}\n\n\tpublic _markDirtyPrivateKey<Key extends keyof this[\"_privateSettings\"]>(_key: Key) {\n\t\tthis.markDirty();\n\t}\n\n\t/**\n\t * Sets a callback function to invoke when specific key of settings changes\n\t * or is set.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info\n\t * @param   key       Settings key\n\t * @param   callback  Callback\n\t * @return            Disposer for event\n\t */\n\tpublic on<Key extends keyof this[\"_settings\"]>(key: Key, callback: (value: this[\"_settings\"][Key], target?: this, key?: Key) => void): IDisposer {\n\t\tlet events = this._settingEvents[key];\n\n\t\tif (events === undefined) {\n\t\t\tevents = this._settingEvents[key] = [];\n\t\t}\n\n\t\tevents.push(callback);\n\n\t\treturn new Disposer(() => {\n\t\t\t$array.removeFirst(events!, callback);\n\n\t\t\tif (events!.length === 0) {\n\t\t\t\tdelete this._settingEvents[key];\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Sets a callback function to invoke when specific key of private settings\n\t * changes or is set.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info\n\t * @ignore\n\t * @param   key       Private settings key\n\t * @param   callback  Callback\n\t * @return            Disposer for event\n\t */\n\tpublic onPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key, callback: (value: this[\"_privateSettings\"][Key], target?: this, key?: Key) => void): IDisposer {\n\t\tlet events = this._privateSettingEvents[key];\n\n\t\tif (events === undefined) {\n\t\t\tevents = this._privateSettingEvents[key] = [];\n\t\t}\n\n\t\tevents.push(callback);\n\n\t\treturn new Disposer(() => {\n\t\t\t$array.removeFirst(events!, callback);\n\n\t\t\tif (events!.length === 0) {\n\t\t\t\tdelete this._privateSettingEvents[key];\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getRaw<Key extends keyof this[\"_settings\"], F>(key: Key, fallback: F): NonNullable<this[\"_settings\"][Key]> | F;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getRaw<Key extends keyof this[\"_settings\"]>(key: Key): this[\"_settings\"][Key];\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getRaw<Key extends keyof this[\"_settings\"]>(key: Key, fallback?: any): any {\n\t\tconst value = (<any>this._settings)[key];\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n\n\t/**\n\t * Returns settings value for the specified `key`.\n\t *\n\t * If there is no value, `fallback` ios returned instead (if set)/\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Settings value\n\t * @param   callback  Fallback value\n\t * @return  {any}     Value\n\t */\n\tpublic get<Key extends keyof this[\"_settings\"], F>(key: Key, fallback: F): NonNullable<this[\"_settings\"][Key]> | F;\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key): this[\"_settings\"][Key];\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key, fallback?: any): any {\n\t\treturn this.getRaw(key, fallback);\n\t}\n\n\tprotected _sendKeyEvent<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, value: Value): void {\n\t\tconst events = this._settingEvents[key];\n\n\t\tif (events !== undefined) {\n\t\t\t$array.each(events!, (callback) => {\n\t\t\t\tcallback(value, this, key);\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _sendPrivateKeyEvent<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, value: Value): void {\n\t\tconst events = this._privateSettingEvents[key];\n\n\t\tif (events !== undefined) {\n\t\t\t$array.each(events!, (callback) => {\n\t\t\t\tcallback(value, this, key);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprivate _setRaw<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, old: Value, value: Value) {\n\t\tthis._prevSettings[key] = old;\n\t\tthis._sendKeyEvent(key, value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic setRaw<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, value: Value) {\n\t\tconst old = (<any>this._settings)[key];\n\n\t\t(<any>this._settings)[key] = value;\n\n\t\tif (old !== value) {\n\t\t\tthis._setRaw(key, old, value);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprivate _set<Key extends keyof this[\"_settings\"]>(key: Key, value: this[\"_settings\"][Key]) {\n\t\tconst old = (<any>this._settings)[key];\n\n\t\t(<any>this._settings)[key] = value;\n\n\t\tif (old !== value) {\n\t\t\tthis._setRaw(key, old, value);\n\t\t\tthis._markDirtyKey(key);\n\t\t}\n\t}\n\n\n\tprotected _stopAnimation<Key extends keyof this[\"_settings\"]>(key: Key): void {\n\t\tconst animation = this._animatingSettings[key];\n\n\t\tif (animation) {\n\t\t\tdelete this._animatingSettings[key];\n\t\t\t--this._animatingCount;\n\t\t\tanimation.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Sets a setting `value` for the specified `key`, and returns the same `value`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Setting key\n\t * @param   value     Setting value\n\t * @return            Setting value\n\t */\n\tpublic set<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, value: Value): Value {\n\t\tthis._set(key, value);\n\t\tthis._stopAnimation(key);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Removes a setting value for the specified `key`;\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Setting key\n\t */\n\tpublic remove<Key extends keyof this[\"_settings\"]>(key: Key): void {\n\t\tif (key in this._settings) {\n\t\t\tthis._prevSettings[key] = (<any>this._settings)[key];\n\n\t\t\tdelete (<any>this._settings)[key];\n\n\t\t\tthis._sendKeyEvent(key, undefined as any);\n\t\t\tthis._markDirtyKey(key);\n\t\t}\n\n\t\tthis._stopAnimation(key);\n\t}\n\n\t/**\n\t * Removes all keys;\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t */\n\tpublic removeAll(): void {\n\t\t$array.each($object.keys(this._settings), (key) => {\n\t\t\tthis.remove(key);\n\t\t});\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getPrivate<Key extends keyof this[\"_privateSettings\"], F>(key: Key, fallback: F): NonNullable<this[\"_privateSettings\"][Key]> | F;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key): this[\"_privateSettings\"][Key];\n\n\t/**\n\t * Returns a value of a private setting.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/#Private_settings} for more info\n\t */\n\tpublic getPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key, fallback?: any): any {\n\t\tconst value = (<any>this._privateSettings)[key];\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprivate _setPrivateRaw<Key extends keyof this[\"_privateSettings\"], Value extends this[\"_privateSettings\"][Key]>(key: Key, old: Value, value: Value) {\n\t\tthis._prevPrivateSettings[key] = old;\n\t\tthis._sendPrivateKeyEvent(key, value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic setPrivateRaw<Key extends keyof this[\"_privateSettings\"], Value extends this[\"_privateSettings\"][Key]>(key: Key, value: Value) {\n\t\tconst old = (<any>this._privateSettings)[key];\n\n\t\t(<any>this._privateSettings)[key] = value;\n\n\t\tif (old !== value) {\n\t\t\tthis._setPrivateRaw(key, old, value);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprivate _setPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key, value: this[\"_privateSettings\"][Key]) {\n\t\tconst old = (<any>this._privateSettings)[key];\n\n\t\t(<any>this._privateSettings)[key] = value;\n\n\t\tif (old !== value) {\n\t\t\tthis._setPrivateRaw(key, old, value);\n\t\t\tthis._markDirtyPrivateKey(key);\n\t\t}\n\t}\n\n\tprotected _stopAnimationPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key): void {\n\t\tconst animation = this._animatingPrivateSettings[key];\n\n\t\tif (animation) {\n\t\t\tanimation.stop();\n\t\t\tdelete this._animatingPrivateSettings[key];\n\t\t\t--this._animatingCount;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic setPrivate<Key extends keyof this[\"_privateSettings\"], Value extends this[\"_privateSettings\"][Key]>(key: Key, value: Value): Value {\n\t\tthis._setPrivate(key, value);\n\t\tthis._stopAnimationPrivate(key);\n\t\treturn value;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic removePrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key): void {\n\t\tif (key in this._privateSettings) {\n\t\t\tthis._prevPrivateSettings[key] = (<any>this._privateSettings)[key];\n\n\t\t\tdelete (<any>this._privateSettings)[key];\n\n\t\t\tthis._markDirtyPrivateKey(key);\n\t\t}\n\n\t\tthis._stopAnimationPrivate(key);\n\t}\n\n\t/**\n\t * Sets multiple settings at once.\n\t *\n\t * `settings` must be an object with key: value pairs.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param settings Settings\n\t */\n\tpublic setAll(settings: Partial<this[\"_settings\"]>) {\n\t\t$object.each(settings, (key, value) => {\n\t\t\tthis.set(key, value);\n\t\t});\n\t}\n\n\t/**\n\t * Animates setting values from current/start values to new ones.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Animating_settings} for more info\n\t * @param   options  Animation options\n\t * @return           Animation object\n\t */\n\tpublic animate<Key extends keyof this[\"_settings\"]>(options: AnimationOptions<Key, this[\"_settings\"][Key]>): Animation<this[\"_settings\"][Key]> {\n\t\tconst key = options.key;\n\t\tconst to = options.to;\n\t\tconst duration = options.duration;\n\t\tconst loops = options.loops || 1;\n\n\t\tconst from = (options.from === undefined ? this.get(key) : options.from);\n\t\tconst easing = (options.easing === undefined ? $ease.linear : options.easing);\n\n\t\tif (duration === 0) {\n\t\t\tthis.set(key, to);\n\n\t\t} else {\n\t\t\tif (from === undefined || from === to) {\n\t\t\t\tthis.set(key, to);\n\n\t\t\t} else {\n\t\t\t\t++this._animatingCount;\n\n\t\t\t\tthis.set(key, from);\n\n\t\t\t\tconst animation = this._animatingSettings[key] = new Animation(from, to, duration, easing, loops, this._animationTime());\n\n\t\t\t\tthis._startAnimation();\n\n\t\t\t\treturn animation;\n\t\t\t}\n\t\t}\n\n\t\tconst animation = new Animation(from, to, duration, easing, loops, null);\n\t\tanimation.stop();\n\t\treturn animation;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic animatePrivate<Key extends keyof this[\"_privateSettings\"]>(options: AnimationOptions<Key, this[\"_privateSettings\"][Key]>): Animation<this[\"_privateSettings\"][Key]> {\n\t\tconst key = options.key;\n\t\tconst to = options.to;\n\t\tconst duration = options.duration;\n\t\tconst loops = options.loops || 1;\n\n\t\tconst from = (options.from === undefined ? this.getPrivate(key) : options.from);\n\t\tconst easing = (options.easing === undefined ? $ease.linear : options.easing);\n\n\t\tif (duration === 0) {\n\t\t\tthis.setPrivate(key, to);\n\n\t\t} else {\n\t\t\tif (from === undefined || from === to) {\n\t\t\t\tthis.setPrivate(key, to);\n\n\t\t\t} else {\n\t\t\t\t++this._animatingCount;\n\n\t\t\t\tthis.setPrivate(key, from);\n\n\t\t\t\tconst animation = this._animatingPrivateSettings[key] = new Animation(from, to, duration, easing, loops, this._animationTime());\n\n\t\t\t\tthis._startAnimation();\n\n\t\t\t\treturn animation;\n\t\t\t}\n\t\t}\n\n\t\tconst animation = new Animation(from, to, duration, easing, loops, null);\n\t\tanimation.stop();\n\t\treturn animation;\n\t}\n\n\tprotected _dispose() {}\n\n\t/**\n\t * Returns `true` if this element is disposed.\n\t *\n\t * @return Disposed\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Disposes this object.\n\t */\n\tpublic dispose() {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\t\t\tthis._dispose();\n\t\t}\n\t}\n}\n\n/**\n * Base class.\n *\n * @important\n */\nexport class Entity extends Settings implements IDisposer {\n\tpublic _root: Root;\n\n\tpublic _user_id:any; // for testing purposes\n\n\tdeclare public _settings: IEntitySettings;\n\tdeclare public _privateSettings: IEntityPrivate;\n\tdeclare public _events: IEntityEvents;\n\n\tpublic states: States<this> = new States(this);\n\tpublic adapters: Adapters<this> = new Adapters(this);\n\tpublic events: EventDispatcher<Events<this, this[\"_events\"]>> = this._createEvents();\n\n\tprotected _userPrivateProperties: Dirty<this[\"_privateSettings\"]> = {};\n\n\tpublic _dirty: Dirty<this[\"_settings\"]> = {};\n\tpublic _dirtyPrivate: Dirty<this[\"_privateSettings\"]> = {};\n\n\tprotected _template: Template<this> | undefined;\n\n\t// Templates for the themes\n\tprotected _templates: Array<Template<this>> = [];\n\n\t// Internal templates which can be overridden by the user's templates\n\tprotected _internalTemplates: Array<Template<this>>;\n\n\t// Default themes which can be overridden by the user's themes\n\tpublic _defaultThemes: Array<Theme> = [];\n\n\t// Disposers for all of the templates\n\tprotected _templateDisposers: Array<IDisposer> = [];\n\n\tprotected _disposers: Array<IDisposer> = [];\n\n\t// Whether the template setup function should be run\n\tprotected _runSetup: boolean = true;\n\n\tpublic static className: string = \"Entity\";\n\tpublic static classNames: Array<string> = [\"Entity\"];\n\n\tprotected _disposerProperties: { [Key in keyof this[\"_settings\"]]?: Array<IDisposer> } = {};\n\n\t/**\n\t * IMPORTANT! Do not instantiate this class via `new Class()` syntax.\n\t *\n\t * Use static method `Class.new()` instead.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\n\t * @ignore\n\t */\n\tconstructor(root: Root, settings: Entity[\"_settings\"], isReal: boolean, templates: Array<Template<Entity>> = []) {\n\t\tsuper(settings);\n\t\tif (!isReal) {\n\t\t\tthrow new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n\t\t}\n\t\tthis._root = root;\n\t\tthis._internalTemplates = templates as Array<Template<this>>;\n\t}\n\n\t/**\n\t * Use this method to create an instance of this class.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\n\t * @param   root      Root element\n\t * @param   settings  Settings\n\t * @param   template  Template\n\t * @return            Instantiated object\n\t */\n\tstatic new<C extends typeof Entity, T extends InstanceType<C>>(this: C, root: Root, settings: T[\"_settings\"], template?: Template<T>): T {\n\t\tconst x = (new this(root, settings, true)) as T;\n\t\tx._template = template;\n\t\tx._afterNew();\n\t\treturn x;\n\t}\n\n\tstatic _new<C extends typeof Entity, T extends InstanceType<C>>(this: C, root: Root, settings: T[\"_settings\"], templates: Array<Template<T>> = []): T {\n\t\tconst x = (new this(root, settings, true, templates)) as T;\n\t\tx._afterNew();\n\t\treturn x;\n\t}\n\n\tprotected _afterNew() {\n\t\tthis._checkDirty();\n\n\t\tlet shouldApply = false;\n\n\t\tconst template = this._template;\n\n\t\tif (template) {\n\t\t\tshouldApply = true;\n\t\t\ttemplate._setObjectTemplate(this);\n\t\t}\n\n\t\t$array.each(this._internalTemplates, (template) => {\n\t\t\tshouldApply = true;\n\t\t\ttemplate._setObjectTemplate(this);\n\t\t});\n\n\t\tif (shouldApply) {\n\t\t\tthis._applyTemplates(false);\n\t\t}\n\n\t\tthis.states.create(\"default\", {});\n\n\t\tthis._setDefaults();\n\t}\n\n\t// This is the same as _afterNew, except it also applies the themes.\n\t// This should only be used for classes which don't have a parent (because they extend from Entity and not Sprite).\n\tprotected _afterNewApplyThemes() {\n\t\tthis._checkDirty();\n\n\t\tconst template = this._template;\n\n\t\tif (template) {\n\t\t\ttemplate._setObjectTemplate(this);\n\t\t}\n\n\t\t$array.each(this._internalTemplates, (template) => {\n\t\t\ttemplate._setObjectTemplate(this);\n\t\t});\n\n\t\tthis.states.create(\"default\", {});\n\n\t\tthis._setDefaults();\n\n\t\tthis._applyThemes();\n\t}\n\n\tprotected _createEvents(): EventDispatcher<Events<this, this[\"_events\"]>> {\n\t\treturn new EventDispatcher();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic get classNames(): Array<string> {\n\t\treturn (this.constructor as any).classNames;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic get className(): string {\n\t\treturn (this.constructor as any).className;\n\t}\n\n\tprotected _setDefaults(){\n\n\t}\n\n\tpublic _setDefault<Key extends keyof this[\"_settings\"]>(key: Key, value: this[\"_settings\"][Key]) {\n\t\tif (!(key in this._settings)) {\n\t\t\tsuper.set(key, value);\n\t\t}\n\t}\n\n\tpublic _setRawDefault<Key extends keyof this[\"_settings\"]>(key: Key, value: this[\"_settings\"][Key]) {\n\t\tif (!(key in this._settings)) {\n\t\t\tsuper.setRaw(key, value);\n\t\t}\n\t}\n\n\tpublic _clearDirty() {\n\t\t$object.keys(this._dirty).forEach((key) => {\n\t\t\tthis._dirty[key] = false;\n\t\t});\n\n\t\t$object.keys(this._dirtyPrivate).forEach((key) => {\n\t\t\tthis._dirtyPrivate[key] = false;\n\t\t});\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic isDirty<Key extends keyof this[\"_settings\"]>(key: Key): boolean {\n\t\treturn !!this._dirty[key];\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic isPrivateDirty<Key extends keyof this[\"_privateSettings\"]>(key: Key): boolean {\n\t\treturn !!this._dirtyPrivate[key];\n\t}\n\n\tpublic _markDirtyKey<Key extends keyof this[\"_settings\"]>(key: Key) {\n\t\tthis._dirty[key] = true;\n\t\tsuper._markDirtyKey(key);\n\t}\n\n\tpublic _markDirtyPrivateKey<Key extends keyof this[\"_privateSettings\"]>(key: Key) {\n\t\tthis._dirtyPrivate[key] = true;\n\t\tsuper._markDirtyKey(key);\n\t}\n\n\t/**\n\t * Checks if element is of certain class (or inherits one).\n\t *\n\t * @param   type  Class name to check\n\t * @return {boolean} Is of class?\n\t */\n\tpublic isType<A>(type: string): this is A {\n\t\treturn this.classNames.indexOf(type) !== -1;\n\t}\n\n\tprotected _pushPropertyDisposer<Key extends keyof this[\"_settings\"], D extends IDisposer>(key: Key, disposer: D): D {\n\t\tlet disposers = this._disposerProperties[key];\n\n\t\tif (disposers === undefined) {\n\t\t\tdisposers = this._disposerProperties[key] = [];\n\t\t}\n\n\t\tdisposers.push(disposer);\n\n\t\treturn disposer;\n\t}\n\n\tprotected _disposeProperty<Key extends keyof this[\"_settings\"]>(key: Key): void {\n\t\tconst disposers = this._disposerProperties[key];\n\n\t\tif (disposers !== undefined) {\n\t\t\t$array.each(disposers!, (disposer) => {\n\t\t\t\tdisposer.dispose();\n\t\t\t});\n\n\t\t\tdelete this._disposerProperties[key];\n\t\t}\n\t}\n\n\t/**\n\t * @todo needs description\n\t * @param  value  Template\n\t */\n\tpublic set template(value: Template<this> | undefined) {\n\t\tconst template = this._template;\n\n\t\tif (template !== value) {\n\t\t\tthis._template = value;\n\n\t\t\tif (template) {\n\t\t\t\ttemplate._removeObjectTemplate(this);\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tvalue._setObjectTemplate(this);\n\t\t\t}\n\n\t\t\tthis._applyTemplates();\n\t\t}\n\t}\n\n\tpublic get template(): Template<this> | undefined {\n\t\treturn this._template;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirty() {\n\t\tthis._root._addDirtyEntity(this);\n\t}\n\n\tprotected _startAnimation(): void {\n\t\tthis._root._addAnimation(this);\n\t}\n\n\tprotected _animationTime(): number | null {\n\t\treturn this._root.animationTime;\n\t}\n\n\tpublic _applyState(_name: string): void { }\n\tpublic _applyStateAnimated(_name: string, _duration?: number): void { }\n\n\t/**\n\t * Returns settings value for the specified `key`.\n\t *\n\t * If there is no value, `fallback` is returned instead (if set).\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Settings value\n\t * @param   callback  Fallback value\n\t * @return            Value\n\t */\n\tpublic get<Key extends keyof this[\"_settings\"], F>(key: Key, fallback: F): NonNullable<this[\"_settings\"][Key]> | F;\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key): this[\"_settings\"][Key];\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key, fallback?: any): any {\n\t\tconst value = this.adapters.fold(key, (<any>this._settings)[key]);\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n\n\t/**\n\t * Sets a setting `value` for the specified `key`, and returns the same `value`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Setting key\n\t * @param   value     Setting value\n\t * @return            Setting value\n\t */\n\tpublic set<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, value: Value): Value {\n\t\tthis._userProperties[key] = true;\n\t\treturn super.set(key, value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic setRaw<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, value: Value) {\n\t\tthis._userProperties[key] = true;\n\t\tsuper.setRaw(key, value);\n\t}\n\n\t/**\n\t * Sets a setting `value` for the specified `key` only if the value for this key was not set previously using set method, and returns the same `value`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Setting key\n\t * @param   value     Setting value\n\t * @return            Setting value\n\t */\n\tpublic _setSoft<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, value: Value): Value {\n\t\tif(!this._userProperties[key]){\n\t\t\treturn super.set(key, value);\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Removes a setting value for the specified `key`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Setting key\n\t */\n\tpublic remove<Key extends keyof this[\"_settings\"]>(key: Key) {\n\t\tdelete this._userProperties[key];\n\t\tthis._removeTemplateProperty(key);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic setPrivate<Key extends keyof this[\"_privateSettings\"], Value extends this[\"_privateSettings\"][Key]>(key: Key, value: Value): Value {\n\t\tthis._userPrivateProperties[key] = true;\n\t\treturn super.setPrivate(key, value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic setPrivateRaw<Key extends keyof this[\"_privateSettings\"], Value extends this[\"_privateSettings\"][Key]>(key: Key, value: Value) {\n\t\tthis._userPrivateProperties[key] = true;\n\t\tsuper.setPrivateRaw(key, value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic removePrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key) {\n\t\tdelete this._userPrivateProperties[key];\n\t\tthis._removeTemplatePrivateProperty(key);\n\t}\n\n\tpublic _setTemplateProperty<Key extends keyof this[\"_settings\"]>(template: Template<this>, key: Key, value: this[\"_settings\"][Key]) {\n\t\tif (!this._userProperties[key]) {\n\t\t\tconst match = this._findTemplateByKey(key);\n\n\t\t\tif (template === match) {\n\t\t\t\tsuper.set(key, value);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _setTemplatePrivateProperty<Key extends keyof this[\"_privateSettings\"]>(template: Template<this>, key: Key, value: this[\"_privateSettings\"][Key]) {\n\t\tif (!this._userPrivateProperties[key]) {\n\t\t\tconst match = this._findTemplateByPrivateKey(key);\n\n\t\t\tif (template === match) {\n\t\t\t\tsuper.setPrivate(key, value);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _removeTemplateProperty<Key extends keyof this[\"_settings\"]>(key: Key) {\n\t\tif (!this._userProperties[key]) {\n\t\t\tconst match = this._findTemplateByKey(key);\n\n\t\t\tif (match) {\n\t\t\t\t// TODO don't stop the animation if the property didn't change\n\t\t\t\tsuper.set(key, match._settings[key]!);\n\n\t\t\t} else {\n\t\t\t\tsuper.remove(key);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _removeTemplatePrivateProperty<Key extends keyof this[\"_privateSettings\"]>(key: Key) {\n\t\tif (!this._userPrivateProperties[key]) {\n\t\t\tconst match = this._findTemplateByPrivateKey(key);\n\n\t\t\tif (match) {\n\t\t\t\t// TODO don't stop the animation if the property didn't change\n\t\t\t\tsuper.setPrivate(key, match._privateSettings[key]);\n\n\t\t\t} else {\n\t\t\t\tsuper.removePrivate(key);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _walkParents(f: (parent: Entity) => void): void {\n\t\tf(this._root._rootContainer);\n\t\tf(this);\n\t}\n\n\t// TODO faster version of this method which is specialized to just 1 key\n\tpublic _applyStateByKey(name: string): void {\n\t\tconst other = this.states.create(name, {});\n\t\tconst seen: Dirty<this[\"_settings\"]> = {};\n\n\t\tthis._eachTemplate((template) => {\n\t\t\tconst state = template.states.lookup(name);\n\n\t\t\tif (state) {\n\t\t\t\tstate._apply(other, seen);\n\t\t\t}\n\t\t});\n\n\t\t$object.each(other._settings, (key) => {\n\t\t\tif (!seen[key] && !other._userSettings[key]) {\n\t\t\t\tother.remove(key);\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _applyTemplate(template: Template<this>, state: ApplyState<this>): void {\n\t\tthis._templateDisposers.push(template._apply(this, state));\n\n\t\t$object.each(template._settings, (key, value) => {\n\t\t\tif (!state.settings[key] && !this._userProperties[key]) {\n\t\t\t\tstate.settings[key] = true;\n\t\t\t\tsuper.set(key, value);\n\t\t\t}\n\t\t});\n\n\t\t$object.each(template._privateSettings, (key, value) => {\n\t\t\tif (!state.privateSettings[key] && !this._userPrivateProperties[key]) {\n\t\t\t\tstate.privateSettings[key] = true;\n\t\t\t\tsuper.setPrivate(key, value);\n\t\t\t}\n\t\t});\n\n\t\tif (this._runSetup && template.setup) {\n\t\t\tthis._runSetup = false;\n\t\t\ttemplate.setup(this);\n\t\t}\n\t}\n\n\t/**\n\t * Calls the closure with each template and returns the first template which is true\n\t */\n\tprotected _findStaticTemplate(f: (template: Template<this>) => boolean): Template<this> | undefined {\n\t\tif (this._template) {\n\t\t\tif (f(this._template)) {\n\t\t\t\treturn this._template;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _eachTemplate(f: (template: Template<this>) => void): void {\n\t\tthis._findStaticTemplate((template) => {\n\t\t\tf(template);\n\t\t\treturn false;\n\t\t});\n\n\t\t// _internalTemplates is sorted with most specific to the right\n\t\t$array.eachReverse(this._internalTemplates, f);\n\n\t\t// _templates is sorted with most specific to the left\n\t\t$array.each(this._templates, f);\n\t}\n\n\tpublic _applyTemplates(remove: boolean = true): void {\n\t\tif (remove) {\n\t\t\tthis._disposeTemplates();\n\t\t}\n\n\t\tconst state: ApplyState<this> = {\n\t\t\tsettings: {},\n\t\t\tprivateSettings: {},\n\t\t\tstates: {},\n\t\t};\n\n\t\tthis._eachTemplate((template) => {\n\t\t\tthis._applyTemplate(template, state);\n\t\t});\n\n\t\tif (remove) {\n\t\t\t$object.each(this._settings, (key) => {\n\t\t\t\tif (!this._userProperties[key] && !state.settings[key]) {\n\t\t\t\t\tsuper.remove(key);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t$object.each(this._privateSettings, (key) => {\n\t\t\t\tif (!this._userPrivateProperties[key] && !state.privateSettings[key]) {\n\t\t\t\t\tsuper.removePrivate(key);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _findTemplate(f: (template: Template<this>) => boolean): Template<this> | undefined {\n\t\tconst value = this._findStaticTemplate(f);\n\n\t\tif (value === undefined) {\n\t\t\t// _internalTemplates is sorted with most specific to the right\n\t\t\tconst value = $array.findReverse(this._internalTemplates, f);\n\n\t\t\tif (value === undefined) {\n\t\t\t\t// _templates is sorted with most specific to the left\n\t\t\t\treturn $array.find(this._templates, f);\n\n\t\t\t} else {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\t}\n\n\tprotected _findTemplateByKey<Key extends keyof this[\"_settings\"]>(key: Key): Template<this> | undefined {\n\t\treturn this._findTemplate((template) => {\n\t\t\treturn key in template._settings;\n\t\t});\n\t}\n\n\tprotected _findTemplateByPrivateKey<Key extends keyof this[\"_privateSettings\"]>(key: Key): Template<this> | undefined {\n\t\treturn this._findTemplate((template) => {\n\t\t\treturn key in template._privateSettings;\n\t\t});\n\t}\n\n\tprotected _disposeTemplates() {\n\t\t$array.each(this._templateDisposers, (disposer) => {\n\t\t\tdisposer.dispose();\n\t\t});\n\n\t\tthis._templateDisposers.length = 0;\n\t}\n\n\tprotected _removeTemplates() {\n\t\t$array.each(this._templates, (template) => {\n\t\t\ttemplate._removeObjectTemplate(this);\n\t\t});\n\n\t\tthis._templates.length = 0;\n\t}\n\n\tpublic _applyThemes(): boolean {\n\t\tlet isConnected = false;\n\n\t\tconst defaults: Array<Array<Theme>> = [];\n\n\t\tlet themes: Array<Array<Theme>> = [];\n\n\t\tconst themeTags: Set<string> = new Set();\n\n\t\tconst tags = this.get(\"themeTagsSelf\");\n\n\t\tif (tags) {\n\t\t\t$array.each(tags, (tag) => {\n\t\t\t\tthemeTags.add(tag);\n\t\t\t});\n\t\t}\n\n\t\tthis._walkParents((entity) => {\n\t\t\tif (entity === this._root._rootContainer) {\n\t\t\t\tisConnected = true;\n\t\t\t}\n\n\t\t\tif (entity._defaultThemes.length > 0) {\n\t\t\t\tdefaults.push(entity._defaultThemes);\n\t\t\t}\n\n\t\t\tconst theme = entity.get(\"themes\");\n\n\t\t\tif (theme) {\n\t\t\t\tthemes.push(theme);\n\t\t\t}\n\n\t\t\tconst tags = entity.get(\"themeTags\");\n\n\t\t\tif (tags) {\n\t\t\t\t$array.each(tags, (tag) => {\n\t\t\t\t\tthemeTags.add(tag);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tthemes = defaults.concat(themes);\n\n\t\tthis._removeTemplates();\n\n\t\tif (isConnected) {\n\t\t\t$array.eachReverse(this.classNames, (name) => {\n\t\t\t\tconst allRules: Array<IRule<this>> = [];\n\n\t\t\t\t$array.each(themes, (themes) => {\n\t\t\t\t\t$array.each(themes, (theme) => {\n\t\t\t\t\t\tconst rules = theme._lookupRules<this>(name);\n\n\t\t\t\t\t\tif (rules) {\n\t\t\t\t\t\t\t$array.eachReverse(rules, (rule) => {\n\t\t\t\t\t\t\t\tconst matches = rule.tags.every((tag) => {\n\t\t\t\t\t\t\t\t\treturn themeTags.has(tag);\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (matches) {\n\t\t\t\t\t\t\t\t\tconst result = $array.getFirstSortedIndex(allRules, (x) => {\n\t\t\t\t\t\t\t\t\t\tconst order = $order.compare(rule.tags.length, x.tags.length);\n\n\t\t\t\t\t\t\t\t\t\tif (order === 0) {\n\t\t\t\t\t\t\t\t\t\t\treturn $order.compareArray(rule.tags, x.tags, $order.compare);\n\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\treturn order;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\tallRules.splice(result.index, 0, rule);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t$array.each(allRules, (rule) => {\n\t\t\t\t\tthis._templates.push(rule.template);\n\t\t\t\t\trule.template._setObjectTemplate(this);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tthis._applyTemplates();\n\n\t\tif (isConnected) {\n\t\t\t// This causes it to only run the setup function the first time that the themes are applied\n\t\t\tthis._runSetup = false;\n\t\t}\n\n\t\treturn isConnected;\n\t}\n\n\tpublic _changed(): void { }\n\n\tpublic _beforeChanged(): void {\n\n\t\tif (this.isDirty(\"id\")) {\n\t\t\tconst id = this.get(\"id\")!;\n\t\t\tif (id) {\n\t\t\t\tif (registry.entitiesById[id]) {\n\t\t\t\t\tthrow new Error(\"An entity with id \\\"\" + id + \"\\\" already exists.\");\n\t\t\t\t}\n\t\t\t\tregistry.entitiesById[id] = this;\n\t\t\t}\n\n\t\t\tconst prevId = this._prevSettings.id;\n\t\t\tif(prevId) {\n\t\t\t\tdelete registry.entitiesById[prevId];\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _afterChanged(): void { }\n\n\t/**\n\t * @ignore\n\t */\n\tpublic addDisposer<T extends IDisposer>(disposer: T): T {\n\t\tthis._disposers.push(disposer);\n\t\treturn disposer;\n\t}\n\n\tprotected _dispose() {\n\t\tsuper._dispose();\n\n\t\tconst template = this._template;\n\n\t\tif (template) {\n\t\t\ttemplate._removeObjectTemplate(this);\n\t\t}\n\n\t\t$array.each(this._internalTemplates, (template) => {\n\t\t\ttemplate._removeObjectTemplate(this);\n\t\t});\n\n\t\tthis._removeTemplates();\n\t\tthis._disposeTemplates();\n\n\t\tthis.events.dispose();\n\n\t\tthis._disposers.forEach((x) => {\n\t\t\tx.dispose();\n\t\t});\n\n\t\t$object.each(this._disposerProperties, (_, disposers) => {\n\t\t\t$array.each(disposers, (disposer) => {\n\t\t\t\tdisposer.dispose();\n\t\t\t});\n\t\t});\n\n\t\tconst id = this.get(\"id\")!;\n\t\tif (id) {\n\t\t\tdelete registry.entitiesById[id];\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns a \"disposable\" timeout.\n\t *\n\t * @param   fn     Callback\n\t * @param   delay  Delay in milliseconds\n\t * @return         Timeout disposer\n\t */\n\tpublic setTimeout(fn: () => void, delay: number): IDisposer {\n\t\tconst id = setTimeout(() => {\n\t\t\tthis.removeDispose(disposer);\n\t\t\tfn();\n\t\t}, delay);\n\n\t\tconst disposer = new Disposer(() => {\n\t\t\tclearTimeout(id);\n\t\t});\n\n\t\tthis._disposers.push(disposer);\n\t\treturn disposer;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic removeDispose(target: IDisposer): void {\n\t\tif (!this.isDisposed()) {\n\t\t\tlet index = $array.indexOf(this._disposers, target);\n\t\t\tif (index > -1) {\n\t\t\t\tthis._disposers.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\ttarget.dispose();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic hasTag(tag: string): boolean {\n\t\treturn $array.indexOf(this.get(\"themeTags\", []), tag) !== -1;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic addTag(tag: string): void {\n\t\tif (!this.hasTag(tag)) {\n\t\t\tconst tags = (<any>this).get(\"themeTags\", []);\n\t\t\ttags.push(tag);\n\t\t\tthis.set(\"themeTags\", tags);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic removeTag(tag: string): void {\n\t\tif (this.hasTag(tag)) {\n\t\t\tconst tags = (<any>this).get(\"themeTags\", []);\n\t\t\t$array.remove(tags, tag);\n\t\t\tthis.set(\"themeTags\", tags);\n\t\t}\n\t}\n\n\tprotected _t(text: any, locale?: ILocale, ...rest: Array<string>){\n\t\treturn this._root.language.translate(text, locale, ...rest);\n\t}\n\n\t/**\n\t * An instance of [[Root]] object.\n\t *\n\t * @readonly\n\t * @since 5.0.6\n\t * @return Root object\n\t */\n\tpublic get root(): Root {\n\t\treturn this._root;\n\t}\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}