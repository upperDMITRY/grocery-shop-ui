{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport { arc } from \"d3-shape\";\nimport * as $math from \"../util/Math\";\n/**\r\n * Draws a slice shape.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n */\nvar Slice = /** @class */function (_super) {\n  __extends(Slice, _super);\n  function Slice() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * @ignore\r\n     */\n    Object.defineProperty(_this, \"ix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    /**\r\n     * @ignore\r\n     */\n    Object.defineProperty(_this, \"iy\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_generator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: arc()\n    });\n    return _this;\n  }\n  Object.defineProperty(Slice.prototype, \"_getTooltipPoint\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var tooltipX = this.get(\"tooltipX\");\n      var tooltipY = this.get(\"tooltipY\");\n      var x = 0;\n      var y = 0;\n      if ($type.isNumber(tooltipX)) {\n        x = tooltipX;\n      }\n      if ($type.isNumber(tooltipY)) {\n        y = tooltipY;\n      }\n      var radius = this.get(\"radius\", 0);\n      var innerRadius = this.get(\"innerRadius\", 0);\n      var dRadius = this.get(\"dRadius\", 0);\n      var dInnerRadius = this.get(\"dInnerRadius\", 0);\n      radius += dRadius;\n      innerRadius += dInnerRadius;\n      if (innerRadius < 0) {\n        innerRadius = radius + innerRadius;\n      }\n      if (tooltipX instanceof Percent) {\n        x = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value);\n      }\n      if (tooltipY instanceof Percent) {\n        y = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value);\n      }\n      if (this.get(\"arc\") >= 360 && innerRadius == 0) {\n        x = 0;\n        y = 0;\n      }\n      return {\n        x: x,\n        y: y\n      };\n    }\n  });\n  Object.defineProperty(Slice.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n      if (this.isDirty(\"radius\") || this.isDirty(\"arc\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"dRadius\") || this.isDirty(\"dInnerRadius\") || this.isDirty(\"cornerRadius\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Slice.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n      if (this._clear) {\n        var startAngle = this.get(\"startAngle\", 0);\n        var arc_1 = this.get(\"arc\", 0);\n        var generator = this._generator;\n        generator.cornerRadius(this.get(\"cornerRadius\", 0));\n        generator.context(this._display);\n        var radius = this.get(\"radius\", 0);\n        var innerRadius = this.get(\"innerRadius\", 0);\n        var dRadius = this.get(\"dRadius\", 0);\n        var dInnerRadius = this.get(\"dInnerRadius\", 0);\n        radius += dRadius;\n        innerRadius += dInnerRadius;\n        if (innerRadius < 0) {\n          innerRadius = radius + innerRadius;\n        }\n        generator({\n          innerRadius: innerRadius,\n          outerRadius: radius,\n          startAngle: (startAngle + 90) * $math.RADIANS,\n          endAngle: (startAngle + arc_1 + 90) * $math.RADIANS\n        });\n        var middleAngle = startAngle + arc_1 / 2;\n        this.ix = $math.cos(middleAngle);\n        this.iy = $math.sin(middleAngle);\n      }\n      if (this.isDirty(\"shiftRadius\")) {\n        var shiftRadius = this.get(\"shiftRadius\", 0);\n        this.setRaw(\"dx\", this.ix * shiftRadius);\n        this.setRaw(\"dy\", this.iy * shiftRadius);\n        this.markDirtyPosition();\n      }\n    }\n  });\n  Object.defineProperty(Slice, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Slice\"\n  });\n  Object.defineProperty(Slice, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([Slice.className])\n  });\n  return Slice;\n}(Graphics);\nexport { Slice };","map":{"version":3,"names":["Graphics","$type","Percent","arc","$math","Slice","_super","__extends","_this","apply","arguments","Object","defineProperty","value","tooltipX","get","tooltipY","x","y","isNumber","radius","innerRadius","dRadius","dInnerRadius","ix","iy","prototype","_beforeChanged","call","isDirty","_clear","_changed","startAngle","arc_1","generator","_generator","cornerRadius","context","_display","outerRadius","RADIANS","endAngle","middleAngle","cos","sin","shiftRadius","setRaw","markDirtyPosition","classNames","concat","className"],"sources":["../../../../../src/.internal/core/render/Slice.ts"],"sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { IPoint } from \"../util/IPoint\";\nimport { arc } from \"d3-shape\";\nimport * as $math from \"../util/Math\";\n\nexport interface ISliceSettings extends IGraphicsSettings {\n\n\t/**\n\t * Radius in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Slice \"width\" in degrees.\n\t */\n\tarc?: number;\n\n\t/**\n\t * Inner radius of the slice in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Start angle in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Slice corner radius in pixels.\n\t */\n\tcornerRadius?: number;\n\n\t/**\n\t * Slice \"pull out\" radius in pixels.\n\t */\n\tshiftRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `radius` value is. Negative\n\t * numbers can also be used.\n\t */\n\tdRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `innerRadius` value is.\n\t * Negative numbers can also be used.\n\t */\n\tdInnerRadius?: number;\n\n}\n\nexport interface ISlicePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a slice shape.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n */\nexport class Slice extends Graphics {\n\n\tdeclare public _settings: ISliceSettings;\n\tdeclare public _privateSettings: ISlicePrivate;\n\n\tpublic static className: string = \"Slice\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Slice.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic ix: number = 0;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic iy: number = 0;\n\n\tprotected _generator = arc();\n\n\tpublic _getTooltipPoint(): IPoint {\n\t\tlet tooltipX = this.get(\"tooltipX\");\n\t\tlet tooltipY = this.get(\"tooltipY\");\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tif ($type.isNumber(tooltipX)) {\n\t\t\tx = tooltipX;\n\t\t}\n\n\t\tif ($type.isNumber(tooltipY)) {\n\t\t\ty = tooltipY;\n\t\t}\n\n\t\tlet radius = this.get(\"radius\", 0);\n\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\tradius += dRadius;\n\t\tinnerRadius += dInnerRadius;\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (tooltipX instanceof Percent) {\n\t\t\tx = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value)\n\t\t}\n\n\t\tif (tooltipY instanceof Percent) {\n\t\t\ty = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value)\n\t\t}\n\n\t\tif (this.get(\"arc\") >= 360 && innerRadius == 0) {\n\t\t\tx = 0;\n\t\t\ty = 0;\n\t\t}\n\n\n\t\treturn { x, y };\n\t}\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"arc\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"dRadius\") || this.isDirty(\"dInnerRadius\") || this.isDirty(\"cornerRadius\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\t\t\tconst startAngle = this.get(\"startAngle\", 0);\n\t\t\tconst arc = this.get(\"arc\", 0);\n\t\t\tconst generator = this._generator;\n\t\t\tgenerator.cornerRadius(this.get(\"cornerRadius\", 0));\n\t\t\tgenerator.context(this._display as any);\n\n\n\t\t\tlet radius = this.get(\"radius\", 0);\n\t\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\t\tradius += dRadius;\n\t\t\tinnerRadius += dInnerRadius;\t\t\t\n\n\t\t\tif (innerRadius < 0) {\n\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t}\n\n\t\t\tgenerator({ innerRadius: innerRadius, outerRadius: radius, startAngle: (startAngle + 90) * $math.RADIANS, endAngle: (startAngle + arc + 90) * $math.RADIANS });\n\n\t\t\tlet middleAngle = startAngle + arc / 2;\n\n\t\t\tthis.ix = $math.cos(middleAngle);\n\t\t\tthis.iy = $math.sin(middleAngle);\n\t\t}\n\n\t\tif (this.isDirty(\"shiftRadius\")) {\n\t\t\tconst shiftRadius = this.get(\"shiftRadius\", 0);\n\t\t\tthis.setRaw(\"dx\", this.ix * shiftRadius);\n\t\t\tthis.setRaw(\"dy\", this.iy * shiftRadius);\n\t\t\tthis.markDirtyPosition();\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}