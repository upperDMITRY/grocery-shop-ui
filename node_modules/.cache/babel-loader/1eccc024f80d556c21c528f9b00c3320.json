{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { Component } from \"../../core/render/Component\";\nimport { List } from \"../../core/util/List\";\nimport { Color } from \"../../core/util/Color\";\nimport { percentInterpolate } from \"../../core/util/Animation\";\nimport { Percent } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $time from \"../../core/util/Time\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { Container } from \"../../core/render/Container\";\nimport { Label } from \"../../core/render/Label\";\n/**\r\n * A base class for all series.\r\n */\n\nvar Series =\n/** @class */\nfunction (_super) {\n  __extends(Series, _super);\n\n  function Series() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_aggregatesCalculated\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_selectionAggregatesCalculated\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_dataProcessed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_psi\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_pei\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * A chart series belongs to.\r\n     */\n\n    Object.defineProperty(_this, \"chart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * List of bullets to use for the series.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/} for more info\r\n     */\n\n    Object.defineProperty(_this, \"bullets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new List()\n    });\n    /**\r\n     * A [[Container]] series' bullets are stored in.\r\n     *\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"bulletsContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(_this._root, {\n        isMeasured: false,\n        width: p100,\n        height: p100,\n        position: \"absolute\"\n      })\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Series.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      this.valueFields.push(\"value\");\n\n      _super.prototype._afterNew.call(this);\n\n      this._disposers.push(this.bullets.events.onAll(function (change) {\n        if (change.type === \"clear\") {\n          _this._handleBullets(_this.dataItems);\n        } else if (change.type === \"push\") {\n          _this._handleBullets(_this.dataItems);\n        } else if (change.type === \"setIndex\") {\n          _this._handleBullets(_this.dataItems);\n        } else if (change.type === \"insertIndex\") {\n          _this._handleBullets(_this.dataItems);\n        } else if (change.type === \"removeIndex\") {\n          _this._handleBullets(_this.dataItems);\n        } else {\n          throw new Error(\"Unknown IListEvent type\");\n        }\n      }));\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      this.bulletsContainer.dispose(); // can be in a different parent\n\n      _super.prototype._dispose.call(this);\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_handleBullets\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItems) {\n      $array.each(dataItems, function (dataItem) {\n        var bullets = dataItem.bullets;\n\n        if (bullets) {\n          $array.each(bullets, function (bullet) {\n            bullet.dispose();\n          });\n          dataItem.bullets = undefined;\n        }\n      });\n\n      this._markDirtyValues();\n    }\n  });\n  /**\r\n   * Looks up and returns a data item by its ID.\r\n   *\r\n   * @param   id  ID\r\n   * @return      Data item\r\n   */\n\n  Object.defineProperty(Series.prototype, \"getDataItemById\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(id) {\n      return $array.find(this.dataItems, function (dataItem) {\n        return dataItem.get(\"id\") == id;\n      });\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_makeBullets\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem) {\n      var _this = this;\n\n      if (this._shouldMakeBullet(dataItem)) {\n        dataItem.bullets = [];\n        this.bullets.each(function (bulletFunction) {\n          _this._makeBullet(dataItem, bulletFunction);\n        });\n      }\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_shouldMakeBullet\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_dataItem) {\n      return true;\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_makeBullet\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem, bulletFunction, index) {\n      var bullet = bulletFunction(this._root, this, dataItem);\n\n      if (bullet) {\n        var sprite = bullet.get(\"sprite\");\n\n        if (sprite) {\n          sprite._setDataItem(dataItem);\n\n          sprite.setRaw(\"position\", \"absolute\");\n          this.bulletsContainer.children.push(sprite);\n        }\n\n        bullet._index = index;\n        bullet.series = this;\n        dataItem.bullets.push(bullet);\n      }\n\n      return bullet;\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_clearDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      _super.prototype._clearDirty.call(this);\n\n      this._aggregatesCalculated = false;\n      this._selectionAggregatesCalculated = false;\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      _super.prototype._prepareChildren.call(this);\n\n      var len = this.dataItems.length;\n      var startIndex = this.getPrivate(\"startIndex\", 0);\n      var endIndex = Math.min(len, this.getPrivate(\"endIndex\", len));\n      this.setPrivateRaw(\"endIndex\", endIndex); // update to handle less data\n\n      var calculateAggregates = this.get(\"calculateAggregates\");\n\n      if (calculateAggregates) {\n        if (this._valuesDirty && !this._dataProcessed) {\n          if (!this._aggregatesCalculated) {\n            this._calculateAggregates(0, this.dataItems.length);\n\n            this._aggregatesCalculated = true;\n          }\n        }\n\n        if ((this._psi != startIndex || this._pei != endIndex) && !this._selectionAggregatesCalculated) {\n          if (startIndex === 0 && endIndex === this.dataItems.length && this._aggregatesCalculated) {// void\n          } else {\n            this._calculateAggregates(startIndex, endIndex);\n          }\n\n          this._selectionAggregatesCalculated = true;\n        }\n      }\n\n      if (this.isDirty(\"tooltip\")) {\n        var tooltip = this.get(\"tooltip\");\n\n        if (tooltip) {\n          tooltip.hide(0);\n          tooltip.set(\"tooltipTarget\", this);\n        }\n      }\n\n      if (this.bullets.length > 0) {\n        var count = this.dataItems.length;\n\n        for (var i = 0; i < startIndex; i++) {\n          this._hideBullets(this.dataItems[i]);\n        }\n\n        for (var i = startIndex; i < endIndex; i++) {\n          var dataItem = this.dataItems[i];\n\n          if (!dataItem.bullets) {\n            this._makeBullets(dataItem);\n          }\n        }\n\n        for (var i = endIndex; i < count; i++) {\n          this._hideBullets(this.dataItems[i]);\n        }\n      }\n\n      if (this.isDirty(\"fill\") || this.isDirty(\"stroke\")) {\n        var markerRectangle = void 0;\n        var legendDataItem = this.get(\"legendDataItem\");\n\n        if (legendDataItem) {\n          markerRectangle = legendDataItem.get(\"markerRectangle\");\n\n          if (markerRectangle) {\n            if (this.isDirty(\"stroke\")) {\n              var stroke = this.get(\"stroke\");\n              markerRectangle.set(\"stroke\", stroke);\n            }\n\n            if (this.isDirty(\"fill\")) {\n              var fill = this.get(\"fill\");\n              markerRectangle.set(\"fill\", fill);\n            }\n          }\n        }\n\n        this.updateLegendMarker(undefined);\n      }\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_calculateAggregates\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(startIndex, endIndex) {\n      var _this = this;\n\n      var fields = this._valueFields;\n\n      if (!fields) {\n        throw new Error(\"No value fields are set for the series.\");\n      }\n\n      var sum = {};\n      var absSum = {};\n      var count = {};\n      var low = {};\n      var high = {};\n      var open = {};\n      var close = {};\n      var average = {};\n      var previous = {};\n      $array.each(fields, function (key) {\n        sum[key] = 0;\n        absSum[key] = 0;\n        count[key] = 0;\n      });\n      $array.each(fields, function (key) {\n        var change = key + \"Change\";\n        var changePercent = key + \"ChangePercent\";\n        var changePrevious = key + \"ChangePrevious\";\n        var changePreviousPercent = key + \"ChangePreviousPercent\";\n        var changeSelection = key + \"ChangeSelection\";\n        var ChangeSelectionPercent = key + \"ChangeSelectionPercent\";\n\n        for (var i = startIndex; i < endIndex; i++) {\n          var dataItem = _this.dataItems[i];\n          var value = dataItem.get(key);\n\n          if (value != null) {\n            count[key]++;\n            sum[key] += value;\n            absSum[key] += Math.abs(value);\n            average[key] = sum[key] / count[key];\n\n            if (low[key] > value || low[key] == null) {\n              low[key] = value;\n            }\n\n            if (high[key] < value || high[key] == null) {\n              high[key] = value;\n            }\n\n            close[key] = value;\n\n            if (open[key] == null) {\n              open[key] = value;\n              previous[key] = value;\n            }\n\n            if (startIndex === 0) {\n              dataItem.setRaw(change, value - open[key]);\n              dataItem.setRaw(changePercent, (value - open[key]) / open[key] * 100);\n            }\n\n            dataItem.setRaw(changePrevious, value - previous[key]);\n            dataItem.setRaw(changePreviousPercent, (value - previous[key]) / previous[key] * 100);\n            dataItem.setRaw(changeSelection, value - open[key]);\n            dataItem.setRaw(ChangeSelectionPercent, (value - open[key]) / open[key] * 100);\n            previous[key] = value;\n          }\n        }\n      });\n      $array.each(fields, function (key) {\n        _this.setPrivate(key + \"AverageSelection\", average[key]);\n\n        _this.setPrivate(key + \"CountSelection\", count[key]);\n\n        _this.setPrivate(key + \"SumSelection\", sum[key]);\n\n        _this.setPrivate(key + \"AbsoluteSumSelection\", absSum[key]);\n\n        _this.setPrivate(key + \"LowSelection\", low[key]);\n\n        _this.setPrivate(key + \"HighSelection\", high[key]);\n\n        _this.setPrivate(key + \"OpenSelection\", open[key]);\n\n        _this.setPrivate(key + \"CloseSelection\", close[key]);\n      });\n\n      if (startIndex === 0 && endIndex === this.dataItems.length) {\n        $array.each(fields, function (key) {\n          _this.setPrivate(key + \"Average\", average[key]);\n\n          _this.setPrivate(key + \"Count\", count[key]);\n\n          _this.setPrivate(key + \"Sum\", sum[key]);\n\n          _this.setPrivate(key + \"AbsoluteSum\", absSum[key]);\n\n          _this.setPrivate(key + \"Low\", low[key]);\n\n          _this.setPrivate(key + \"High\", high[key]);\n\n          _this.setPrivate(key + \"Open\", open[key]);\n\n          _this.setPrivate(key + \"Close\", close[key]);\n        });\n      }\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      _super.prototype._updateChildren.call(this);\n\n      this._psi = this.getPrivate(\"startIndex\", 0);\n      this._pei = this.getPrivate(\"endIndex\", this.dataItems.length); // Apply heat rules\n\n      if (this._valuesDirty && this.get(\"heatRules\") != null) {\n        var rules = this.get(\"heatRules\", []);\n        $array.each(rules, function (rule) {\n          var minValue = rule.minValue || _this.getPrivate(rule.dataField + \"Low\") || 0;\n          var maxValue = rule.maxValue || _this.getPrivate(rule.dataField + \"High\") || 0;\n          $array.each(rule.target._entities, function (target) {\n            var value = target.dataItem.get(rule.dataField);\n\n            if (!$type.isNumber(value)) {\n              return;\n            }\n\n            var percent;\n\n            if (rule.logarithmic) {\n              percent = (Math.log(value) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / (Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E);\n            } else {\n              percent = (value - minValue) / (maxValue - minValue);\n            }\n\n            if ($type.isNumber(value) && (!$type.isNumber(percent) || Math.abs(percent) == Infinity)) {\n              percent = 0.5;\n            } // fixes problems if all values are the same\n\n\n            var propertyValue;\n\n            if ($type.isNumber(rule.min)) {\n              propertyValue = rule.min + (rule.max - rule.min) * percent;\n            } else if (rule.min instanceof Color) {\n              propertyValue = Color.interpolate(percent, rule.min, rule.max);\n            } else if (rule.min instanceof Percent) {\n              propertyValue = percentInterpolate(percent, rule.min, rule.max);\n            }\n\n            if (rule.customFunction) {\n              rule.customFunction.call(_this, target, minValue, maxValue, propertyValue);\n            } else {\n              target.set(rule.key, propertyValue);\n            }\n          });\n        });\n      }\n\n      if (this.bullets.length > 0) {\n        var count = this.dataItems.length;\n        var startIndex = this.getPrivate(\"startIndex\", 0);\n        var endIndex = this.getPrivate(\"endIndex\", count);\n\n        if (endIndex < count) {\n          endIndex++;\n        }\n\n        if (startIndex > 0) {\n          startIndex--;\n        }\n\n        for (var i = startIndex; i < endIndex; i++) {\n          this._positionBullets(this.dataItems[i]);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_positionBullets\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem) {\n      var _this = this;\n\n      if (dataItem.bullets) {\n        $array.each(dataItem.bullets, function (bullet) {\n          _this._positionBullet(bullet);\n\n          var sprite = bullet.get(\"sprite\");\n\n          if (bullet.get(\"dynamic\")) {\n            if (sprite) {\n              sprite._markDirtyKey(\"fill\");\n\n              sprite.markDirtySize();\n            }\n\n            if (sprite instanceof Container) {\n              sprite.walkChildren(function (child) {\n                child._markDirtyKey(\"fill\");\n\n                child.markDirtySize();\n              });\n            }\n          }\n\n          if (sprite instanceof Label && sprite.get(\"populateText\")) {\n            sprite.text.markDirtyText();\n          }\n        });\n      }\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_hideBullets\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem) {\n      if (dataItem.bullets) {\n        $array.each(dataItem.bullets, function (bullet) {\n          var sprite = bullet.get(\"sprite\");\n\n          if (sprite) {\n            sprite.setPrivate(\"visible\", false);\n          }\n        });\n      }\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_positionBullet\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_bullet) {}\n  });\n  Object.defineProperty(Series.prototype, \"_placeBulletsContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(chart) {\n      chart.bulletsContainer.children.moveValue(this.bulletsContainer);\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_removeBulletsContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var bulletsContainer = this.bulletsContainer;\n\n      if (bulletsContainer.parent) {\n        bulletsContainer.parent.children.removeValue(bulletsContainer);\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Series.prototype, \"disposeDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem) {\n      var bullets = dataItem.bullets;\n\n      if (bullets) {\n        $array.each(bullets, function (bullet) {\n          bullet.dispose();\n        });\n      }\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_getItemReaderLabel\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      return \"\";\n    }\n  });\n  /**\r\n   * Shows series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n\n  Object.defineProperty(Series.prototype, \"showDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem, duration) {\n      return __awaiter(this, void 0, void 0, function () {\n        var promises, bullets;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              promises = [_super.prototype.showDataItem.call(this, dataItem, duration)];\n              bullets = dataItem.bullets;\n\n              if (bullets) {\n                $array.each(bullets, function (bullet) {\n                  promises.push(bullet.get(\"sprite\").show(duration));\n                });\n              }\n\n              return [4\n              /*yield*/\n              , Promise.all(promises)];\n\n            case 1:\n              _a.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n  });\n  /**\r\n   * Hides series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n\n  Object.defineProperty(Series.prototype, \"hideDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem, duration) {\n      return __awaiter(this, void 0, void 0, function () {\n        var promises, bullets;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              promises = [_super.prototype.hideDataItem.call(this, dataItem, duration)];\n              bullets = dataItem.bullets;\n\n              if (bullets) {\n                $array.each(bullets, function (bullet) {\n                  promises.push(bullet.get(\"sprite\").hide(duration));\n                });\n              }\n\n              return [4\n              /*yield*/\n              , Promise.all(promises)];\n\n            case 1:\n              _a.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_sequencedShowHide\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(show, duration) {\n      return __awaiter(this, void 0, void 0, function () {\n        var startIndex_1, endIndex_1;\n\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!this.get(\"sequencedInterpolation\")) return [3\n              /*break*/\n              , 4];\n\n              if (!$type.isNumber(duration)) {\n                duration = this.get(\"interpolationDuration\", 0);\n              }\n\n              if (!(duration > 0)) return [3\n              /*break*/\n              , 2];\n              startIndex_1 = this.getPrivate(\"startIndex\", 0);\n              endIndex_1 = this.getPrivate(\"endIndex\", this.dataItems.length);\n              return [4\n              /*yield*/\n              , Promise.all($array.map(this.dataItems, function (dataItem, i) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var realDuration, delay;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        realDuration = duration || 0;\n\n                        if (i < startIndex_1 - 10 || i > endIndex_1 + 10) {\n                          realDuration = 0;\n                        }\n\n                        delay = this.get(\"sequencedDelay\", 0) + realDuration / (endIndex_1 - startIndex_1);\n                        return [4\n                        /*yield*/\n                        , $time.sleep(delay * (i - startIndex_1))];\n\n                      case 1:\n                        _a.sent();\n\n                        if (!show) return [3\n                        /*break*/\n                        , 3];\n                        return [4\n                        /*yield*/\n                        , this.showDataItem(dataItem, realDuration)];\n\n                      case 2:\n                        _a.sent();\n\n                        return [3\n                        /*break*/\n                        , 5];\n\n                      case 3:\n                        return [4\n                        /*yield*/\n                        , this.hideDataItem(dataItem, realDuration)];\n\n                      case 4:\n                        _a.sent();\n\n                        _a.label = 5;\n\n                      case 5:\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              }))];\n\n            case 1:\n              _a.sent();\n\n              return [3\n              /*break*/\n              , 4];\n\n            case 2:\n              return [4\n              /*yield*/\n              , Promise.all($array.map(this.dataItems, function (dataItem) {\n                if (show) {\n                  return _this.showDataItem(dataItem, 0);\n                } else {\n                  return _this.hideDataItem(dataItem, 0);\n                }\n              }))];\n\n            case 3:\n              _a.sent();\n\n              _a.label = 4;\n\n            case 4:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Series.prototype, \"updateLegendValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem) {\n      var legendDataItem = dataItem.get(\"legendDataItem\");\n\n      if (legendDataItem) {\n        var valueLabel = legendDataItem.get(\"valueLabel\");\n\n        if (valueLabel) {\n          var text = valueLabel.text;\n          var txt = \"\";\n\n          valueLabel._setDataItem(dataItem);\n\n          txt = this.get(\"legendValueText\", text.get(\"text\", \"\"));\n          valueLabel.set(\"text\", txt);\n          text.markDirtyText();\n        }\n\n        var label = legendDataItem.get(\"label\");\n\n        if (label) {\n          var text = label.text;\n          var txt = \"\";\n\n          label._setDataItem(dataItem);\n\n          txt = this.get(\"legendLabelText\", text.get(\"text\", \"\"));\n          label.set(\"text\", txt);\n          text.markDirtyText();\n        }\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Series.prototype, \"updateLegendMarker\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_dataItem) {}\n  });\n  Object.defineProperty(Series.prototype, \"_onHide\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      _super.prototype._onHide.call(this);\n\n      var tooltip = this.getTooltip();\n\n      if (tooltip) {\n        tooltip.hide();\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Series.prototype, \"hoverDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_dataItem) {}\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Series.prototype, \"unhoverDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_dataItem) {}\n  });\n  Object.defineProperty(Series, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Series\"\n  });\n  Object.defineProperty(Series, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Component.classNames.concat([Series.className])\n  });\n  return Series;\n}(Component);\n\nexport { Series };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/Series.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, IComponentSettings, IComponentPrivate, DataItem, IComponentEvents, IComponentDataItem } from \"../../core/render/Component\";\nimport { List } from \"../../core/util/List\";\nimport { Color } from \"../../core/util/Color\";\nimport { percentInterpolate } from \"../../core/util/Animation\";\nimport { Percent } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $time from \"../../core/util/Time\";\nimport type { Root } from \"../../core/Root\";\nimport { p100 } from \"../../core/util/Percent\";\nimport type { Chart } from \"./Chart\";\nimport type { Bullet } from \"./Bullet\";\nimport { Container } from \"../../core/render/Container\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { ILegendDataItem } from \"./Legend\";\nimport type { Template } from \"../../core/util/Template\";\nimport type { Sprite } from \"../../core/render/Sprite\";\nimport { Label } from \"../../core/render/Label\";\n//import { Animations } from \"../../core/util/Animation\";\n\n/**\n * Defines interface for a heat rule.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/heat-rules/} for more info\n */\nexport interface IHeatRule {\n\n\t/**\n\t * Target template.\n\t */\n\ttarget: Template<any>;\n\n\t/**\n\t * The setting value to use for items if the lowest value.\n\t */\n\tmin: any;\n\n\t/**\n\t * The setting value to use for items if the highest value.\n\t */\n\tmax: any;\n\n\t/**\n\t * Which data field to use when determining item's value.\n\t */\n\tdataField: string;\n\n\t/**\n\t * A setting key to set.\n\t */\n\tkey?: string;\n\n\t/**\n\t * Custom lowest value.\n\t */\n\tminValue?: number;\n\n\t/**\n\t * Custom highest value.\n\t */\n\tmaxValue?: number;\n\n\t/**\n\t * Use logarithmic scale when calculating intermediate setting values.\n\t *\n\t * @default false\n\t */\n\tlogarithmic?: boolean;\n\n\t/**\n\t * A custom function that will set target element's settings.\n\t *\n\t * Can be used to do custom manipulation on complex objects requiring more\n\t * than modifying a setting.\n\t */\n\tcustomFunction?: (target: Sprite, minValue: number, maxValue: number, propertyValue?: any) => void;\n\n}\n\n\nexport interface ISeriesDataItem extends IComponentDataItem {\n\tid?: string;\n\n\tvalue?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tvalueWorking?:number;\n\n\tvalueChange?: number;\n\tvalueChangePercent?: number;\n\tvalueChangeSelection?: number;\n\tvalueChangeSelectionPercent?: number;\n\tvalueChangePrevious?: number;\n\tvalueChangePreviousPercent?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tvalueWorkingOpen?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tvalueWorkingClose?: number;\n}\n\nexport interface ISeriesSettings extends IComponentSettings {\n\n\t/**\n\t * Name of the series.\n\t */\n\tname?: string;\n\n\t/**\n\t * A key to look up in data for an id of the data item.\n\t */\n\tidField?: string;\n\n\t/**\n\t * A key to look up in data for a numeric value of the data item.\n\t *\n\t * Some series use it to display its elements. It can also be used in heat\n\t * rules.\n\t */\n\tvalueField?: string;\n\n\t/**\n\t * A text template to be used for label in legend.\n\t */\n\tlegendLabelText?: string;\n\n\t/**\n\t * A text template to be used for value label in legend.\n\t */\n\tlegendValueText?: string;\n\n\t/**\n\t * If set to `true` the series initial animation will be played item by item\n\t * rather than all at once.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Animation_of_series} for more info\n\t */\n\tsequencedInterpolation?:boolean;\n\n\t/**\n\t * A delay in milliseconds to wait before starting animation of next data\n\t * item.\n\t * \n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Animation_of_series} for more info\n\t */\n\tsequencedDelay?:number;\n\n\t/**\n\t * A list of heat rules to apply on series elements.\n\t * \n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/heat-rules/} for more info\n\t */\n\theatRules?:IHeatRule[];\n\n\t/**\n\t * If set to `true`, series will calculate aggregate values, e.g. change\n\t * percent, high, low, etc.\n\t *\n\t * Do not enable unless you are using such aggregate values in tooltips,\n\t * display data fields, heat rules, or similar.\n\t */\n\tcalculateAggregates?: boolean;\n\n\t/**\n\t * Series stroke color.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Series_colors} for more info\n\t */\n\tstroke?: Color;\n\n\t/**\n\t * Series fill color.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Series_colors} for more info\n\t */\n\tfill?: Color;\n\n\t/**\n\t * A data item representing series in a [[Legend]].\n\t *\n\t * @readonly\n\t */\n\tlegendDataItem?: DataItem<ILegendDataItem>;\t\n\n}\n\nexport interface ISeriesPrivate extends IComponentPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tchart?: Chart;\n\tstartIndex?: number;\n\tendIndex?: number;\n\n\tvalueAverage?: number;\n\tvalueCount?: number;\n\tvalueSum?: number;\n\tvalueAbsoluteSum?: number;\n\tvalueLow?: number;\n\tvalueHigh?: number;\n\tvalueOpen?: number;\n\tvalueClose?: number;\n}\n\nexport interface ISeriesEvents extends IComponentEvents {\n\n}\n\n/**\n * A base class for all series.\n */\nexport abstract class Series extends Component {\n\tpublic static className: string = \"Series\";\n\tpublic static classNames: Array<string> = Component.classNames.concat([Series.className]);\n\n\tdeclare public _settings: ISeriesSettings;\n\tdeclare public _privateSettings: ISeriesPrivate;\n\tdeclare public _dataItemSettings: ISeriesDataItem;\n\tdeclare public _events: ISeriesEvents;\n\n\tprotected _aggregatesCalculated: boolean = false;\n\tprotected _selectionAggregatesCalculated: boolean = false;\n\tprotected _dataProcessed: boolean = false;\t\n\n\tprotected _psi: number | undefined;\n\tprotected _pei: number | undefined;\t\n\n\t/**\n\t * A chart series belongs to.\n\t */\n\tpublic chart:Chart | undefined;\n\n\t/**\n\t * List of bullets to use for the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/} for more info\n\t */\n\tpublic bullets: List<<D extends DataItem<this[\"_dataItemSettings\"]>>(root: Root, series:Series, dataItem: D) => Bullet | undefined> = new List();\n\n\t/**\n\t * A [[Container]] series' bullets are stored in.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly bulletsContainer: Container = Container.new(this._root, {isMeasured:false, width:p100, height:p100, position:\"absolute\"});\n\n\tprotected _afterNew() {\n\t\tthis.valueFields.push(\"value\");\n\n\t\tsuper._afterNew();\n\n\t\tthis._disposers.push(this.bullets.events.onAll((change) => {\n\t\t\tif (change.type === \"clear\") {\n\t\t\t\tthis._handleBullets(this.dataItems);\n\t\t\t} else if (change.type === \"push\") {\n\t\t\t\tthis._handleBullets(this.dataItems);\n\t\t\t} else if (change.type === \"setIndex\") {\n\t\t\t\tthis._handleBullets(this.dataItems);\n\t\t\t} else if (change.type === \"insertIndex\") {\n\t\t\t\tthis._handleBullets(this.dataItems);\n\t\t\t} else if (change.type === \"removeIndex\") {\n\t\t\t\tthis._handleBullets(this.dataItems);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unknown IListEvent type\");\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected _dispose(){\n\t\tthis.bulletsContainer.dispose(); // can be in a different parent\n\t\tsuper._dispose();\n\t}\n\n\tprotected _handleBullets(dataItems:Array<DataItem<this[\"_dataItemSettings\"]>>){\n\t\t$array.each(dataItems, (dataItem)=>{\n\t\t\tconst bullets = dataItem.bullets;\n\t\t\tif(bullets){\n\t\t\t\t$array.each(bullets, (bullet)=>{\n\t\t\t\t\tbullet.dispose();\n\t\t\t\t})\n\n\t\t\t\tdataItem.bullets = undefined;\n\t\t\t}\n\t\t})\n\n\t\tthis._markDirtyValues();\n\t}\n\n\t/**\n\t * Looks up and returns a data item by its ID.\n\t * \n\t * @param   id  ID\n\t * @return      Data item\n\t */\n\tpublic getDataItemById(id: string): DataItem<this[\"_dataItemSettings\"]> | undefined {\n\t\treturn $array.find(this.dataItems, (dataItem: any) => {\n\t\t\treturn dataItem.get(\"id\") == id;\n\t\t})\n\t}\n\n\tprotected _makeBullets(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif(this._shouldMakeBullet(dataItem)){\n\t\t\tdataItem.bullets = [];\n\n\t\t\tthis.bullets.each((bulletFunction) => {\n\t\t\t\tthis._makeBullet(dataItem, bulletFunction);\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _shouldMakeBullet(_dataItem: DataItem<this[\"_dataItemSettings\"]>):boolean{\n\t\treturn true;\n\t}\n\n\tprotected _makeBullet(dataItem: DataItem<this[\"_dataItemSettings\"]>, bulletFunction:(root: Root, series:Series, dataItem: DataItem<this[\"_dataItemSettings\"]>) => Bullet | undefined, index?:number):Bullet | undefined{\n\t\tconst bullet = bulletFunction(this._root, this, dataItem);\n\t\tif(bullet){\n\t\t\tlet sprite = bullet.get(\"sprite\");\n\n\t\t\tif (sprite) {\n\t\t\t\tsprite._setDataItem(dataItem);\n\t\t\t\tsprite.setRaw(\"position\", \"absolute\");\n\t\t\t\tthis.bulletsContainer.children.push(sprite);\t\t\t\n\t\t\t}\n\t\t\tbullet._index = index;\n\t\t\tbullet.series = this;\n\t\t\tdataItem.bullets!.push(bullet);\t\t\t\n\t\t}\n\t\treturn bullet;\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._aggregatesCalculated = false;\n\t\tthis._selectionAggregatesCalculated = false;\n\t}\n\n\tpublic _prepareChildren(){\n\t\tsuper._prepareChildren();\n\n\t\tconst len = this.dataItems.length;\n\n\t\tlet startIndex = this.getPrivate(\"startIndex\", 0);\t\t\n\t\tlet endIndex = Math.min(len, this.getPrivate(\"endIndex\", len));\n\t\tthis.setPrivateRaw(\"endIndex\", endIndex); // update to handle less data\n\n\t\tconst calculateAggregates = this.get(\"calculateAggregates\");\n\t\tif(calculateAggregates){\n\t\t\tif (this._valuesDirty && !this._dataProcessed) {\n\t\t\t\tif (!this._aggregatesCalculated) {\n\t\t\t\t\tthis._calculateAggregates(0, this.dataItems.length);\n\t\t\t\t\tthis._aggregatesCalculated = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ((this._psi != startIndex || this._pei != endIndex) && !this._selectionAggregatesCalculated) {\t\t\n\t\t\t\tif (startIndex === 0 && endIndex === this.dataItems.length && this._aggregatesCalculated) {\n\t\t\t\t\t// void\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis._calculateAggregates(startIndex, endIndex);\n\t\t\t\t}\n\n\t\t\t\tthis._selectionAggregatesCalculated = true;\n\t\t\t}\n\t\t}\n\n\t\tif(this.isDirty(\"tooltip\")){\n\t\t\tlet tooltip = this.get(\"tooltip\");\n\t\t\tif(tooltip){\n\t\t\t\ttooltip.hide(0);\n\t\t\t\ttooltip.set(\"tooltipTarget\", this);\n\t\t\t}\n\t\t}\n\n\t\tif (this.bullets.length > 0) {\n\t\t\tlet count = this.dataItems.length;\n\n\t\t\tfor (let i = 0; i < startIndex; i++) {\n\t\t\t\tthis._hideBullets(this.dataItems[i]);\n\t\t\t}\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\tlet dataItem = this.dataItems[i];\n\t\t\t\tif (!dataItem.bullets) {\n\t\t\t\t\tthis._makeBullets(dataItem);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = endIndex; i < count; i++) {\n\t\t\t\tthis._hideBullets(this.dataItems[i]);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"fill\") || this.isDirty(\"stroke\")) {\n\n\t\t\tlet markerRectangle: Graphics | undefined;\n\t\t\tconst legendDataItem = this.get(\"legendDataItem\");\n\t\t\tif (legendDataItem) {\n\t\t\t\tmarkerRectangle = legendDataItem.get(\"markerRectangle\");\n\n\t\t\t\tif (markerRectangle) {\n\n\t\t\t\t\tif (this.isDirty(\"stroke\")) {\n\t\t\t\t\t\tlet stroke = this.get(\"stroke\");\n\t\t\t\t\t\tmarkerRectangle.set(\"stroke\", stroke);\n\t\t\t\t\t}\n\t\t\t\t\tif (this.isDirty(\"fill\")) {\n\t\t\t\t\t\tlet fill = this.get(\"fill\");\n\t\t\t\t\t\tmarkerRectangle.set(\"fill\", fill);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.updateLegendMarker(undefined);\n\t\t}\t\t\n\t}\n\n\tprotected _calculateAggregates(startIndex: number, endIndex: number) {\n\t\tlet fields = this._valueFields;\n\n\t\tif (!fields) {\n\t\t\tthrow new Error(\"No value fields are set for the series.\");\n\t\t}\n\n\t\tconst sum: { [index: string]: number } = {};\n\t\tconst absSum: { [index: string]: number } = {};\n\t\tconst count: { [index: string]: number } = {};\n\t\tconst low: { [index: string]: number } = {};\n\t\tconst high: { [index: string]: number } = {};\n\t\tconst open: { [index: string]: number } = {};\n\t\tconst close: { [index: string]: number } = {};\n\t\tconst average: { [index: string]: number } = {};\n\t\tconst previous: { [index: string]: number } = {};\n\n\t\t$array.each(fields, (key) => {\n\t\t\tsum[key] = 0;\n\t\t\tabsSum[key] = 0;\n\t\t\tcount[key] = 0;\n\t\t})\n\n\t\t$array.each(fields, (key) => {\n\t\t\tlet change = key + \"Change\";\n\t\t\tlet changePercent = key + \"ChangePercent\";\n\t\t\tlet changePrevious = key + \"ChangePrevious\";\n\t\t\tlet changePreviousPercent = key + \"ChangePreviousPercent\";\n\t\t\tlet changeSelection = key + \"ChangeSelection\";\n\t\t\tlet ChangeSelectionPercent = key + \"ChangeSelectionPercent\";\n\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\tconst dataItem = this.dataItems[i];\n\n\t\t\t\tlet value = dataItem.get(<any>key)\n\n\t\t\t\tif (value != null) {\n\t\t\t\t\tcount[key]++;\n\t\t\t\t\tsum[key] += value;\n\n\t\t\t\t\tabsSum[key] += Math.abs(value);\n\n\t\t\t\t\taverage[key] = sum[key] / count[key];\n\n\t\t\t\t\tif (low[key] > value || low[key] == null) {\n\t\t\t\t\t\tlow[key] = value;\n\t\t\t\t\t}\n\t\t\t\t\tif (high[key] < value || high[key] == null) {\n\t\t\t\t\t\thigh[key] = value;\n\t\t\t\t\t}\n\n\t\t\t\t\tclose[key] = value;\n\n\t\t\t\t\tif (open[key] == null) {\n\t\t\t\t\t\topen[key] = value;\n\t\t\t\t\t\tprevious[key] = value;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (startIndex === 0) {\n\t\t\t\t\t\tdataItem.setRaw(<any>(change), value - open[key]);\n\t\t\t\t\t\tdataItem.setRaw(<any>(changePercent), (value - open[key]) / open[key] * 100);\n\t\t\t\t\t}\n\n\n\t\t\t\t\tdataItem.setRaw(<any>(changePrevious), value - previous[key]);\n\t\t\t\t\tdataItem.setRaw(<any>(changePreviousPercent), (value - previous[key]) / previous[key] * 100);\n\t\t\t\t\tdataItem.setRaw(<any>(changeSelection), value - open[key]);\n\t\t\t\t\tdataItem.setRaw(<any>(ChangeSelectionPercent), (value - open[key]) / open[key] * 100);\n\n\t\t\t\t\tprevious[key] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\t$array.each(fields, (key) => {\n\t\t\tthis.setPrivate(<any>(key + \"AverageSelection\"), average[key]);\n\t\t\tthis.setPrivate(<any>(key + \"CountSelection\"), count[key]);\n\t\t\tthis.setPrivate(<any>(key + \"SumSelection\"), sum[key]);\n\t\t\tthis.setPrivate(<any>(key + \"AbsoluteSumSelection\"), absSum[key]);\n\t\t\tthis.setPrivate(<any>(key + \"LowSelection\"), low[key]);\n\t\t\tthis.setPrivate(<any>(key + \"HighSelection\"), high[key]);\n\t\t\tthis.setPrivate(<any>(key + \"OpenSelection\"), open[key]);\n\t\t\tthis.setPrivate(<any>(key + \"CloseSelection\"), close[key]);\n\t\t})\n\n\t\tif (startIndex === 0 && endIndex === this.dataItems.length) {\n\t\t\t$array.each(fields, (key) => {\n\t\t\t\tthis.setPrivate(<any>(key + \"Average\"), average[key]);\n\t\t\t\tthis.setPrivate(<any>(key + \"Count\"), count[key]);\n\t\t\t\tthis.setPrivate(<any>(key + \"Sum\"), sum[key]);\n\t\t\t\tthis.setPrivate(<any>(key + \"AbsoluteSum\"), absSum[key]);\n\t\t\t\tthis.setPrivate(<any>(key + \"Low\"), low[key]);\n\t\t\t\tthis.setPrivate(<any>(key + \"High\"), high[key]);\n\t\t\t\tthis.setPrivate(<any>(key + \"Open\"), open[key]);\n\t\t\t\tthis.setPrivate(<any>(key + \"Close\"), close[key]);\n\t\t\t})\n\t\t}\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\n\t\tthis._psi = this.getPrivate(\"startIndex\", 0);\n\t\tthis._pei = this.getPrivate(\"endIndex\", this.dataItems.length);\n\n\t\t// Apply heat rules\n\t\tif (this._valuesDirty && this.get(\"heatRules\") != null) {\n\t\t\tconst rules = this.get(\"heatRules\", []);\n\t\t\t$array.each(rules, (rule) => {\n\t\t\t\tconst minValue = rule.minValue || this.getPrivate(<any>(rule.dataField + \"Low\")) || 0;\n\t\t\t\tconst maxValue = rule.maxValue || this.getPrivate(<any>(rule.dataField + \"High\")) || 0;\n\n\t\t\t\t$array.each(rule.target._entities, (target) => {\n\t\t\t\t\tconst value = target.dataItem.get(rule.dataField);\n\n\t\t\t\t\tif (!$type.isNumber(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet percent: number;\n\t\t\t\t\tif (rule.logarithmic) {\n\t\t\t\t\t\tpercent = (Math.log(value) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / ((Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tpercent = (value - minValue) / (maxValue - minValue);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($type.isNumber(value) && (!$type.isNumber(percent) || Math.abs(percent) == Infinity)) {\n\t\t\t\t\t\tpercent = 0.5;\n\t\t\t\t\t}\n\n\t\t\t\t\t// fixes problems if all values are the same\n\t\t\t\t\tlet propertyValue;\n\t\t\t\t\tif ($type.isNumber(rule.min)) {\n\t\t\t\t\t\tpropertyValue = rule.min + (rule.max - rule.min) * percent;\n\t\t\t\t\t}\n\t\t\t\t\telse if (rule.min instanceof Color) {\n\t\t\t\t\t\tpropertyValue = Color.interpolate(percent, rule.min, rule.max);\n\t\t\t\t\t}\n\t\t\t\t\telse if (rule.min instanceof Percent) {\n\t\t\t\t\t\tpropertyValue = percentInterpolate(percent, rule.min, rule.max);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (rule.customFunction) {\n\t\t\t\t\t\trule.customFunction.call(this, target, minValue, maxValue, propertyValue);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttarget.set(rule.key, propertyValue);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (this.bullets.length > 0) {\n\t\t\tlet count = this.dataItems.length;\n\t\t\tlet startIndex = this.getPrivate(\"startIndex\", 0);\n\t\t\tlet endIndex = this.getPrivate(\"endIndex\", count);\n\n\t\t\tif(endIndex < count){\n\t\t\t\tendIndex++;\n\t\t\t}\n\t\t\tif(startIndex > 0){\n\t\t\t\tstartIndex--;\n\t\t\t}\n\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\tthis._positionBullets(this.dataItems[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _positionBullets(dataItem: DataItem<this[\"_dataItemSettings\"]>){\n\t\tif(dataItem.bullets){\n\t\t\t$array.each(dataItem.bullets, (bullet) => {\n\t\t\t\tthis._positionBullet(bullet);\n\t\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\t\t\n\t\t\t\tif(bullet.get(\"dynamic\")){\n\t\t\t\t\t\n\t\t\t\t\tif(sprite){\t\t\t\t\t\t\n\t\t\t\t\t\tsprite._markDirtyKey(\"fill\" as any);\n\t\t\t\t\t\tsprite.markDirtySize();\n\t\t\t\t\t}\n\t\t\t\t\tif(sprite instanceof Container){\n\t\t\t\t\t\tsprite.walkChildren((child)=>{\t\t\t\t\t\t\n\t\t\t\t\t\t\tchild._markDirtyKey(\"fill\" as any);\n\t\t\t\t\t\t\tchild.markDirtySize();\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\t\n\n\t\t\t\tif(sprite instanceof Label && sprite.get(\"populateText\" as any)){\n\t\t\t\t\tsprite.text.markDirtyText();\n\t\t\t\t}\t\t\t\t\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _hideBullets(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif (dataItem.bullets) {\n\t\t\t$array.each(dataItem.bullets, (bullet) => {\n\t\t\t\tlet sprite = bullet.get(\"sprite\");\n\t\t\t\tif (sprite) {\n\t\t\t\t\tsprite.setPrivate(\"visible\", false);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tpublic _positionBullet(_bullet: Bullet) {\n\t}\n\n\tpublic _placeBulletsContainer(chart:Chart){\n\t\tchart.bulletsContainer.children.moveValue(this.bulletsContainer);\n\t}\n\n\tpublic _removeBulletsContainer(){\n\t\tconst bulletsContainer = this.bulletsContainer;\n\t\tif(bulletsContainer.parent){\n\t\t\tbulletsContainer.parent.children.removeValue(bulletsContainer)\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst bullets = dataItem.bullets;\n\n\t\tif(bullets){\n\t\t\t$array.each(bullets, (bullet)=>{\n\t\t\t\tbullet.dispose();\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _getItemReaderLabel(): string {\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t * \n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.showDataItem(dataItem, duration)];\n\t\tconst bullets = dataItem.bullets;\n\t\tif(bullets){\n\t\t\t$array.each(bullets, (bullet)=>{\n\t\t\t\tpromises.push(bullet.get(\"sprite\").show(duration));\n\t\t\t})\n\t\t}\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t * \n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.hideDataItem(dataItem, duration)];\n\t\tconst bullets = dataItem.bullets;\n\t\tif(bullets){\n\t\t\t$array.each(bullets, (bullet)=>{\n\t\t\t\tpromises.push(bullet.get(\"sprite\").hide(duration));\n\t\t\t})\n\t\t}\n\t\tawait Promise.all(promises);\n\t}\n\n\n\tprotected async _sequencedShowHide(show: boolean, duration?: number): Promise<void> {\n\t\tif (this.get(\"sequencedInterpolation\")) {\n\n\t\t\tif (!$type.isNumber(duration)) {\n\t\t\t\tduration = this.get(\"interpolationDuration\", 0);\n\t\t\t}\n\n\t\t\tif (duration > 0) {\n\t\t\t\tconst startIndex = this.getPrivate(\"startIndex\", 0);\n\t\t\t\tconst endIndex = this.getPrivate(\"endIndex\", this.dataItems.length);\n\n\t\t\t\tawait Promise.all($array.map(this.dataItems, async (dataItem, i) => {\n\t\t\t\t\tlet realDuration = duration || 0;\n\n\t\t\t\t\tif (i < startIndex - 10 || i > endIndex + 10) {\n\t\t\t\t\t\trealDuration = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\t//let delay = this.get(\"sequencedDelay\", 0) * i + realDuration * (i - startIndex) / (endIndex - startIndex);\n\t\t\t\t\tlet delay = this.get(\"sequencedDelay\", 0) + realDuration / (endIndex - startIndex);\n\n\t\t\t\t\tawait $time.sleep(delay * (i - startIndex));\n\n\t\t\t\t\tif (show) {\n\t\t\t\t\t\tawait this.showDataItem(dataItem, realDuration);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tawait this.hideDataItem(dataItem, realDuration);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tawait Promise.all($array.map(this.dataItems, (dataItem) => {\n\t\t\t\t\tif (show) {\n\t\t\t\t\t\treturn this.showDataItem(dataItem, 0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn this.hideDataItem(dataItem, 0);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLegendValue(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst legendDataItem = dataItem.get(\"legendDataItem\" as any) as DataItem<ILegendDataItem>;\n\n\t\tif (legendDataItem) {\n\t\t\tconst valueLabel = legendDataItem.get(\"valueLabel\");\n\t\t\tif (valueLabel) {\n\t\t\t\tconst text = valueLabel.text;\n\t\t\t\tlet txt = \"\";\n\t\t\t\tvalueLabel._setDataItem(dataItem);\n\t\t\t\ttxt = this.get(\"legendValueText\", text.get(\"text\", \"\"));\n\n\t\t\t\tvalueLabel.set(\"text\", txt);\n\t\t\t\ttext.markDirtyText();\n\t\t\t}\n\n\t\t\tconst label = legendDataItem.get(\"label\");\n\t\t\tif (label) {\n\t\t\t\tconst text = label.text;\n\t\t\t\tlet txt = \"\";\n\t\t\t\tlabel._setDataItem(dataItem);\n\t\t\t\ttxt = this.get(\"legendLabelText\", text.get(\"text\", \"\"));\n\n\t\t\t\tlabel.set(\"text\", txt);\n\t\t\t\ttext.markDirtyText();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLegendMarker(_dataItem?: DataItem<this[\"_dataItemSettings\"]>) {\n\t}\n\n\tprotected _onHide(){\n\t\tsuper._onHide();\n\n\t\tconst tooltip = this.getTooltip();\n\t\tif(tooltip){\n\t\t\ttooltip.hide();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic hoverDataItem(_dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic unhoverDataItem(_dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}