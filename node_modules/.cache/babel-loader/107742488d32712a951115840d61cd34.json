{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\nimport * as $math from \"../util/Math\";\n/**\r\n * Draws a rectangle with a pointer.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\n\nvar PointedRectangle =\n/** @class */\nfunction (_super) {\n  __extends(PointedRectangle, _super);\n\n  function PointedRectangle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(PointedRectangle.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"pointerBaseWidth\") || this.isDirty(\"cornerRadius\") || this.isDirty(\"pointerLength\") || this.isDirty(\"pointerX\") || this.isDirty(\"pointerY\") || this.isDirty(\"width\") || this.isDirty(\"height\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(PointedRectangle.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear) {\n        this.markDirtyBounds();\n        var w = this.width();\n        var h = this.height();\n\n        if (w > 0 && h > 0) {\n          var cr = this.get(\"cornerRadius\", 8);\n          cr = $math.fitToRange(cr, 0, Math.min(w / 2, h / 2));\n          var x = this.get(\"pointerX\", 0);\n          var y = this.get(\"pointerY\", 0);\n          var bwh = this.get(\"pointerBaseWidth\", 15) / 2; // corner coordinates\n          // top left\n\n          var xtl = 0;\n          var ytl = 0; // top right\n\n          var xtr = w;\n          var ytr = 0; // bottom right\n\n          var xbr = w;\n          var ybr = h; // bottom left\n\n          var xbl = 0;\n          var ybl = h; // find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located\n          // d=(x−x1)(y2−y1)−(y−y1)(x2−x1)\n\n          var d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);\n          var d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl);\n          var display = this._display; // top\n\n          display.moveTo(cr, 0);\n\n          if (d1 > 0 && d2 > 0) {\n            var stemX = Math.round($math.fitToRange(x, cr + bwh, w - bwh - cr));\n            y = $math.fitToRange(y, -Infinity, 0);\n            display.lineTo(stemX - bwh, 0);\n            display.lineTo(x, y);\n            display.lineTo(stemX + bwh, 0);\n          }\n\n          display.lineTo(w - cr, 0);\n          display.arcTo(w, 0, w, cr, cr); // right\n\n          if (d1 > 0 && d2 < 0) {\n            var stemY = Math.round($math.fitToRange(y, cr + bwh, h - bwh - cr));\n            x = $math.fitToRange(x, w, Infinity);\n            display.lineTo(w, cr);\n            display.lineTo(w, stemY - bwh);\n            display.lineTo(x, y);\n            display.lineTo(w, stemY + bwh);\n          }\n\n          display.lineTo(w, h - cr);\n          display.arcTo(w, h, w - cr, h, cr); // bottom\n\n          if (d1 < 0 && d2 < 0) {\n            var stemX = Math.round($math.fitToRange(x, cr + bwh, w - bwh - cr));\n            y = $math.fitToRange(y, h, Infinity);\n            display.lineTo(w - cr, h);\n            display.lineTo(stemX + bwh, h);\n            display.lineTo(x, y);\n            display.lineTo(stemX - bwh, h);\n          }\n\n          display.lineTo(cr, h);\n          display.arcTo(0, h, 0, h - cr, cr); // left\n\n          if (d1 < 0 && d2 > 0) {\n            var stemY = Math.round($math.fitToRange(y, cr + bwh, h - cr - bwh));\n            x = $math.fitToRange(x, -Infinity, 0);\n            display.lineTo(0, h - cr);\n            display.lineTo(0, stemY + bwh);\n            display.lineTo(x, y);\n            display.lineTo(0, stemY - bwh);\n          }\n\n          display.lineTo(0, cr);\n          display.arcTo(0, 0, cr, 0, cr);\n        }\n      }\n    }\n  });\n  Object.defineProperty(PointedRectangle, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"PointedRectangle\"\n  });\n  Object.defineProperty(PointedRectangle, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([PointedRectangle.className])\n  });\n  return PointedRectangle;\n}(Graphics);\n\nexport { PointedRectangle };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/PointedRectangle.ts"],"names":[],"mappings":"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","sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\nimport * as $math from \"../util/Math\";\n\nexport interface IPointedRectangleSettings extends IGraphicsSettings {\n\n\t/**\n\t * A width of the pinter's (stem's) thick end (base) in pixels.\n\t */\n\tpointerBaseWidth?: number;\n\n\t/**\n\t * A length of the pinter (stem) in pixels.\n\t */\n\tpointerLength?: number;\n\n\t/**\n\t * X coordinate the shape is pointing to.\n\t */\n\tpointerX?: number;\n\n\t/**\n\t * Y coordinate the shape is pointing to.\n\t */\n\tpointerY?: number;\n\n\t/**\n\t * Corner radius in pixels.\n\t */\n\tcornerRadius?: number;\n}\n\nexport interface IPointedRectanglePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a rectangle with a pointer.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n * @important\n */\nexport class PointedRectangle extends Graphics {\n\n\tdeclare public _settings: IPointedRectangleSettings;\n\tdeclare public _privateSettings: IPointedRectanglePrivate;\n\n\tpublic static className: string = \"PointedRectangle\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([PointedRectangle.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"pointerBaseWidth\") || this.isDirty(\"cornerRadius\") || this.isDirty(\"pointerLength\") || this.isDirty(\"pointerX\") || this.isDirty(\"pointerY\") || this.isDirty(\"width\") || this.isDirty(\"height\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\n\t\t\tthis.markDirtyBounds();\n\n\t\t\tlet w = this.width();\n\t\t\tlet h = this.height();\n\n\t\t\tif (w > 0 && h > 0) {\n\t\t\t\tlet cr = this.get(\"cornerRadius\", 8);\n\t\t\t\tcr = $math.fitToRange(cr, 0, Math.min(w / 2, h / 2));\n\n\t\t\t\tlet x = this.get(\"pointerX\", 0);\n\t\t\t\tlet y = this.get(\"pointerY\", 0);\n\t\t\t\tlet bwh = this.get(\"pointerBaseWidth\", 15) / 2;\n\n\t\t\t\t// corner coordinates\n\t\t\t\t// top left\n\t\t\t\tlet xtl = 0;\n\t\t\t\tlet ytl = 0;\n\t\t\t\t// top right\n\t\t\t\tlet xtr = w;\n\t\t\t\tlet ytr = 0;\n\t\t\t\t// bottom right\n\t\t\t\tlet xbr = w;\n\t\t\t\tlet ybr = h;\n\t\t\t\t// bottom left\n\t\t\t\tlet xbl = 0;\n\t\t\t\tlet ybl = h;\n\n\t\t\t\t// find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located\n\t\t\t\t// d=(x−x1)(y2−y1)−(y−y1)(x2−x1)\n\t\t\t\tlet d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);\n\t\t\t\tlet d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl);\n\n\t\t\t\tconst display = this._display;\n\t\t\t\t// top\n\t\t\t\tdisplay.moveTo(cr, 0);\n\n\t\t\t\tif (d1 > 0 && d2 > 0) {\n\t\t\t\t\tlet stemX = Math.round($math.fitToRange(x, cr + bwh, w - bwh - cr));\n\t\t\t\t\ty = $math.fitToRange(y, -Infinity, 0);\n\n\t\t\t\t\tdisplay.lineTo(stemX - bwh, 0);\n\t\t\t\t\tdisplay.lineTo(x, y);\n\t\t\t\t\tdisplay.lineTo(stemX + bwh, 0);\n\t\t\t\t}\n\n\t\t\t\tdisplay.lineTo(w - cr, 0);\n\t\t\t\tdisplay.arcTo(w, 0, w, cr, cr);\n\n\t\t\t\t// right\n\t\t\t\tif (d1 > 0 && d2 < 0) {\n\t\t\t\t\tlet stemY = Math.round($math.fitToRange(y, cr + bwh, h - bwh - cr));\n\t\t\t\t\tx = $math.fitToRange(x, w, Infinity);\n\t\t\t\t\tdisplay.lineTo(w, cr);\n\t\t\t\t\tdisplay.lineTo(w, stemY - bwh);\n\t\t\t\t\tdisplay.lineTo(x, y);\n\t\t\t\t\tdisplay.lineTo(w, stemY + bwh);\n\t\t\t\t}\n\t\t\t\tdisplay.lineTo(w, h - cr);\n\t\t\t\tdisplay.arcTo(w, h, w - cr, h, cr);\n\n\t\t\t\t// bottom\n\t\t\t\tif (d1 < 0 && d2 < 0) {\n\t\t\t\t\tlet stemX = Math.round($math.fitToRange(x, cr + bwh, w - bwh - cr));\n\t\t\t\t\ty = $math.fitToRange(y, h, Infinity);\n\n\t\t\t\t\tdisplay.lineTo(w - cr, h);\n\t\t\t\t\tdisplay.lineTo(stemX + bwh, h);\n\t\t\t\t\tdisplay.lineTo(x, y);\n\t\t\t\t\tdisplay.lineTo(stemX - bwh, h);\n\t\t\t\t}\n\t\t\t\tdisplay.lineTo(cr, h)\n\t\t\t\tdisplay.arcTo(0, h, 0, h - cr, cr);\n\n\n\t\t\t\t// left\n\t\t\t\tif (d1 < 0 && d2 > 0) {\n\t\t\t\t\tlet stemY = Math.round($math.fitToRange(y, cr + bwh, h - cr - bwh));\n\t\t\t\t\tx = $math.fitToRange(x, -Infinity, 0);\n\t\t\t\t\tdisplay.lineTo(0, h - cr);\n\t\t\t\t\tdisplay.lineTo(0, stemY + bwh);\n\t\t\t\t\tdisplay.lineTo(x, y);\n\t\t\t\t\tdisplay.lineTo(0, stemY - bwh);\n\t\t\t\t}\n\t\t\t\tdisplay.lineTo(0, cr);\n\t\t\t\tdisplay.arcTo(0, 0, cr, 0, cr);\n\t\t\t}\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}