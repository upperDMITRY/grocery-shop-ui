{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Entity } from \"./Entity\";\nimport { TextFormatter } from \"./TextFormatter\";\nimport * as $object from \"./Object\";\nimport * as $utils from \"./Utils\";\nimport * as $type from \"./Type\";\n/**\r\n * A class used to format numberic values as time duration.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/} for more info\r\n */\n\nvar DurationFormatter =\n/** @class */\nfunction (_super) {\n  __extends(DurationFormatter, _super);\n\n  function DurationFormatter() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Collection of aliases for units.\r\n     */\n\n\n    Object.defineProperty(_this, \"_unitAliases\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {\n        \"Y\": \"y\",\n        \"D\": \"d\",\n        \"H\": \"h\",\n        \"K\": \"h\",\n        \"k\": \"h\",\n        \"n\": \"S\"\n      }\n    });\n    return _this;\n  }\n\n  Object.defineProperty(DurationFormatter.prototype, \"_setDefaults\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var dmillisecond = \"_duration_millisecond\";\n      var dsecond = \"_duration_second\";\n      var dminute = \"_duration_minute\";\n      var dhour = \"_duration_hour\";\n      var dday = \"_duration_day\";\n      var dweek = \"_duration_week\";\n      var dmonth = \"_duration_month\";\n      var dyear = \"_duration_year\";\n      var asecond = \"_second\";\n      var aminute = \"_minute\";\n      var ahour = \"_hour\";\n      var aday = \"_day\";\n      var aweek = \"_week\";\n      var amonth = \"_week\";\n      var ayear = \"_year\"; // Defaults\n\n      this._setDefault(\"negativeBase\", 0);\n\n      this._setDefault(\"baseUnit\", \"second\");\n\n      this._setDefault(\"durationFormats\", {\n        \"millisecond\": {\n          \"millisecond\": this._t(dmillisecond),\n          \"second\": this._t(dmillisecond + asecond),\n          \"minute\": this._t(dmillisecond + aminute),\n          \"hour\": this._t(dmillisecond + ahour),\n          \"day\": this._t(dmillisecond + aday),\n          \"week\": this._t(dmillisecond + aweek),\n          \"month\": this._t(dmillisecond + amonth),\n          \"year\": this._t(dmillisecond + ayear)\n        },\n        \"second\": {\n          \"second\": this._t(dsecond),\n          \"minute\": this._t(dsecond + aminute),\n          \"hour\": this._t(dsecond + ahour),\n          \"day\": this._t(dsecond + aday),\n          \"week\": this._t(dsecond + aweek),\n          \"month\": this._t(dsecond + amonth),\n          \"year\": this._t(dsecond + ayear)\n        },\n        \"minute\": {\n          \"minute\": this._t(dminute),\n          \"hour\": this._t(dminute + ahour),\n          \"day\": this._t(dminute + aday),\n          \"week\": this._t(dminute + aweek),\n          \"month\": this._t(dminute + amonth),\n          \"year\": this._t(dminute + ayear)\n        },\n        \"hour\": {\n          \"hour\": this._t(dhour),\n          \"day\": this._t(dhour + aday),\n          \"week\": this._t(dhour + aweek),\n          \"month\": this._t(dhour + amonth),\n          \"year\": this._t(dhour + ayear)\n        },\n        \"day\": {\n          \"day\": this._t(dday),\n          \"week\": this._t(dday + aweek),\n          \"month\": this._t(dday + amonth),\n          \"year\": this._t(dday + ayear)\n        },\n        \"week\": {\n          \"week\": this._t(dweek),\n          \"month\": this._t(dweek + amonth),\n          \"year\": this._t(dweek + ayear)\n        },\n        \"month\": {\n          \"month\": this._t(dmonth),\n          \"year\": this._t(dmonth + ayear)\n        },\n        \"year\": {\n          \"year\": this._t(dyear)\n        }\n      });\n\n      _super.prototype._setDefaults.call(this);\n    }\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n    }\n  });\n  /**\r\n   * Formats the number as duration.\r\n   *\r\n   * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n   * 16 minutes and 40 seconds.\r\n   *\r\n   * @param value   Value to format\r\n   * @param format  Format to apply\r\n   * @param base    Override base unit\r\n   * @return Formatted number\r\n   */\n\n  Object.defineProperty(DurationFormatter.prototype, \"format\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, format, base) {\n      // no base unit?\n      var baseUnit = base || this.get(\"baseUnit\"); // no format passed in or empty\n\n      if (typeof format === \"undefined\" || format === \"\") {\n        if (this.get(\"durationFormat\") != null) {\n          format = this.get(\"durationFormat\");\n        } else {\n          format = this.getFormat($type.toNumber(value), undefined, baseUnit);\n        }\n      } // Clean format\n\n\n      format = $utils.cleanFormat(format); // get format info (it will also deal with parser caching)\n\n      var info = this.parseFormat(format, baseUnit); // cast to number just in case\n      // TODO: maybe use better casting\n\n      var source = Number(value); // format and replace the number\n\n      var details;\n\n      if (source > this.get(\"negativeBase\")) {\n        details = info.positive;\n      } else if (source < this.get(\"negativeBase\")) {\n        details = info.negative;\n      } else {\n        details = info.zero;\n      } // Format\n\n\n      var formatted = this.applyFormat(source, details); // Apply color?\n\n      if (details.color !== \"\") {\n        formatted = \"[\" + details.color + \"]\" + formatted + \"[/]\";\n      }\n\n      return formatted;\n    }\n  });\n  /**\r\n   * Parses supplied format into structured object which can be used to format\r\n   * the number.\r\n   *\r\n   * @param format  Format string, i.e. \"#,###.00\"\r\n   * @param base    Override base unit\r\n   * @return Parsed information\r\n   */\n\n  Object.defineProperty(DurationFormatter.prototype, \"parseFormat\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (format, base) {\n      // Check cache\n      // TODO\n      // let cached = this.getCache(format);\n      // if (cached != null) {\n      // \treturn cached;\n      // }\n      var _this = this; // no base unit?\n\n\n      var baseUnit = base || this.get(\"baseUnit\"); // Initialize duration parsing info\n\n      var info = {\n        \"positive\": {\n          \"color\": \"\",\n          \"template\": \"\",\n          \"parts\": [],\n          \"source\": \"\",\n          \"baseUnit\": baseUnit,\n          \"parsed\": false,\n          \"absolute\": false\n        },\n        \"negative\": {\n          \"color\": \"\",\n          \"template\": \"\",\n          \"parts\": [],\n          \"source\": \"\",\n          \"baseUnit\": baseUnit,\n          \"parsed\": false,\n          \"absolute\": false\n        },\n        \"zero\": {\n          \"color\": \"\",\n          \"template\": \"\",\n          \"parts\": [],\n          \"source\": \"\",\n          \"baseUnit\": baseUnit,\n          \"parsed\": false,\n          \"absolute\": false\n        }\n      }; // Escape double vertical bars (that mean display one vertical bar)\n\n      format = format.replace(\"||\", $type.PLACEHOLDER2); // Split it up and deal with different formats\n\n      var parts = format.split(\"|\");\n      info.positive.source = parts[0];\n\n      if (typeof parts[2] === \"undefined\") {\n        info.zero = info.positive;\n      } else {\n        info.zero.source = parts[2];\n      }\n\n      if (typeof parts[1] === \"undefined\") {\n        info.negative = info.positive;\n      } else {\n        info.negative.source = parts[1];\n      } // Parse each\n\n\n      $object.each(info, function (_part, item) {\n        // Already parsed\n        if (item.parsed) {\n          return;\n        } // Check cached\n        // TODO\n        // if (typeof this.getCache(item.source) !== \"undefined\") {\n        // \tinfo[part] = this.getCache(item.source);\n        // \treturn;\n        // }\n        // Begin parsing\n\n\n        var partFormat = item.source; // Check for [] directives\n\n        var dirs = [];\n        dirs = item.source.match(/^\\[([^\\]]*)\\]/);\n\n        if (dirs && dirs.length && dirs[0] !== \"\") {\n          partFormat = item.source.substr(dirs[0].length);\n          item.color = dirs[1];\n        } // Let TextFormatter split into chunks\n\n\n        var chunks = TextFormatter.chunk(partFormat, true);\n\n        for (var i = 0; i < chunks.length; i++) {\n          var chunk = chunks[i]; // replace back double vertical bar\n\n          chunk.text = chunk.text.replace($type.PLACEHOLDER2, \"|\");\n\n          if (chunk.type === \"value\") {\n            // Just \"Duration\"?\n            // if (chunk.text.toLowerCase() === \"duration\") {\n            // \tchunk.text = durationFormat;\n            // }\n            // Check for \"a\" (absolute) modifier\n            if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\n              item.absolute = true;\n              chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\n            } // Find all possible parts\n\n\n            var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\n\n            if (matches) {\n              // Populate template\n              for (var x = 0; x < matches.length; x++) {\n                // Is it an alias?\n                if (matches[x] == null) {\n                  matches[x] = _this._unitAliases[matches[x]];\n                }\n\n                item.parts.push(matches[x]);\n                chunk.text = chunk.text.replace(matches[x], $type.PLACEHOLDER);\n              }\n            }\n          } // Apply to template\n\n\n          item.template += chunk.text;\n        } // Apply style formatting\n        //item.template = TextFormatter.format(item.template, this.outputFormat);\n        // Save cache\n        // TODO\n        //this.setCache(item.source, item);\n        // Mark this as parsed\n\n\n        item.parsed = true;\n      }); // Save cache (the whole thing)\n      // TODO\n      //this.setCache(format, info);\n\n      return info;\n    }\n  });\n  /**\r\n   * Applies parsed format to a numeric value.\r\n   *\r\n   * @param value    Value\r\n   * @param details  Parsed format as returned by {parseFormat}\r\n   * @return Formatted duration\r\n   */\n\n  Object.defineProperty(DurationFormatter.prototype, \"applyFormat\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, details) {\n      // Use absolute values\n      var negative = !details.absolute && value < this.get(\"negativeBase\");\n      value = Math.abs(value); // Recalculate to milliseconds\n\n      var tstamp = this.toTimeStamp(value, details.baseUnit); // Init return value\n\n      var res = details.template; // Iterate through duration parts\n\n      for (var i = 0, len = details.parts.length; i < len; i++) {\n        // Gather the part\n        var part = details.parts[i];\n\n        var unit = this._toTimeUnit(part.substr(0, 1));\n\n        var digits = part.length; // Calculate current unit value\n\n        var ints = Math.floor(tstamp / this._getUnitValue(unit));\n        res = res.replace($type.PLACEHOLDER, $utils.padString(ints, digits, \"0\")); // Reduce timestamp\n\n        tstamp -= ints * this._getUnitValue(unit);\n      } // Reapply negative sign\n\n\n      if (negative) {\n        res = \"-\" + res;\n      }\n\n      return res;\n    }\n  });\n  /**\r\n   * Converts numeric value to timestamp in milliseconds.\r\n   *\r\n   * @param value     A source value\r\n   * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n   * @return Value representation as a timestamp in milliseconds\r\n   */\n\n  Object.defineProperty(DurationFormatter.prototype, \"toTimeStamp\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, baseUnit) {\n      return value * this._getUnitValue(baseUnit);\n    }\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"_toTimeUnit\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (code) {\n      switch (code) {\n        case \"S\":\n          return \"millisecond\";\n\n        case \"s\":\n          return \"second\";\n\n        case \"m\":\n          return \"minute\";\n\n        case \"h\":\n          return \"hour\";\n\n        case \"d\":\n          return \"day\";\n\n        case \"w\":\n          return \"week\";\n\n        case \"M\":\n          return \"month\";\n\n        case \"y\":\n          return \"year\";\n      }\n\n      ;\n    }\n  });\n  /**\r\n   * Returns appropriate default format for the value.\r\n   *\r\n   * If `maxValue` is sepcified, it will use that value to determine the time\r\n   * unit for the format.\r\n   *\r\n   * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n   * will get `\"10\"`.\r\n   *\r\n   * However, you might want it to be formatted in the context of bigger scale,\r\n   * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n   * values, including small ones will use format with minutes, e.g.:\r\n   * `00:10`, `00:50`, `12: 30`, etc.\r\n   *\r\n   * @param value     Value to format\r\n   * @param maxValue  Maximum value to be used to determine format\r\n   * @param baseUnit  Base unit of the value\r\n   * @return Format\r\n   */\n\n  Object.defineProperty(DurationFormatter.prototype, \"getFormat\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, maxValue, baseUnit) {\n      // Is format override set?\n      if (this.get(\"durationFormat\") != null) {\n        return this.get(\"durationFormat\");\n      } // Get base unit\n\n\n      if (!baseUnit) {\n        baseUnit = this.get(\"baseUnit\");\n      }\n\n      if (maxValue != null && value != maxValue) {\n        value = Math.abs(value);\n        maxValue = Math.abs(maxValue);\n        var maxUnit = this.getValueUnit(Math.max(value, maxValue), baseUnit); //let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\n        //console.log(maxUnit, diffUnit);\n\n        return this.get(\"durationFormats\")[baseUnit][maxUnit];\n      } else {\n        var unit = this.getValueUnit(value, baseUnit);\n        return this.get(\"durationFormats\")[baseUnit][unit];\n      }\n    }\n  });\n  /**\r\n   * Returns value's closest denominator time unit, e.g 100 seconds is\r\n   * `\"minute\"`, while 59 seconds would still be `second`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Denominator\r\n   */\n\n  Object.defineProperty(DurationFormatter.prototype, \"getValueUnit\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, baseUnit) {\n      // Get base unit\n      if (!baseUnit) {\n        baseUnit = this.get(\"baseUnit\");\n      } // Convert to milliseconds\n\n\n      var currentUnit;\n      var ms = this.getMilliseconds(value, baseUnit);\n      $object.eachContinue(this._getUnitValues(), function (key, val) {\n        if (key == baseUnit || currentUnit) {\n          var num = ms / val;\n\n          if (num <= 1) {\n            if (!currentUnit) {\n              currentUnit = key;\n            }\n\n            return false;\n          }\n\n          currentUnit = key;\n        }\n\n        return true;\n      });\n      return currentUnit;\n    }\n  });\n  /**\r\n   * Converts value to milliseconds according to `baseUnit`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Value in milliseconds\r\n   */\n\n  Object.defineProperty(DurationFormatter.prototype, \"getMilliseconds\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, baseUnit) {\n      // Get base unit\n      if (!baseUnit) {\n        baseUnit = this.get(\"baseUnit\");\n      }\n\n      return value * this._getUnitValue(baseUnit);\n    }\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"_getUnitValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (timeUnit) {\n      return this._getUnitValues()[timeUnit];\n    }\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"_getUnitValues\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return {\n        \"millisecond\": 1,\n        \"second\": 1000,\n        \"minute\": 60000,\n        \"hour\": 3600000,\n        \"day\": 86400000,\n        \"week\": 604800000,\n        \"month\": 2592000000,\n        \"year\": 31536000000\n      };\n    }\n  });\n  return DurationFormatter;\n}(Entity);\n\nexport { DurationFormatter };","map":{"version":3,"sources":["../../../../../src/.internal/core/util/DurationFormatter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TimeUnit } from \"./Time\";\r\n\r\nimport { Entity, IEntitySettings, IEntityPrivate } from \"./Entity\"\r\nimport { TextFormatter } from \"./TextFormatter\";\r\n\r\nimport * as $object from \"./Object\";\r\nimport * as $utils from \"./Utils\";\r\nimport * as $type from \"./Type\";\r\n\r\n\r\nexport interface IDurationFormatterSettings extends IEntitySettings {\r\n\r\n\t/**\r\n\t * A universal duration format to use wherever number needs to be formatted\r\n\t * as a duration.\r\n\t */\r\n\tdurationFormat?: string;\r\n\r\n\t/**\r\n\t * A base value. Any number below it will be considered \"negative\".\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tnegativeBase?: number;\r\n\r\n\t/**\r\n\t * Identifies what values are used in duration.\r\n\t *\r\n\t * Available options: `\"millisecond\"`, `\"second\"` (default), `\"minute\"`, `\"hour\"`, `\"day\"`, `\"week\"`, `\"month\"`, and `\"year\"`.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/#Base_unit} for more info\r\n\t * @default \"second\"\r\n\t */\r\n\tbaseUnit?: TimeUnit;\r\n\r\n\t/**\r\n\t * Time unit dependent duration formats.\r\n\t *\r\n\t * Used be [[DurationAxis]].\r\n\t */\r\n\tdurationFormats?: Partial<Record<TimeUnit, Partial<Record<TimeUnit, string>>>>;\r\n\r\n\t/**\r\n\t * An array of data fields that hold duration values and should be formatted\r\n\t * with a [[DurationFormatter]].\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/data-placeholders/#Formatting_placeholders} for more info\r\n\t */\r\n\tdurationFields?: string[];\r\n\r\n}\r\n\r\nexport interface IDurationFormatterPrivate extends IEntityPrivate {\r\n}\r\n\r\n/**\r\n * A class used to format numberic values as time duration.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/} for more info\r\n */\r\nexport class DurationFormatter extends Entity {\r\n\tdeclare public _settings: IDurationFormatterSettings;\r\n\tdeclare public _privateSettings: IDurationFormatterPrivate;\r\n\r\n\tprotected _setDefaults() {\r\n\t\tconst dmillisecond = \"_duration_millisecond\";\r\n\t\tconst dsecond = \"_duration_second\";\r\n\t\tconst dminute = \"_duration_minute\";\r\n\t\tconst dhour = \"_duration_hour\";\r\n\t\tconst dday = \"_duration_day\";\r\n\t\tconst dweek = \"_duration_week\";\r\n\t\tconst dmonth = \"_duration_month\";\r\n\t\tconst dyear = \"_duration_year\";\r\n\r\n\t\tconst asecond = \"_second\";\r\n\t\tconst aminute = \"_minute\";\r\n\t\tconst ahour = \"_hour\";\r\n\t\tconst aday = \"_day\";\r\n\t\tconst aweek = \"_week\";\r\n\t\tconst amonth = \"_week\";\r\n\t\tconst ayear = \"_year\";\r\n\r\n\t\t// Defaults\r\n\t\tthis._setDefault(\"negativeBase\", 0);\r\n\t\tthis._setDefault(\"baseUnit\", \"second\");\r\n\t\tthis._setDefault(\"durationFormats\", {\r\n\t\t\t\"millisecond\": {\r\n\t\t\t\t\"millisecond\": this._t(dmillisecond),\r\n\t\t\t\t\"second\": this._t((dmillisecond + asecond) as any),\r\n\t\t\t\t\"minute\": this._t((dmillisecond + aminute) as any),\r\n\t\t\t\t\"hour\": this._t((dmillisecond + ahour) as any),\r\n\t\t\t\t\"day\": this._t((dmillisecond + aday) as any),\r\n\t\t\t\t\"week\": this._t((dmillisecond + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dmillisecond + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dmillisecond + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"second\": {\r\n\t\t\t\t\"second\": this._t((dsecond) as any),\r\n\t\t\t\t\"minute\": this._t((dsecond + aminute) as any),\r\n\t\t\t\t\"hour\": this._t((dsecond + ahour) as any),\r\n\t\t\t\t\"day\": this._t((dsecond + aday) as any),\r\n\t\t\t\t\"week\": this._t((dsecond + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dsecond + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dsecond + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"minute\": {\r\n\t\t\t\t\"minute\": this._t((dminute) as any),\r\n\t\t\t\t\"hour\": this._t((dminute + ahour) as any),\r\n\t\t\t\t\"day\": this._t((dminute + aday) as any),\r\n\t\t\t\t\"week\": this._t((dminute + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dminute + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dminute + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"hour\": {\r\n\t\t\t\t\"hour\": this._t((dhour) as any),\r\n\t\t\t\t\"day\": this._t((dhour + aday) as any),\r\n\t\t\t\t\"week\": this._t((dhour + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dhour + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dhour + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"day\": {\r\n\t\t\t\t\"day\": this._t((dday) as any),\r\n\t\t\t\t\"week\": this._t((dday + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dday + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dday + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"week\": {\r\n\t\t\t\t\"week\": this._t((dweek) as any),\r\n\t\t\t\t\"month\": this._t((dweek + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dweek + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"month\": {\r\n\t\t\t\t\"month\": this._t((dmonth) as any),\r\n\t\t\t\t\"year\": this._t((dmonth + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"year\": {\r\n\t\t\t\t\"year\": this._t(dyear)\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsuper._setDefaults();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Collection of aliases for units.\r\n\t */\r\n\tprotected _unitAliases: { [index: string]: string } = {\r\n\t\t\"Y\": \"y\",\r\n\t\t\"D\": \"d\",\r\n\t\t\"H\": \"h\",\r\n\t\t\"K\": \"h\",\r\n\t\t\"k\": \"h\",\r\n\t\t\"n\": \"S\"\r\n\t};\r\n\r\n\tpublic _beforeChanged() {\r\n\t\tsuper._beforeChanged();\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the number as duration.\r\n\t *\r\n\t * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n\t * 16 minutes and 40 seconds.\r\n\t *\r\n\t * @param value   Value to format\r\n\t * @param format  Format to apply\r\n\t * @param base    Override base unit\r\n\t * @return Formatted number\r\n\t */\r\n\tpublic format(value: number | string, format?: string, base?: TimeUnit): string {\r\n\r\n\t\t// no base unit?\r\n\t\tlet baseUnit = base || this.get(\"baseUnit\");\r\n\r\n\t\t// no format passed in or empty\r\n\t\tif (typeof format === \"undefined\" || format === \"\") {\r\n\t\t\tif (this.get(\"durationFormat\") != null) {\r\n\t\t\t\tformat = this.get(\"durationFormat\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tformat = this.getFormat($type.toNumber(value), undefined, baseUnit);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Clean format\r\n\t\tformat = $utils.cleanFormat(format!);\r\n\r\n\t\t// get format info (it will also deal with parser caching)\r\n\t\tlet info = this.parseFormat(format, baseUnit);\r\n\r\n\t\t// cast to number just in case\r\n\t\t// TODO: maybe use better casting\r\n\t\tlet source: number = Number(value);\r\n\r\n\t\t// format and replace the number\r\n\t\tlet details;\r\n\t\tif (source > this.get(\"negativeBase\")) {\r\n\t\t\tdetails = info.positive;\r\n\t\t}\r\n\t\telse if (source < this.get(\"negativeBase\")) {\r\n\t\t\tdetails = info.negative;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdetails = info.zero;\r\n\t\t}\r\n\r\n\r\n\t\t// Format\r\n\t\tlet formatted = this.applyFormat(source, details);\r\n\r\n\t\t// Apply color?\r\n\t\tif (details.color !== \"\") {\r\n\t\t\tformatted = \"[\" + details.color + \"]\" + formatted + \"[/]\";\r\n\t\t}\r\n\r\n\t\treturn formatted;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses supplied format into structured object which can be used to format\r\n\t * the number.\r\n\t *\r\n\t * @param format  Format string, i.e. \"#,###.00\"\r\n\t * @param base    Override base unit\r\n\t * @return Parsed information\r\n\t */\r\n\tprotected parseFormat(format: string, base?: TimeUnit): any {\r\n\r\n\t\t// Check cache\r\n\t\t// TODO\r\n\t\t// let cached = this.getCache(format);\r\n\t\t// if (cached != null) {\r\n\t\t// \treturn cached;\r\n\t\t// }\r\n\r\n\t\t// no base unit?\r\n\t\tlet baseUnit = base || this.get(\"baseUnit\");\r\n\r\n\t\t// Initialize duration parsing info\r\n\t\tlet info = {\r\n\t\t\t\"positive\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t},\r\n\t\t\t\"negative\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t},\r\n\t\t\t\"zero\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Escape double vertical bars (that mean display one vertical bar)\r\n\t\tformat = format.replace(\"||\", $type.PLACEHOLDER2);\r\n\r\n\t\t// Split it up and deal with different formats\r\n\t\tlet parts = format.split(\"|\");\r\n\t\tinfo.positive.source = parts[0];\r\n\r\n\t\tif (typeof parts[2] === \"undefined\") {\r\n\t\t\tinfo.zero = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.zero.source = parts[2];\r\n\t\t}\r\n\r\n\t\tif (typeof parts[1] === \"undefined\") {\r\n\t\t\tinfo.negative = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.negative.source = parts[1];\r\n\t\t}\r\n\r\n\t\t// Parse each\r\n\t\t$object.each(info, (_part, item) => {\r\n\t\t\t// Already parsed\r\n\t\t\tif (item.parsed) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Check cached\r\n\t\t\t// TODO\r\n\t\t\t// if (typeof this.getCache(item.source) !== \"undefined\") {\r\n\t\t\t// \tinfo[part] = this.getCache(item.source);\r\n\t\t\t// \treturn;\r\n\t\t\t// }\r\n\r\n\t\t\t// Begin parsing\r\n\t\t\tlet partFormat: string = item.source;\r\n\r\n\t\t\t// Check for [] directives\r\n\t\t\tlet dirs: string[] | null = [];\r\n\t\t\tdirs = item.source.match(/^\\[([^\\]]*)\\]/);\r\n\t\t\tif (dirs && dirs.length && dirs[0] !== \"\") {\r\n\t\t\t\tpartFormat = item.source.substr(dirs[0].length);\r\n\t\t\t\titem.color = dirs[1];\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Let TextFormatter split into chunks\r\n\t\t\tlet chunks = TextFormatter.chunk(partFormat, true);\r\n\t\t\tfor (let i: number = 0; i < chunks.length; i++) {\r\n\t\t\t\tlet chunk = chunks[i];\r\n\r\n\t\t\t\t// replace back double vertical bar\r\n\t\t\t\tchunk.text = chunk.text.replace($type.PLACEHOLDER2, \"|\");\r\n\r\n\t\t\t\tif (chunk.type === \"value\") {\r\n\r\n\t\t\t\t\t// Just \"Duration\"?\r\n\t\t\t\t\t// if (chunk.text.toLowerCase() === \"duration\") {\r\n\t\t\t\t\t// \tchunk.text = durationFormat;\r\n\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t// Check for \"a\" (absolute) modifier\r\n\t\t\t\t\tif (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\r\n\t\t\t\t\t\titem.absolute = true;\r\n\t\t\t\t\t\tchunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Find all possible parts\r\n\t\t\t\t\tlet matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\r\n\r\n\t\t\t\t\tif (matches) {\r\n\t\t\t\t\t\t// Populate template\r\n\t\t\t\t\t\tfor (let x = 0; x < matches.length; x++) {\r\n\t\t\t\t\t\t\t// Is it an alias?\r\n\t\t\t\t\t\t\tif (matches[x] == null) {\r\n\t\t\t\t\t\t\t\tmatches[x] = this._unitAliases[matches[x]];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\titem.parts.push(matches[x]);\r\n\t\t\t\t\t\t\tchunk.text = chunk.text.replace(matches[x], $type.PLACEHOLDER);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply to template\r\n\t\t\t\titem.template += chunk.text;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply style formatting\r\n\t\t\t//item.template = TextFormatter.format(item.template, this.outputFormat);\r\n\r\n\t\t\t// Save cache\r\n\t\t\t// TODO\r\n\t\t\t//this.setCache(item.source, item);\r\n\r\n\t\t\t// Mark this as parsed\r\n\t\t\titem.parsed = true;\r\n\t\t});\r\n\r\n\t\t// Save cache (the whole thing)\r\n\t\t// TODO\r\n\t\t//this.setCache(format, info);\r\n\r\n\t\treturn info;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies parsed format to a numeric value.\r\n\t *\r\n\t * @param value    Value\r\n\t * @param details  Parsed format as returned by {parseFormat}\r\n\t * @return Formatted duration\r\n\t */\r\n\tprotected applyFormat(value: number, details: any): string {\r\n\r\n\t\t// Use absolute values\r\n\t\tlet negative = !details.absolute && (value < this.get(\"negativeBase\"));\r\n\t\tvalue = Math.abs(value);\r\n\r\n\t\t// Recalculate to milliseconds\r\n\t\tlet tstamp = this.toTimeStamp(value, details.baseUnit);\r\n\r\n\t\t// Init return value\r\n\t\tlet res = details.template;\r\n\r\n\t\t// Iterate through duration parts\r\n\t\tfor (let i = 0, len = details.parts.length; i < len; i++) {\r\n\r\n\t\t\t// Gather the part\r\n\t\t\tlet part = details.parts[i];\r\n\t\t\tlet unit = this._toTimeUnit(part.substr(0, 1));\r\n\t\t\tlet digits = part.length;\r\n\r\n\t\t\t// Calculate current unit value\r\n\t\t\tlet ints = Math.floor(tstamp / this._getUnitValue(unit!));\r\n\t\t\tres = res.replace($type.PLACEHOLDER, $utils.padString(ints, digits, \"0\"));\r\n\r\n\t\t\t// Reduce timestamp\r\n\t\t\ttstamp -= ints * this._getUnitValue(unit!);\r\n\t\t}\r\n\r\n\t\t// Reapply negative sign\r\n\t\tif (negative) {\r\n\t\t\tres = \"-\" + res;\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts numeric value to timestamp in milliseconds.\r\n\t *\r\n\t * @param value     A source value\r\n\t * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n\t * @return Value representation as a timestamp in milliseconds\r\n\t */\r\n\tpublic toTimeStamp(value: number, baseUnit: TimeUnit): number {\r\n\t\treturn value * this._getUnitValue(baseUnit);\r\n\t}\r\n\r\n\tprotected _toTimeUnit(code: string): TimeUnit | undefined {\r\n\t\tswitch (code) {\r\n\t\t\tcase \"S\":\r\n\t\t\t\treturn \"millisecond\";\r\n\t\t\tcase \"s\":\r\n\t\t\t\treturn \"second\";\r\n\t\t\tcase \"m\":\r\n\t\t\t\treturn \"minute\";\r\n\t\t\tcase \"h\":\r\n\t\t\t\treturn \"hour\";\r\n\t\t\tcase \"d\":\r\n\t\t\t\treturn \"day\";\r\n\t\t\tcase \"w\":\r\n\t\t\t\treturn \"week\";\r\n\t\t\tcase \"M\":\r\n\t\t\t\treturn \"month\";\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn \"year\";\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Returns appropriate default format for the value.\r\n\t *\r\n\t * If `maxValue` is sepcified, it will use that value to determine the time\r\n\t * unit for the format.\r\n\t *\r\n\t * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n\t * will get `\"10\"`.\r\n\t *\r\n\t * However, you might want it to be formatted in the context of bigger scale,\r\n\t * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n\t * values, including small ones will use format with minutes, e.g.:\r\n\t * `00:10`, `00:50`, `12: 30`, etc.\r\n\t *\r\n\t * @param value     Value to format\r\n\t * @param maxValue  Maximum value to be used to determine format\r\n\t * @param baseUnit  Base unit of the value\r\n\t * @return Format\r\n\t */\r\n\tpublic getFormat(value: number, maxValue?: number, baseUnit?: TimeUnit): string {\r\n\r\n\t\t// Is format override set?\r\n\t\tif (this.get(\"durationFormat\") != null) {\r\n\t\t\treturn this.get(\"durationFormat\")!;\r\n\t\t}\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.get(\"baseUnit\");\r\n\t\t}\r\n\r\n\t\tif (maxValue != null && value != maxValue) {\r\n\t\t\tvalue = Math.abs(value);\r\n\t\t\tmaxValue = Math.abs(maxValue);\r\n\t\t\tlet maxUnit = this.getValueUnit(Math.max(value, maxValue), baseUnit);\r\n\t\t\t//let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\r\n\t\t\t//console.log(maxUnit, diffUnit);\r\n\t\t\treturn (<any>this.get(\"durationFormats\"))[baseUnit!][maxUnit!];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet unit = this.getValueUnit(value, baseUnit);\r\n\t\t\treturn (<any>this.get(\"durationFormats\"))[baseUnit!][unit!];\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns value's closest denominator time unit, e.g 100 seconds is\r\n\t * `\"minute\"`, while 59 seconds would still be `second`.\r\n\t *\r\n\t * @param value     Source duration value\r\n\t * @param baseUnit  Base unit\r\n\t * @return Denominator\r\n\t */\r\n\tpublic getValueUnit(value: number, baseUnit?: TimeUnit): TimeUnit | undefined {\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.get(\"baseUnit\");\r\n\t\t}\r\n\r\n\t\t// Convert to milliseconds\r\n\t\tlet currentUnit: any;\r\n\t\tlet ms = this.getMilliseconds(value, baseUnit);\r\n\t\t$object.eachContinue(this._getUnitValues(), (key, val) => {\r\n\t\t\tif (key == baseUnit || currentUnit) {\r\n\t\t\t\tlet num = ms / val;\r\n\t\t\t\tif (num <= 1) {\r\n\t\t\t\t\tif (!currentUnit) {\r\n\t\t\t\t\t\tcurrentUnit = key;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tcurrentUnit = key;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn currentUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts value to milliseconds according to `baseUnit`.\r\n\t *\r\n\t * @param value     Source duration value\r\n\t * @param baseUnit  Base unit\r\n\t * @return Value in milliseconds\r\n\t */\r\n\tpublic getMilliseconds(value: number, baseUnit?: TimeUnit): number {\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.get(\"baseUnit\");\r\n\t\t}\r\n\r\n\t\treturn value * this._getUnitValue(baseUnit!);\r\n\t}\r\n\r\n\tprotected _getUnitValue(timeUnit: TimeUnit): number {\r\n\t\treturn this._getUnitValues()[timeUnit];\r\n\t}\r\n\r\n\tprotected _getUnitValues(): any {\r\n\t\treturn {\r\n\t\t\t\"millisecond\": 1,\r\n\t\t\t\"second\": 1000,\r\n\t\t\t\"minute\": 60000,\r\n\t\t\t\"hour\": 3600000,\r\n\t\t\t\"day\": 86400000,\r\n\t\t\t\"week\": 604800000,\r\n\t\t\t\"month\": 2592000000,\r\n\t\t\t\"year\": 31536000000,\r\n\t\t};\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}