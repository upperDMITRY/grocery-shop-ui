{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport { arc } from \"d3-shape\";\nimport * as $math from \"../util/Math\";\n/**\r\n * Draws a slice shape.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n */\n\nvar Slice =\n/** @class */\nfunction (_super) {\n  __extends(Slice, _super);\n\n  function Slice() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * @ignore\r\n     */\n\n\n    Object.defineProperty(_this, \"ix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    /**\r\n     * @ignore\r\n     */\n\n    Object.defineProperty(_this, \"iy\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_generator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: arc()\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Slice.prototype, \"_getTooltipPoint\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var tooltipX = this.get(\"tooltipX\");\n      var tooltipY = this.get(\"tooltipY\");\n      var x = 0;\n      var y = 0;\n\n      if ($type.isNumber(tooltipX)) {\n        x = tooltipX;\n      }\n\n      if ($type.isNumber(tooltipY)) {\n        y = tooltipY;\n      }\n\n      var radius = this.get(\"radius\", 0);\n      var innerRadius = this.get(\"innerRadius\", 0);\n      var dRadius = this.get(\"dRadius\", 0);\n      var dInnerRadius = this.get(\"dInnerRadius\", 0);\n      radius += dRadius;\n      innerRadius += dInnerRadius;\n\n      if (innerRadius < 0) {\n        innerRadius = radius + innerRadius;\n      }\n\n      if (tooltipX instanceof Percent) {\n        x = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value);\n      }\n\n      if (tooltipY instanceof Percent) {\n        y = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value);\n      }\n\n      if (this.get(\"arc\") >= 360 && innerRadius == 0) {\n        x = 0;\n        y = 0;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  });\n  Object.defineProperty(Slice.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"radius\") || this.isDirty(\"arc\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"dRadius\") || this.isDirty(\"dInnerRadius\") || this.isDirty(\"cornerRadius\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Slice.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear) {\n        var startAngle = this.get(\"startAngle\", 0);\n        var arc_1 = this.get(\"arc\", 0);\n        var generator = this._generator;\n        generator.cornerRadius(this.get(\"cornerRadius\", 0));\n        generator.context(this._display);\n        var radius = this.get(\"radius\", 0);\n        var innerRadius = this.get(\"innerRadius\", 0);\n        var dRadius = this.get(\"dRadius\", 0);\n        var dInnerRadius = this.get(\"dInnerRadius\", 0);\n        radius += dRadius;\n        innerRadius += dInnerRadius;\n\n        if (innerRadius < 0) {\n          innerRadius = radius + innerRadius;\n        }\n\n        generator({\n          innerRadius: innerRadius,\n          outerRadius: radius,\n          startAngle: (startAngle + 90) * $math.RADIANS,\n          endAngle: (startAngle + arc_1 + 90) * $math.RADIANS\n        });\n        var middleAngle = startAngle + arc_1 / 2;\n        this.ix = $math.cos(middleAngle);\n        this.iy = $math.sin(middleAngle);\n      }\n\n      if (this.isDirty(\"shiftRadius\")) {\n        var shiftRadius = this.get(\"shiftRadius\", 0);\n        this.setRaw(\"dx\", this.ix * shiftRadius);\n        this.setRaw(\"dy\", this.iy * shiftRadius);\n        this.markDirtyPosition();\n      }\n    }\n  });\n  Object.defineProperty(Slice, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Slice\"\n  });\n  Object.defineProperty(Slice, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([Slice.className])\n  });\n  return Slice;\n}(Graphics);\n\nexport { Slice };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/Slice.ts"],"names":[],"mappings":"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","sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { IPoint } from \"../util/IPoint\";\nimport { arc } from \"d3-shape\";\nimport * as $math from \"../util/Math\";\n\nexport interface ISliceSettings extends IGraphicsSettings {\n\n\t/**\n\t * Radius in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Slice \"width\" in degrees.\n\t */\n\tarc?: number;\n\n\t/**\n\t * Inner radius of the slice in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Start angle in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Slice corner radius in pixels.\n\t */\n\tcornerRadius?: number;\n\n\t/**\n\t * Slice \"pull out\" radius in pixels.\n\t */\n\tshiftRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `radius` value is. Negative\n\t * numbers can also be used.\n\t */\n\tdRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `innerRadius` value is.\n\t * Negative numbers can also be used.\n\t */\n\tdInnerRadius?: number;\n\n}\n\nexport interface ISlicePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a slice shape.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n */\nexport class Slice extends Graphics {\n\n\tdeclare public _settings: ISliceSettings;\n\tdeclare public _privateSettings: ISlicePrivate;\n\n\tpublic static className: string = \"Slice\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Slice.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic ix: number = 0;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic iy: number = 0;\n\n\tprotected _generator = arc();\n\n\tpublic _getTooltipPoint(): IPoint {\n\t\tlet tooltipX = this.get(\"tooltipX\");\n\t\tlet tooltipY = this.get(\"tooltipY\");\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tif ($type.isNumber(tooltipX)) {\n\t\t\tx = tooltipX;\n\t\t}\n\n\t\tif ($type.isNumber(tooltipY)) {\n\t\t\ty = tooltipY;\n\t\t}\n\n\t\tlet radius = this.get(\"radius\", 0);\n\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\tradius += dRadius;\n\t\tinnerRadius += dInnerRadius;\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (tooltipX instanceof Percent) {\n\t\t\tx = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value)\n\t\t}\n\n\t\tif (tooltipY instanceof Percent) {\n\t\t\ty = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value)\n\t\t}\n\n\t\tif (this.get(\"arc\") >= 360 && innerRadius == 0) {\n\t\t\tx = 0;\n\t\t\ty = 0;\n\t\t}\n\n\n\t\treturn { x, y };\n\t}\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"arc\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"dRadius\") || this.isDirty(\"dInnerRadius\") || this.isDirty(\"cornerRadius\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\t\t\tconst startAngle = this.get(\"startAngle\", 0);\n\t\t\tconst arc = this.get(\"arc\", 0);\n\t\t\tconst generator = this._generator;\n\t\t\tgenerator.cornerRadius(this.get(\"cornerRadius\", 0));\n\t\t\tgenerator.context(this._display as any);\n\n\n\t\t\tlet radius = this.get(\"radius\", 0);\n\t\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\t\tradius += dRadius;\n\t\t\tinnerRadius += dInnerRadius;\t\t\t\n\n\t\t\tif (innerRadius < 0) {\n\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t}\n\n\t\t\tgenerator({ innerRadius: innerRadius, outerRadius: radius, startAngle: (startAngle + 90) * $math.RADIANS, endAngle: (startAngle + arc + 90) * $math.RADIANS });\n\n\t\t\tlet middleAngle = startAngle + arc / 2;\n\n\t\t\tthis.ix = $math.cos(middleAngle);\n\t\t\tthis.iy = $math.sin(middleAngle);\n\t\t}\n\n\t\tif (this.isDirty(\"shiftRadius\")) {\n\t\t\tconst shiftRadius = this.get(\"shiftRadius\", 0);\n\t\t\tthis.setRaw(\"dx\", this.ix * shiftRadius);\n\t\t\tthis.setRaw(\"dy\", this.iy * shiftRadius);\n\t\t\tthis.markDirtyPosition();\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}