{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Sprite } from \"./Sprite\";\nimport * as $type from \"../util/Type\";\n/**\r\n * Displays an image.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/images/} for more info\r\n * @important\r\n */\n\nvar Picture =\n/** @class */\nfunction (_super) {\n  __extends(Picture, _super);\n\n  function Picture() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makePicture(undefined)\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Picture.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this.isDirty(\"width\")) {\n        var width = this.get(\"width\");\n        this._display.width = $type.isNumber(width) ? width : undefined;\n      }\n\n      if (this.isDirty(\"height\")) {\n        var height = this.get(\"height\");\n        this._display.height = $type.isNumber(height) ? height : undefined;\n      }\n\n      if (this.isDirty(\"shadowColor\")) {\n        this._display.clear();\n\n        var shadowColor = this.get(\"shadowColor\");\n        this._display.shadowColor = shadowColor == null ? undefined : shadowColor;\n      }\n\n      if (this.isDirty(\"shadowBlur\")) {\n        this._display.clear();\n\n        this._display.shadowBlur = this.get(\"shadowBlur\");\n      }\n\n      if (this.isDirty(\"shadowOffsetX\")) {\n        this._display.clear();\n\n        this._display.shadowOffsetX = this.get(\"shadowOffsetX\");\n      }\n\n      if (this.isDirty(\"shadowOffsetY\")) {\n        this._display.clear();\n\n        this._display.shadowOffsetY = this.get(\"shadowOffsetY\");\n      }\n\n      if (this.isDirty(\"shadowOpacity\")) {\n        this._display.clear();\n\n        this._display.shadowOpacity = this.get(\"shadowOpacity\");\n      }\n\n      if (this.isDirty(\"src\")) {\n        this._display.clear();\n\n        this._load();\n      }\n    }\n  });\n  Object.defineProperty(Picture.prototype, \"_load\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var src = this.get(\"src\");\n\n      if (src) {\n        var image_1 = new Image(); //image.crossOrigin = \"Anonymous\";\n\n        image_1.src = src;\n        image_1.decode().then(function () {\n          _this._display.image = image_1;\n\n          _this._updateSize();\n        }).catch(function (_error) {// TODO: maybe raise error?\n        });\n      }\n    }\n  });\n  Object.defineProperty(Picture.prototype, \"_updateSize\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._updateSize.call(this);\n\n      var image = this._display.image;\n\n      if (image) {\n        var w = this.getPrivate(\"width\", this.get(\"width\"));\n        var h = this.getPrivate(\"height\", this.get(\"height\"));\n        var r = image.width && image.height ? image.width / image.height : 0;\n\n        if ($type.isNumber(w) && $type.isNumber(h)) {\n          this._display.width = w;\n          this._display.height = h;\n        } else if ($type.isNumber(w) && r) {\n          h = w / r;\n        } else if ($type.isNumber(h) && r) {\n          w = h * r;\n        } else {\n          w = image.width;\n          h = image.height;\n        }\n\n        if ($type.isNumber(w)) {\n          this._display.width = w;\n        }\n\n        if ($type.isNumber(h)) {\n          this._display.height = h;\n        }\n\n        this.markDirtyBounds();\n        this.markDirty();\n      }\n    }\n  });\n  Object.defineProperty(Picture, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Picture\"\n  });\n  Object.defineProperty(Picture, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Sprite.classNames.concat([Picture.className])\n  });\n  return Picture;\n}(Sprite);\n\nexport { Picture };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/Picture.ts"],"names":[],"mappings":";AAGA,SAAS,MAAT,QAAwD,UAAxD;AAEA,OAAO,KAAK,KAAZ,MAAuB,cAAvB;AA0DA;;;;;AAKG;;AACH,IAAA,OAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6B,EAAA,SAAA,CAAA,OAAA,EAAA,MAAA,CAAA;;AAA7B,WAAA,OAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAKC,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,UAAA,EAAA;sBAAA;wBAAA;oBAAA;aAA4B,KAAI,CAAC,KAAL,CAAW,SAAX,CAAqB,WAArB,CAAiC,SAAjC;AAA5B,KAAA;;AAmGA;;;;;;WA9FA,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd;;AAEA,UAAI,KAAK,OAAL,CAAa,OAAb,CAAJ,EAA2B;AAC1B,YAAM,KAAK,GAAG,KAAK,GAAL,CAAS,OAAT,CAAd;AACA,aAAK,QAAL,CAAc,KAAd,GAAsB,KAAK,CAAC,QAAN,CAAe,KAAf,IAAwB,KAAxB,GAAgC,SAAtD;AACA;;AAED,UAAI,KAAK,OAAL,CAAa,QAAb,CAAJ,EAA4B;AAC3B,YAAM,MAAM,GAAG,KAAK,GAAL,CAAS,QAAT,CAAf;AACA,aAAK,QAAL,CAAc,MAAd,GAAuB,KAAK,CAAC,QAAN,CAAe,MAAf,IAAyB,MAAzB,GAAkC,SAAzD;AACA;;AAED,UAAI,KAAK,OAAL,CAAa,aAAb,CAAJ,EAAiC;AAChC,aAAK,QAAL,CAAc,KAAd;;AACA,YAAM,WAAW,GAAG,KAAK,GAAL,CAAS,aAAT,CAApB;AACA,aAAK,QAAL,CAAc,WAAd,GAA4B,WAAW,IAAI,IAAf,GAAsB,SAAtB,GAAkC,WAA9D;AACA;;AAED,UAAI,KAAK,OAAL,CAAa,YAAb,CAAJ,EAAgC;AAC/B,aAAK,QAAL,CAAc,KAAd;;AACA,aAAK,QAAL,CAAc,UAAd,GAA2B,KAAK,GAAL,CAAS,YAAT,CAA3B;AACA;;AAED,UAAI,KAAK,OAAL,CAAa,eAAb,CAAJ,EAAmC;AAClC,aAAK,QAAL,CAAc,KAAd;;AACA,aAAK,QAAL,CAAc,aAAd,GAA8B,KAAK,GAAL,CAAS,eAAT,CAA9B;AACA;;AAED,UAAI,KAAK,OAAL,CAAa,eAAb,CAAJ,EAAmC;AAClC,aAAK,QAAL,CAAc,KAAd;;AACA,aAAK,QAAL,CAAc,aAAd,GAA8B,KAAK,GAAL,CAAS,eAAT,CAA9B;AACA;;AAED,UAAI,KAAK,OAAL,CAAa,eAAb,CAAJ,EAAmC;AAClC,aAAK,QAAL,CAAc,KAAd;;AACA,aAAK,QAAL,CAAc,aAAd,GAA8B,KAAK,GAAL,CAAS,eAAT,CAA9B;AACA;;AAED,UAAI,KAAK,OAAL,CAAa,KAAb,CAAJ,EAAyB;AACxB,aAAK,QAAL,CAAc,KAAd;;AACA,aAAK,KAAL;AACA;AACD;;;;;;WAED,YAAA;AAAA,UAAA,KAAA,GAAA,IAAA;;AACC,UAAM,GAAG,GAAG,KAAK,GAAL,CAAS,KAAT,CAAZ;;AACA,UAAI,GAAJ,EAAS;AACR,YAAM,OAAK,GAAG,IAAI,KAAJ,EAAd,CADQ,CAER;;AACA,QAAA,OAAK,CAAC,GAAN,GAAY,GAAZ;AACA,QAAA,OAAK,CAAC,MAAN,GAAe,IAAf,CAAoB,YAAA;AACnB,UAAA,KAAI,CAAC,QAAL,CAAc,KAAd,GAAsB,OAAtB;;AACA,UAAA,KAAI,CAAC,WAAL;AACA,SAHD,EAGG,KAHH,CAGS,UAAC,MAAD,EAAY,CACpB;AACA,SALD;AAMA;AACD;;;;;;WAED,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB;;AAEA,UAAM,KAAK,GAAG,KAAK,QAAL,CAAc,KAA5B;;AACA,UAAI,KAAJ,EAAW;AACV,YAAI,CAAC,GAAG,KAAK,UAAL,CAAgB,OAAhB,EAAyB,KAAK,GAAL,CAAS,OAAT,CAAzB,CAAR;AACA,YAAI,CAAC,GAAG,KAAK,UAAL,CAAgB,QAAhB,EAA0B,KAAK,GAAL,CAAS,QAAT,CAA1B,CAAR;AACA,YAAM,CAAC,GAAG,KAAK,CAAC,KAAN,IAAe,KAAK,CAAC,MAArB,GAA8B,KAAK,CAAC,KAAN,GAAc,KAAK,CAAC,MAAlD,GAA2D,CAArE;;AAEA,YAAI,KAAK,CAAC,QAAN,CAAe,CAAf,KAAqB,KAAK,CAAC,QAAN,CAAe,CAAf,CAAzB,EAA4C;AAC3C,eAAK,QAAL,CAAc,KAAd,GAAsB,CAAtB;AACA,eAAK,QAAL,CAAc,MAAd,GAAuB,CAAvB;AACA,SAHD,MAIK,IAAI,KAAK,CAAC,QAAN,CAAe,CAAf,KAAqB,CAAzB,EAA4B;AAChC,UAAA,CAAC,GAAG,CAAC,GAAG,CAAR;AACA,SAFI,MAGA,IAAI,KAAK,CAAC,QAAN,CAAe,CAAf,KAAqB,CAAzB,EAA4B;AAChC,UAAA,CAAC,GAAG,CAAC,GAAG,CAAR;AACA,SAFI,MAGA;AACJ,UAAA,CAAC,GAAG,KAAK,CAAC,KAAV;AACA,UAAA,CAAC,GAAG,KAAK,CAAC,MAAV;AACA;;AAED,YAAI,KAAK,CAAC,QAAN,CAAe,CAAf,CAAJ,EAAuB;AACtB,eAAK,QAAL,CAAc,KAAd,GAAsB,CAAtB;AACA;;AACD,YAAI,KAAK,CAAC,QAAN,CAAe,CAAf,CAAJ,EAAuB;AACtB,eAAK,QAAL,CAAc,MAAd,GAAuB,CAAvB;AACA;;AACD,aAAK,eAAL;AACA,aAAK,SAAL;AACA;AACD;;AAhGD,EAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,MAAM,CAAC,UAAP,CAAkB,MAAlB,CAAyB,CAAC,OAAO,CAAC,SAAT,CAAzB;AAA1C,GAAA;AAgGD,SAAA,OAAA;AAAC,CAxGD,CAA6B,MAA7B,CAAA;;SAAa,O","sourcesContent":["import type { IPicture } from \"./backend/Renderer\";\nimport type { Color } from \"../util/Color\";\n\nimport { Sprite, ISpriteSettings, ISpritePrivate } from \"./Sprite\";\n\nimport * as $type from \"../util/Type\";\n\nexport interface IPictureSettings extends ISpriteSettings {\n\n\t/**\n\t * A source URI of the image.\n\t *\n\t * Can be relative or absolute URL, or data-uri.\n\t */\n\tsrc?: string;\n\n\t/**\n\t * Color of the element's shadow.\n\t *\n\t * For this to work at least one of the following needs to be set as well:\n\t * `shadowBlur`, `shadowOffsetX`, `shadowOffsetY`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowColor?: Color | null;\n\n\t/**\n\t * Blurriness of the the shadow.\n\t *\n\t * The bigger the number, the more blurry shadow will be.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowBlur?: number;\n\n\t/**\n\t * Horizontal shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetX?: number;\n\n\t/**\n\t * Vertical shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetY?: number;\n\n\t/**\n\t * Opacity of the shadow (0-1).\n\t *\n\t * If not set, will use the same as `fillOpacity` of the element.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOpacity?: number;\n\n}\n\nexport interface IPicturePrivate extends ISpritePrivate {\n}\n\n/**\n * Displays an image.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/images/} for more info\n * @important\n */\nexport class Picture extends Sprite {\n\n\tdeclare public _settings: IPictureSettings;\n\tdeclare public _privateSettings: IPicturePrivate;\n\n\tpublic _display: IPicture = this._root._renderer.makePicture(undefined);\n\n\tpublic static className: string = \"Picture\";\n\tpublic static classNames: Array<string> = Sprite.classNames.concat([Picture.className]);\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this.isDirty(\"width\")) {\n\t\t\tconst width = this.get(\"width\");\n\t\t\tthis._display.width = $type.isNumber(width) ? width : undefined;\n\t\t}\n\n\t\tif (this.isDirty(\"height\")) {\n\t\t\tconst height = this.get(\"height\");\n\t\t\tthis._display.height = $type.isNumber(height) ? height : undefined;\n\t\t}\n\n\t\tif (this.isDirty(\"shadowColor\")) {\n\t\t\tthis._display.clear();\n\t\t\tconst shadowColor = this.get(\"shadowColor\");\n\t\t\tthis._display.shadowColor = shadowColor == null ? undefined : shadowColor;\n\t\t}\n\n\t\tif (this.isDirty(\"shadowBlur\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowBlur = this.get(\"shadowBlur\");\n\t\t}\n\n\t\tif (this.isDirty(\"shadowOffsetX\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowOffsetX = this.get(\"shadowOffsetX\");\n\t\t}\n\n\t\tif (this.isDirty(\"shadowOffsetY\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowOffsetY = this.get(\"shadowOffsetY\");\n\t\t}\n\n\t\tif (this.isDirty(\"shadowOpacity\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowOpacity = this.get(\"shadowOpacity\");\n\t\t}\n\n\t\tif (this.isDirty(\"src\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._load();\n\t\t}\n\t}\n\n\tprotected _load() {\n\t\tconst src = this.get(\"src\");\n\t\tif (src) {\n\t\t\tconst image = new Image();\n\t\t\t//image.crossOrigin = \"Anonymous\";\n\t\t\timage.src = src!;\n\t\t\timage.decode().then(() => {\n\t\t\t\tthis._display.image = image;\n\t\t\t\tthis._updateSize();\n\t\t\t}).catch((_error: any) => {\n\t\t\t\t// TODO: maybe raise error?\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\n\t\tconst image = this._display.image;\n\t\tif (image) {\n\t\t\tlet w = this.getPrivate(\"width\", this.get(\"width\"));\n\t\t\tlet h = this.getPrivate(\"height\", this.get(\"height\"));\n\t\t\tconst r = image.width && image.height ? image.width / image.height : 0;\n\n\t\t\tif ($type.isNumber(w) && $type.isNumber(h)) {\n\t\t\t\tthis._display.width = w;\n\t\t\t\tthis._display.height = h;\n\t\t\t}\n\t\t\telse if ($type.isNumber(w) && r) {\n\t\t\t\th = w / r;\n\t\t\t}\n\t\t\telse if ($type.isNumber(h) && r) {\n\t\t\t\tw = h * r;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tw = image.width;\n\t\t\t\th = image.height;\n\t\t\t}\n\n\t\t\tif ($type.isNumber(w)) {\n\t\t\t\tthis._display.width = w;\n\t\t\t}\n\t\t\tif ($type.isNumber(h)) {\n\t\t\t\tthis._display.height = h;\n\t\t\t}\n\t\t\tthis.markDirtyBounds();\n\t\t\tthis.markDirty();\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}