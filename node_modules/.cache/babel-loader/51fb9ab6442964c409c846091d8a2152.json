{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Pattern } from \"./Pattern\";\nimport * as $type from \"../../util//Type\";\n/**\r\n * Line pattern.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\nvar LinePattern = /** @class */function (_super) {\n  __extends(LinePattern, _super);\n  function LinePattern() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(LinePattern.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n      if (this.isDirty(\"gap\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(LinePattern.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._draw.call(this);\n      var w = this.get(\"width\", 100);\n      var h = this.get(\"height\", 100);\n      var gap = this.get(\"gap\", 0);\n      var strokeWidth = this.get(\"strokeWidth\", 1);\n      if (!gap) {\n        this._display.moveTo(0, 0);\n        this._display.lineTo(w, 0);\n      } else {\n        var step = gap + strokeWidth;\n        var count = h / step;\n        for (var i = -count; i < count * 2; i++) {\n          var y = Math.round(i * step - step / 2) + 0.5;\n          this._display.moveTo(-w, y);\n          this._display.lineTo(w * 2, y);\n        }\n      }\n      this._display.lineStyle(strokeWidth, this.get(\"color\"), this.get(\"colorOpacity\"));\n      var strokeDasharray = this.get(\"strokeDasharray\");\n      if ($type.isNumber(strokeDasharray)) {\n        if (strokeDasharray < 0.5) {\n          strokeDasharray = [0];\n        } else {\n          strokeDasharray = [strokeDasharray];\n        }\n      }\n      this._display.setLineDash(strokeDasharray);\n      var strokeDashoffset = this.get(\"strokeDashoffset\");\n      if (strokeDashoffset) {\n        this._display.setLineDashOffset(strokeDashoffset);\n      }\n      this._display.endStroke();\n    }\n  });\n  Object.defineProperty(LinePattern, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"LinePattern\"\n  });\n  Object.defineProperty(LinePattern, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Pattern.classNames.concat([LinePattern.className])\n  });\n  return LinePattern;\n}(Pattern);\nexport { LinePattern };","map":{"version":3,"names":["Pattern","$type","LinePattern","_super","__extends","value","prototype","_beforeChanged","call","isDirty","_clear","_draw","w","get","h","gap","strokeWidth","_display","moveTo","lineTo","step","count","i","y","Math","round","lineStyle","strokeDasharray","isNumber","setLineDash","strokeDashoffset","setLineDashOffset","endStroke","Object","defineProperty","classNames","concat","className"],"sources":["../../../../../../src/.internal/core/render/patterns/LinePattern.ts"],"sourcesContent":["import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\nimport * as $type from \"../../util//Type\";\n\nexport interface ILinePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between  lines, in pixels.\n\t *\n\t * @default 6\n\t */\n\tgap?: number;\n\n}\n\nexport interface ILinePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Line pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class LinePattern extends Pattern {\n\n\tdeclare public _settings: ILinePatternSettings;\n\tdeclare public _privateSettings: ILinePatternPrivate;\n\n\tpublic static className: string = \"LinePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([LinePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst w = this.get(\"width\", 100);\n\t\tconst h = this.get(\"height\", 100);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst strokeWidth = this.get(\"strokeWidth\", 1);\n\n\t\tif (!gap) {\n\t\t\tthis._display.moveTo(0, 0);\n\t\t\tthis._display.lineTo(w, 0);\n\t\t}\n\t\telse {\n\t\t\tlet step = gap + strokeWidth;\n\t\t\tlet count = h / step;\n\n\t\t\tfor (let i = -count; i < count * 2; i++) {\n\t\t\t\tconst y = Math.round(i * step - step / 2) + 0.5;\n\t\t\t\tthis._display.moveTo(-w, y);\n\t\t\t\tthis._display.lineTo(w * 2, y);\n\t\t\t}\n\t\t}\n\n\t\tthis._display.lineStyle(strokeWidth, this.get(\"color\"), this.get(\"colorOpacity\"));\n\n\t\tlet strokeDasharray = this.get(\"strokeDasharray\");\n\t\tif ($type.isNumber(strokeDasharray)) {\n\t\t\tif (strokeDasharray < 0.5) {\n\t\t\t\tstrokeDasharray = [0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrokeDasharray = [strokeDasharray]\n\t\t\t}\n\t\t}\n\t\tthis._display.setLineDash(strokeDasharray as number[]);\n\n\t\tconst strokeDashoffset = this.get(\"strokeDashoffset\");\n\t\tif (strokeDashoffset) {\n\t\t\tthis._display.setLineDashOffset(strokeDashoffset);\n\t\t}\n\n\t\tthis._display.endStroke();\n\t}\n}\n"],"mappings":";AAAA,SAASA,OAAO,QAA2C,WAAW;AACtE,OAAO,KAAKC,KAAK,MAAM,kBAAkB;AAgBzC;;;;;AAKA,IAAAC,WAAA,0BAAAC,MAAA;EAAiCC,SAAA,CAAAF,WAAA,EAAAC,MAAA;EAAjC,SAAAD,YAAA;;EA2DA;;;;;WAnDC,SAAAG,CAAA;MACCF,MAAA,CAAAG,SAAA,CAAMC,cAAc,CAAAC,IAAA,MAAE;MAEtB,IAAI,IAAI,CAACC,OAAO,CAAC,KAAK,CAAC,EAAE;QACxB,IAAI,CAACC,MAAM,GAAG,IAAI;;IAEpB;;;;;;WAEA,SAAAL,CAAA;MACCF,MAAA,CAAAG,SAAA,CAAMK,KAAK,CAAAH,IAAA,MAAE;MAEb,IAAMI,CAAC,GAAG,IAAI,CAACC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC;MAChC,IAAMC,CAAC,GAAG,IAAI,CAACD,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC;MACjC,IAAME,GAAG,GAAG,IAAI,CAACF,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;MAC9B,IAAMG,WAAW,GAAG,IAAI,CAACH,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC;MAE9C,IAAI,CAACE,GAAG,EAAE;QACT,IAAI,CAACE,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1B,IAAI,CAACD,QAAQ,CAACE,MAAM,CAACP,CAAC,EAAE,CAAC,CAAC;OAC1B,MACI;QACJ,IAAIQ,IAAI,GAAGL,GAAG,GAAGC,WAAW;QAC5B,IAAIK,KAAK,GAAGP,CAAC,GAAGM,IAAI;QAEpB,KAAK,IAAIE,CAAC,GAAG,CAACD,KAAK,EAAEC,CAAC,GAAGD,KAAK,GAAG,CAAC,EAAEC,CAAC,EAAE,EAAE;UACxC,IAAMC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,GAAGF,IAAI,GAAGA,IAAI,GAAG,CAAC,CAAC,GAAG,GAAG;UAC/C,IAAI,CAACH,QAAQ,CAACC,MAAM,CAAC,CAACN,CAAC,EAAEW,CAAC,CAAC;UAC3B,IAAI,CAACN,QAAQ,CAACE,MAAM,CAACP,CAAC,GAAG,CAAC,EAAEW,CAAC,CAAC;;;MAIhC,IAAI,CAACN,QAAQ,CAACS,SAAS,CAACV,WAAW,EAAE,IAAI,CAACH,GAAG,CAAC,OAAO,CAAC,EAAE,IAAI,CAACA,GAAG,CAAC,cAAc,CAAC,CAAC;MAEjF,IAAIc,eAAe,GAAG,IAAI,CAACd,GAAG,CAAC,iBAAiB,CAAC;MACjD,IAAIZ,KAAK,CAAC2B,QAAQ,CAACD,eAAe,CAAC,EAAE;QACpC,IAAIA,eAAe,GAAG,GAAG,EAAE;UAC1BA,eAAe,GAAG,CAAC,CAAC,CAAC;SACrB,MACI;UACJA,eAAe,GAAG,CAACA,eAAe,CAAC;;;MAGrC,IAAI,CAACV,QAAQ,CAACY,WAAW,CAACF,eAA2B,CAAC;MAEtD,IAAMG,gBAAgB,GAAG,IAAI,CAACjB,GAAG,CAAC,kBAAkB,CAAC;MACrD,IAAIiB,gBAAgB,EAAE;QACrB,IAAI,CAACb,QAAQ,CAACc,iBAAiB,CAACD,gBAAgB,CAAC;;MAGlD,IAAI,CAACb,QAAQ,CAACe,SAAS,EAAE;IAC1B;;EArDAC,MAAA,CAAAC,cAAA,CAAAhC,WAAA;;;;WAAkC;;EAClC+B,MAAA,CAAAC,cAAA,CAAAhC,WAAA;;;;WAA0CF,OAAO,CAACmC,UAAU,CAACC,MAAM,CAAC,CAAClC,WAAW,CAACmC,SAAS,CAAC;;EAqD5F,OAAAnC,WAAC;CAAA,CA3DgCF,OAAO;SAA3BE,WAAW"},"metadata":{},"sourceType":"module"}