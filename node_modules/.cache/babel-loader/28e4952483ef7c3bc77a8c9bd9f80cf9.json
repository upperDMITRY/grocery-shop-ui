{"ast":null,"code":"import { __extends } from \"tslib\";\n// import * as $object from \"../util/Object\";\nimport { p50, Percent } from \"../util/Percent\";\nimport { Label } from \"./Label\";\nimport { RadialText } from \"./RadialText\";\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\nvar RadialLabel = /** @class */function (_super) {\n  __extends(RadialLabel, _super);\n  function RadialLabel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    Object.defineProperty(_this, \"_flipped\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    return _this;\n  }\n  Object.defineProperty(RadialLabel.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._textKeys.push(\"textType\", \"kerning\");\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  Object.defineProperty(RadialLabel.prototype, \"_makeText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._text = this.children.push(RadialText.new(this._root, {}));\n    }\n  });\n  /**\r\n   * Returns base radius in pixels.\r\n   *\r\n   * @return Base radius\r\n   */\n  Object.defineProperty(RadialLabel.prototype, \"baseRadius\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var radiusPrivate = this.getPrivate(\"radius\", 0);\n      var innerRadiusPrivate = this.getPrivate(\"innerRadius\", 0);\n      var baseRadius = this.get(\"baseRadius\", 0);\n      return innerRadiusPrivate + $utils.relativeToValue(baseRadius, radiusPrivate - innerRadiusPrivate);\n    }\n  });\n  /**\r\n   * Returns radius adjustment in pixels.\r\n   *\r\n   * @return Radius\r\n   */\n  Object.defineProperty(RadialLabel.prototype, \"radius\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var inside = this.get(\"inside\", false);\n      return this.baseRadius() + this.get(\"radius\", 0) * (inside ? -1 : 1);\n    }\n  });\n  Object.defineProperty(RadialLabel.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._updateChildren.call(this);\n      if (this.isDirty(\"baseRadius\") || this.isPrivateDirty(\"radius\") || this.isPrivateDirty(\"innerRadius\") || this.isDirty(\"labelAngle\") || this.isDirty(\"radius\") || this.isDirty(\"inside\") || this.isDirty(\"orientation\") || this.isDirty(\"textType\")) {\n        var textType = this.get(\"textType\", \"adjusted\");\n        var inside = this.get(\"inside\", false);\n        var orientation_1 = this.get(\"orientation\");\n        var labelAngle = $math.normalizeAngle(this.get(\"labelAngle\", 0));\n        this._text.set(\"startAngle\", this.get(\"labelAngle\", 0));\n        this._text.set(\"inside\", inside);\n        var sin = $math.sin(labelAngle);\n        var cos = $math.cos(labelAngle);\n        var baseRadius = this.baseRadius();\n        var radius = this.radius();\n        this._display.angle = 0;\n        if (textType == \"circular\") {\n          this.setAll({\n            paddingTop: 0,\n            paddingBottom: 0,\n            paddingLeft: 0,\n            paddingRight: 0\n          });\n          // Circular labels are handled and positioned differently\n          this._text.set(\"orientation\", orientation_1);\n          this._text.set(\"radius\", radius);\n        } else {\n          if (baseRadius == 0) {\n            labelAngle = 0;\n            radius = 0;\n          }\n          // Positioning of radial/regular labels are teh same\n          var x = radius * cos;\n          var y = radius * sin;\n          if (textType == \"radial\") {\n            this.setRaw(\"x\", x);\n            this.setRaw(\"y\", y);\n            if (labelAngle < 90 || labelAngle > 270 || orientation_1 != \"auto\") {\n              this._display.angle = labelAngle; // + 90;\n              this._flipped = false;\n            } else {\n              this._display.angle = labelAngle + 180;\n              this._flipped = true;\n            }\n            this._dirty.rotation = false;\n          } else if (textType == \"adjusted\") {\n            this.setRaw(\"centerX\", p50);\n            this.setRaw(\"centerY\", p50);\n            this.setRaw(\"x\", x);\n            this.setRaw(\"y\", y);\n          } else if (textType == \"regular\") {\n            this.setRaw(\"x\", x);\n            this.setRaw(\"y\", y);\n          }\n        }\n        this.markDirtyPosition();\n        this.markDirtyBounds();\n      }\n    }\n  });\n  Object.defineProperty(RadialLabel.prototype, \"_updatePosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var textType = this.get(\"textType\", \"regular\");\n      var inside = this.get(\"inside\", false);\n      var dx = 0;\n      var dy = 0;\n      var labelAngle = this.get(\"labelAngle\", 0);\n      var bounds = this.localBounds();\n      var w = bounds.right - bounds.left;\n      var h = bounds.bottom - bounds.top;\n      if (textType == \"radial\") {\n        if (this._flipped) {\n          var centerX = this.get(\"centerX\");\n          if (centerX instanceof Percent) {\n            w = w * (1 - centerX.value * 2);\n          }\n          dx = w * $math.cos(labelAngle);\n          dy = w * $math.sin(labelAngle);\n        }\n      } else if (!inside && textType == \"adjusted\") {\n        dx = w / 2 * $math.cos(labelAngle);\n        dy = h / 2 * $math.sin(labelAngle);\n      }\n      this.setRaw(\"dx\", dx);\n      this.setRaw(\"dy\", dy);\n      _super.prototype._updatePosition.call(this);\n    }\n  });\n  Object.defineProperty(RadialLabel.prototype, \"text\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._text;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RadialLabel, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"RadialLabel\"\n  });\n  Object.defineProperty(RadialLabel, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Label.classNames.concat([RadialLabel.className])\n  });\n  return RadialLabel;\n}(Label);\nexport { RadialLabel };","map":{"version":3,"names":["p50","Percent","Label","RadialText","$math","$utils","RadialLabel","_super","__extends","_this","apply","arguments","Object","defineProperty","value","_textKeys","push","prototype","_afterNew","call","_text","children","new","_root","radiusPrivate","getPrivate","innerRadiusPrivate","baseRadius","get","relativeToValue","inside","_updateChildren","isDirty","isPrivateDirty","textType","orientation_1","labelAngle","normalizeAngle","set","sin","cos","radius","_display","angle","setAll","paddingTop","paddingBottom","paddingLeft","paddingRight","x","y","setRaw","_flipped","_dirty","rotation","markDirtyPosition","markDirtyBounds","dx","dy","bounds","localBounds","w","right","left","h","bottom","top","centerX","_updatePosition","classNames","concat","className"],"sources":["../../../../../src/.internal/core/render/RadialLabel.ts"],"sourcesContent":["// import * as $object from \"../util/Object\";\nimport { p50, Percent } from \"../util/Percent\";\nimport { Label, ILabelPrivate, ILabelSettings } from \"./Label\";\nimport { RadialText } from \"./RadialText\";\n\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\n\n\nexport interface IRadialLabelSettings extends ILabelSettings {\n\n\t/**\n\t * Pixel value to adjust radius with.\n\t *\n\t * Will add to (or subtract from if negative) whatever value `baseRadius` evaluates\n\t * to.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Radius of the label's position.\n\t *\n\t * Can be either set in absolute pixel value, or percent.\n\t *\n\t * Relative value, depending on the situation, will most often mean its\n\t * position within certain circular object, like a slice: 0% meaning inner\n\t * edge, and 100% - the outer edge.\n\t *\n\t * @default 100%\n\t */\n\tbaseRadius?: number | Percent;\n\n\t/**\n\t * Label anngle in degrees.\n\t *\n\t * In most cases it will be set by the chart/series and does not need to\n\t * be set manually.\n\t */\n\tlabelAngle?: number;\n\n\t/**\n\t * Should the text \"face\" inward or outward from the arc the text is\n\t * following.\n\t *\n\t * `\"auto\"` means that facing will be chosen automatically based on the angle\n\t * to enhance readbility.\n\t *\n\t * Only applies if `type = \"circluar\"`.\n\t * \n\t * @default \"auto\"\n\t */\n\torientation?: \"inward\" | \"outward\" | \"auto\";\n\n\t/**\n\t * Should label be drawn inside (`true`) or outside (`false`) the arc.\n\t *\n\t * @default false\n\t */\n\tinside?: boolean;\n\n\t/**\n\t * Label type.\n\t *\n\t * * `\"regular\"` (default) - normal horizontal label.\n\t * * `\"circular\"` - arched label.\n\t * * `\"radial\"` - label radiating from the center of the arc.\n\t * * `\"aligned\"` - horizontal label aligned with other labels horizontally.\n\t * * `\"adjusted\"` - horizontal label adjusted in postion.\n\t *\n\t * @default \"regular\"\n\t */\n\ttextType?: \"regular\" | \"circular\" | \"radial\" | \"aligned\" | \"adjusted\";\n\n\t/**\n\t * Extra spacing between characters, in pixels.\n\t *\n\t * @default 0\n\t */\n\tkerning?: number;\n\n}\n\nexport interface IRadialLabelPrivate extends ILabelPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tleft?: boolean;\n\n\t/**\n\t * @ignore\n\t */\n\tradius?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tinnerRadius?: number;\n\n}\n\nexport class RadialLabel extends Label {\n\n\tdeclare public _settings: IRadialLabelSettings;\n\tdeclare public _privateSettings: IRadialLabelPrivate;\n\n\tdeclare protected _text: RadialText;\n\n\tpublic static className: string = \"RadialLabel\";\n\tpublic static classNames: Array<string> = Label.classNames.concat([RadialLabel.className]);\n\n\tprotected _flipped: boolean = false;\n\n\tprotected _afterNew() {\n\t\tthis._textKeys.push(\"textType\", \"kerning\");\n\t\tsuper._afterNew();\n\t}\n\n\n\tpublic _makeText() {\n\t\tthis._text = this.children.push(RadialText.new(this._root, {}));\n\t}\n\n\t/**\n\t * Returns base radius in pixels.\n\t * \n\t * @return Base radius\n\t */\n\tpublic baseRadius(): number {\n\t\tconst radiusPrivate = this.getPrivate(\"radius\", 0);\n\t\tconst innerRadiusPrivate = this.getPrivate(\"innerRadius\", 0);\n\t\tconst baseRadius = this.get(\"baseRadius\", 0);\n\t\treturn innerRadiusPrivate + $utils.relativeToValue(baseRadius, radiusPrivate - innerRadiusPrivate);\n\t}\n\n\t/**\n\t * Returns radius adjustment in pixels.\n\t * \n\t * @return Radius\n\t */\n\tpublic radius(): number {\n\t\tconst inside = this.get(\"inside\", false);\n\t\treturn this.baseRadius() + this.get(\"radius\", 0) * (inside ? -1 : 1);\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\n\t\tif (this.isDirty(\"baseRadius\") || this.isPrivateDirty(\"radius\") || this.isPrivateDirty(\"innerRadius\") || this.isDirty(\"labelAngle\") || this.isDirty(\"radius\") || this.isDirty(\"inside\") || this.isDirty(\"orientation\") || this.isDirty(\"textType\")) {\n\n\t\t\tconst textType = this.get(\"textType\", \"adjusted\");\n\n\t\t\tconst inside = this.get(\"inside\", false);\n\n\t\t\tconst orientation = this.get(\"orientation\");\n\t\t\tlet labelAngle = $math.normalizeAngle(this.get(\"labelAngle\", 0));\n\n\t\t\tthis._text.set(\"startAngle\", this.get(\"labelAngle\", 0));\n\t\t\tthis._text.set(\"inside\", inside);\n\n\t\t\tconst sin = $math.sin(labelAngle);\n\t\t\tconst cos = $math.cos(labelAngle);\n\n\t\t\tlet baseRadius = this.baseRadius();\n\t\t\tlet radius = this.radius();\n\n\t\t\tthis._display.angle = 0;\n\n\t\t\tif (textType == \"circular\") {\n\n\t\t\t\tthis.setAll({\n\t\t\t\t\tpaddingTop: 0,\n\t\t\t\t\tpaddingBottom: 0,\n\t\t\t\t\tpaddingLeft: 0,\n\t\t\t\t\tpaddingRight: 0\n\t\t\t\t});\n\n\t\t\t\t// Circular labels are handled and positioned differently\n\n\t\t\t\tthis._text.set(\"orientation\", orientation);\n\t\t\t\tthis._text.set(\"radius\", radius);\n\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (baseRadius == 0) {\n\t\t\t\t\tlabelAngle = 0;\n\t\t\t\t\tradius = 0;\n\t\t\t\t}\n\n\t\t\t\t// Positioning of radial/regular labels are teh same\n\t\t\t\tlet x = radius * cos;\n\t\t\t\tlet y = radius * sin;\n\n\t\t\t\tif (textType == \"radial\") {\n\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\n\t\t\t\t\tif ((labelAngle < 90) || (labelAngle > 270) || orientation != \"auto\") {\n\t\t\t\t\t\tthis._display.angle = labelAngle;// + 90;\n\t\t\t\t\t\tthis._flipped = false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._display.angle = labelAngle + 180;\n\t\t\t\t\t\tthis._flipped = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._dirty.rotation = false;\n\t\t\t\t}\n\t\t\t\telse if (textType == \"adjusted\") {\n\t\t\t\t\tthis.setRaw(\"centerX\", p50);\n\t\t\t\t\tthis.setRaw(\"centerY\", p50);\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\t\t\t\t}\n\t\t\t\telse if (textType == \"regular\") {\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.markDirtyPosition();\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\t}\n\n\n\tpublic _updatePosition() {\n\n\t\tconst textType = this.get(\"textType\", \"regular\");\n\t\tconst inside = this.get(\"inside\", false);\n\n\t\tlet dx = 0;\n\t\tlet dy = 0;\n\t\tlet labelAngle = this.get(\"labelAngle\", 0);\n\t\tlet bounds = this.localBounds();\n\t\tlet w = bounds.right - bounds.left;\n\t\tlet h = bounds.bottom - bounds.top;\n\n\t\tif (textType == \"radial\") {\n\t\t\tif (this._flipped) {\n\t\t\t\tlet centerX = this.get(\"centerX\");\n\t\t\t\tif (centerX instanceof Percent) {\n\t\t\t\t\tw = w * (1 - centerX.value * 2);\n\t\t\t\t}\n\n\t\t\t\tdx = w * $math.cos(labelAngle);\n\t\t\t\tdy = w * $math.sin(labelAngle);\n\t\t\t}\n\t\t}\n\t\telse if (!inside && textType == \"adjusted\") {\n\t\t\tdx = w / 2 * $math.cos(labelAngle);\n\t\t\tdy = h / 2 * $math.sin(labelAngle);\n\t\t}\n\n\n\t\tthis.setRaw(\"dx\", dx);\n\t\tthis.setRaw(\"dy\", dy);\n\n\t\tsuper._updatePosition();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic get text(): RadialText {\n\t\treturn this._text;\n\t}\n\n}\n"],"mappings":";AAAA;AACA,SAASA,GAAG,EAAEC,OAAO,QAAQ,iBAAiB;AAC9C,SAASC,KAAK,QAAuC,SAAS;AAC9D,SAASC,UAAU,QAAQ,cAAc;AAEzC,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,OAAO,KAAKC,MAAM,MAAM,eAAe;AA+FvC,IAAAC,WAAA,0BAAAC,MAAA;EAAiCC,SAAA,CAAAF,WAAA,EAAAC,MAAA;EAAjC,SAAAD,YAAA;IAAA,IAAAG,KAAA,GAAAF,MAAA,aAAAA,MAAA,CAAAG,KAAA,OAAAC,SAAA;IAUCC,MAAA,CAAAC,cAAA,CAAAJ,KAAA;;;;aAA8B;;;EA6J/B;;;;;WA3JC,SAAAK,CAAA;MACC,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC;MAC1CT,MAAA,CAAAU,SAAA,CAAMC,SAAS,CAAAC,IAAA,MAAE;IAClB;;;;;;WAGA,SAAAL,CAAA;MACC,IAAI,CAACM,KAAK,GAAG,IAAI,CAACC,QAAQ,CAACL,IAAI,CAACb,UAAU,CAACmB,GAAG,CAAC,IAAI,CAACC,KAAK,EAAE,EAAE,CAAC,CAAC;IAChE;;EAEA;;;;;;;;;WAKA,SAAAT,CAAA;MACC,IAAMU,aAAa,GAAG,IAAI,CAACC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;MAClD,IAAMC,kBAAkB,GAAG,IAAI,CAACD,UAAU,CAAC,aAAa,EAAE,CAAC,CAAC;MAC5D,IAAME,UAAU,GAAG,IAAI,CAACC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;MAC5C,OAAOF,kBAAkB,GAAGrB,MAAM,CAACwB,eAAe,CAACF,UAAU,EAAEH,aAAa,GAAGE,kBAAkB,CAAC;IACnG;;EAEA;;;;;;;;;WAKA,SAAAZ,CAAA;MACC,IAAMgB,MAAM,GAAG,IAAI,CAACF,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC;MACxC,OAAO,IAAI,CAACD,UAAU,EAAE,GAAG,IAAI,CAACC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAIE,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IACrE;;;;;;WAEA,SAAAhB,CAAA;MACCP,MAAA,CAAAU,SAAA,CAAMc,eAAe,CAAAZ,IAAA,MAAE;MAEvB,IAAI,IAAI,CAACa,OAAO,CAAC,YAAY,CAAC,IAAI,IAAI,CAACC,cAAc,CAAC,QAAQ,CAAC,IAAI,IAAI,CAACA,cAAc,CAAC,aAAa,CAAC,IAAI,IAAI,CAACD,OAAO,CAAC,YAAY,CAAC,IAAI,IAAI,CAACA,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CAACA,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CAACA,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAACA,OAAO,CAAC,UAAU,CAAC,EAAE;QAEnP,IAAME,QAAQ,GAAG,IAAI,CAACN,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC;QAEjD,IAAME,MAAM,GAAG,IAAI,CAACF,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC;QAExC,IAAMO,aAAW,GAAG,IAAI,CAACP,GAAG,CAAC,aAAa,CAAC;QAC3C,IAAIQ,UAAU,GAAGhC,KAAK,CAACiC,cAAc,CAAC,IAAI,CAACT,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAEhE,IAAI,CAACR,KAAK,CAACkB,GAAG,CAAC,YAAY,EAAE,IAAI,CAACV,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QACvD,IAAI,CAACR,KAAK,CAACkB,GAAG,CAAC,QAAQ,EAAER,MAAM,CAAC;QAEhC,IAAMS,GAAG,GAAGnC,KAAK,CAACmC,GAAG,CAACH,UAAU,CAAC;QACjC,IAAMI,GAAG,GAAGpC,KAAK,CAACoC,GAAG,CAACJ,UAAU,CAAC;QAEjC,IAAIT,UAAU,GAAG,IAAI,CAACA,UAAU,EAAE;QAClC,IAAIc,MAAM,GAAG,IAAI,CAACA,MAAM,EAAE;QAE1B,IAAI,CAACC,QAAQ,CAACC,KAAK,GAAG,CAAC;QAEvB,IAAIT,QAAQ,IAAI,UAAU,EAAE;UAE3B,IAAI,CAACU,MAAM,CAAC;YACXC,UAAU,EAAE,CAAC;YACbC,aAAa,EAAE,CAAC;YAChBC,WAAW,EAAE,CAAC;YACdC,YAAY,EAAE;WACd,CAAC;UAEF;UAEA,IAAI,CAAC5B,KAAK,CAACkB,GAAG,CAAC,aAAa,EAAEH,aAAW,CAAC;UAC1C,IAAI,CAACf,KAAK,CAACkB,GAAG,CAAC,QAAQ,EAAEG,MAAM,CAAC;SAEhC,MACI;UACJ,IAAId,UAAU,IAAI,CAAC,EAAE;YACpBS,UAAU,GAAG,CAAC;YACdK,MAAM,GAAG,CAAC;;UAGX;UACA,IAAIQ,CAAC,GAAGR,MAAM,GAAGD,GAAG;UACpB,IAAIU,CAAC,GAAGT,MAAM,GAAGF,GAAG;UAEpB,IAAIL,QAAQ,IAAI,QAAQ,EAAE;YAEzB,IAAI,CAACiB,MAAM,CAAC,GAAG,EAAEF,CAAC,CAAC;YACnB,IAAI,CAACE,MAAM,CAAC,GAAG,EAAED,CAAC,CAAC;YAEnB,IAAKd,UAAU,GAAG,EAAE,IAAMA,UAAU,GAAG,GAAI,IAAID,aAAW,IAAI,MAAM,EAAE;cACrE,IAAI,CAACO,QAAQ,CAACC,KAAK,GAAGP,UAAU,CAAC;cACjC,IAAI,CAACgB,QAAQ,GAAG,KAAK;aACrB,MACI;cACJ,IAAI,CAACV,QAAQ,CAACC,KAAK,GAAGP,UAAU,GAAG,GAAG;cACtC,IAAI,CAACgB,QAAQ,GAAG,IAAI;;YAErB,IAAI,CAACC,MAAM,CAACC,QAAQ,GAAG,KAAK;WAC5B,MACI,IAAIpB,QAAQ,IAAI,UAAU,EAAE;YAChC,IAAI,CAACiB,MAAM,CAAC,SAAS,EAAEnD,GAAG,CAAC;YAC3B,IAAI,CAACmD,MAAM,CAAC,SAAS,EAAEnD,GAAG,CAAC;YAC3B,IAAI,CAACmD,MAAM,CAAC,GAAG,EAAEF,CAAC,CAAC;YACnB,IAAI,CAACE,MAAM,CAAC,GAAG,EAAED,CAAC,CAAC;WACnB,MACI,IAAIhB,QAAQ,IAAI,SAAS,EAAE;YAC/B,IAAI,CAACiB,MAAM,CAAC,GAAG,EAAEF,CAAC,CAAC;YACnB,IAAI,CAACE,MAAM,CAAC,GAAG,EAAED,CAAC,CAAC;;;QAIrB,IAAI,CAACK,iBAAiB,EAAE;QACxB,IAAI,CAACC,eAAe,EAAE;;IAExB;;;;;;WAGA,SAAA1C,CAAA;MAEC,IAAMoB,QAAQ,GAAG,IAAI,CAACN,GAAG,CAAC,UAAU,EAAE,SAAS,CAAC;MAChD,IAAME,MAAM,GAAG,IAAI,CAACF,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC;MAExC,IAAI6B,EAAE,GAAG,CAAC;MACV,IAAIC,EAAE,GAAG,CAAC;MACV,IAAItB,UAAU,GAAG,IAAI,CAACR,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;MAC1C,IAAI+B,MAAM,GAAG,IAAI,CAACC,WAAW,EAAE;MAC/B,IAAIC,CAAC,GAAGF,MAAM,CAACG,KAAK,GAAGH,MAAM,CAACI,IAAI;MAClC,IAAIC,CAAC,GAAGL,MAAM,CAACM,MAAM,GAAGN,MAAM,CAACO,GAAG;MAElC,IAAIhC,QAAQ,IAAI,QAAQ,EAAE;QACzB,IAAI,IAAI,CAACkB,QAAQ,EAAE;UAClB,IAAIe,OAAO,GAAG,IAAI,CAACvC,GAAG,CAAC,SAAS,CAAC;UACjC,IAAIuC,OAAO,YAAYlE,OAAO,EAAE;YAC/B4D,CAAC,GAAGA,CAAC,IAAI,CAAC,GAAGM,OAAO,CAACrD,KAAK,GAAG,CAAC,CAAC;;UAGhC2C,EAAE,GAAGI,CAAC,GAAGzD,KAAK,CAACoC,GAAG,CAACJ,UAAU,CAAC;UAC9BsB,EAAE,GAAGG,CAAC,GAAGzD,KAAK,CAACmC,GAAG,CAACH,UAAU,CAAC;;OAE/B,MACI,IAAI,CAACN,MAAM,IAAII,QAAQ,IAAI,UAAU,EAAE;QAC3CuB,EAAE,GAAGI,CAAC,GAAG,CAAC,GAAGzD,KAAK,CAACoC,GAAG,CAACJ,UAAU,CAAC;QAClCsB,EAAE,GAAGM,CAAC,GAAG,CAAC,GAAG5D,KAAK,CAACmC,GAAG,CAACH,UAAU,CAAC;;MAInC,IAAI,CAACe,MAAM,CAAC,IAAI,EAAEM,EAAE,CAAC;MACrB,IAAI,CAACN,MAAM,CAAC,IAAI,EAAEO,EAAE,CAAC;MAErBnD,MAAA,CAAAU,SAAA,CAAMmD,eAAe,CAAAjD,IAAA,MAAE;IACxB;;EAKAP,MAAA,CAAAC,cAAA,CAAWP,WAAA,CAAAW,SAAA,QAAI;IAHf;;;SAGA,SAAAW,CAAA;MACC,OAAO,IAAI,CAACR,KAAK;IAClB,CAAC;;;;EA9JDR,MAAA,CAAAC,cAAA,CAAAP,WAAA;;;;WAAkC;;EAClCM,MAAA,CAAAC,cAAA,CAAAP,WAAA;;;;WAA0CJ,KAAK,CAACmE,UAAU,CAACC,MAAM,CAAC,CAAChE,WAAW,CAACiE,SAAS,CAAC;;EA+J1F,OAAAjE,WAAC;CAAA,CAvKgCJ,KAAK;SAAzBI,WAAW"},"metadata":{},"sourceType":"module"}