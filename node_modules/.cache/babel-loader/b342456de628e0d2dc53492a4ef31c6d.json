{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Entity } from \"../../util/Entity\";\n/**\r\n * Base class for patterns.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\n\nvar Pattern =\n/** @class */\nfunction (_super) {\n  __extends(Pattern, _super);\n\n  function Pattern() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeGraphics()\n    });\n    Object.defineProperty(_this, \"_backgroundDisplay\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeGraphics()\n    });\n    Object.defineProperty(_this, \"_clear\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_pattern\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Pattern.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      // Applying themes because pattern will not have parent\n      _super.prototype._afterNewApplyThemes.call(this);\n    }\n  });\n  Object.defineProperty(Pattern.prototype, \"pattern\", {\n    get: function () {\n      return this._pattern;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  Object.defineProperty(Pattern.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"repetition\") || this.isDirty(\"width\") || this.isDirty(\"height\") || this.isDirty(\"rotation\") || this.isDirty(\"color\") || this.isDirty(\"strokeWidth\") || this.isDirty(\"strokeDasharray\") || this.isDirty(\"strokeDashoffset\") || this.isDirty(\"colorOpacity\") || this.isDirty(\"fill\") || this.isDirty(\"fillOpacity\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Pattern.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear) {\n        var repetition = this.get(\"repetition\", \"\");\n        var width = this.get(\"width\", 100);\n        var height = this.get(\"height\", 100);\n        var fill = this.get(\"fill\");\n        var fillOpacity = this.get(\"fillOpacity\", 1);\n\n        this._display.clear();\n\n        this._backgroundDisplay.clear();\n\n        if (fill && fillOpacity > 0) {\n          this._backgroundDisplay.beginFill(fill, fillOpacity);\n\n          this._backgroundDisplay.drawRect(0, 0, width, height);\n\n          this._backgroundDisplay.endFill();\n        }\n\n        this._display.angle = this.get(\"rotation\", 0); //this._display.pivot = { x: width / 2, y: height / 2 };\n\n        this._draw();\n\n        this._pattern = this._root._renderer.createPattern(this._display, this._backgroundDisplay, repetition, width, height);\n      }\n    }\n  });\n  Object.defineProperty(Pattern, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Pattern\"\n  });\n  Object.defineProperty(Pattern, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Entity.classNames.concat([Pattern.className])\n  });\n  return Pattern;\n}(Entity);\n\nexport { Pattern };","map":{"version":3,"sources":["../../../../../../src/.internal/core/render/patterns/Pattern.ts"],"names":[],"mappings":";AAGA,SAAS,MAAT,QAAwD,mBAAxD;AAgGA;;;;AAIG;;AACH,IAAA,OAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6B,EAAA,SAAA,CAAA,OAAA,EAAA,MAAA,CAAA;;AAA7B,WAAA,OAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAYC,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,UAAA,EAAA;sBAAA;wBAAA;oBAAA;aAA6B,KAAI,CAAC,KAAL,CAAW,SAAX,CAAqB,YAArB;AAA7B,KAAA;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,oBAAA,EAAA;sBAAA;wBAAA;oBAAA;aAAuC,KAAI,CAAC,KAAL,CAAW,SAAX,CAAqB,YAArB;AAAvC,KAAA;AAEA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,QAAA,EAAA;sBAAA;wBAAA;oBAAA;aAAmB;AAAnB,KAAA;AAEA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,UAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;;AA0CA;;;;;;WA1DA,YAAA;AACC;AACA,MAAA,MAAA,CAAA,SAAA,CAAM,oBAAN,CAA0B,IAA1B,CAA0B,IAA1B;AACA;;AAeD,EAAA,MAAA,CAAA,cAAA,CAAW,OAAA,CAAA,SAAX,EAAW,SAAX,EAAkB;SAAlB,YAAA;AACC,aAAO,KAAK,QAAZ;AACA,KAFiB;qBAAA;;AAAA,GAAlB;;;;;WAIA,YAAA,CAA2B;;;;;;WAE3B,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB;;AAEA,UAAI,KAAK,OAAL,CAAa,YAAb,KAA8B,KAAK,OAAL,CAAa,OAAb,CAA9B,IAAuD,KAAK,OAAL,CAAa,QAAb,CAAvD,IAAiF,KAAK,OAAL,CAAa,UAAb,CAAjF,IAA6G,KAAK,OAAL,CAAa,OAAb,CAA7G,IAAsI,KAAK,OAAL,CAAa,aAAb,CAAtI,IAAqK,KAAK,OAAL,CAAa,iBAAb,CAArK,IAAwM,KAAK,OAAL,CAAa,kBAAb,CAAxM,IAA4O,KAAK,OAAL,CAAa,cAAb,CAA5O,IAA4Q,KAAK,OAAL,CAAa,MAAb,CAA5Q,IAAoS,KAAK,OAAL,CAAa,aAAb,CAAxS,EAAqU;AACpU,aAAK,MAAL,GAAc,IAAd;AACA;AACD;;;;;;WAED,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd;;AAEA,UAAI,KAAK,MAAT,EAAiB;AAChB,YAAM,UAAU,GAAG,KAAK,GAAL,CAAS,YAAT,EAAuB,EAAvB,CAAnB;AACA,YAAM,KAAK,GAAG,KAAK,GAAL,CAAS,OAAT,EAAkB,GAAlB,CAAd;AACA,YAAM,MAAM,GAAG,KAAK,GAAL,CAAS,QAAT,EAAmB,GAAnB,CAAf;AACA,YAAM,IAAI,GAAG,KAAK,GAAL,CAAS,MAAT,CAAb;AACA,YAAM,WAAW,GAAG,KAAK,GAAL,CAAS,aAAT,EAAwB,CAAxB,CAApB;;AAEA,aAAK,QAAL,CAAc,KAAd;;AACA,aAAK,kBAAL,CAAwB,KAAxB;;AAEA,YAAI,IAAI,IAAK,WAAW,GAAG,CAA3B,EAA+B;AAC9B,eAAK,kBAAL,CAAwB,SAAxB,CAAkC,IAAlC,EAAwC,WAAxC;;AACA,eAAK,kBAAL,CAAwB,QAAxB,CAAiC,CAAjC,EAAoC,CAApC,EAAuC,KAAvC,EAA8C,MAA9C;;AACA,eAAK,kBAAL,CAAwB,OAAxB;AACA;;AAED,aAAK,QAAL,CAAc,KAAd,GAAsB,KAAK,GAAL,CAAS,UAAT,EAAqB,CAArB,CAAtB,CAhBgB,CAiBhB;;AACA,aAAK,KAAL;;AAEA,aAAK,QAAL,GAAgB,KAAK,KAAL,CAAW,SAAX,CAAqB,aAArB,CAAmC,KAAK,QAAxC,EAAkD,KAAK,kBAAvD,EAA2E,UAA3E,EAAuF,KAAvF,EAA8F,MAA9F,CAAhB;AACA;AACD;;AAjDD,EAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,MAAM,CAAC,UAAP,CAAkB,MAAlB,CAAyB,CAAC,OAAO,CAAC,SAAT,CAAzB;AAA1C,GAAA;AAiDD,SAAA,OAAA;AAAC,CA3DD,CAA6B,MAA7B,CAAA;;SAAa,O","sourcesContent":["import type { IGraphics, IPattern } from \"../backend/Renderer\";\nimport type { Color } from \"../../util/Color\";\n\nimport { Entity, IEntitySettings, IEntityPrivate } from \"../../util/Entity\";\n\nexport interface IPatternSettings extends IEntitySettings {\n\n\t/**\n\t * Rotation of patterm in degrees. Supported values: -90 to 90.\n\t *\n\t * @default 0\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Rotation} for more info\n\t */\n\trotation?: number;\n\n\t/**\n\t * How pattern tiles are repeated when filling the area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Repetition} for more info\n\t */\n\trepetition?: \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"no-repeat\";\n\n\t/**\n\t * Width of the pattern tile, in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Sizing_patterns} for more info\n\t */\n\twidth?: number;\n\n\t/**\n\t * Width of the pattern tile, in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Sizing_patterns} for more info\n\t */\n\theight?: number;\n\n\t/**\n\t * Color of the pattern shape.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tcolor?: Color;\n\n\t/**\n\t * Opacity of the pattern shape.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tcolorOpacity?: number;\n\n\t/**\n\t * Width of the pattern's line elements.\n\t *\n\t * @default 1\n\t */\n\tstrokeWidth?: number;\n\n\t/**\n\t * Stroke (border or line) dash settings.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/#Dashed_lines} for more information\n\t */\n\tstrokeDasharray?: number[] | number;\n\n\t/**\n\t * Stroke (border or line) dash offset.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/#Dashed_lines} for more information\n\t */\n\tstrokeDashoffset?: number;\n\n\t/**\n\t * Color to fill gaps between pattern shapes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tfill?: Color;\n\n\t/**\n\t * Opacity of the fill for gaps between pattern shapes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tfillOpacity?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tcolorInherited?: boolean;\n\n\t/**\n\t * @ignore\n\t */\n\tfillInherited?: boolean;\n}\n\nexport interface IPatternPrivate extends IEntityPrivate {\n}\n\n/**\n * Base class for patterns.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class Pattern extends Entity {\n\tprotected _afterNew() {\n\t\t// Applying themes because pattern will not have parent\n\t\tsuper._afterNewApplyThemes();\n\t}\n\n\tdeclare public _settings: IPatternSettings;\n\tdeclare public _privateSettings: IPatternPrivate;\n\n\tpublic static className: string = \"Pattern\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([Pattern.className]);\n\n\tpublic _display: IGraphics = this._root._renderer.makeGraphics();\n\tpublic _backgroundDisplay: IGraphics = this._root._renderer.makeGraphics();\n\n\tprotected _clear = false;\n\n\tprotected _pattern: IPattern | undefined;\n\n\tpublic get pattern(): IPattern | undefined {\n\t\treturn this._pattern;\n\t}\n\n\tprotected _draw(): void { }\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"repetition\") || this.isDirty(\"width\") || this.isDirty(\"height\") || this.isDirty(\"rotation\") || this.isDirty(\"color\") || this.isDirty(\"strokeWidth\") || this.isDirty(\"strokeDasharray\") || this.isDirty(\"strokeDashoffset\") || this.isDirty(\"colorOpacity\") || this.isDirty(\"fill\") || this.isDirty(\"fillOpacity\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\t\t\tconst repetition = this.get(\"repetition\", \"\");\n\t\t\tconst width = this.get(\"width\", 100);\n\t\t\tconst height = this.get(\"height\", 100);\n\t\t\tconst fill = this.get(\"fill\");\n\t\t\tconst fillOpacity = this.get(\"fillOpacity\", 1);\n\n\t\t\tthis._display.clear();\n\t\t\tthis._backgroundDisplay.clear();\n\n\t\t\tif (fill && (fillOpacity > 0)) {\n\t\t\t\tthis._backgroundDisplay.beginFill(fill, fillOpacity);\n\t\t\t\tthis._backgroundDisplay.drawRect(0, 0, width, height);\n\t\t\t\tthis._backgroundDisplay.endFill();\n\t\t\t}\n\n\t\t\tthis._display.angle = this.get(\"rotation\", 0);\n\t\t\t//this._display.pivot = { x: width / 2, y: height / 2 };\n\t\t\tthis._draw();\n\n\t\t\tthis._pattern = this._root._renderer.createPattern(this._display, this._backgroundDisplay, repetition, width, height);\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}