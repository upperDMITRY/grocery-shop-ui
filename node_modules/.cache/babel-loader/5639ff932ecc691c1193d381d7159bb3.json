{"ast":null,"code":"import { range } from \"./Animation\";\nimport * as $utils from \"./Utils\";\nimport * as $type from \"./Type\";\n/**\r\n * @ignore\r\n */\nfunction string2hex(string) {\n  //string = cssColorNames[string.toLowerCase()] || string;\n  if (string[0] === \"#\") {\n    string = string.substr(1);\n  }\n  if (string.length == 3) {\n    string = string[0].repeat(2) + string[1].repeat(2) + string[2].repeat(2);\n  }\n  return parseInt(string, 16);\n}\n/**\r\n * @ignore\r\n */\nexport function rgba2hex(color) {\n  color = color.replace(/[ ]/g, \"\");\n  // Init\n  var matches = color.match(/^rgb\\(([0-9]*),([0-9]*),([0-9]*)\\)/i);\n  // Try rgb() format\n  if (matches) {\n    matches.push(\"1\");\n  } else {\n    matches = color.match(/^rgba\\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\\)/i);\n    if (!matches) {\n      return 0x000000;\n    }\n  }\n  var hex = \"\";\n  for (var i = 1; i <= 3; i++) {\n    var val = parseInt(matches[i]).toString(16);\n    if (val.length == 1) {\n      val = \"0\" + val;\n    }\n    hex += val;\n  }\n  return string2hex(hex);\n}\n/**\r\n * Returns a new [[Color]] object base on input.\r\n *\r\n * Accepts parameters in CSS hex or rgb/rtba strings, or hex numbers.\r\n *\r\n * * `\"#f00\"`\r\n * * `\"#ff0000\"`\r\n * * `\"rgb(255, 0, 0)\"`\r\n * * `\"rgba(255, 0, 0, 1)\"`\r\n * * `0xff0000`\r\n *\r\n * @param   input  Input color\r\n * @return         Color\r\n */\nexport function color(input) {\n  return Color.fromAny(input);\n}\n/**\r\n * Wherever color needs to be specified in amCharts 5, `Color` object needs to\r\n * be used.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/} for more info\r\n * @important\r\n */\nvar Color = /** @class */function () {\n  function Color(hex) {\n    Object.defineProperty(this, \"_hex\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._hex = hex | 0;\n  }\n  Object.defineProperty(Color.prototype, \"hex\", {\n    /**\r\n     * Color numeric value.\r\n     */\n    get: function () {\n      return this._hex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"r\", {\n    /**\r\n     * Value of color's R channel.\r\n     * @return R value\r\n     */\n    get: function () {\n      return this._hex >>> 16;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"g\", {\n    /**\r\n     * Value of color's G channel.\r\n     * @return G value\r\n     */\n    get: function () {\n      return this._hex >> 8 & 0xFF;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"b\", {\n    /**\r\n     * Value of color's B channel.\r\n     * @return B value\r\n     */\n    get: function () {\n      return this._hex & 0xFF;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns color CSS representation in form of `rgba(r, g, b, a)` string.\r\n   *\r\n   * @param   alpha  Opacity\r\n   * @return         CSS string\r\n   */\n  Object.defineProperty(Color.prototype, \"toCSS\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (alpha) {\n      if (alpha === void 0) {\n        alpha = 1;\n      }\n      return \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + alpha + \")\";\n    }\n  });\n  /**\r\n   * Returns color CSS representation in form of `#rgb` string.\r\n   *\r\n   * @return         CSS string\r\n   */\n  Object.defineProperty(Color.prototype, \"toCSSHex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return \"#\" + $utils.padString(this.r.toString(16), 2) + $utils.padString(this.g.toString(16), 2) + $utils.padString(this.b.toString(16), 2);\n    }\n  });\n  /**\r\n   * Returns color's HSL info.\r\n   * @param   alpha Opacity\r\n   * @return        HSL info\r\n   */\n  Object.defineProperty(Color.prototype, \"toHSL\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (alpha) {\n      if (alpha === void 0) {\n        alpha = 1;\n      }\n      return $utils.rgbToHsl({\n        r: this.r,\n        g: this.g,\n        b: this.b,\n        a: alpha\n      });\n    }\n  });\n  /**\r\n   * Converts HSL values into a new [[Color]] object.\r\n   *\r\n   * @param   h H value\r\n   * @param   s S value\r\n   * @param   l L value\r\n   * @return    Color object\r\n   */\n  Object.defineProperty(Color, \"fromHSL\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (h, s, l) {\n      var rgb = $utils.hslToRgb({\n        h: h,\n        s: s,\n        l: l\n      });\n      return this.fromRGB(rgb.r, rgb.g, rgb.b);\n    }\n  });\n  Object.defineProperty(Color.prototype, \"toString\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this.toCSSHex();\n    }\n  });\n  /**\r\n   * Converts hex number into a new [[Color]] object.\r\n   *\r\n   * ```TypeScript\r\n   * Color.fromHex(0xff0000) // red\r\n   * ```\r\n   * ```JavaScript\r\n   * Color.fromHex(0xff0000) // red\r\n   * ```\r\n   *\r\n   * @param   hex  Hex color\r\n   * @return       Color\r\n   */\n  Object.defineProperty(Color, \"fromHex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (hex) {\n      return new Color(hex);\n    }\n  });\n  /**\r\n   * Converts RGB values to a new [[Color]] object.\r\n   *\r\n   * @param   r  R value\r\n   * @param   g  G value\r\n   * @param   b  B value\r\n   * @return     Color\r\n   */\n  Object.defineProperty(Color, \"fromRGB\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (r, g, b) {\n      return new Color((b | 0) + (g << 8) + (r << 16));\n    }\n  });\n  /**\r\n   * Converts RGB string to a new [[Color]] object.\r\n   *\r\n   * ```TypeScript\r\n   * Color.fromString(\"#ff0000\") // red\r\n   * ```\r\n   * ```JavaScript\r\n   * Color.fromString(\"#ff0000\") // red\r\n   * ```\r\n   *\r\n   * @param   s  RGB string\r\n   * @return     Color\r\n   */\n  Object.defineProperty(Color, \"fromString\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (s) {\n      return new Color(string2hex(s));\n    }\n  });\n  /**\r\n   * Converts CSS rgba() syntax to a new [[Color]] object.\r\n   *\r\n   * ```TypeScript\r\n   * Color.fromCSS(\"rgba(255, 0, 0, 1)\") // red\r\n   * ```\r\n   * ```JavaScript\r\n   * Color.fromCSS(\"rgba(255, 0, 0, 1)\") // red\r\n   * ```\r\n   *\r\n   * @param  {string} s [description]\r\n   * @return {Color}    [description]\r\n   */\n  Object.defineProperty(Color, \"fromCSS\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (s) {\n      return new Color(rgba2hex(s));\n    }\n  });\n  /**\r\n   * Convert to color from virtually anything.\r\n   *\r\n   * Will throw an exception if unable to resolve the color.\r\n   *\r\n   * @param   s  Source\r\n   * @return     Color\r\n   */\n  Object.defineProperty(Color, \"fromAny\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (s) {\n      if ($type.isString(s)) {\n        if (s[0] == \"#\") {\n          return Color.fromString(s);\n        } else if (s.substr(0, 3) == \"rgb\") {\n          return Color.fromCSS(s);\n        }\n      } else if ($type.isNumber(s)) {\n        return Color.fromHex(s);\n      } else if (s instanceof Color) {\n        return Color.fromHex(s.hex);\n      }\n      throw new Error(\"Unknown color syntax: \" + s);\n    }\n  });\n  /**\r\n   * Returns a new [[Color]] object based on either `lightAlternative` or\r\n   * `darkAlternative` depending on which one is more contrasting with\r\n   * the `color`.\r\n   *\r\n   * @param   color             Reference color\r\n   * @param   lightAlternative  Light color\r\n   * @param   darkAlternative   Dark color\r\n   * @return                    Alternative color\r\n   */\n  Object.defineProperty(Color, \"alternative\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (color, lightAlternative, darkAlternative) {\n      var rgb = $utils.alternativeColor({\n        r: color.r,\n        g: color.g,\n        b: color.b\n      }, lightAlternative ? {\n        r: lightAlternative.r,\n        g: lightAlternative.g,\n        b: lightAlternative.b\n      } : undefined, darkAlternative ? {\n        r: darkAlternative.r,\n        g: darkAlternative.g,\n        b: darkAlternative.b\n      } : undefined);\n      return this.fromRGB(rgb.r, rgb.g, rgb.b);\n    }\n  });\n  /**\r\n   * Returns an intermediate Color between two reference colors depending on\r\n   * the progress (`diff`) between the two.\r\n   *\r\n   * @param   diff  Progress\r\n   * @param   from  Source color\r\n   * @param   to    Target color\r\n   * @param   mode  Interpolation mode\r\n   * @return        Color\r\n   */\n  Object.defineProperty(Color, \"interpolate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (diff, from, to, mode) {\n      if (mode === void 0) {\n        mode = \"rgb\";\n      }\n      if (mode == \"hsl\") {\n        var fromHSL = from.toHSL();\n        var toHSL = to.toHSL();\n        return Color.fromHSL(range(diff, fromHSL.h, toHSL.h), range(diff, fromHSL.s, toHSL.s), range(diff, fromHSL.l, toHSL.l));\n      } else {\n        return Color.fromRGB(range(diff, from.r, to.r), range(diff, from.g, to.g), range(diff, from.b, to.b));\n      }\n    }\n  });\n  /**\r\n   * Returns a new [[Color]] lightened by `percent` value.\r\n   *\r\n   * Use negative value to darken the color.\r\n   *\r\n   * @param   color    Source color\r\n   * @param   percent  Percent\r\n   * @return           New color\r\n   */\n  Object.defineProperty(Color, \"lighten\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (color, percent) {\n      var rgb = $utils.lighten({\n        r: color.r,\n        g: color.g,\n        b: color.b\n      }, percent);\n      return Color.fromRGB(rgb.r, rgb.g, rgb.b);\n    }\n  });\n  /**\r\n   * Returns a new [[Color]] brightened by `percent` value.\r\n   *\r\n   * Use negative value to dim the color.\r\n   *\r\n   * @param   color    Source color\r\n   * @param   percent  Percent\r\n   * @return           New color\r\n   */\n  Object.defineProperty(Color, \"brighten\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (color, percent) {\n      var rgb = $utils.brighten({\n        r: color.r,\n        g: color.g,\n        b: color.b\n      }, percent);\n      return Color.fromRGB(rgb.r, rgb.g, rgb.b);\n    }\n  });\n  /**\r\n   * Returns a new [[Color]] saturated by `percent` value.\r\n   *\r\n   * Use negative value to desaturate the color.\r\n   *\r\n   * @param   color    Source color\r\n   * @param   percent  Percent\r\n   * @return           New color\r\n   */\n  Object.defineProperty(Color, \"saturate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (color, percent) {\n      var rgb = $utils.saturate({\n        r: color.r,\n        g: color.g,\n        b: color.b\n      }, percent);\n      return Color.fromRGB(rgb.r, rgb.g, rgb.b);\n    }\n  });\n  return Color;\n}();\nexport { Color };","map":{"version":3,"names":["range","$utils","$type","string2hex","string","substr","length","repeat","parseInt","rgba2hex","color","replace","matches","match","push","hex","i","val","toString","input","Color","fromAny","Object","defineProperty","_hex","prototype","get","value","alpha","r","g","b","padString","rgbToHsl","a","h","s","l","rgb","hslToRgb","fromRGB","toCSSHex","isString","fromString","fromCSS","isNumber","fromHex","Error","lightAlternative","darkAlternative","alternativeColor","undefined","diff","from","to","mode","fromHSL","toHSL","percent","lighten","brighten","saturate"],"sources":["../../../../../src/.internal/core/util/Color.ts"],"sourcesContent":["import { range, Time } from \"./Animation\";\nimport * as $utils from \"./Utils\";\nimport * as $type from \"./Type\";\n\n/**\n * @ignore\n */\nfunction string2hex(string: string): number {\n\t//string = cssColorNames[string.toLowerCase()] || string;\n\n\tif (string[0] === \"#\") {\n\t\tstring = string.substr(1);\n\t}\n\tif (string.length == 3) {\n\t\tstring = string[0].repeat(2) + string[1].repeat(2) + string[2].repeat(2);\n\t}\n\n\treturn parseInt(string, 16);\n}\n\n/**\n * @ignore\n */\nexport function rgba2hex(color: string): number {\n\tcolor = color.replace(/[ ]/g, \"\");\n\n\t// Init\n\tlet matches: string[] | null = color.match(/^rgb\\(([0-9]*),([0-9]*),([0-9]*)\\)/i);\n\n\t// Try rgb() format\n\tif (matches) {\n\t\tmatches.push(\"1\");\n\n\t} else {\n\t\tmatches = color.match(/^rgba\\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\\)/i);\n\n\t\tif (!matches) {\n\t\t\treturn 0x000000;\n\t\t}\n\t}\n\n\tlet hex = \"\";\n\tfor (let i = 1; i <= 3; i++) {\n\t\tlet val = parseInt(matches[i]).toString(16);\n\t\tif (val.length == 1) {\n\t\t\tval = \"0\" + val;\n\t\t}\n\t\thex += val;\n\t}\n\n\treturn string2hex(hex);\n\n}\n\n/**\n * Returns a new [[Color]] object base on input.\n *\n * Accepts parameters in CSS hex or rgb/rtba strings, or hex numbers.\n *\n * * `\"#f00\"`\n * * `\"#ff0000\"`\n * * `\"rgb(255, 0, 0)\"`\n * * `\"rgba(255, 0, 0, 1)\"`\n * * `0xff0000`\n * \n * @param   input  Input color\n * @return         Color\n */\nexport function color(input: number | string): Color {\n\treturn Color.fromAny(input);\n}\n\n/**\n * Wherever color needs to be specified in amCharts 5, `Color` object needs to\n * be used.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/} for more info\n * @important\n */\nexport class Color {\n\tprotected _hex: number;\n\n\tprivate constructor(hex: number) {\n\t\tthis._hex = hex | 0;\n\t}\n\n\t/**\n\t * Color numeric value.\n\t */\n\tpublic get hex(): number {\n\t\treturn this._hex;\n\t}\n\n\t/**\n\t * Value of color's R channel.\n\t * @return R value\n\t */\n\tpublic get r(): number {\n\t\treturn this._hex >>> 16;\n\t}\n\n\t/**\n\t * Value of color's G channel.\n\t * @return G value\n\t */\n\tpublic get g(): number {\n\t\treturn (this._hex >> 8) & 0xFF;\n\t}\n\n\t/**\n\t * Value of color's B channel.\n\t * @return B value\n\t */\n\tpublic get b(): number {\n\t\treturn this._hex & 0xFF;\n\t}\n\n\t/**\n\t * Returns color CSS representation in form of `rgba(r, g, b, a)` string.\n\t * \n\t * @param   alpha  Opacity\n\t * @return         CSS string\n\t */\n\tpublic toCSS(alpha: number = 1): string {\n\t\treturn \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + alpha + \")\";\n\t}\n\n\t/**\n\t * Returns color CSS representation in form of `#rgb` string.\n\t * \n\t * @return         CSS string\n\t */\n\tpublic toCSSHex(): string {\n\t\treturn \"#\" + $utils.padString(this.r.toString(16), 2) + $utils.padString(this.g.toString(16), 2) + $utils.padString(this.b.toString(16), 2);\n\t}\n\n\t/**\n\t * Returns color's HSL info.\n\t * @param   alpha Opacity\n\t * @return        HSL info\n\t */\n\tpublic toHSL(alpha: number = 1): $utils.iHSL {\n\t\treturn $utils.rgbToHsl({\n\t\t\tr: this.r,\n\t\t\tg: this.g,\n\t\t\tb: this.b,\n\t\t\ta: alpha\n\t\t})\n\t}\n\n\t/**\n\t * Converts HSL values into a new [[Color]] object.\n\t *\n\t * @param   h H value\n\t * @param   s S value\n\t * @param   l L value\n\t * @return    Color object\n\t */\n\tpublic static fromHSL(h: number, s: number, l: number): Color {\n\t\tconst rgb = $utils.hslToRgb({\n\t\t\th: h,\n\t\t\ts: s,\n\t\t\tl: l\n\t\t});\n\t\treturn this.fromRGB(rgb.r, rgb.g, rgb.b);\n\t}\n\n\tpublic toString(): string {\n\t\treturn this.toCSSHex();\n\t}\n\n\t/**\n\t * Converts hex number into a new [[Color]] object.\n\t *\n\t * ```TypeScript\n\t * Color.fromHex(0xff0000) // red\n\t * ```\n\t * ```JavaScript\n\t * Color.fromHex(0xff0000) // red\n\t * ```\n\t *\n\t * @param   hex  Hex color\n\t * @return       Color\n\t */\n\tpublic static fromHex(hex: number): Color {\n\t\treturn new Color(hex);\n\t}\n\n\t/**\n\t * Converts RGB values to a new [[Color]] object.\n\t *\n\t * @param   r  R value\n\t * @param   g  G value\n\t * @param   b  B value\n\t * @return     Color\n\t */\n\tpublic static fromRGB(r: number, g: number, b: number): Color {\n\t\treturn new Color((b | 0) + (g << 8) + (r << 16));\n\t}\n\n\t/**\n\t * Converts RGB string to a new [[Color]] object.\n\t *\n\t * ```TypeScript\n\t * Color.fromString(\"#ff0000\") // red\n\t * ```\n\t * ```JavaScript\n\t * Color.fromString(\"#ff0000\") // red\n\t * ```\n\t *\n\t * @param   s  RGB string\n\t * @return     Color\n\t */\n\tpublic static fromString(s: string): Color {\n\t\treturn new Color(string2hex(s));\n\t}\n\n\t/**\n\t * Converts CSS rgba() syntax to a new [[Color]] object.\n\t *\n\t * ```TypeScript\n\t * Color.fromCSS(\"rgba(255, 0, 0, 1)\") // red\n\t * ```\n\t * ```JavaScript\n\t * Color.fromCSS(\"rgba(255, 0, 0, 1)\") // red\n\t * ```\n\t *\n\t * @param  {string} s [description]\n\t * @return {Color}    [description]\n\t */\n\tpublic static fromCSS(s: string): Color {\n\t\treturn new Color(rgba2hex(s));\n\t}\n\n\t/**\n\t * Convert to color from virtually anything.\n\t *\n\t * Will throw an exception if unable to resolve the color.\n\t *\n\t * @param   s  Source\n\t * @return     Color\n\t */\n\tpublic static fromAny(s: string | number | Color): Color {\n\t\tif ($type.isString(s)) {\n\t\t\tif (s[0] == \"#\") {\n\t\t\t\treturn Color.fromString(s);\n\t\t\t}\n\t\t\telse if (s.substr(0, 3) == \"rgb\") {\n\t\t\t\treturn Color.fromCSS(s);\n\t\t\t}\n\t\t}\n\t\telse if ($type.isNumber(s)) {\n\t\t\treturn Color.fromHex(s);\n\t\t}\n\t\telse if (s instanceof Color) {\n\t\t\treturn Color.fromHex(s.hex);\n\t\t}\n\n\t\tthrow new Error(\"Unknown color syntax: \" + s);\n\t}\n\n\t/**\n\t * Returns a new [[Color]] object based on either `lightAlternative` or\n\t * `darkAlternative` depending on which one is more contrasting with\n\t * the `color`.\n\t *\n\t * @param   color             Reference color\n\t * @param   lightAlternative  Light color\n\t * @param   darkAlternative   Dark color\n\t * @return                    Alternative color\n\t */\n\tpublic static alternative(color: Color, lightAlternative?: Color, darkAlternative?: Color): Color {\n\t\tconst rgb = $utils.alternativeColor(\n\t\t\t{ r: color.r, g: color.g, b: color.b },\n\t\t\tlightAlternative ? { r: lightAlternative.r, g: lightAlternative.g, b: lightAlternative.b } : undefined,\n\t\t\tdarkAlternative ? { r: darkAlternative.r, g: darkAlternative.g, b: darkAlternative.b } : undefined\n\t\t);\n\t\treturn this.fromRGB(rgb.r, rgb.g, rgb.b);\n\t}\n\n\t/**\n\t * Returns an intermediate Color between two reference colors depending on\n\t * the progress (`diff`) between the two.\n\t *\n\t * @param   diff  Progress\n\t * @param   from  Source color\n\t * @param   to    Target color\n\t * @param   mode  Interpolation mode\n\t * @return        Color\n\t */\n\tpublic static interpolate(diff: Time, from: Color, to: Color, mode: \"rgb\" | \"hsl\" = \"rgb\"): Color {\n\t\tif (mode == \"hsl\") {\n\t\t\tconst fromHSL = from.toHSL();\n\t\t\tconst toHSL = to.toHSL();\n\t\t\treturn Color.fromHSL(\n\t\t\t\trange(diff, fromHSL.h, toHSL.h),\n\t\t\t\trange(diff, fromHSL.s, toHSL.s),\n\t\t\t\trange(diff, fromHSL.l, toHSL.l)\n\t\t\t);\n\t\t}\n\t\telse {\n\t\t\treturn Color.fromRGB(\n\t\t\t\trange(diff, from.r, to.r),\n\t\t\t\trange(diff, from.g, to.g),\n\t\t\t\trange(diff, from.b, to.b)\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a new [[Color]] lightened by `percent` value.\n\t *\n\t * Use negative value to darken the color.\n\t *\n\t * @param   color    Source color\n\t * @param   percent  Percent\n\t * @return           New color\n\t */\n\tpublic static lighten(color: Color, percent: number): Color {\n\t\tconst rgb = $utils.lighten({ r: color.r, g: color.g, b: color.b }, percent);\n\t\treturn Color.fromRGB(rgb!.r, rgb!.g, rgb!.b);\n\t}\n\n\t/**\n\t * Returns a new [[Color]] brightened by `percent` value.\n\t *\n\t * Use negative value to dim the color.\n\t *\n\t * @param   color    Source color\n\t * @param   percent  Percent\n\t * @return           New color\n\t */\n\tpublic static brighten(color: Color, percent: number): Color {\n\t\tconst rgb = $utils.brighten({ r: color.r, g: color.g, b: color.b }, percent);\n\t\treturn Color.fromRGB(rgb!.r, rgb!.g, rgb!.b);\n\t}\n\n\t/**\n\t * Returns a new [[Color]] saturated by `percent` value.\n\t *\n\t * Use negative value to desaturate the color.\n\t *\n\t * @param   color    Source color\n\t * @param   percent  Percent\n\t * @return           New color\n\t */\n\tpublic static saturate(color: Color, percent: number): Color {\n\t\tconst rgb = $utils.saturate({ r: color.r, g: color.g, b: color.b }, percent);\n\t\treturn Color.fromRGB(rgb!.r, rgb!.g, rgb!.b);\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}