{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"../../../core/render/Graphics\";\nimport { Template } from \"../../../core/util/Template\";\nimport { ListTemplate } from \"../../../core/util/List\";\nimport { AxisTick } from \"./AxisTick\";\nimport { Grid } from \"./Grid\";\nimport { AxisLabel } from \"./AxisLabel\";\nimport * as $utils from \"../../../core/util/Utils\";\n/**\r\n * Base class for an axis renderer.\r\n *\r\n * Should not be used on its own.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\r\n */\n\nvar AxisRenderer =\n/** @class */\nfunction (_super) {\n  __extends(AxisRenderer, _super);\n\n  function AxisRenderer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // save for quick access\n\n\n    Object.defineProperty(_this, \"_axisLength\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 100\n    });\n    Object.defineProperty(_this, \"_start\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_end\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(_this, \"_inversed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_minSize\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    /**\r\n     * Chart the renderer is used in.\r\n     */\n\n    Object.defineProperty(_this, \"chart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_lc\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(_this, \"_ls\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_thumbDownPoint\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_downStart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_downEnd\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * A list of ticks in the axis.\r\n     *\r\n     * `ticks.template` can be used to configure ticks.\r\n     *\r\n     * @default new ListTemplate<AxisTick>\r\n     */\n\n    Object.defineProperty(_this, \"ticks\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return AxisTick._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.ticks.template.get(\"themeTags\", []), _this.get(\"themeTags\", []))\n        }, [_this.ticks.template]);\n      })\n    });\n    /**\r\n     * A list of grid elements in the axis.\r\n     *\r\n     * `grid.template` can be used to configure grid.\r\n     *\r\n     * @default new ListTemplate<Grid>\r\n     */\n\n    Object.defineProperty(_this, \"grid\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return Grid._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.grid.template.get(\"themeTags\", []), _this.get(\"themeTags\", []))\n        }, [_this.grid.template]);\n      })\n    });\n    /**\r\n     * A list of fills in the axis.\r\n     *\r\n     * `axisFills.template` can be used to configure axis fills.\r\n     *\r\n     * @default new ListTemplate<Graphics>\r\n     */\n\n    Object.defineProperty(_this, \"axisFills\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return Graphics._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.axisFills.template.get(\"themeTags\", [\"axis\", \"fill\"]), _this.get(\"themeTags\", []))\n        }, [_this.axisFills.template]);\n      })\n    });\n    /**\r\n     * A list of labels in the axis.\r\n     *\r\n     * `labels.template` can be used to configure axis labels.\r\n     *\r\n     * @default new ListTemplate<AxisLabel>\r\n     */\n\n    Object.defineProperty(_this, \"labels\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return AxisLabel._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.labels.template.get(\"themeTags\", []), _this.get(\"themeTags\", []))\n        }, [_this.labels.template]);\n      })\n    });\n    /**\r\n     * An [[Axis]] renderer is for.\r\n     */\n\n    Object.defineProperty(_this, \"axis\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"thumb\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(AxisRenderer.prototype, \"makeTick\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem, themeTags) {\n      var tick = this.ticks.make();\n\n      tick._setDataItem(dataItem);\n\n      dataItem.setRaw(\"tick\", tick);\n      tick.set(\"themeTags\", $utils.mergeTags(tick.get(\"themeTags\"), themeTags));\n      this.axis.labelsContainer.children.push(tick);\n      this.ticks.push(tick);\n      return tick;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRenderer.prototype, \"makeGrid\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem, themeTags) {\n      var grid = this.grid.make();\n\n      grid._setDataItem(dataItem);\n\n      dataItem.setRaw(\"grid\", grid);\n      grid.set(\"themeTags\", $utils.mergeTags(grid.get(\"themeTags\"), themeTags));\n      this.axis.gridContainer.children.push(grid);\n      this.grid.push(grid);\n      return grid;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRenderer.prototype, \"makeAxisFill\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem, themeTags) {\n      var axisFill = this.axisFills.make();\n\n      axisFill._setDataItem(dataItem);\n\n      axisFill.set(\"themeTags\", $utils.mergeTags(axisFill.get(\"themeTags\"), themeTags));\n      this.axis.gridContainer.children.push(axisFill);\n      dataItem.setRaw(\"axisFill\", axisFill);\n      this.axisFills.push(axisFill);\n      return axisFill;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRenderer.prototype, \"makeLabel\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem, themeTags) {\n      var label = this.labels.make();\n\n      if (this.get(\"opposite\")) {\n        themeTags.push(\"opposite\");\n      }\n\n      if (this.get(\"inside\")) {\n        themeTags.push(\"inside\");\n      }\n\n      label.set(\"themeTags\", $utils.mergeTags(label.get(\"themeTags\"), themeTags));\n      this.axis.labelsContainer.children.moveValue(label, 0);\n\n      label._setDataItem(dataItem);\n\n      dataItem.setRaw(\"label\", label);\n      this.labels.push(label);\n      return label;\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"axisLength\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      return 0;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRenderer.prototype, \"gridCount\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      return this.axisLength() / this.get(\"minGridDistance\", 50);\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_updatePositions\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {}\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      _super.prototype._afterNew.call(this);\n\n      this.set(\"isMeasured\", false);\n      var thumb = this.thumb;\n\n      if (thumb) {\n        this._disposers.push(thumb.events.on(\"pointerdown\", function (event) {\n          _this._handleThumbDown(event.originalEvent);\n        }));\n\n        this._disposers.push(thumb.events.on(\"globalpointerup\", function (event) {\n          _this._handleThumbUp(event.originalEvent);\n        }));\n\n        this._disposers.push(thumb.events.on(\"globalpointermove\", function (event) {\n          _this._handleThumbMove(event.originalEvent);\n        }));\n      }\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      _super.prototype._changed.call(this);\n\n      if (this.isDirty(\"pan\")) {\n        var thumb = this.thumb;\n\n        if (thumb) {\n          var labelsContainer = this.axis.labelsContainer;\n          var pan = this.get(\"pan\");\n\n          if (pan == \"zoom\") {\n            labelsContainer.children.push(thumb);\n          } else if (pan == \"none\") {\n            labelsContainer.children.removeValue(thumb);\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_handleThumbDown\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(event) {\n      this._thumbDownPoint = this.toLocal(this._root.documentPointToRoot({\n        x: event.clientX,\n        y: event.clientY\n      }));\n      var axis = this.axis;\n      this._downStart = axis.get(\"start\");\n      this._downEnd = axis.get(\"end\");\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_handleThumbUp\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_event) {\n      this._thumbDownPoint = undefined;\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_handleThumbMove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(event) {\n      var downPoint = this._thumbDownPoint;\n\n      if (downPoint) {\n        var point = this.toLocal(this._root.documentPointToRoot({\n          x: event.clientX,\n          y: event.clientY\n        }));\n        var downStart = this._downStart;\n        var downEnd = this._downEnd;\n        var extra = this._getPan(point, downPoint) * Math.min(1, downEnd - downStart) / 2;\n        this.axis.setAll({\n          start: downStart - extra,\n          end: downEnd + extra\n        });\n      }\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_getPan\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_point1, _point2) {\n      return 0;\n    }\n  });\n  /**\r\n   * Converts relative position (0-1) on axis to a pixel coordinate.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinate (px)\r\n   */\n\n  Object.defineProperty(AxisRenderer.prototype, \"positionToCoordinate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(position) {\n      if (this._inversed) {\n        return (this._end - position) * this._axisLength;\n      } else {\n        return (position - this._start) * this._axisLength;\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRenderer.prototype, \"updateTooltipBounds\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_tooltip) {}\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_updateSize\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      this.markDirty();\n      this._clear = true;\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"toAxisPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(position) {\n      var start = this._start || 0;\n      var end = this._end || 1;\n      position = position * (end - start);\n\n      if (!this.get(\"inversed\")) {\n        position = start + position;\n      } else {\n        position = end - position;\n      }\n\n      return position;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRenderer.prototype, \"fixPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(position) {\n      if (this.get(\"inversed\")) {\n        return 1 - position;\n      }\n\n      return position;\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_updateLC\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {}\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"toggleVisibility\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(sprite, position, minPosition, maxPosition) {\n      var axis = this.axis;\n      var start = axis.get(\"start\", 0);\n      var end = axis.get(\"end\", 1);\n      var updatedStart = start + (end - start) * (minPosition - 0.0001);\n      var updatedEnd = start + (end - start) * (maxPosition + 0.0001);\n\n      if (position < updatedStart || position > updatedEnd) {\n        sprite.setPrivate(\"visible\", false);\n      } else {\n        sprite.setPrivate(\"visible\", true);\n      }\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_positionTooltip\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(tooltip, point) {\n      var chart = this.chart;\n\n      if (chart) {\n        if (chart.inPlot(point)) {\n          tooltip.set(\"pointTo\", this._display.toGlobal(point));\n        } else {\n          tooltip.hide();\n        }\n      }\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"processAxis\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {}\n  });\n  Object.defineProperty(AxisRenderer, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"AxisRenderer\"\n  });\n  Object.defineProperty(AxisRenderer, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([AxisRenderer.className])\n  });\n  return AxisRenderer;\n}(Graphics);\n\nexport { AxisRenderer };","map":{"version":3,"sources":["../../../../../../src/.internal/charts/xy/axes/AxisRenderer.ts"],"names":[],"mappings":";AACA,SAAS,QAAT,QAA8D,+BAA9D;AAEA,SAAS,QAAT,QAAyB,6BAAzB;AACA,SAAS,YAAT,QAA6B,yBAA7B;AACA,SAAS,QAAT,QAAyB,YAAzB;AACA,SAAS,IAAT,QAAqB,QAArB;AACA,SAAS,SAAT,QAA0B,aAA1B;AAMA,OAAO,KAAK,MAAZ,MAAwB,0BAAxB;AA6DA;;;;;;AAMG;;AACH,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2C,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAA3C,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA,CAAA,CAIC;;;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,aAAA,EAAA;sBAAA;wBAAA;oBAAA;aAA6B;AAA7B,KAAA;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,QAAA,EAAA;sBAAA;wBAAA;oBAAA;aAAwB;AAAxB,KAAA;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,MAAA,EAAA;sBAAA;wBAAA;oBAAA;aAAsB;AAAtB,KAAA;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,WAAA,EAAA;sBAAA;wBAAA;oBAAA;aAA4B;AAA5B,KAAA;AAEA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,UAAA,EAAA;sBAAA;wBAAA;oBAAA;aAA6B;AAA7B,KAAA;AAEA;;AAEG;;AACH,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,OAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AAEA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,KAAA,EAAA;sBAAA;wBAAA;oBAAA;aAAgB;AAAhB,KAAA;AAEA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,KAAA,EAAA;sBAAA;wBAAA;oBAAA;aAAgB;AAAhB,KAAA;AAEA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,iBAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AAEA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,YAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,UAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AAeA;;;;;;AAMG;;AACH,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,OAAA,EAAA;sBAAA;wBAAA;oBAAA;aAAgD,IAAI,YAAJ,CAC/C,QAAQ,CAAC,GAAT,CAAa,EAAb,CAD+C,EAE/C,YAAA;AAAM,eAAA,QAAQ,CAAC,IAAT,CAAc,KAAI,CAAC,KAAnB,EAA0B;AAC/B,UAAA,SAAS,EAAE,MAAM,CAAC,SAAP,CAAiB,KAAI,CAAC,KAAL,CAAW,QAAX,CAAoB,GAApB,CAAwB,WAAxB,EAAqC,EAArC,CAAjB,EAA2D,KAAI,CAAC,GAAL,CAAS,WAAT,EAAsB,EAAtB,CAA3D;AADoB,SAA1B,EAEH,CAAC,KAAI,CAAC,KAAL,CAFE,QAEH,CAFG,CAAA;AAEmB,OAJsB;AAAhD,KAAA;AAqBA;;;;;;AAMG;;AACH,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,MAAA,EAAA;sBAAA;wBAAA;oBAAA;aAA2C,IAAI,YAAJ,CAC1C,QAAQ,CAAC,GAAT,CAAa,EAAb,CAD0C,EAE1C,YAAA;AAAM,eAAA,IAAI,CAAC,IAAL,CAAU,KAAI,CAAC,KAAf,EAAsB;AAC3B,UAAA,SAAS,EAAE,MAAM,CAAC,SAAP,CAAiB,KAAI,CAAC,IAAL,CAAU,QAAV,CAAmB,GAAnB,CAAuB,WAAvB,EAAoC,EAApC,CAAjB,EAA0D,KAAI,CAAC,GAAL,CAAS,WAAT,EAAsB,EAAtB,CAA1D;AADgB,SAAtB,EAEH,CAAC,KAAI,CAAC,IAAL,CAFE,QAEH,CAFG,CAAA;AAEkB,OAJkB;AAA3C,KAAA;AAqBA;;;;;;AAMG;;AACH,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,WAAA,EAAA;sBAAA;wBAAA;oBAAA;aAAoD,IAAI,YAAJ,CACnD,QAAQ,CAAC,GAAT,CAAa,EAAb,CADmD,EAEnD,YAAA;AAAM,eAAA,QAAQ,CAAC,IAAT,CAAc,KAAI,CAAC,KAAnB,EAA0B;AAC/B,UAAA,SAAS,EAAE,MAAM,CAAC,SAAP,CAAiB,KAAI,CAAC,SAAL,CAAe,QAAf,CAAwB,GAAxB,CAA4B,WAA5B,EAAyC,CAAC,MAAD,EAAS,MAAT,CAAzC,CAAjB,EAA6E,KAAI,CAAC,GAAL,CAAS,WAAT,EAAsB,EAAtB,CAA7E;AADoB,SAA1B,EAEH,CAAC,KAAI,CAAC,SAAL,CAFE,QAEH,CAFG,CAAA;AAEuB,OAJsB;AAApD,KAAA;AA8BA;;;;;;AAMG;;AACH,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,QAAA,EAAA;sBAAA;wBAAA;oBAAA;aAAkD,IAAI,YAAJ,CACjD,QAAQ,CAAC,GAAT,CAAa,EAAb,CADiD,EAEjD,YAAA;AAAM,eAAA,SAAS,CAAC,IAAV,CAAe,KAAI,CAAC,KAApB,EAA2B;AAChC,UAAA,SAAS,EAAE,MAAM,CAAC,SAAP,CAAiB,KAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,GAArB,CAAyB,WAAzB,EAAsC,EAAtC,CAAjB,EAA4D,KAAI,CAAC,GAAL,CAAS,WAAT,EAAsB,EAAtB,CAA5D;AADqB,SAA3B,EAEH,CAAC,KAAI,CAAC,MAAL,CAFE,QAEH,CAFG,CAAA;AAEoB,OAJuB;AAAlD,KAAA;AAWA;;AAEG;;AACH,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,MAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AAgDA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,OAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;;AA4JA;AA3UA;;AAEG;;;;;;;WACH,eAAgB,QAAhB,EAAmD,SAAnD,EAA2E;AAC1E,UAAM,IAAI,GAAG,KAAK,KAAL,CAAW,IAAX,EAAb;;AACA,MAAA,IAAI,CAAC,YAAL,CAAkB,QAAlB;;AACA,MAAA,QAAQ,CAAC,MAAT,CAAgB,MAAhB,EAAwB,IAAxB;AACA,MAAA,IAAI,CAAC,GAAL,CAAS,WAAT,EAAsB,MAAM,CAAC,SAAP,CAAiB,IAAI,CAAC,GAAL,CAAS,WAAT,CAAjB,EAAwC,SAAxC,CAAtB;AACA,WAAK,IAAL,CAAU,eAAV,CAA0B,QAA1B,CAAmC,IAAnC,CAAwC,IAAxC;AACA,WAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB;AACA,aAAO,IAAP;AACA;;AAgBD;;AAEG;;;;;;WACH,eAAgB,QAAhB,EAAmD,SAAnD,EAA2E;AAC1E,UAAM,IAAI,GAAG,KAAK,IAAL,CAAU,IAAV,EAAb;;AACA,MAAA,IAAI,CAAC,YAAL,CAAkB,QAAlB;;AACA,MAAA,QAAQ,CAAC,MAAT,CAAgB,MAAhB,EAAwB,IAAxB;AACA,MAAA,IAAI,CAAC,GAAL,CAAS,WAAT,EAAsB,MAAM,CAAC,SAAP,CAAiB,IAAI,CAAC,GAAL,CAAS,WAAT,CAAjB,EAAwC,SAAxC,CAAtB;AAEA,WAAK,IAAL,CAAU,aAAV,CAAwB,QAAxB,CAAiC,IAAjC,CAAsC,IAAtC;AACA,WAAK,IAAL,CAAU,IAAV,CAAe,IAAf;AACA,aAAO,IAAP;AACA;;AAgBD;;AAEG;;;;;;WACH,eAAoB,QAApB,EAAuD,SAAvD,EAA+E;AAC9E,UAAM,QAAQ,GAAG,KAAK,SAAL,CAAe,IAAf,EAAjB;;AACA,MAAA,QAAQ,CAAC,YAAT,CAAsB,QAAtB;;AACA,MAAA,QAAQ,CAAC,GAAT,CAAa,WAAb,EAA0B,MAAM,CAAC,SAAP,CAAiB,QAAQ,CAAC,GAAT,CAAa,WAAb,CAAjB,EAA4C,SAA5C,CAA1B;AAEA,WAAK,IAAL,CAAU,aAAV,CAAwB,QAAxB,CAAiC,IAAjC,CAAsC,QAAtC;AACA,MAAA,QAAQ,CAAC,MAAT,CAAgB,UAAhB,EAA4B,QAA5B;AACA,WAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACA,aAAO,QAAP;AACA;;AAgBD;;AAEG;;;;;;WACH,eAAiB,QAAjB,EAAoD,SAApD,EAA4E;AAE3E,UAAM,KAAK,GAAG,KAAK,MAAL,CAAY,IAAZ,EAAd;;AAEA,UAAI,KAAK,GAAL,CAAS,UAAT,CAAJ,EAAiC;AAChC,QAAA,SAAS,CAAC,IAAV,CAAe,UAAf;AACA;;AACD,UAAI,KAAK,GAAL,CAAS,QAAT,CAAJ,EAA+B;AAC9B,QAAA,SAAS,CAAC,IAAV,CAAe,QAAf;AACA;;AAED,MAAA,KAAK,CAAC,GAAN,CAAU,WAAV,EAAuB,MAAM,CAAC,SAAP,CAAiB,KAAK,CAAC,GAAN,CAAU,WAAV,CAAjB,EAAyC,SAAzC,CAAvB;AACA,WAAK,IAAL,CAAU,eAAV,CAA0B,QAA1B,CAAmC,SAAnC,CAA6C,KAA7C,EAAoD,CAApD;;AAEA,MAAA,KAAK,CAAC,YAAN,CAAmB,QAAnB;;AACA,MAAA,QAAQ,CAAC,MAAT,CAAgB,OAAhB,EAAyB,KAAzB;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB;AACA,aAAO,KAAP;AACA;;;;;;WAyBD,iBAAA;AACC,aAAO,CAAP;AACA;;AAED;;AAEG;;;;;;WACH,iBAAA;AACC,aAAO,KAAK,UAAL,KAAoB,KAAK,GAAL,CAAS,iBAAT,EAA4B,EAA5B,CAA3B;AACA;;;;;;WAED,iBAAA,CAEC;;;;;;WAmCD,iBAAA;AAAA,UAAA,KAAA,GAAA,IAAA;;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,SAAN,CAAe,IAAf,CAAe,IAAf;;AACA,WAAK,GAAL,CAAS,YAAT,EAAuB,KAAvB;AAEA,UAAM,KAAK,GAAG,KAAK,KAAnB;;AACA,UAAI,KAAJ,EAAW;AACV,aAAK,UAAL,CAAgB,IAAhB,CAAqB,KAAK,CAAC,MAAN,CAAa,EAAb,CAAgB,aAAhB,EAA+B,UAAC,KAAD,EAAM;AACzD,UAAA,KAAI,CAAC,gBAAL,CAAsB,KAAK,CAAC,aAA5B;AACA,SAFoB,CAArB;;AAIA,aAAK,UAAL,CAAgB,IAAhB,CAAqB,KAAK,CAAC,MAAN,CAAa,EAAb,CAAgB,iBAAhB,EAAmC,UAAC,KAAD,EAAM;AAC7D,UAAA,KAAI,CAAC,cAAL,CAAoB,KAAK,CAAC,aAA1B;AACA,SAFoB,CAArB;;AAIA,aAAK,UAAL,CAAgB,IAAhB,CAAqB,KAAK,CAAC,MAAN,CAAa,EAAb,CAAgB,mBAAhB,EAAqC,UAAC,KAAD,EAAM;AAC/D,UAAA,KAAI,CAAC,gBAAL,CAAsB,KAAK,CAAC,aAA5B;AACA,SAFoB,CAArB;AAGA;AACD;;;;;;WAED,iBAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd;;AAEA,UAAI,KAAK,OAAL,CAAa,KAAb,CAAJ,EAAyB;AACxB,YAAM,KAAK,GAAG,KAAK,KAAnB;;AACA,YAAI,KAAJ,EAAW;AACV,cAAM,eAAe,GAAG,KAAK,IAAL,CAAU,eAAlC;AACA,cAAM,GAAG,GAAG,KAAK,GAAL,CAAS,KAAT,CAAZ;;AACA,cAAI,GAAG,IAAI,MAAX,EAAmB;AAClB,YAAA,eAAe,CAAC,QAAhB,CAAyB,IAAzB,CAA8B,KAA9B;AACA,WAFD,MAGK,IAAI,GAAG,IAAI,MAAX,EAAmB;AACvB,YAAA,eAAe,CAAC,QAAhB,CAAyB,WAAzB,CAAqC,KAArC;AACA;AACD;AACD;AACD;;;;;;WAED,eAA2B,KAA3B,EAA+C;AAC9C,WAAK,eAAL,GAAuB,KAAK,OAAL,CAAa,KAAK,KAAL,CAAW,mBAAX,CAA+B;AAAE,QAAA,CAAC,EAAE,KAAK,CAAC,OAAX;AAAoB,QAAA,CAAC,EAAE,KAAK,CAAC;AAA7B,OAA/B,CAAb,CAAvB;AACA,UAAM,IAAI,GAAG,KAAK,IAAlB;AACA,WAAK,UAAL,GAAkB,IAAI,CAAC,GAAL,CAAS,OAAT,CAAlB;AACA,WAAK,QAAL,GAAgB,IAAI,CAAC,GAAL,CAAS,KAAT,CAAhB;AACA;;;;;;WAED,eAAyB,MAAzB,EAA8C;AAC7C,WAAK,eAAL,GAAuB,SAAvB;AACA;;;;;;WAED,eAA2B,KAA3B,EAA+C;AAC9C,UAAM,SAAS,GAAG,KAAK,eAAvB;;AACA,UAAI,SAAJ,EAAe;AACd,YAAM,KAAK,GAAG,KAAK,OAAL,CAAa,KAAK,KAAL,CAAW,mBAAX,CAA+B;AAAE,UAAA,CAAC,EAAE,KAAK,CAAC,OAAX;AAAoB,UAAA,CAAC,EAAE,KAAK,CAAC;AAA7B,SAA/B,CAAb,CAAd;AAEA,YAAM,SAAS,GAAG,KAAK,UAAvB;AACA,YAAM,OAAO,GAAG,KAAK,QAArB;AACA,YAAM,KAAK,GAAG,KAAK,OAAL,CAAa,KAAb,EAAoB,SAApB,IAAiC,IAAI,CAAC,GAAL,CAAS,CAAT,EAAa,OAAO,GAAG,SAAvB,CAAjC,GAAsE,CAApF;AACA,aAAK,IAAL,CAAU,MAAV,CAAiB;AAAE,UAAA,KAAK,EAAE,SAAS,GAAG,KAArB;AAA4B,UAAA,GAAG,EAAE,OAAO,GAAG;AAA3C,SAAjB;AACA;AACD;;;;;;WAED,eAAkB,OAAlB,EAAmC,OAAnC,EAAkD;AACjD,aAAO,CAAP;AACA;;AAED;;;;;AAKG;;;;;;WACH,eAA4B,QAA5B,EAA4C;AAC3C,UAAI,KAAK,SAAT,EAAoB;AACnB,eAAO,CAAC,KAAK,IAAL,GAAY,QAAb,IAAyB,KAAK,WAArC;AACA,OAFD,MAGK;AACJ,eAAO,CAAC,QAAQ,GAAG,KAAK,MAAjB,IAA2B,KAAK,WAAvC;AACA;AACD;;AAOD;;AAEG;;;;;;WACH,eAA2B,QAA3B,EAA4C,CAAK;;;;;;WAEjD,iBAAA;AACC,WAAK,SAAL;AACA,WAAK,MAAL,GAAc,IAAd;AACA;;;;;;WAED,eAAsB,QAAtB,EAAsC;AACrC,UAAM,KAAK,GAAG,KAAK,MAAL,IAAe,CAA7B;AACA,UAAM,GAAG,GAAG,KAAK,IAAL,IAAa,CAAzB;AAEA,MAAA,QAAQ,GAAG,QAAQ,IAAI,GAAG,GAAG,KAAV,CAAnB;;AACA,UAAI,CAAC,KAAK,GAAL,CAAS,UAAT,CAAL,EAA2B;AAC1B,QAAA,QAAQ,GAAG,KAAK,GAAG,QAAnB;AACA,OAFD,MAGK;AACJ,QAAA,QAAQ,GAAG,GAAG,GAAG,QAAjB;AACA;;AAED,aAAO,QAAP;AACA;;AAED;;AAEG;;;;;;WACH,eAAmB,QAAnB,EAAmC;AAClC,UAAI,KAAK,GAAL,CAAS,UAAT,CAAJ,EAA0B;AACzB,eAAO,IAAI,QAAX;AACA;;AACD,aAAO,QAAP;AACA;;;;;;WAED,iBAAA,CAEC;;;;;;WAED,eAA2B,MAA3B,EAA2C,QAA3C,EAA6D,WAA7D,EAAkF,WAAlF,EAAqG;AACpG,UAAI,IAAI,GAAG,KAAK,IAAhB;AAEA,UAAM,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,CAAlB,CAAd;AACA,UAAM,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,CAAhB,CAAZ;AAEA,UAAI,YAAY,GAAG,KAAK,GAAG,CAAC,GAAG,GAAG,KAAP,KAAiB,WAAW,GAAG,MAA/B,CAA3B;AACA,UAAI,UAAU,GAAG,KAAK,GAAG,CAAC,GAAG,GAAG,KAAP,KAAiB,WAAW,GAAG,MAA/B,CAAzB;;AAEA,UAAI,QAAQ,GAAG,YAAX,IAA2B,QAAQ,GAAG,UAA1C,EAAsD;AACrD,QAAA,MAAM,CAAC,UAAP,CAAkB,SAAlB,EAA6B,KAA7B;AACA,OAFD,MAGK;AACJ,QAAA,MAAM,CAAC,UAAP,CAAkB,SAAlB,EAA6B,IAA7B;AACA;AACD;;;;;;WAED,eAA2B,OAA3B,EAA6C,KAA7C,EAA0D;AACzD,UAAM,KAAK,GAAG,KAAK,KAAnB;;AACA,UAAI,KAAJ,EAAW;AACV,YAAI,KAAK,CAAC,MAAN,CAAa,KAAb,CAAJ,EAAyB;AACxB,UAAA,OAAO,CAAC,GAAR,CAAY,SAAZ,EAAuB,KAAK,QAAL,CAAc,QAAd,CAAuB,KAAvB,CAAvB;AACA,SAFD,MAGK;AACJ,UAAA,OAAO,CAAC,IAAR;AACA;AACD;AACD;;;;;;WAED,iBAAA,CAAwB;;AAnWxB,EAAA,MAAA,CAAA,cAAA,CAAA,YAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,YAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,QAAQ,CAAC,UAAT,CAAoB,MAApB,CAA2B,CAAC,YAAY,CAAC,SAAd,CAA3B;AAA1C,GAAA;AAmWD,SAAA,YAAA;AAAC,CArWD,CAA2C,QAA3C,CAAA;;SAAsB,Y","sourcesContent":["import type { Sprite } from \"../../../core/render/Sprite\";\nimport { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"../../../core/render/Graphics\";\nimport type { Axis, IAxisDataItem } from \"./Axis\";\nimport { Template } from \"../../../core/util/Template\";\nimport { ListTemplate } from \"../../../core/util/List\";\nimport { AxisTick } from \"./AxisTick\";\nimport { Grid } from \"./Grid\";\nimport { AxisLabel } from \"./AxisLabel\";\nimport type { IPoint } from \"../../../core/util/IPoint\";\nimport type { Tooltip } from \"../../../core/render/Tooltip\";\nimport type { AxisBullet } from \"./AxisBullet\";\nimport type { XYChart } from \"../XYChart\";\nimport type { DataItem } from \"../../../core/render/Component\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport type { IPointerEvent } from \"../../../core/render/backend/Renderer\";\n\nexport interface IAxisRendererSettings extends IGraphicsSettings {\n\n\t/**\n\t * The minimum distance between grid lines in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Grid_density} for more info\n\t */\n\tminGridDistance?: number;\n\n\t/**\n\t * Set to `true` to invert direction of the axis.\n\t *\n\t * @default false\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Inversed_axes} for more info\n\t */\n\tinversed?: boolean;\n\n\t/**\n\t * Indicates relative position where \"usable\" space of the cell starts.\n\t *\n\t * `0` - beginning, `1` - end, or anything in-between.\n\t *\n\t * @default 0\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Cell_start_end_locations} for more info\n\t */\n\tcellStartLocation?: number;\n\n\t/**\n\t * Indicates relative position where \"usable\" space of the cell ends.\n\t *\n\t * `0` - beginning, `1` - end, or anything in-between.\n\t *\n\t * @default 1\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Cell_start_end_locations} for more info\n\t */\n\tcellEndLocation?: number;\n\n\t/**\n\t * If set to `\"zoom\"` will enable axis zoom by panning it in the axis label\n\t * area.\n\t *\n\t * Works on [[AxisRendererX]] and [[AxisRendererY]] only.\n\t * \n\t * For a better result, set `maxDeviation` to `1` or so on the Axis.\n\t * \n\t * Will not work if `inside` is set to `true`.\n\t *\n\t * @since 5.0.7\n\t * @default \"none\"\n\t */\n\tpan?: \"none\" | \"zoom\"\n\n}\n\nexport interface IAxisRendererPrivate extends IGraphicsPrivate {\n\tletter?: \"X\" | \"Y\";\n}\n\n/**\n * Base class for an axis renderer.\n *\n * Should not be used on its own.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\n */\nexport abstract class AxisRenderer extends Graphics {\n\tpublic static className: string = \"AxisRenderer\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([AxisRenderer.className]);\n\n\t// save for quick access\n\tpublic _axisLength: number = 100;\n\tpublic _start: number = 0;\n\tpublic _end: number = 1;\n\tpublic _inversed: boolean = false;\n\n\tprotected _minSize: number = 0;\n\n\t/**\n\t * Chart the renderer is used in.\n\t */\n\tpublic chart: XYChart | undefined;\n\n\tprotected _lc = 1;\n\n\tprotected _ls = 0;\n\n\tprotected _thumbDownPoint?: IPoint;\n\n\tprotected _downStart?: number;\n\tprotected _downEnd?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeTick(dataItem: DataItem<IAxisDataItem>, themeTags: Array<string>): AxisTick {\n\t\tconst tick = this.ticks.make();\n\t\ttick._setDataItem(dataItem);\n\t\tdataItem.setRaw(\"tick\", tick);\n\t\ttick.set(\"themeTags\", $utils.mergeTags(tick.get(\"themeTags\"), themeTags));\n\t\tthis.axis.labelsContainer.children.push(tick);\n\t\tthis.ticks.push(tick);\n\t\treturn tick;\n\t}\n\n\t/**\n\t * A list of ticks in the axis.\n\t *\n\t * `ticks.template` can be used to configure ticks.\n\t *\n\t * @default new ListTemplate<AxisTick>\n\t */\n\tpublic readonly ticks: ListTemplate<AxisTick> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => AxisTick._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), this.get(\"themeTags\", []))\n\t\t}, [this.ticks.template])\n\t);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeGrid(dataItem: DataItem<IAxisDataItem>, themeTags: Array<string>): Grid {\n\t\tconst grid = this.grid.make();\n\t\tgrid._setDataItem(dataItem);\n\t\tdataItem.setRaw(\"grid\", grid);\n\t\tgrid.set(\"themeTags\", $utils.mergeTags(grid.get(\"themeTags\"), themeTags));\n\n\t\tthis.axis.gridContainer.children.push(grid);\n\t\tthis.grid.push(grid);\n\t\treturn grid;\n\t}\n\n\t/**\n\t * A list of grid elements in the axis.\n\t *\n\t * `grid.template` can be used to configure grid.\n\t *\n\t * @default new ListTemplate<Grid>\n\t */\n\tpublic readonly grid: ListTemplate<Grid> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Grid._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.grid.template.get(\"themeTags\", []), this.get(\"themeTags\", []))\n\t\t}, [this.grid.template])\n\t);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeAxisFill(dataItem: DataItem<IAxisDataItem>, themeTags: Array<string>): Grid {\n\t\tconst axisFill = this.axisFills.make();\n\t\taxisFill._setDataItem(dataItem);\n\t\taxisFill.set(\"themeTags\", $utils.mergeTags(axisFill.get(\"themeTags\"), themeTags));\n\n\t\tthis.axis.gridContainer.children.push(axisFill);\n\t\tdataItem.setRaw(\"axisFill\", axisFill);\n\t\tthis.axisFills.push(axisFill);\n\t\treturn axisFill;\n\t}\n\n\t/**\n\t * A list of fills in the axis.\n\t *\n\t * `axisFills.template` can be used to configure axis fills.\n\t *\n\t * @default new ListTemplate<Graphics>\n\t */\n\tpublic readonly axisFills: ListTemplate<Graphics> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Graphics._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.axisFills.template.get(\"themeTags\", [\"axis\", \"fill\"]), this.get(\"themeTags\", []))\n\t\t}, [this.axisFills.template])\n\t);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLabel(dataItem: DataItem<IAxisDataItem>, themeTags: Array<string>): AxisLabel {\n\n\t\tconst label = this.labels.make();\n\n\t\tif (this.get(\"opposite\" as any)) {\n\t\t\tthemeTags.push(\"opposite\");\n\t\t}\n\t\tif (this.get(\"inside\" as any)) {\n\t\t\tthemeTags.push(\"inside\");\n\t\t}\n\n\t\tlabel.set(\"themeTags\", $utils.mergeTags(label.get(\"themeTags\"), themeTags));\n\t\tthis.axis.labelsContainer.children.moveValue(label, 0);\n\n\t\tlabel._setDataItem(dataItem);\n\t\tdataItem.setRaw(\"label\", label);\n\t\tthis.labels.push(label);\n\t\treturn label;\n\t}\n\n\t/**\n\t * A list of labels in the axis.\n\t *\n\t * `labels.template` can be used to configure axis labels.\n\t *\n\t * @default new ListTemplate<AxisLabel>\n\t */\n\tpublic readonly labels: ListTemplate<AxisLabel> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => AxisLabel._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), this.get(\"themeTags\", []))\n\t\t}, [this.labels.template])\n\t);\n\n\n\tdeclare public _settings: IAxisRendererSettings;\n\tdeclare public _privateSettings: IAxisRendererPrivate;\n\n\t/**\n\t * An [[Axis]] renderer is for.\n\t */\n\tpublic axis!: Axis<this>;\n\n\tpublic axisLength(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic gridCount(): number {\n\t\treturn this.axisLength() / this.get(\"minGridDistance\", 50);\n\t}\n\n\tpublic _updatePositions() {\n\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract updateLabel(_label?: AxisLabel, _position?: number, _endPosition?: number, _count?: number): void;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract updateGrid(_grid?: Grid, _position?: number, _endPosition?: number): void;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract updateTick(_grid?: AxisTick, _position?: number, _endPosition?: number, _count?: number): void;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract updateFill(_fill?: Graphics, _position?: number, _endPosition?: number): void;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract updateBullet(_bullet?: AxisBullet, _position?: number, _endPosition?: number): void;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract positionToPoint(_position: number): IPoint;\n\n\n\tpublic readonly thumb?: Graphics;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"isMeasured\", false);\n\n\t\tconst thumb = this.thumb;\n\t\tif (thumb) {\n\t\t\tthis._disposers.push(thumb.events.on(\"pointerdown\", (event) => {\n\t\t\t\tthis._handleThumbDown(event.originalEvent);\n\t\t\t}));\n\n\t\t\tthis._disposers.push(thumb.events.on(\"globalpointerup\", (event) => {\n\t\t\t\tthis._handleThumbUp(event.originalEvent);\n\t\t\t}));\n\n\t\t\tthis._disposers.push(thumb.events.on(\"globalpointermove\", (event) => {\n\t\t\t\tthis._handleThumbMove(event.originalEvent);\n\t\t\t}));\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this.isDirty(\"pan\")) {\n\t\t\tconst thumb = this.thumb;\n\t\t\tif (thumb) {\n\t\t\t\tconst labelsContainer = this.axis.labelsContainer;\n\t\t\t\tconst pan = this.get(\"pan\");\n\t\t\t\tif (pan == \"zoom\") {\n\t\t\t\t\tlabelsContainer.children.push(thumb);\n\t\t\t\t}\n\t\t\t\telse if (pan == \"none\") {\n\t\t\t\t\tlabelsContainer.children.removeValue(thumb);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleThumbDown(event: IPointerEvent) {\n\t\tthis._thumbDownPoint = this.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));\n\t\tconst axis = this.axis;\n\t\tthis._downStart = axis.get(\"start\");\n\t\tthis._downEnd = axis.get(\"end\");\n\t}\n\n\tprotected _handleThumbUp(_event: IPointerEvent) {\n\t\tthis._thumbDownPoint = undefined;\n\t}\n\n\tprotected _handleThumbMove(event: IPointerEvent) {\n\t\tconst downPoint = this._thumbDownPoint;\n\t\tif (downPoint) {\n\t\t\tconst point = this.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));\n\n\t\t\tconst downStart = this._downStart!;\n\t\t\tconst downEnd = this._downEnd!;\n\t\t\tconst extra = this._getPan(point, downPoint) * Math.min(1, (downEnd - downStart)) / 2;\n\t\t\tthis.axis.setAll({ start: downStart - extra, end: downEnd + extra });\n\t\t}\n\t}\n\n\tprotected _getPan(_point1: IPoint, _point2: IPoint): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Converts relative position (0-1) on axis to a pixel coordinate.\n\t *\n\t * @param position  Position (0-1)\n\t * @return Coordinate (px)\n\t */\n\tpublic positionToCoordinate(position: number): number {\n\t\tif (this._inversed) {\n\t\t\treturn (this._end - position) * this._axisLength;\n\t\t}\n\t\telse {\n\t\t\treturn (position - this._start) * this._axisLength;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract positionTooltip(_tooltip: Tooltip, _position: number): void;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTooltipBounds(_tooltip: Tooltip) { }\n\n\tpublic _updateSize() {\n\t\tthis.markDirty()\n\t\tthis._clear = true;\n\t}\n\n\tpublic toAxisPosition(position: number): number {\n\t\tconst start = this._start || 0;\n\t\tconst end = this._end || 1;\n\n\t\tposition = position * (end - start);\n\t\tif (!this.get(\"inversed\")) {\n\t\t\tposition = start + position;\n\t\t}\n\t\telse {\n\t\t\tposition = end - position;\n\t\t}\n\n\t\treturn position;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic fixPosition(position: number) {\n\t\tif (this.get(\"inversed\")) {\n\t\t\treturn 1 - position;\n\t\t}\n\t\treturn position;\n\t}\n\n\tpublic _updateLC() {\n\n\t}\n\n\tprotected toggleVisibility(sprite: Sprite, position: number, minPosition: number, maxPosition: number): void {\n\t\tlet axis = this.axis;\n\n\t\tconst start = axis.get(\"start\", 0);\n\t\tconst end = axis.get(\"end\", 1);\n\n\t\tlet updatedStart = start + (end - start) * (minPosition - 0.0001);\n\t\tlet updatedEnd = start + (end - start) * (maxPosition + 0.0001);\n\n\t\tif (position < updatedStart || position > updatedEnd) {\n\t\t\tsprite.setPrivate(\"visible\", false);\n\t\t}\n\t\telse {\n\t\t\tsprite.setPrivate(\"visible\", true);\n\t\t}\n\t}\n\n\tprotected _positionTooltip(tooltip: Tooltip, point: IPoint) {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tif (chart.inPlot(point)) {\n\t\t\t\ttooltip.set(\"pointTo\", this._display.toGlobal(point));\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttooltip.hide();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic processAxis() { }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}