{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport * as $array from \"./Array\";\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nvar Disposer =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param dispose  Function that disposes object\r\n   */\n  function Disposer(dispose) {\n    /**\r\n     * Is object disposed?\r\n     */\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * Method that disposes the object.\r\n     */\n\n    Object.defineProperty(this, \"_dispose\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._disposed = false;\n    this._dispose = dispose;\n  }\n  /**\r\n   * Checks if object is disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n\n\n  Object.defineProperty(Disposer.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._disposed;\n    }\n  });\n  /**\r\n   * Disposes the object.\r\n   */\n\n  Object.defineProperty(Disposer.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._disposed) {\n        this._disposed = true;\n\n        this._dispose();\n      }\n    }\n  });\n  return Disposer;\n}();\n\nexport { Disposer };\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nvar MultiDisposer =\n/** @class */\nfunction (_super) {\n  __extends(MultiDisposer, _super);\n\n  function MultiDisposer(disposers) {\n    return _super.call(this, function () {\n      $array.each(disposers, function (x) {\n        x.dispose();\n      });\n    }) || this;\n  }\n\n  return MultiDisposer;\n}(Disposer);\n\nexport { MultiDisposer };\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nvar MutableValueDisposer =\n/** @class */\nfunction (_super) {\n  __extends(MutableValueDisposer, _super);\n  /**\r\n   * Constructor.\r\n   */\n\n\n  function MutableValueDisposer() {\n    var _this = _super.call(this, function () {\n      if (_this._disposer != null) {\n        _this._disposer.dispose();\n\n        _this._disposer = undefined;\n      }\n    }) || this;\n    /**\r\n     * Current disposer.\r\n     */\n\n\n    Object.defineProperty(_this, \"_disposer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * Current value.\r\n     */\n\n    Object.defineProperty(_this, \"_value\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n  /**\r\n   * Returns current value.\r\n   *\r\n   * @return Value\r\n   */\n\n\n  Object.defineProperty(MutableValueDisposer.prototype, \"get\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._value;\n    }\n  });\n  /**\r\n   * Sets value and disposes previous disposer if it was set.\r\n   *\r\n   * @param value     New value\r\n   * @param disposer  Disposer\r\n   */\n\n  Object.defineProperty(MutableValueDisposer.prototype, \"set\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, disposer) {\n      if (this._disposer != null) {\n        this._disposer.dispose();\n      }\n\n      this._disposer = disposer;\n      this._value = value;\n    }\n  });\n  /**\r\n   * Resets the disposer value.\r\n   */\n\n  Object.defineProperty(MutableValueDisposer.prototype, \"reset\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.set(undefined, undefined);\n    }\n  });\n  return MutableValueDisposer;\n}(Disposer);\n\nexport { MutableValueDisposer };\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nvar CounterDisposer =\n/** @class */\nfunction (_super) {\n  __extends(CounterDisposer, _super);\n\n  function CounterDisposer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * [_counter description]\r\n     *\r\n     * @todo Description\r\n     */\n\n\n    Object.defineProperty(_this, \"_counter\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    return _this;\n  }\n  /**\r\n   * [increment description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  Object.defineProperty(CounterDisposer.prototype, \"increment\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this; // TODO throw an error if it is disposed\n\n\n      ++this._counter; // TODO make this more efficient\n\n      return new Disposer(function () {\n        --_this._counter;\n\n        if (_this._counter === 0) {\n          _this.dispose();\n        }\n      });\n    }\n  });\n  return CounterDisposer;\n}(Disposer);\n\nexport { CounterDisposer };","map":{"version":3,"sources":["../../../../../src/.internal/core/util/Disposer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport * as $array from \"./Array\";\nimport type { Optional } from \"./Type\";\n\n/**\n * Defines interface for disposable objects.\n *\n * @ignore Exclude from docs\n */\nexport interface IDisposer {\n\tisDisposed(): boolean;\n\tdispose(): void;\n}\n\n/**\n * A base class for disposable objects.\n *\n * @ignore Exclude from docs\n */\nexport class Disposer implements IDisposer {\n\n\t/**\n\t * Is object disposed?\n\t */\n\tprivate _disposed: boolean;\n\n\t/**\n\t * Method that disposes the object.\n\t */\n\tprivate _dispose: () => void;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param dispose  Function that disposes object\n\t */\n\tconstructor(dispose: () => void) {\n\t\tthis._disposed = false;\n\t\tthis._dispose = dispose;\n\t}\n\n\t/**\n\t * Checks if object is disposed.\n\t *\n\t * @return Disposed?\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Disposes the object.\n\t */\n\tpublic dispose(): void {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\t\t\tthis._dispose();\n\t\t}\n\t}\n\n}\n\n/**\n * A collection of related disposers that can be disposed in one go.\n *\n * @ignore Exclude from docs\n */\nexport class MultiDisposer extends Disposer {\n\tconstructor(disposers: Array<IDisposer>) {\n\t\tsuper(() => {\n\t\t\t$array.each(disposers, (x) => {\n\t\t\t\tx.dispose();\n\t\t\t});\n\t\t});\n\t}\n}\n\n/**\n * A special kind of Disposer that has attached value set.\n *\n * If a new value is set using `set()` method, the old disposer value is\n * disposed.\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport class MutableValueDisposer<T extends IDisposer> extends Disposer {\n\n\t/**\n\t * Current disposer.\n\t */\n\tprivate _disposer: Optional<IDisposer>;\n\n\t/**\n\t * Current value.\n\t */\n\tprivate _value: Optional<T>;\n\n\t/**\n\t * Constructor.\n\t */\n\tconstructor() {\n\t\tsuper(() => {\n\t\t\tif (this._disposer != null) {\n\t\t\t\tthis._disposer.dispose();\n\t\t\t\tthis._disposer = undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Returns current value.\n\t *\n\t * @return Value\n\t */\n\tpublic get(): Optional<T> {\n\t\treturn this._value;\n\t}\n\n\t/**\n\t * Sets value and disposes previous disposer if it was set.\n\t *\n\t * @param value     New value\n\t * @param disposer  Disposer\n\t */\n\tpublic set(value: Optional<T>, disposer: Optional<IDisposer>): void {\n\t\tif (this._disposer != null) {\n\t\t\tthis._disposer.dispose();\n\t\t}\n\n\t\tthis._disposer = disposer;\n\t\tthis._value = value;\n\t}\n\n\t/**\n\t * Resets the disposer value.\n\t */\n\tpublic reset(): void {\n\t\tthis.set(undefined, undefined);\n\t}\n\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport class CounterDisposer extends Disposer {\n\n\t/**\n\t * [_counter description]\n\t *\n\t * @todo Description\n\t */\n\tprivate _counter: number = 0;\n\n\t/**\n\t * [increment description]\n\t *\n\t * @todo Description\n\t */\n\tpublic increment() {\n\t\t// TODO throw an error if it is disposed\n\t\t++this._counter;\n\n\t\t// TODO make this more efficient\n\t\treturn new Disposer(() => {\n\t\t\t--this._counter;\n\n\t\t\tif (this._counter === 0) {\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t});\n\t}\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}