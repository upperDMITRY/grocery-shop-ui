{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Sprite } from \"./Sprite\";\nimport * as $type from \"../util/Type\";\n/**\r\n * Displays an image.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/images/} for more info\r\n * @important\r\n */\nvar Picture = /** @class */function (_super) {\n  __extends(Picture, _super);\n  function Picture() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makePicture(undefined)\n    });\n    return _this;\n  }\n  Object.defineProperty(Picture.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n      if (this.isDirty(\"width\")) {\n        var width = this.get(\"width\");\n        this._display.width = $type.isNumber(width) ? width : undefined;\n      }\n      if (this.isDirty(\"height\")) {\n        var height = this.get(\"height\");\n        this._display.height = $type.isNumber(height) ? height : undefined;\n      }\n      if (this.isDirty(\"shadowColor\")) {\n        this._display.clear();\n        var shadowColor = this.get(\"shadowColor\");\n        this._display.shadowColor = shadowColor == null ? undefined : shadowColor;\n      }\n      if (this.isDirty(\"shadowBlur\")) {\n        this._display.clear();\n        this._display.shadowBlur = this.get(\"shadowBlur\");\n      }\n      if (this.isDirty(\"shadowOffsetX\")) {\n        this._display.clear();\n        this._display.shadowOffsetX = this.get(\"shadowOffsetX\");\n      }\n      if (this.isDirty(\"shadowOffsetY\")) {\n        this._display.clear();\n        this._display.shadowOffsetY = this.get(\"shadowOffsetY\");\n      }\n      if (this.isDirty(\"shadowOpacity\")) {\n        this._display.clear();\n        this._display.shadowOpacity = this.get(\"shadowOpacity\");\n      }\n      if (this.isDirty(\"src\")) {\n        this._display.clear();\n        this._load();\n      }\n    }\n  });\n  Object.defineProperty(Picture.prototype, \"_load\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n      var src = this.get(\"src\");\n      if (src) {\n        var image_1 = new Image();\n        //image.crossOrigin = \"Anonymous\";\n        image_1.src = src;\n        image_1.decode().then(function () {\n          _this._display.image = image_1;\n          _this._updateSize();\n        }).catch(function (_error) {\n          // TODO: maybe raise error?\n        });\n      }\n    }\n  });\n  Object.defineProperty(Picture.prototype, \"_updateSize\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._updateSize.call(this);\n      var image = this._display.image;\n      if (image) {\n        var w = this.getPrivate(\"width\", this.get(\"width\"));\n        var h = this.getPrivate(\"height\", this.get(\"height\"));\n        var r = image.width && image.height ? image.width / image.height : 0;\n        if ($type.isNumber(w) && $type.isNumber(h)) {\n          this._display.width = w;\n          this._display.height = h;\n        } else if ($type.isNumber(w) && r) {\n          h = w / r;\n        } else if ($type.isNumber(h) && r) {\n          w = h * r;\n        } else {\n          w = image.width;\n          h = image.height;\n        }\n        if ($type.isNumber(w)) {\n          this._display.width = w;\n        }\n        if ($type.isNumber(h)) {\n          this._display.height = h;\n        }\n        this.markDirtyBounds();\n        this.markDirty();\n      }\n    }\n  });\n  Object.defineProperty(Picture, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Picture\"\n  });\n  Object.defineProperty(Picture, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Sprite.classNames.concat([Picture.className])\n  });\n  return Picture;\n}(Sprite);\nexport { Picture };","map":{"version":3,"names":["Sprite","$type","Picture","_super","__extends","_this","apply","arguments","Object","defineProperty","_root","_renderer","makePicture","undefined","value","prototype","_changed","call","isDirty","width","get","_display","isNumber","height","clear","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","shadowOpacity","_load","src","image_1","Image","decode","then","image","_updateSize","catch","_error","w","getPrivate","h","r","markDirtyBounds","markDirty","classNames","concat","className"],"sources":["../../../../../src/.internal/core/render/Picture.ts"],"sourcesContent":["import type { IPicture } from \"./backend/Renderer\";\nimport type { Color } from \"../util/Color\";\n\nimport { Sprite, ISpriteSettings, ISpritePrivate } from \"./Sprite\";\n\nimport * as $type from \"../util/Type\";\n\nexport interface IPictureSettings extends ISpriteSettings {\n\n\t/**\n\t * A source URI of the image.\n\t *\n\t * Can be relative or absolute URL, or data-uri.\n\t */\n\tsrc?: string;\n\n\t/**\n\t * Color of the element's shadow.\n\t *\n\t * For this to work at least one of the following needs to be set as well:\n\t * `shadowBlur`, `shadowOffsetX`, `shadowOffsetY`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowColor?: Color | null;\n\n\t/**\n\t * Blurriness of the the shadow.\n\t *\n\t * The bigger the number, the more blurry shadow will be.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowBlur?: number;\n\n\t/**\n\t * Horizontal shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetX?: number;\n\n\t/**\n\t * Vertical shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetY?: number;\n\n\t/**\n\t * Opacity of the shadow (0-1).\n\t *\n\t * If not set, will use the same as `fillOpacity` of the element.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOpacity?: number;\n\n}\n\nexport interface IPicturePrivate extends ISpritePrivate {\n}\n\n/**\n * Displays an image.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/images/} for more info\n * @important\n */\nexport class Picture extends Sprite {\n\n\tdeclare public _settings: IPictureSettings;\n\tdeclare public _privateSettings: IPicturePrivate;\n\n\tpublic _display: IPicture = this._root._renderer.makePicture(undefined);\n\n\tpublic static className: string = \"Picture\";\n\tpublic static classNames: Array<string> = Sprite.classNames.concat([Picture.className]);\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this.isDirty(\"width\")) {\n\t\t\tconst width = this.get(\"width\");\n\t\t\tthis._display.width = $type.isNumber(width) ? width : undefined;\n\t\t}\n\n\t\tif (this.isDirty(\"height\")) {\n\t\t\tconst height = this.get(\"height\");\n\t\t\tthis._display.height = $type.isNumber(height) ? height : undefined;\n\t\t}\n\n\t\tif (this.isDirty(\"shadowColor\")) {\n\t\t\tthis._display.clear();\n\t\t\tconst shadowColor = this.get(\"shadowColor\");\n\t\t\tthis._display.shadowColor = shadowColor == null ? undefined : shadowColor;\n\t\t}\n\n\t\tif (this.isDirty(\"shadowBlur\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowBlur = this.get(\"shadowBlur\");\n\t\t}\n\n\t\tif (this.isDirty(\"shadowOffsetX\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowOffsetX = this.get(\"shadowOffsetX\");\n\t\t}\n\n\t\tif (this.isDirty(\"shadowOffsetY\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowOffsetY = this.get(\"shadowOffsetY\");\n\t\t}\n\n\t\tif (this.isDirty(\"shadowOpacity\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowOpacity = this.get(\"shadowOpacity\");\n\t\t}\n\n\t\tif (this.isDirty(\"src\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._load();\n\t\t}\n\t}\n\n\tprotected _load() {\n\t\tconst src = this.get(\"src\");\n\t\tif (src) {\n\t\t\tconst image = new Image();\n\t\t\t//image.crossOrigin = \"Anonymous\";\n\t\t\timage.src = src!;\n\t\t\timage.decode().then(() => {\n\t\t\t\tthis._display.image = image;\n\t\t\t\tthis._updateSize();\n\t\t\t}).catch((_error: any) => {\n\t\t\t\t// TODO: maybe raise error?\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\n\t\tconst image = this._display.image;\n\t\tif (image) {\n\t\t\tlet w = this.getPrivate(\"width\", this.get(\"width\"));\n\t\t\tlet h = this.getPrivate(\"height\", this.get(\"height\"));\n\t\t\tconst r = image.width && image.height ? image.width / image.height : 0;\n\n\t\t\tif ($type.isNumber(w) && $type.isNumber(h)) {\n\t\t\t\tthis._display.width = w;\n\t\t\t\tthis._display.height = h;\n\t\t\t}\n\t\t\telse if ($type.isNumber(w) && r) {\n\t\t\t\th = w / r;\n\t\t\t}\n\t\t\telse if ($type.isNumber(h) && r) {\n\t\t\t\tw = h * r;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tw = image.width;\n\t\t\t\th = image.height;\n\t\t\t}\n\n\t\t\tif ($type.isNumber(w)) {\n\t\t\t\tthis._display.width = w;\n\t\t\t}\n\t\t\tif ($type.isNumber(h)) {\n\t\t\t\tthis._display.height = h;\n\t\t\t}\n\t\t\tthis.markDirtyBounds();\n\t\t\tthis.markDirty();\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}