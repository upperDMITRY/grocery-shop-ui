{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { DataItem } from \"../../../core/render/Component\";\nimport { Component } from \"../../../core/render/Component\";\nimport { Container } from \"../../../core/render/Container\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport { List } from \"../../../core/util/List\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $utils from \"../../../core/util/Utils\";\n/**\r\n * A base class for all axes.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Adding_axes} for more info\r\n */\n\nvar Axis =\n/** @class */\nfunction (_super) {\n  __extends(Axis, _super);\n\n  function Axis() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_series\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(_this, \"_isPanning\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    /**\r\n     * A [[Container]] that holds all the axis label elements.\r\n     *\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"labelsContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.children.push(Container.new(_this._root, {}))\n    });\n    /**\r\n     * A [[Container]] that holds all the axis grid and fill elements.\r\n     *\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"gridContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(_this._root, {\n        width: p100,\n        height: p100\n      })\n    });\n    /**\r\n     * A [[Container]] that holds axis grid elements which goes above the series.\r\n     *\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"topGridContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(_this._root, {\n        width: p100,\n        height: p100\n      })\n    });\n    /**\r\n     * A [[Container]] that holds all the axis bullet elements.\r\n     *\r\n     * @default new Container\r\n     */\n\n    Object.defineProperty(_this, \"bulletsContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.children.push(Container.new(_this._root, {\n        isMeasured: false,\n        width: p100,\n        height: p100,\n        position: \"absolute\"\n      }))\n    });\n    /**\r\n     * A referenece to the the chart the axis belongs to.\r\n     */\n\n    Object.defineProperty(_this, \"chart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_rangesDirty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_panStart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_panEnd\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(_this, \"_sAnimation\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_eAnimation\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * A list of axis ranges.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\r\n     * @default new List()\r\n     */\n\n    Object.defineProperty(_this, \"axisRanges\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new List()\n    });\n    Object.defineProperty(_this, \"_seriesAxisRanges\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    /**\r\n     * A control label that is invisible but is used to keep width the width of\r\n     * the axis constant.\r\n     */\n\n    Object.defineProperty(_this, \"ghostLabel\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_cursorPosition\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -1\n    });\n    Object.defineProperty(_this, \"_snapToSeries\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * A container above the axis that can be used to add additional stuff into\r\n     * it. For example a legend, label, or an icon.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info\r\n     * @default new Container\r\n     */\n\n    Object.defineProperty(_this, \"axisHeader\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.children.push(Container.new(_this._root, {\n        themeTags: [\"axis\", \"header\"],\n        position: \"absolute\",\n        background: Rectangle.new(_this._root, {\n          themeTags: [\"header\", \"background\"],\n          fill: _this._root.interfaceColors.get(\"background\")\n        })\n      }))\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Axis.prototype, \"_dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      // these could be in other parents, so disposing just in case\n      this.gridContainer.dispose();\n      this.topGridContainer.dispose();\n      this.bulletsContainer.dispose();\n      this.labelsContainer.dispose();\n      this.axisHeader.dispose();\n\n      _super.prototype._dispose.call(this);\n    }\n  });\n  Object.defineProperty(Axis.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      _super.prototype._afterNew.call(this);\n\n      this.setPrivate(\"updateScrollbar\", true);\n\n      this._disposers.push(this.axisRanges.events.onAll(function (change) {\n        if (change.type === \"clear\") {\n          _this.axisRanges.each(function (dataItem) {\n            dataItem.dispose();\n          });\n        } else if (change.type === \"push\") {\n          _this._processAxisRange(change.newValue, [\"range\"]);\n        } else if (change.type === \"setIndex\") {\n          _this._processAxisRange(change.newValue, [\"range\"]);\n        } else if (change.type === \"insertIndex\") {\n          _this._processAxisRange(change.newValue, [\"range\"]);\n        } else if (change.type === \"removeIndex\") {\n          change.oldValue.dispose();\n        } else {\n          throw new Error(\"Unknown IStreamEvent type\");\n        }\n      }));\n\n      var renderer = this.get(\"renderer\");\n\n      if (renderer) {\n        renderer.axis = this;\n        renderer.processAxis();\n      }\n\n      this.children.push(renderer);\n      this.ghostLabel = renderer.makeLabel(new DataItem(this, undefined, {}), []);\n      this.ghostLabel.set(\"opacity\", 0);\n    }\n  });\n  /**\r\n   * Zooms the axis to relative locations.\r\n   *\r\n   * Both `start` and `end` are relative: 0 means start of the axis, 1 - end.\r\n   *\r\n   * @param   start     Relative start\r\n   * @param   end       Relative end\r\n   * @param   duration  Duration of the zoom animation in milliseconds\r\n   * @return            Zoom animation\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"zoom\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(start, end, duration) {\n      var _a;\n\n      if (this.get(\"start\") !== start || this.get(\"end\") != end) {\n        var sAnimation = this._sAnimation;\n        var eAnimation = this._eAnimation;\n        var maxDeviation = this.get(\"maxDeviation\", 0.5) * Math.min(1, end - start);\n\n        if (start < -maxDeviation) {\n          start = -maxDeviation;\n        }\n\n        if (end > 1 + maxDeviation) {\n          end = 1 + maxDeviation;\n        }\n\n        if (start > end) {\n          _a = __read([end, start], 2), start = _a[0], end = _a[1];\n        }\n\n        if (!$type.isNumber(duration)) {\n          duration = this.get(\"interpolationDuration\", 0);\n        }\n\n        var priority = \"end\";\n        var maxZoomFactor = this.getPrivate(\"maxZoomFactor\", this.get(\"maxZoomFactor\", 100));\n\n        if (end === 1 && start !== 0) {\n          if (start < this.get(\"start\")) {\n            priority = \"start\";\n          } else {\n            priority = \"end\";\n          }\n        }\n\n        if (start === 0 && end !== 1) {\n          if (end > this.get(\"end\")) {\n            priority = \"end\";\n          } else {\n            priority = \"start\";\n          }\n        }\n\n        var minZoomCount = this.get(\"minZoomCount\");\n        var maxZoomCount = this.get(\"maxZoomCount\");\n\n        if ($type.isNumber(minZoomCount)) {\n          maxZoomFactor = maxZoomFactor / minZoomCount;\n        }\n\n        var minZoomFactor = 1;\n\n        if ($type.isNumber(maxZoomCount)) {\n          minZoomFactor = maxZoomFactor / maxZoomCount;\n        } // most likely we are dragging left scrollbar grip here, so we tend to modify end\n\n\n        if (priority === \"start\") {\n          if (maxZoomCount > 0) {\n            // add to the end\n            if (1 / (end - start) < minZoomFactor) {\n              end = start + 1 / minZoomFactor;\n            }\n          } // add to the end\n\n\n          if (1 / (end - start) > maxZoomFactor) {\n            end = start + 1 / maxZoomFactor;\n          } //unless end is > 0\n\n\n          if (end > 1 && end - start < 1 / maxZoomFactor) {\n            //end = 1;\n            start = end - 1 / maxZoomFactor;\n          }\n        } // most likely we are dragging right, so we modify left\n        else {\n          if (maxZoomCount > 0) {\n            // add to the end\n            if (1 / (end - start) < minZoomFactor) {\n              start = end - 1 / minZoomFactor;\n            }\n          } // remove from start\n\n\n          if (1 / (end - start) > maxZoomFactor) {\n            start = end - 1 / maxZoomFactor;\n          }\n\n          if (start < 0 && end - start < 1 / maxZoomFactor) {\n            //start = 0;\n            end = start + 1 / maxZoomFactor;\n          }\n        }\n\n        if (1 / (end - start) > maxZoomFactor) {\n          end = start + 1 / maxZoomFactor;\n        }\n\n        if (1 / (end - start) > maxZoomFactor) {\n          start = end - 1 / maxZoomFactor;\n        }\n\n        if ((sAnimation && sAnimation.playing && sAnimation.to == start || this.get(\"start\") == start) && (eAnimation && eAnimation.playing && eAnimation.to == end || this.get(\"end\") == end)) {\n          return;\n        }\n\n        if (duration > 0) {\n          var easing = this.get(\"interpolationEasing\");\n          var sAnimation_1 = this.animate({\n            key: \"start\",\n            to: start,\n            duration: duration,\n            easing: easing\n          });\n          var eAnimation_1 = this.animate({\n            key: \"end\",\n            to: end,\n            duration: duration,\n            easing: easing\n          });\n          this._sAnimation = sAnimation_1;\n          this._eAnimation = eAnimation_1;\n\n          if (sAnimation_1) {\n            return sAnimation_1;\n          } else if (eAnimation_1) {\n            return eAnimation_1;\n          }\n        } else {\n          this.set(\"start\", start);\n          this.set(\"end\", end);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Axis.prototype, \"series\", {\n    /**\r\n     * A list of series using this axis.\r\n     *\r\n     * @return Series\r\n     */\n    get: function get() {\n      return this._series;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Axis.prototype, \"_processAxisRange\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem, themeTags) {\n      dataItem.setRaw(\"isRange\", true);\n\n      this._createAssets(dataItem, themeTags);\n\n      this._rangesDirty = true;\n\n      this._prepareDataItem(dataItem);\n\n      var above = dataItem.get(\"above\");\n      var container = this.topGridContainer;\n      var grid = dataItem.get(\"grid\");\n\n      if (above && grid) {\n        container.children.moveValue(grid);\n      }\n\n      var fill = dataItem.get(\"axisFill\");\n\n      if (above && fill) {\n        container.children.moveValue(fill);\n      }\n    }\n  });\n  Object.defineProperty(Axis.prototype, \"_prepareDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_dataItem, _index) {}\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"markDirtyExtremes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {}\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"markDirtySelectionExtremes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {}\n  });\n  Object.defineProperty(Axis.prototype, \"_calculateTotals\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {}\n  });\n  Object.defineProperty(Axis.prototype, \"_updateAxisRanges\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      this.axisRanges.each(function (axisRange) {\n        _this._prepareDataItem(axisRange);\n      });\n      $array.each(this._seriesAxisRanges, function (axisRange) {\n        _this._prepareDataItem(axisRange);\n      });\n    }\n  });\n  Object.defineProperty(Axis.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      _super.prototype._prepareChildren.call(this);\n\n      if (this.get(\"fixAxisSize\")) {\n        this.ghostLabel.set(\"visible\", true);\n      } else {\n        this.ghostLabel.set(\"visible\", false);\n      }\n\n      if (this.isDirty(\"start\") || this.isDirty(\"end\")) {\n        this.chart._updateCursor();\n\n        var start = this.get(\"start\", 0);\n        var end = this.get(\"end\", 1);\n        var maxDeviation = this.get(\"maxDeviation\", 0.5) * Math.min(1, end - start);\n\n        if (start < -maxDeviation) {\n          var delta = start + maxDeviation;\n          start = -maxDeviation;\n          this.setRaw(\"start\", start);\n\n          if (this.isDirty(\"end\")) {\n            this.setRaw(\"end\", end - delta);\n          }\n        }\n\n        if (end > 1 + maxDeviation) {\n          var delta = end - 1 - maxDeviation;\n          end = 1 + maxDeviation;\n          this.setRaw(\"end\", end);\n\n          if (this.isDirty(\"start\")) {\n            this.setRaw(\"start\", start - delta);\n          }\n        }\n      }\n\n      var renderer = this.get(\"renderer\");\n      renderer._start = this.get(\"start\");\n      renderer._end = this.get(\"end\");\n      renderer._inversed = renderer.get(\"inversed\", false);\n      renderer._axisLength = renderer.axisLength() / (renderer._end - renderer._start);\n\n      renderer._updateLC();\n\n      if (this.isDirty(\"tooltip\")) {\n        var tooltip = this.get(\"tooltip\");\n\n        if (tooltip) {\n          var rendererTags = renderer.get(\"themeTags\");\n          tooltip.addTag(\"axis\");\n          tooltip.addTag(this.className.toLowerCase());\n\n          tooltip._applyThemes();\n\n          if (rendererTags) {\n            tooltip.set(\"themeTags\", $utils.mergeTags(tooltip.get(\"themeTags\"), rendererTags));\n\n            tooltip.label._applyThemes();\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(Axis.prototype, \"_updateTooltipBounds\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var tooltip = this.get(\"tooltip\");\n\n      if (tooltip) {\n        this.get(\"renderer\").updateTooltipBounds(tooltip);\n      }\n    }\n  });\n  Object.defineProperty(Axis.prototype, \"_updateBounds\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      _super.prototype._updateBounds.call(this);\n\n      this._updateTooltipBounds();\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"processChart\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(chart) {\n      var _this = this;\n\n      this.chart = chart;\n      var renderer = this.get(\"renderer\");\n      renderer.chart = chart;\n      chart.gridContainer.children.push(this.gridContainer);\n      chart.topGridContainer.children.push(this.topGridContainer);\n      chart.axisHeadersContainer.children.push(this.axisHeader);\n      this.on(\"start\", function () {\n        chart._handleAxisSelection(_this);\n      });\n      this.on(\"end\", function () {\n        chart._handleAxisSelection(_this);\n      });\n      chart.plotContainer.onPrivate(\"width\", function () {\n        _this.markDirtySize();\n      });\n      chart.plotContainer.onPrivate(\"height\", function () {\n        _this.markDirtySize();\n      });\n      chart.processAxis(this);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"hideDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem) {\n      this._toggleDataItem(dataItem, false);\n\n      return _super.prototype.hideDataItem.call(this, dataItem);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"showDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem) {\n      this._toggleDataItem(dataItem, true);\n\n      return _super.prototype.showDataItem.call(this, dataItem);\n    }\n  });\n  Object.defineProperty(Axis.prototype, \"_toggleDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem, visible) {\n      var label = dataItem.get(\"label\");\n\n      if (label) {\n        label.setPrivate(\"visible\", visible);\n      }\n\n      var grid = dataItem.get(\"grid\");\n\n      if (grid) {\n        grid.setPrivate(\"visible\", visible);\n      }\n\n      var tick = dataItem.get(\"tick\");\n\n      if (tick) {\n        tick.setPrivate(\"visible\", visible);\n      }\n\n      var axisFill = dataItem.get(\"axisFill\");\n\n      if (axisFill) {\n        axisFill.setPrivate(\"visible\", visible);\n      }\n\n      var bullet = dataItem.get(\"bullet\");\n\n      if (bullet) {\n        var sprite = bullet.get(\"sprite\");\n\n        if (sprite) {\n          sprite.setPrivate(\"visible\", visible);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Axis.prototype, \"_createAssets\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem, tags) {\n      var renderer = this.get(\"renderer\");\n\n      if (!dataItem.get(\"label\")) {\n        renderer.makeLabel(dataItem, tags);\n      }\n\n      if (!dataItem.get(\"grid\")) {\n        renderer.makeGrid(dataItem, tags);\n      }\n\n      if (!dataItem.get(\"tick\")) {\n        renderer.makeTick(dataItem, tags);\n      }\n\n      if (!dataItem.get(\"axisFill\")) {\n        renderer.makeAxisFill(dataItem, tags);\n      }\n\n      this._processBullet(dataItem);\n    }\n  });\n  Object.defineProperty(Axis.prototype, \"_processBullet\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem) {\n      var bullet = dataItem.get(\"bullet\");\n      var axisBullet = this.get(\"bullet\");\n\n      if (!bullet && axisBullet && !dataItem.get(\"isRange\")) {\n        bullet = axisBullet(this._root, this, dataItem);\n      }\n\n      if (bullet) {\n        bullet.axis = this;\n        var sprite = bullet.get(\"sprite\");\n\n        if (sprite) {\n          sprite._setDataItem(dataItem);\n\n          dataItem.setRaw(\"bullet\", bullet);\n\n          if (!sprite.parent) {\n            this.bulletsContainer.children.push(sprite);\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(Axis.prototype, \"_afterChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      _super.prototype._afterChanged.call(this);\n\n      var chart = this.chart;\n\n      if (chart) {\n        chart._updateChartLayout();\n      }\n\n      this.get(\"renderer\")._updatePositions();\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"disposeDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem) {\n      _super.prototype.disposeDataItem.call(this, dataItem);\n\n      var renderer = this.get(\"renderer\");\n      var label = dataItem.get(\"label\");\n\n      if (label) {\n        renderer.labels.removeValue(label);\n        label.dispose();\n      }\n\n      var tick = dataItem.get(\"tick\");\n\n      if (tick) {\n        renderer.ticks.removeValue(tick);\n        tick.dispose();\n      }\n\n      var grid = dataItem.get(\"grid\");\n\n      if (grid) {\n        renderer.grid.removeValue(grid);\n        grid.dispose();\n      }\n\n      var axisFill = dataItem.get(\"axisFill\");\n\n      if (axisFill) {\n        renderer.axisFills.removeValue(axisFill);\n        axisFill.dispose();\n      }\n    }\n  });\n  Object.defineProperty(Axis.prototype, \"_updateGhost\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var ghostLabel = this.ghostLabel;\n\n      if (!ghostLabel.isHidden()) {\n        var bounds = ghostLabel.localBounds();\n        var gWidth_1 = bounds.right - bounds.left;\n        $array.each(this.dataItems, function (dataItem) {\n          var label = dataItem.get(\"label\");\n\n          if (label && !label.isHidden()) {\n            var bounds_1 = label.localBounds();\n            var w = bounds_1.right - bounds_1.left;\n\n            if (w > gWidth_1) {\n              ghostLabel.set(\"text\", label.text._getText());\n            }\n          }\n        });\n      }\n\n      var start = this.get(\"start\", 0);\n      var end = this.get(\"end\", 1);\n      this.get(\"renderer\").updateLabel(ghostLabel, start + (end - start) * 0.5);\n      ghostLabel.setPrivate(\"visible\", true);\n    }\n  });\n  Object.defineProperty(Axis.prototype, \"_handleCursorPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(position, snapToSeries) {\n      var renderer = this.get(\"renderer\");\n      position = renderer.toAxisPosition(position);\n      this._cursorPosition = position;\n      this._snapToSeries = snapToSeries;\n      this.updateTooltip();\n    }\n  });\n  /**\r\n   * @todo needs description\r\n   * Can be called when axis zoom changes and you need to update tooltip position\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"updateTooltip\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      var snapToSeries = this._snapToSeries;\n      var position = this._cursorPosition;\n      var tooltip = this.get(\"tooltip\");\n      var renderer = this.get(\"renderer\");\n\n      if ($type.isNumber(position)) {\n        $array.each(this.series, function (series) {\n          if (series.get(\"baseAxis\") === _this) {\n            var dataItem = _this.getSeriesItem(series, position);\n\n            if (snapToSeries && snapToSeries.indexOf(series) != -1) {\n              series.updateLegendMarker(dataItem);\n              series.updateLegendValue(dataItem);\n            } else {\n              series.showDataItemTooltip(dataItem);\n            }\n          }\n        });\n\n        if (tooltip) {\n          renderer.updateTooltipBounds(tooltip);\n\n          if (this.get(\"snapTooltip\")) {\n            position = this.roundAxisPosition(position, this.get(\"tooltipLocation\", 0.5));\n          }\n\n          if (!$type.isNaN(position)) {\n            this._updateTooltipText(tooltip, position);\n\n            renderer.positionTooltip(tooltip, position);\n\n            if (position < this.get(\"start\") || position > this.get(\"end\")) {\n              tooltip.hide(0);\n            } else {\n              tooltip.show(0);\n            }\n          } else {\n            tooltip.hide(0);\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(Axis.prototype, \"_updateTooltipText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(tooltip, position) {\n      tooltip.label.set(\"text\", this.getTooltipText(position));\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"roundAxisPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(position, _location) {\n      return position;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"handleCursorShow\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var tooltip = this.get(\"tooltip\");\n\n      if (tooltip) {\n        tooltip.show();\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"handleCursorHide\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var tooltip = this.get(\"tooltip\");\n\n      if (tooltip) {\n        tooltip.hide();\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"processSeriesDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_dataItem, _fields) {}\n  });\n  Object.defineProperty(Axis.prototype, \"_clearDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      _super.prototype._clearDirty.call(this);\n\n      this._sizeDirty = false;\n      this._rangesDirty = false;\n    }\n  });\n  /**\r\n   * Converts pixel coordinate to a relative position on axis.\r\n   *\r\n   * @param   coordinate  Coordinate\r\n   * @return              Relative position\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"coordinateToPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(coordinate) {\n      var renderer = this.get(\"renderer\");\n      return renderer.toAxisPosition(coordinate / renderer.axisLength());\n    }\n  });\n  /**\r\n   * Converts relative position of the plot area to relative position of the\r\n   * axis with zoom taken into account.\r\n   *\r\n   * @param position Position\r\n   * @return Relative position\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"toAxisPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(position) {\n      return this.get(\"renderer\").toAxisPosition(position);\n    }\n  });\n  /**\r\n   * Adjusts position with inversed taken into account.\r\n   *\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"fixPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(position) {\n      return this.get(\"renderer\").fixPosition(position);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"shouldGap\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_dataItem, _nextItem, _autoGapCount, _fieldName) {\n      return false;\n    }\n  });\n  /**\r\n   * Creates and returns an axis range object.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\r\n   * @param   axisDataItem  Axis data item\r\n   * @return                Axis range\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"createAxisRange\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(axisDataItem) {\n      return this.axisRanges.push(axisDataItem);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Axis.prototype, \"_groupSeriesData\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_series) {}\n  });\n  Object.defineProperty(Axis, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Axis\"\n  });\n  Object.defineProperty(Axis, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Component.classNames.concat([Axis.className])\n  });\n  return Axis;\n}(Component);\n\nexport { Axis };","map":{"version":3,"sources":["../../../../../../src/.internal/charts/xy/axes/Axis.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AxisRenderer } from \"./AxisRenderer\";\nimport type { AxisLabel } from \"./AxisLabel\";\nimport type { AxisTick } from \"./AxisTick\";\nimport type { Graphics } from \"../../../core/render/Graphics\";\nimport type { Grid } from \"./Grid\";\nimport type { AxisBullet } from \"./AxisBullet\";\nimport type { XYChart } from \"../XYChart\";\nimport type { XYSeries, IXYSeriesDataItem } from \"../series/XYSeries\";\nimport type { Animation } from \"../../../core/util/Entity\";\nimport type { Tooltip } from \"../../../core/render/Tooltip\";\nimport type { Root } from \"../../../core/Root\";\n\nimport { DataItem } from \"../../../core/render/Component\";\nimport { Component, IComponentSettings, IComponentPrivate, IComponentEvents, IComponentDataItem } from \"../../../core/render/Component\";\nimport { Container } from \"../../../core/render/Container\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport { List } from \"../../../core/util/List\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\n\nimport * as $array from \"../../../core/util/Array\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $utils from \"../../../core/util/Utils\";\n\n\n\nexport interface IAxisSettings<R extends AxisRenderer> extends IComponentSettings {\n\t/**\n\t * A renderer object which is responsible of rendering visible axis elements.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\n\t */\n\trenderer: R;\n\n\t/**\n\t * The initial relative zoom start position of the axis.\n\t *\n\t * E.g. stting it to `0.1` will pre-zoom axis to 10% from the start.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Pre_zooming_axes} for more info\n\t */\n\tstart?: number;\n\n\t/**\n\t * The initial relative zoom end position of the axis.\n\t *\n\t * E.g. stting it to `0.9` will pre-zoom axis to 10% from the end.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Pre_zooming_axes} for more info\n\t */\n\tend?: number;\n\n\t/**\n\t * Maximum number of times the scope of the axis could auto-zoom-in.\n\t *\n\t * This is to prevent axis jumping too drastically when scrolling/zooming.\n\t *\n\t * @default 1000\n\t */\n\tmaxZoomFactor?: number;\n\n\t/**\n\t * Maximum number of axis elements to show at a time.\n\t *\n\t * E.g. for a [[CategoryAxis]] that would be number of categories.\n\t * For a [[DateAxis]] it would be number of `baseInterval`.\n\t *\n\t * The axis will not allow to be zoomed out beyond this number.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Limiting_zoom_scope} for more info\n\t */\n\tmaxZoomCount?: number;\n\n\t/**\n\t * Minimum number of axis elements to show at a time.\n\t *\n\t * E.g. for a [[CategoryAxis]] that would be number of categories.\n\t * For a [[DateAxis]] it would be number of `baseInterval`.\n\t *\n\t * The axis will not allow to be zoomed in beyond this number.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Limiting_zoom_scope} for more info\n\t */\n\tminZoomCount?: number;\n\n\t/**\n\t * Base value of the axis.\n\t */\n\tbaseValue?: number;\n\n\t/**\n\t * If set to `false` the axis will be exempt when chart is panned\n\t * horizontally, and will keep its current position.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Excluding_axes_from_pan_or_zoom} for more info\n\t */\n\tpanX?: boolean;\n\n\t/**\n\t * If set to `false` the axis will be exempt when chart is panned\n\t * vertically, and will keep its current position.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Excluding_axes_from_pan_or_zoom} for more info\n\t */\n\tpanY?: boolean;\n\n\t/**\n\t * If set to `false` the axis will be exempt when chart is zoomed\n\t * horizontally, and will keep its current zoom/position.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Excluding_axes_from_pan_or_zoom} for more info\n\t */\n\tzoomX?: boolean;\n\n\t/**\n\t * If set to `false` the axis will be exempt when chart is zoomed\n\t * vertically, and will keep its current zoom/position.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Excluding_axes_from_pan_or_zoom} for more info\n\t */\n\tzoomY?: boolean;\n\n\t/**\n\t * A relative distance the axis is allowed to be zoomed/panned beyond its\n\t * actual scope.\n\t *\n\t * @default 0.1\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Over_zooming} for more info\n\t */\n\tmaxDeviation?: number;\n\n\t/**\n\t * [[Tooltip]] element to use for axis.\n\t */\n\ttooltip?: Tooltip;\n\n\t/**\n\t * `tooltipLocation` indicates\n\t * which relative place to snap to: `0` beginning, `0.5` - middle, `1` - end.\n\t *\n\t * @default 0.5\n\t */\n\ttooltipLocation?: number;\n\n\t/**\n\t * Should tooltip snap to the `tooltipLocation` (`true`) or follow cursor.\n\t *\n\t * @default true\n\t */\n\tsnapTooltip?: boolean;\n\n\t/**\n\t * If set to `true` (default) the axis width will stay constant across all\n\t * zooms, even if actual length of all visible labels changes.\n\t *\n\t * @default true\n\t */\n\tfixAxisSize?: boolean;\n\n\t/**\n\t * A function that will be used to create bullets on each cell.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Axis_bullets} for more info\n\t */\n\tbullet?: (root: Root, axis: Axis<AxisRenderer>, dataItem: DataItem<IAxisDataItem>) => AxisBullet;\n\n}\n\nexport interface IAxisEvents extends IComponentEvents {\n}\n\nexport interface IAxisPrivate extends IComponentPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tname?: \"value\" | \"date\" | \"category\";\n\n\t/**\n\t * @ignore\n\t */\n\tupdateScrollbar?: boolean;\n\n\t/**\n\t * @ignore\n\t */\n\tmaxZoomFactor?: number;\n}\n\nexport interface IAxisDataItem extends IComponentDataItem {\n\n\t/**\n\t * Axis label element.\n\t */\n\tlabel?: AxisLabel;\n\n\t/**\n\t * Tick element.\n\t */\n\ttick?: AxisTick;\n\n\t/**\n\t * Grid line element.\n\t */\n\tgrid?: Grid;\n\n\t/**\n\t * Axis fill element.\n\t */\n\taxisFill?: Graphics;\n\n\t/**\n\t * Bullet element.\n\t */\n\tbullet?: AxisBullet;\n\n\t/**\n\t * Indicates if this data item represents an axis range.\n\t */\n\tisRange?: boolean;\n\n\t/**\n\t * If set to `true`, the grid and axis fill of this data item will be drawn\n\t * above series.\n\t *\n\t * NOTE: this needs to be set **before** crating an axis range. Updating this\n\t * dynamically won't have any effect.\n\t *\n\t * NOTE: if you need all grid to be drawn above series, you can brig it to\n\t * front with `chart.gridContainer.toFront();`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/#Grid_fill_above_series} for more info\n\t * @default false\n\t */\n\tabove?: boolean\n\n}\n\n/**\n * A base class for all axes.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Adding_axes} for more info\n */\nexport abstract class Axis<R extends AxisRenderer> extends Component {\n\tpublic static className: string = \"Axis\";\n\tpublic static classNames: Array<string> = Component.classNames.concat([Axis.className]);\n\n\tdeclare public _settings: IAxisSettings<R>;\n\tdeclare public _privateSettings: IAxisPrivate;\n\tdeclare public _dataItemSettings: IAxisDataItem;\n\tdeclare public _events: IAxisEvents;\n\n\tdeclare public _seriesType: XYSeries;\n\n\tprotected _series: Array<this[\"_seriesType\"]> = [];\n\n\tpublic _isPanning: boolean = false;\n\n\t/**\n\t * A [[Container]] that holds all the axis label elements.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly labelsContainer: Container = this.children.push(Container.new(this._root, {}));\n\n\t/**\n\t * A [[Container]] that holds all the axis grid and fill elements.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly gridContainer: Container = Container.new(this._root, { width: p100, height: p100 });\n\n\t/**\n\t * A [[Container]] that holds axis grid elements which goes above the series.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly topGridContainer: Container = Container.new(this._root, { width: p100, height: p100 });\n\n\t/**\n\t * A [[Container]] that holds all the axis bullet elements.\n\t *\n\t * @default new Container\n\t */\n\tpublic readonly bulletsContainer: Container = this.children.push(Container.new(this._root, { isMeasured: false, width: p100, height: p100, position: \"absolute\" }));\n\n\t/**\n\t * A referenece to the the chart the axis belongs to.\n\t */\n\tpublic chart: XYChart | undefined;\n\n\tprotected _rangesDirty: Boolean = false;\n\n\tpublic _panStart: number = 0;\n\tpublic _panEnd: number = 1;\n\n\tprotected _sAnimation?: Animation<this[\"_settings\"][\"start\"]>;\n\tprotected _eAnimation?: Animation<this[\"_settings\"][\"end\"]>;\n\n\t/**\n\t * A list of axis ranges.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\n\t * @default new List()\n\t */\n\tpublic readonly axisRanges: List<DataItem<this[\"_dataItemSettings\"]>> = new List();\n\n\tpublic _seriesAxisRanges: Array<DataItem<this[\"_dataItemSettings\"]>> = [];\n\n\t/**\n\t * A control label that is invisible but is used to keep width the width of\n\t * the axis constant.\n\t */\n\tpublic ghostLabel!: AxisLabel;\n\n\tprotected _cursorPosition: number = -1;\n\n\tprotected _snapToSeries?: Array<XYSeries>;\n\n\t/**\n\t * A container above the axis that can be used to add additional stuff into\n\t * it. For example a legend, label, or an icon.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info\n\t * @default new Container\n\t */\n\tpublic axisHeader: Container = this.children.push(Container.new(this._root, {\n\t\tthemeTags: [\"axis\", \"header\"],\n\t\tposition: \"absolute\",\n\t\tbackground: Rectangle.new(this._root, {\n\t\t\tthemeTags: [\"header\", \"background\"],\n\t\t\tfill: this._root.interfaceColors.get(\"background\")\n\t\t})\n\t}));\n\n\tprotected _dispose() {\n\t\t// these could be in other parents, so disposing just in case\n\t\tthis.gridContainer.dispose();\n\t\tthis.topGridContainer.dispose();\n\t\tthis.bulletsContainer.dispose();\n\t\tthis.labelsContainer.dispose();\n\t\tthis.axisHeader.dispose();\n\t\tsuper._dispose();\n\t}\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis.setPrivate(\"updateScrollbar\", true);\n\n\t\tthis._disposers.push(this.axisRanges.events.onAll((change) => {\n\t\t\tif (change.type === \"clear\") {\n\t\t\t\tthis.axisRanges.each((dataItem) => {\n\t\t\t\t\tdataItem.dispose();\n\t\t\t\t});\n\t\t\t} else if (change.type === \"push\") {\n\t\t\t\tthis._processAxisRange(change.newValue, [\"range\"]);\n\t\t\t} else if (change.type === \"setIndex\") {\n\t\t\t\tthis._processAxisRange(change.newValue, [\"range\"]);\n\t\t\t} else if (change.type === \"insertIndex\") {\n\t\t\t\tthis._processAxisRange(change.newValue, [\"range\"]);\n\t\t\t} else if (change.type === \"removeIndex\") {\n\t\t\t\tchange.oldValue.dispose();\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unknown IStreamEvent type\");\n\t\t\t}\n\t\t}))\n\n\t\tconst renderer = this.get(\"renderer\");\n\t\tif (renderer) {\n\t\t\trenderer.axis = this;\n\t\t\trenderer.processAxis();\n\t\t}\n\t\tthis.children.push(renderer);\n\t\tthis.ghostLabel = renderer.makeLabel(new DataItem(this, undefined, {}), []);\n\t\tthis.ghostLabel.set(\"opacity\", 0);\n\t}\n\n\t/**\n\t * Zooms the axis to relative locations.\n\t *\n\t * Both `start` and `end` are relative: 0 means start of the axis, 1 - end.\n\t *\n\t * @param   start     Relative start\n\t * @param   end       Relative end\n\t * @param   duration  Duration of the zoom animation in milliseconds\n\t * @return            Zoom animation\n\t */\n\tpublic zoom(start: number, end: number, duration?: number): Animation<this[\"_settings\"][\"start\"]> | Animation<this[\"_settings\"][\"end\"]> | undefined {\n\n\t\tif (this.get(\"start\") !== start || this.get(\"end\") != end) {\n\n\t\t\tlet sAnimation = this._sAnimation;\n\t\t\tlet eAnimation = this._eAnimation;\n\n\t\t\tlet maxDeviation = this.get(\"maxDeviation\", 0.5) * Math.min(1, (end - start));\n\n\t\t\tif (start < - maxDeviation) {\n\t\t\t\tstart = -maxDeviation;\n\t\t\t}\n\n\t\t\tif (end > 1 + maxDeviation) {\n\t\t\t\tend = 1 + maxDeviation;\n\t\t\t}\n\n\t\t\tif (start > end) {\n\t\t\t\t[start, end] = [end, start];\n\t\t\t}\n\n\t\t\tif (!$type.isNumber(duration)) {\n\t\t\t\tduration = this.get(\"interpolationDuration\", 0);\n\t\t\t}\n\n\t\t\tlet priority: \"start\" | \"end\" = \"end\";\n\t\t\tlet maxZoomFactor = this.getPrivate(\"maxZoomFactor\", this.get(\"maxZoomFactor\", 100));\n\n\t\t\tif (end === 1 && start !== 0) {\n\t\t\t\tif (start < this.get(\"start\")) {\n\t\t\t\t\tpriority = \"start\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tpriority = \"end\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (start === 0 && end !== 1) {\n\t\t\t\tif (end > this.get(\"end\")) {\n\t\t\t\t\tpriority = \"end\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tpriority = \"start\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet minZoomCount = this.get(\"minZoomCount\");\n\t\t\tlet maxZoomCount = this.get(\"maxZoomCount\");\n\n\t\t\tif ($type.isNumber(minZoomCount)) {\n\t\t\t\tmaxZoomFactor = maxZoomFactor / minZoomCount;\n\t\t\t}\n\n\t\t\tlet minZoomFactor: number = 1;\n\n\t\t\tif ($type.isNumber(maxZoomCount)) {\n\t\t\t\tminZoomFactor = maxZoomFactor / maxZoomCount;\n\t\t\t}\n\n\t\t\t// most likely we are dragging left scrollbar grip here, so we tend to modify end\n\t\t\tif (priority === \"start\") {\n\t\t\t\tif (maxZoomCount > 0) {\n\t\t\t\t\t// add to the end\n\t\t\t\t\tif (1 / (end - start) < minZoomFactor) {\n\t\t\t\t\t\tend = start + 1 / minZoomFactor;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// add to the end\n\t\t\t\tif (1 / (end - start) > maxZoomFactor) {\n\t\t\t\t\tend = start + 1 / maxZoomFactor;\n\t\t\t\t}\n\t\t\t\t//unless end is > 0\n\t\t\t\tif (end > 1 && end - start < 1 / maxZoomFactor) {\n\t\t\t\t\t//end = 1;\n\t\t\t\t\tstart = end - 1 / maxZoomFactor;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// most likely we are dragging right, so we modify left\n\t\t\telse {\n\t\t\t\tif (maxZoomCount > 0) {\n\t\t\t\t\t// add to the end\n\t\t\t\t\tif (1 / (end - start) < minZoomFactor) {\n\t\t\t\t\t\tstart = end - 1 / minZoomFactor;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// remove from start\n\t\t\t\tif (1 / (end - start) > maxZoomFactor) {\n\t\t\t\t\tstart = end - 1 / maxZoomFactor;\n\t\t\t\t}\n\t\t\t\tif (start < 0 && end - start < 1 / maxZoomFactor) {\n\t\t\t\t\t//start = 0;\n\t\t\t\t\tend = start + 1 / maxZoomFactor;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (1 / (end - start) > maxZoomFactor) {\n\t\t\t\tend = start + 1 / maxZoomFactor;\n\t\t\t}\n\n\t\t\tif (1 / (end - start) > maxZoomFactor) {\n\t\t\t\tstart = end - 1 / maxZoomFactor;\n\t\t\t}\n\n\t\t\tif (((sAnimation && sAnimation.playing && sAnimation.to == start) || this.get(\"start\") == start) && ((eAnimation && eAnimation.playing && eAnimation.to == end) || this.get(\"end\") == end)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (duration > 0) {\n\t\t\t\tlet easing = this.get(\"interpolationEasing\");\n\n\t\t\t\tlet sAnimation = this.animate({ key: \"start\", to: start, duration: duration, easing: easing });\n\t\t\t\tlet eAnimation = this.animate({ key: \"end\", to: end, duration: duration, easing: easing });\n\n\t\t\t\tthis._sAnimation = sAnimation;\n\t\t\t\tthis._eAnimation = eAnimation;\n\n\t\t\t\tif (sAnimation) {\n\t\t\t\t\treturn sAnimation;\n\t\t\t\t}\n\t\t\t\telse if (eAnimation) {\n\t\t\t\t\treturn eAnimation;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.set(\"start\", start);\n\t\t\t\tthis.set(\"end\", end);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A list of series using this axis.\n\t *\n\t * @return Series\n\t */\n\tpublic get series(): Array<this[\"_seriesType\"]> {\n\t\treturn this._series;\n\t}\n\n\n\tpublic _processAxisRange(dataItem: DataItem<this[\"_dataItemSettings\"]>, themeTags: Array<string>) {\n\t\tdataItem.setRaw(\"isRange\", true);\n\t\tthis._createAssets(dataItem, themeTags);\n\t\tthis._rangesDirty = true;\n\t\tthis._prepareDataItem(dataItem);\n\n\t\tconst above = dataItem.get(\"above\");\n\t\tconst container = this.topGridContainer;\n\n\t\tconst grid = dataItem.get(\"grid\");\n\t\tif (above && grid) {\n\t\t\tcontainer.children.moveValue(grid);\n\t\t}\n\n\t\tconst fill = dataItem.get(\"axisFill\");\n\t\tif (above && fill) {\n\t\t\tcontainer.children.moveValue(fill);\n\t\t}\n\t}\n\n\tpublic _prepareDataItem(_dataItem: DataItem<this[\"_dataItemSettings\"]>, _index?: number) { }\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getX(_value: any, _location: number, baseValue?: any): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getY(_value: any, _location: number, baseValue?: any): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getDataItemCoordinateX(_dataItem: DataItem<IXYSeriesDataItem>, _field: string, _cellLocation?: number, _axisLocation?: number): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getDataItemCoordinateY(_dataItem: DataItem<IXYSeriesDataItem>, _field: string, _cellLocation?: number, _axisLocation?: number): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getDataItemPositionX(_dataItem: DataItem<IXYSeriesDataItem>, _field: string, _cellLocation?: number, _axisLocation?: number): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getDataItemPositionY(_dataItem: DataItem<IXYSeriesDataItem>, _field: string, _cellLocation?: number, _axisLocation?: number): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyExtremes() {\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtySelectionExtremes() {\n\t}\n\n\tpublic _calculateTotals() {\n\t}\n\n\tprotected _updateAxisRanges() {\n\t\tthis.axisRanges.each((axisRange) => {\n\t\t\tthis._prepareDataItem(axisRange);\n\t\t})\n\n\t\t$array.each(this._seriesAxisRanges, (axisRange) => {\n\t\t\tthis._prepareDataItem(axisRange);\n\t\t})\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract baseValue(): any;\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.get(\"fixAxisSize\")) {\n\t\t\tthis.ghostLabel.set(\"visible\", true);\n\t\t}\n\t\telse {\n\t\t\tthis.ghostLabel.set(\"visible\", false);\n\t\t}\n\n\t\tif (this.isDirty(\"start\") || this.isDirty(\"end\")) {\n\t\t\tthis.chart!._updateCursor();\n\n\t\t\tlet start = this.get(\"start\", 0);\n\t\t\tlet end = this.get(\"end\", 1);\n\n\t\t\tlet maxDeviation = this.get(\"maxDeviation\", 0.5) * Math.min(1, (end - start));\n\n\t\t\tif (start < -maxDeviation) {\n\t\t\t\tlet delta = start + maxDeviation;\n\t\t\t\tstart = -maxDeviation;\n\t\t\t\tthis.setRaw(\"start\", start);\n\t\t\t\tif (this.isDirty(\"end\")) {\n\t\t\t\t\tthis.setRaw(\"end\", end - delta);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (end > 1 + maxDeviation) {\n\t\t\t\tlet delta = end - 1 - maxDeviation;\n\t\t\t\tend = 1 + maxDeviation;\n\t\t\t\tthis.setRaw(\"end\", end);\n\n\t\t\t\tif (this.isDirty(\"start\")) {\n\t\t\t\t\tthis.setRaw(\"start\", start - delta);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tconst renderer = this.get(\"renderer\");\n\t\trenderer._start = this.get(\"start\")!;\n\t\trenderer._end = this.get(\"end\")!;\n\t\trenderer._inversed = renderer.get(\"inversed\", false);\n\t\trenderer._axisLength = renderer.axisLength() / (renderer._end - renderer._start);\n\t\trenderer._updateLC();\n\n\t\tif (this.isDirty(\"tooltip\")) {\n\t\t\tconst tooltip = this.get(\"tooltip\");\n\t\t\tif (tooltip) {\n\t\t\t\tconst rendererTags = renderer.get(\"themeTags\");\n\t\t\t\ttooltip.addTag(\"axis\");\n\t\t\t\ttooltip.addTag(this.className.toLowerCase());\n\t\t\t\ttooltip._applyThemes();\n\n\t\t\t\tif (rendererTags) {\n\t\t\t\t\ttooltip.set(\"themeTags\", $utils.mergeTags(tooltip.get(\"themeTags\"), rendererTags));\n\t\t\t\t\ttooltip.label._applyThemes();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _updateTooltipBounds() {\n\t\tconst tooltip = this.get(\"tooltip\")!;\n\t\tif (tooltip) {\n\t\t\tthis.get(\"renderer\").updateTooltipBounds(tooltip);\n\t\t}\n\t}\n\n\tpublic _updateBounds() {\n\t\tsuper._updateBounds();\n\t\tthis._updateTooltipBounds();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processChart(chart: XYChart) {\n\t\tthis.chart = chart;\n\t\tconst renderer = this.get(\"renderer\");\n\n\t\trenderer.chart = chart;\n\t\tchart.gridContainer.children.push(this.gridContainer);\n\t\tchart.topGridContainer.children.push(this.topGridContainer);\n\n\t\tchart.axisHeadersContainer.children.push(this.axisHeader);\n\n\t\tthis.on(\"start\", () => {\n\t\t\tchart._handleAxisSelection(this);\n\t\t});\n\t\tthis.on(\"end\", () => {\n\t\t\tchart._handleAxisSelection(this);\n\t\t});\n\n\t\tchart.plotContainer.onPrivate(\"width\", () => {\n\t\t\tthis.markDirtySize();\n\t\t});\n\t\tchart.plotContainer.onPrivate(\"height\", () => {\n\t\t\tthis.markDirtySize();\n\t\t});\n\n\t\tchart.processAxis(this);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic hideDataItem(dataItem: DataItem<IAxisDataItem>): Promise<void> {\n\t\tthis._toggleDataItem(dataItem, false);\n\t\treturn super.hideDataItem(dataItem);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic showDataItem(dataItem: DataItem<IAxisDataItem>): Promise<void> {\n\t\tthis._toggleDataItem(dataItem, true);\n\t\treturn super.showDataItem(dataItem);\n\t}\n\n\n\tpublic _toggleDataItem(dataItem: DataItem<IAxisDataItem>, visible: boolean) {\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tlabel.setPrivate(\"visible\", visible);\n\t\t}\n\t\tconst grid = dataItem.get(\"grid\");\n\t\tif (grid) {\n\t\t\tgrid.setPrivate(\"visible\", visible);\n\t\t}\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\ttick.setPrivate(\"visible\", visible);\n\t\t}\n\t\tconst axisFill = dataItem.get(\"axisFill\");\n\t\tif (axisFill) {\n\t\t\taxisFill.setPrivate(\"visible\", visible);\n\t\t}\n\n\t\tconst bullet = dataItem.get(\"bullet\");\n\t\tif (bullet) {\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\tif (sprite) {\n\t\t\t\tsprite.setPrivate(\"visible\", visible);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract basePosition(): number;\n\n\tpublic _createAssets(dataItem: DataItem<this[\"_dataItemSettings\"]>, tags: Array<string>) {\n\t\tconst renderer = this.get(\"renderer\");\n\n\t\tif (!dataItem.get(\"label\")) {\n\t\t\trenderer.makeLabel(dataItem, tags);\n\t\t}\n\n\t\tif (!dataItem.get(\"grid\")) {\n\t\t\trenderer.makeGrid(dataItem, tags);\n\t\t}\n\n\t\tif (!dataItem.get(\"tick\")) {\n\t\t\trenderer.makeTick(dataItem, tags);\n\t\t}\n\n\t\tif (!dataItem.get(\"axisFill\")) {\n\t\t\trenderer.makeAxisFill(dataItem, tags);\n\t\t}\n\n\t\tthis._processBullet(dataItem);\n\t}\n\n\tprotected _processBullet(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tlet bullet = dataItem.get(\"bullet\");\n\t\tlet axisBullet = this.get(\"bullet\");\n\n\t\tif (!bullet && axisBullet && !dataItem.get(\"isRange\")) {\n\t\t\tbullet = axisBullet(this._root, this, dataItem);\n\t\t}\n\n\t\tif (bullet) {\n\t\t\tbullet.axis = this;\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\n\t\t\tif (sprite) {\n\t\t\t\tsprite._setDataItem(dataItem);\n\t\t\t\tdataItem.setRaw(\"bullet\", bullet);\n\t\t\t\tif (!sprite.parent) {\n\t\t\t\t\tthis.bulletsContainer.children.push(sprite);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _afterChanged() {\n\t\tsuper._afterChanged();\n\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tchart._updateChartLayout();\n\t\t}\n\t\tthis.get(\"renderer\")._updatePositions();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tconst renderer = this.get(\"renderer\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\trenderer.labels.removeValue(label);\n\t\t\tlabel.dispose();\n\t\t}\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\trenderer.ticks.removeValue(tick);\n\t\t\ttick.dispose();\n\t\t}\n\t\tconst grid = dataItem.get(\"grid\");\n\t\tif (grid) {\n\t\t\trenderer.grid.removeValue(grid);\n\t\t\tgrid.dispose();\n\t\t}\n\t\tconst axisFill = dataItem.get(\"axisFill\");\n\t\tif (axisFill) {\n\t\t\trenderer.axisFills.removeValue(axisFill);\n\t\t\taxisFill.dispose();\n\t\t}\n\t}\n\n\tprotected _updateGhost() {\n\t\tconst ghostLabel = this.ghostLabel;\n\t\tif (!ghostLabel.isHidden()) {\n\t\t\tconst bounds = ghostLabel.localBounds();\n\t\t\tconst gWidth = bounds.right - bounds.left;\n\n\t\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tif (label && !label.isHidden()) {\n\t\t\t\t\tconst bounds = label.localBounds();\n\t\t\t\t\tconst w = bounds.right - bounds.left;\n\n\t\t\t\t\tif (w > gWidth) {\n\t\t\t\t\t\tghostLabel.set(\"text\", label.text._getText());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tlet start = this.get(\"start\", 0);\n\t\tlet end = this.get(\"end\", 1);\n\t\tthis.get(\"renderer\").updateLabel(ghostLabel, start + (end - start) * 0.5);\n\t\tghostLabel.setPrivate(\"visible\", true);\n\t}\n\n\tpublic _handleCursorPosition(position: number, snapToSeries?: Array<XYSeries>) {\n\t\tconst renderer = this.get(\"renderer\");\n\t\tposition = renderer.toAxisPosition(position);\n\n\t\tthis._cursorPosition = position;\n\t\tthis._snapToSeries = snapToSeries;\n\n\t\tthis.updateTooltip();\n\t}\n\n\n\t/**\n\t * @todo needs description\n\t * Can be called when axis zoom changes and you need to update tooltip position\n\t */\n\tpublic updateTooltip() {\n\t\tconst snapToSeries = this._snapToSeries;\n\t\tlet position = this._cursorPosition;\n\t\tconst tooltip = this.get(\"tooltip\")!;\n\t\tconst renderer = this.get(\"renderer\");\n\n\t\tif ($type.isNumber(position)) {\n\n\t\t\t$array.each(this.series, (series) => {\n\t\t\t\tif (series.get(\"baseAxis\") === this) {\n\t\t\t\t\tconst dataItem = this.getSeriesItem(series, position!);\n\t\t\t\t\tif (snapToSeries && snapToSeries.indexOf(series) != -1) {\n\t\t\t\t\t\tseries.updateLegendMarker(dataItem);\n\t\t\t\t\t\tseries.updateLegendValue(dataItem);\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse {\t\t\t\t\t\n\t\t\t\t\t\tseries.showDataItemTooltip(dataItem);\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\n\t\t\tif (tooltip) {\n\t\t\t\trenderer.updateTooltipBounds(tooltip);\n\n\t\t\t\tif (this.get(\"snapTooltip\")) {\n\t\t\t\t\tposition = this.roundAxisPosition(position, this.get(\"tooltipLocation\", 0.5));\n\t\t\t\t}\n\t\t\t\tif (!$type.isNaN(position)) {\n\t\t\t\t\tthis._updateTooltipText(tooltip, position);\n\t\t\t\t\trenderer.positionTooltip(tooltip, position);\n\n\t\t\t\t\tif (position < this.get(\"start\") || position > this.get(\"end\")) {\n\t\t\t\t\t\ttooltip.hide(0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttooltip.show(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttooltip.hide(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _updateTooltipText(tooltip: Tooltip, position: number) {\n\t\ttooltip.label.set(\"text\", this.getTooltipText(position));\n\t}\n\n\t/**\n\t * Returns text to be used in an axis tooltip for specific relative position.\n\t *\n\t * @param   position  Position\n\t * @return            Tooltip text\n\t */\n\tpublic abstract getTooltipText(position: number): string | undefined;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic roundAxisPosition(position: number, _location: number): number {\n\t\treturn position;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic handleCursorShow() {\n\t\tlet tooltip = this.get(\"tooltip\");\n\t\tif (tooltip) {\n\t\t\ttooltip.show();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic handleCursorHide() {\n\t\tlet tooltip = this.get(\"tooltip\");\n\t\tif (tooltip) {\n\t\t\ttooltip.hide();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processSeriesDataItem(_dataItem: DataItem<IXYSeriesDataItem>, _fields: Array<string>) {\n\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._sizeDirty = false;\n\t\tthis._rangesDirty = false;\n\t}\n\n\t/**\n\t * Converts pixel coordinate to a relative position on axis.\n\t *\n\t * @param   coordinate  Coordinate\n\t * @return              Relative position\n\t */\n\tpublic coordinateToPosition(coordinate: number): number {\n\t\tconst renderer = this.get(\"renderer\");\n\t\treturn renderer.toAxisPosition(coordinate / renderer.axisLength());\n\t}\n\n\t/**\n\t * Converts relative position of the plot area to relative position of the\n\t * axis with zoom taken into account.\n\t *\n\t * @param position Position\n\t * @return Relative position\n\t */\n\tpublic toAxisPosition(position: number): number {\n\t\treturn this.get(\"renderer\").toAxisPosition(position);\n\t}\n\n\t/**\n\t * Adjusts position with inversed taken into account.\n\t *\n\t * @ignore\n\t */\n\tpublic fixPosition(position: number): number {\n\t\treturn this.get(\"renderer\").fixPosition(position);\n\t}\n\n\t/**\n\t * Returns a data item from series that is closest to the `position`.\n\t *\n\t * @param   series    Series\n\t * @param   position  Relative position\n\t * @return            Data item\n\t */\n\tpublic abstract getSeriesItem(series: XYSeries, position: number): DataItem<IXYSeriesDataItem> | undefined\n\n\t/**\n\t * @ignore\n\t */\n\tpublic shouldGap(_dataItem: DataItem<IXYSeriesDataItem>, _nextItem: DataItem<IXYSeriesDataItem>, _autoGapCount: number, _fieldName: string): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Creates and returns an axis range object.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\n\t * @param   axisDataItem  Axis data item\n\t * @return                Axis range\n\t */\n\tpublic createAxisRange(axisDataItem: DataItem<IAxisDataItem>): DataItem<this[\"_dataItemSettings\"]> {\n\t\treturn this.axisRanges.push(axisDataItem);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _groupSeriesData(_series: XYSeries) { }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}