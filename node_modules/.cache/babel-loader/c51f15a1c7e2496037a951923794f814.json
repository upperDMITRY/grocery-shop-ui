{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Label } from \"../render/Label\";\nimport { PointedRectangle } from \"../render/PointedRectangle\";\nimport { Container } from \"./Container\";\nimport { Percent } from \"../util/Percent\";\nimport { Color } from \"../util/Color\";\nimport * as $math from \"../util/Math\";\nimport * as $array from \"../util/Array\";\nimport * as $utils from \"../util/Utils\";\n/**\r\n * Creates a tooltip.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/tooltips/} for more info\r\n * @important\r\n */\n\nvar Tooltip =\n/** @class */\nfunction (_super) {\n  __extends(Tooltip, _super);\n\n  function Tooltip() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_arrangeDisposer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_fx\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_fy\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_label\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_fillDp\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_strokeDp\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_labelDp\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_w\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_h\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Tooltip.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"tooltip\"]);\n\n      _super.prototype._afterNew.call(this);\n\n      this.set(\"background\", PointedRectangle.new(this._root, {\n        themeTags: [\"tooltip\", \"background\"]\n      }));\n      this._label = this.children.push(Label.new(this._root, {}));\n\n      this._disposers.push(this._label.events.on(\"boundschanged\", function () {\n        _this._updateBackground();\n      }));\n\n      this.on(\"bounds\", function () {\n        _this._updateBackground();\n      });\n\n      this._updateTextColor();\n\n      this._root.tooltipContainer.children.push(this);\n\n      this.hide(0);\n\n      this._root._tooltips.push(this);\n    }\n  });\n  Object.defineProperty(Tooltip.prototype, \"label\", {\n    /**\r\n     * A [[Label]] element for the tooltip.\r\n     *\r\n     * @readonly\r\n     * @return Label\r\n     */\n    get: function () {\n      return this._label;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Permanently disposes the tooltip.\r\n   */\n\n  Object.defineProperty(Tooltip.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype.dispose.call(this);\n\n      $array.remove(this._root._tooltips, this);\n    }\n  });\n  Object.defineProperty(Tooltip.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._updateChildren.call(this);\n\n      var labelText = this.get(\"labelText\");\n\n      if (labelText != null) {\n        this.label.set(\"text\", this.get(\"labelText\"));\n      }\n    }\n  });\n  Object.defineProperty(Tooltip.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this.isDirty(\"pointTo\")) {\n        // can't compare to previous, as sometimes pointTo is set twice (when pointer moves, so the position won't be udpated)\n        this._updateBackground();\n      }\n\n      if (this.isDirty(\"tooltipTarget\")) {\n        this.updateBackgroundColor();\n      }\n    }\n  });\n  Object.defineProperty(Tooltip.prototype, \"_onShow\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._onShow.call(this);\n\n      this.updateBackgroundColor();\n    }\n  });\n  Object.defineProperty(Tooltip.prototype, \"updateBackgroundColor\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var tooltipTarget = this.get(\"tooltipTarget\");\n      var background = this.get(\"background\");\n      var fill;\n      var stroke;\n\n      if (tooltipTarget && background) {\n        fill = tooltipTarget.get(\"fill\");\n        stroke = tooltipTarget.get(\"stroke\");\n\n        if (fill == null) {\n          fill = stroke;\n        }\n\n        if (this.get(\"getFillFromSprite\")) {\n          if (this._fillDp) {\n            this._fillDp.dispose();\n          }\n\n          if (fill != null) {\n            background.set(\"fill\", fill);\n          }\n\n          this._fillDp = tooltipTarget.on(\"fill\", function (fill) {\n            if (fill != null) {\n              background.set(\"fill\", fill);\n\n              _this._updateTextColor(fill);\n            }\n          });\n        }\n\n        if (this.get(\"getStrokeFromSprite\")) {\n          if (this._strokeDp) {\n            this._strokeDp.dispose();\n          }\n\n          if (fill != null) {\n            background.set(\"stroke\", fill);\n          }\n\n          this._strokeDp = tooltipTarget.on(\"fill\", function (fill) {\n            if (fill != null) {\n              background.set(\"stroke\", fill);\n            }\n          });\n        }\n\n        if (this.get(\"getLabelFillFromSprite\")) {\n          if (this._labelDp) {\n            this._labelDp.dispose();\n          }\n\n          if (fill != null) {\n            this.label.set(\"fill\", fill);\n          }\n\n          this._labelDp = tooltipTarget.on(\"fill\", function (fill) {\n            if (fill != null) {\n              _this.label.set(\"fill\", fill);\n            }\n          });\n        }\n      }\n\n      this._updateTextColor(fill);\n    }\n  });\n  Object.defineProperty(Tooltip.prototype, \"_updateTextColor\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (fill) {\n      if (this.get(\"autoTextColor\")) {\n        if (fill == null) {\n          fill = this.get(\"background\").get(\"fill\");\n        }\n\n        if (fill == null) {\n          fill = this._root.interfaceColors.get(\"background\");\n        }\n\n        if (fill instanceof Color) {\n          this.label.set(\"fill\", Color.alternative(fill, this._root.interfaceColors.get(\"alternativeText\"), this._root.interfaceColors.get(\"text\")));\n        }\n      }\n    }\n  });\n  Object.defineProperty(Tooltip.prototype, \"_setDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      _super.prototype._setDataItem.call(this, dataItem);\n\n      this.label._setDataItem(dataItem);\n    }\n  });\n  Object.defineProperty(Tooltip.prototype, \"_updateBackground\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype.updateBackground.call(this);\n\n      var parent = this._root.container;\n\n      if (parent) {\n        var cw = 0.5;\n        var ch = 0.5;\n        var centerX = this.get(\"centerX\");\n\n        if (centerX instanceof Percent) {\n          cw = centerX.value;\n        }\n\n        var centerY = this.get(\"centerY\");\n\n        if (centerY instanceof Percent) {\n          ch = centerY.value;\n        }\n\n        var parentW = parent.width();\n        var parentH = parent.height();\n        var bounds = this.get(\"bounds\", {\n          left: 0,\n          top: 0,\n          right: parentW,\n          bottom: parentH\n        });\n\n        this._updateBounds();\n\n        var w = this.width();\n        var h = this.height(); // use old w and h,as when tooltip is hidden, these are 0 and unneeded animation happens\n\n        if (w === 0) {\n          w = this._w;\n        }\n\n        if (h === 0) {\n          h = this._h;\n        }\n\n        var pointTo = this.get(\"pointTo\", {\n          x: parentW / 2,\n          y: parentH / 2\n        });\n        var x = pointTo.x;\n        var y = pointTo.y;\n        var pointerOrientation = this.get(\"pointerOrientation\");\n        var background = this.get(\"background\");\n        var pointerLength = 0;\n\n        if (background instanceof PointedRectangle) {\n          pointerLength = background.get(\"pointerLength\", 0);\n        }\n\n        var pointerX = 0;\n        var pointerY = 0;\n        var boundsW = bounds.right - bounds.left;\n        var boundsH = bounds.bottom - bounds.top; // horizontal\n\n        if (pointerOrientation == \"horizontal\" || pointerOrientation == \"left\" || pointerOrientation == \"right\") {\n          if (pointerOrientation == \"horizontal\") {\n            if (x > bounds.left + boundsW / 2) {\n              x -= w * (1 - cw) + pointerLength;\n            } else {\n              x += w * cw + pointerLength;\n            }\n          } else if (pointerOrientation == \"left\") {\n            x += w * (1 - cw) + pointerLength;\n          } else {\n            x -= w * cw + pointerLength;\n          }\n        } // vertical pointer\n        else {\n          if (pointerOrientation == \"vertical\") {\n            if (y > bounds.top + h / 2 + pointerLength) {\n              y -= h * (1 - ch) + pointerLength;\n            } else {\n              y += h * ch + pointerLength;\n            }\n          } else if (pointerOrientation == \"down\") {\n            y -= h * (1 - ch) + pointerLength;\n          } else {\n            y += h * ch + pointerLength;\n          }\n        }\n\n        x = $math.fitToRange(x, bounds.left + w * cw, bounds.left + boundsW - w * (1 - cw));\n        y = $math.fitToRange(y, bounds.top + h * ch, bounds.top + boundsH - h * (1 - ch));\n        pointerX = pointTo.x - x + w * cw;\n        pointerY = pointTo.y - y + h * ch;\n        this._fx = x;\n        this._fy = y;\n        var animationDuration = this.get(\"animationDuration\", 0);\n\n        if (animationDuration > 0 && this.get(\"visible\") && this.get(\"opacity\") > 0.1) {\n          var animationEasing = this.get(\"animationEasing\");\n          this.animate({\n            key: \"x\",\n            to: x,\n            duration: animationDuration,\n            easing: animationEasing\n          });\n          this.animate({\n            key: \"y\",\n            to: y,\n            duration: animationDuration,\n            easing: animationEasing\n          });\n        } else {\n          this.set(\"x\", x);\n          this.set(\"y\", y);\n        }\n\n        if (background instanceof PointedRectangle) {\n          background.set(\"pointerX\", pointerX);\n          background.set(\"pointerY\", pointerY);\n        }\n\n        if (w > 0) {\n          this._w = w;\n        }\n\n        if (h > 0) {\n          this._h = h;\n        }\n      }\n    }\n  });\n  Object.defineProperty(Tooltip, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Tooltip\"\n  });\n  Object.defineProperty(Tooltip, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Container.classNames.concat([Tooltip.className])\n  });\n  return Tooltip;\n}(Container);\n\nexport { Tooltip };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/Tooltip.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IBounds } from \"../util/IBounds\";\nimport type { IPoint } from \"../util/IPoint\";\nimport type { Pattern } from \"../render/patterns/Pattern\";\nimport type { Time } from \"../util/Animation\";\nimport type { Sprite } from \"../render/Sprite\";\nimport type { MultiDisposer, IDisposer } from \"../util/Disposer\";\n\nimport { Label } from \"../render/Label\";\nimport { PointedRectangle } from \"../render/PointedRectangle\";\nimport { Container, IContainerPrivate, IContainerSettings } from \"./Container\";\nimport { Percent } from \"../util/Percent\";\nimport { Color } from \"../util/Color\";\n\nimport * as $math from \"../util/Math\";\nimport * as $array from \"../util/Array\";\nimport * as $utils from \"../util/Utils\";\n//import * as $utils from \"../util/Utils\";\nimport type { DataItem, IComponentDataItem } from \"./Component\";\n\n\nexport interface ITooltipSettings extends IContainerSettings {\n\n\t/**\n\t * Text to use for tooltip's label.\n\t */\n\tlabelText?: string\n\n\t/**\n\t * A direction of the tooltip pointer.\n\t *\n\t * https://www.amcharts.com/docs/v5/concepts/common-elements/tooltips/#Orientation\n\t */\n\tpointerOrientation?: \"left\" | \"right\" | \"up\" | \"down\" | \"vertical\" | \"horizontal\";\n\n\t/**\n\t * If set to `true` will use the same `fill` color for its background as\n\t * its `tooltipTarget`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/tooltips/#Colors} for more info\n\t * @defaul false\n\t */\n\tgetFillFromSprite?: boolean;\n\n\t/**\n\t * If set to `true` will use the same `fill` color as its `tooltipTarget`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/tooltips/#Colors} for more info\n\t * @defaul false\n\t */\n\tgetLabelFillFromSprite?: boolean;\n\n\t/**\n\t * If set to `true` will use the same `stroke` color as its `tooltipTarget`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/tooltips/#Colors} for more info\n\t * @default false\n\t */\n\tgetStrokeFromSprite?: boolean;\n\n\t/**\n\t * Scree bounds to constring tooltip within.\n\t */\n\tbounds?: IBounds;\n\n\t/**\n\t * If set to `true` tooltip will adjust its text color for better visibility\n\t * on its background.\n\t *\n\t * @default true\n\t */\n\tautoTextColor?: boolean;\n\n\t/**\n\t * Screen coordinates the tooltip show point to.\n\t */\n\tpointTo?: IPoint;\n\n\t/**\n\t * Duration in milliseconds for tooltip position change, e.g. when tooltip\n\t * is jumping from one target to another.\n\t */\n\tanimationDuration?: number;\n\n\t/**\n\t * Easing function for tooltip animation.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Easing_functions} for more info\n\t */\n\tanimationEasing?: (t: Time) => Time;\n\n\t/**\n\t * A target element tooltip is shown fow.\n\t */\n\ttooltipTarget?: Sprite;\n\n}\n\nexport interface ITooltipPrivate extends IContainerPrivate {\n}\n\n/**\n * Creates a tooltip.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/tooltips/} for more info\n * @important\n */\nexport class Tooltip extends Container {\n\n\tprotected _arrangeDisposer: MultiDisposer | undefined;\n\n\tpublic _fx: number = 0;\n\tpublic _fy: number = 0;\n\n\tdeclare public _settings: ITooltipSettings;\n\tdeclare public _privateSettings: ITooltipPrivate;\n\n\tprotected _label!: Label;\n\tpublic static className: string = \"Tooltip\";\n\tpublic static classNames: Array<string> = Container.classNames.concat([Tooltip.className]);\n\n\tprotected _fillDp: IDisposer | undefined;\n\tprotected _strokeDp: IDisposer | undefined;\n\tprotected _labelDp: IDisposer | undefined;\n\n\tprotected _w: number = 0;\n\tprotected _h: number = 0;\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"tooltip\"]);\n\n\t\tsuper._afterNew();\n\n\t\tthis.set(\"background\", PointedRectangle.new(this._root, {\n\t\t\tthemeTags: [\"tooltip\", \"background\"]\n\t\t}));\n\n\t\tthis._label = this.children.push(Label.new(this._root, {}));\n\n\t\tthis._disposers.push(this._label.events.on(\"boundschanged\", () => {\n\t\t\tthis._updateBackground();\n\t\t}))\n\n\t\tthis.on(\"bounds\", () => {\n\t\t\tthis._updateBackground();\n\t\t})\n\n\t\tthis._updateTextColor();\n\n\t\tthis._root.tooltipContainer.children.push(this);\n\t\tthis.hide(0);\n\n\t\tthis._root._tooltips.push(this);\n\t}\n\n\t/**\n\t * A [[Label]] element for the tooltip.\n\t *\n\t * @readonly\n\t * @return Label\n\t */\n\tpublic get label(): Label {\n\t\treturn this._label;\n\t}\n\n\t/**\n\t * Permanently disposes the tooltip.\n\t */\n\tpublic dispose() {\n\t\tsuper.dispose();\n\t\t$array.remove(this._root._tooltips, this);\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\t\tconst labelText = this.get(\"labelText\");\n\t\tif (labelText != null) {\n\t\t\tthis.label.set(\"text\", this.get(\"labelText\"));\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this.isDirty(\"pointTo\")) {\n\t\t\t// can't compare to previous, as sometimes pointTo is set twice (when pointer moves, so the position won't be udpated)\n\t\t\tthis._updateBackground();\n\t\t}\n\n\t\tif (this.isDirty(\"tooltipTarget\")) {\n\t\t\tthis.updateBackgroundColor();\n\t\t}\n\t}\n\n\tprotected _onShow() {\n\t\tsuper._onShow();\n\t\tthis.updateBackgroundColor();\n\t}\n\n\n\tpublic updateBackgroundColor() {\n\t\tlet tooltipTarget = this.get(\"tooltipTarget\");\n\t\tconst background = this.get(\"background\");\n\t\tlet fill: Color | undefined;\n\t\tlet stroke: Color | undefined;\n\n\n\t\tif (tooltipTarget && background) {\n\n\t\t\tfill = tooltipTarget.get(\"fill\" as any);\n\t\t\tstroke = tooltipTarget.get(\"stroke\" as any);\n\n\t\t\tif (fill == null) {\n\t\t\t\tfill = stroke;\n\t\t\t}\n\n\t\t\tif (this.get(\"getFillFromSprite\")) {\n\n\t\t\t\tif (this._fillDp) {\n\t\t\t\t\tthis._fillDp.dispose();\n\t\t\t\t}\n\n\t\t\t\tif (fill != null) {\n\t\t\t\t\tbackground.set(\"fill\", fill as any);\n\t\t\t\t}\n\n\t\t\t\tthis._fillDp = tooltipTarget.on(\"fill\" as any, (fill) => {\n\t\t\t\t\tif (fill != null) {\n\t\t\t\t\t\tbackground.set(\"fill\", fill as any);\n\t\t\t\t\t\tthis._updateTextColor(fill);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tif (this.get(\"getStrokeFromSprite\")) {\n\n\t\t\t\tif (this._strokeDp) {\n\t\t\t\t\tthis._strokeDp.dispose();\n\t\t\t\t}\n\n\t\t\t\tif (fill != null) {\n\t\t\t\t\tbackground.set(\"stroke\", fill as any);\n\t\t\t\t}\n\n\t\t\t\tthis._strokeDp = tooltipTarget.on(\"fill\" as any, (fill) => {\n\t\t\t\t\tif (fill != null) {\n\t\t\t\t\t\tbackground.set(\"stroke\", fill as any);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tif (this.get(\"getLabelFillFromSprite\")) {\n\n\t\t\t\tif (this._labelDp) {\n\t\t\t\t\tthis._labelDp.dispose();\n\t\t\t\t}\n\n\t\t\t\tif (fill != null) {\n\t\t\t\t\tthis.label.set(\"fill\", fill as any);\n\t\t\t\t}\n\n\t\t\t\tthis._labelDp = tooltipTarget.on(\"fill\" as any, (fill) => {\n\t\t\t\t\tif (fill != null) {\n\t\t\t\t\t\tthis.label.set(\"fill\", fill as any);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tthis._updateTextColor(fill);\n\t}\n\n\n\tprotected _updateTextColor(fill?: Color | Pattern) {\n\t\tif (this.get(\"autoTextColor\")) {\n\t\t\tif (fill == null) {\n\t\t\t\tfill = this.get(\"background\")!.get(\"fill\") as Color;\n\t\t\t}\n\n\t\t\tif (fill == null) {\n\t\t\t\tfill = this._root.interfaceColors.get(\"background\");\n\t\t\t}\n\n\t\t\tif (fill instanceof Color) {\n\t\t\t\tthis.label.set(\"fill\", Color.alternative(fill, this._root.interfaceColors.get(\"alternativeText\"), this._root.interfaceColors.get(\"text\")));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _setDataItem(dataItem?: DataItem<IComponentDataItem>): void {\n\t\tsuper._setDataItem(dataItem);\n\t\tthis.label._setDataItem(dataItem);\n\t}\t\n\n\n\tprotected _updateBackground() {\n\t\tsuper.updateBackground();\n\t\tconst parent = this._root.container;\n\n\t\tif (parent) {\n\n\t\t\tlet cw = 0.5;\n\t\t\tlet ch = 0.5;\n\n\t\t\tlet centerX = this.get(\"centerX\");\n\t\t\tif (centerX instanceof Percent) {\n\t\t\t\tcw = centerX.value;\n\t\t\t}\n\n\t\t\tlet centerY = this.get(\"centerY\");\n\t\t\tif (centerY instanceof Percent) {\n\t\t\t\tch = centerY.value;\n\t\t\t}\n\n\t\t\tlet parentW = parent.width();\n\t\t\tlet parentH = parent.height();\n\n\t\t\tconst bounds = this.get(\"bounds\", { left: 0, top: 0, right: parentW, bottom: parentH });\n\n\t\t\tthis._updateBounds();\n\n\t\t\tlet w = this.width();\n\t\t\tlet h = this.height();\n\n\t\t\t// use old w and h,as when tooltip is hidden, these are 0 and unneeded animation happens\n\t\t\tif (w === 0) {\n\t\t\t\tw = this._w;\n\t\t\t}\n\n\t\t\tif (h === 0) {\n\t\t\t\th = this._h;\n\t\t\t}\n\n\t\t\tlet pointTo = this.get(\"pointTo\", { x: parentW / 2, y: parentH / 2 });\n\t\t\tlet x = pointTo.x;\n\t\t\tlet y = pointTo.y;\n\n\t\t\tlet pointerOrientation = this.get(\"pointerOrientation\");\n\n\t\t\tlet background = this.get(\"background\");\n\t\t\tlet pointerLength = 0;\n\t\t\tif (background instanceof PointedRectangle) {\n\t\t\t\tpointerLength = background.get(\"pointerLength\", 0);\n\t\t\t}\n\n\t\t\tlet pointerX = 0;\n\t\t\tlet pointerY = 0;\n\n\t\t\tlet boundsW = bounds.right - bounds.left;\n\t\t\tlet boundsH = bounds.bottom - bounds.top;\n\n\t\t\t// horizontal\n\t\t\tif (pointerOrientation == \"horizontal\" || pointerOrientation == \"left\" || pointerOrientation == \"right\") {\n\t\t\t\tif (pointerOrientation == \"horizontal\") {\n\t\t\t\t\tif (x > bounds.left + boundsW / 2) {\n\t\t\t\t\t\tx -= (w * (1 - cw) + pointerLength);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tx += (w * cw + pointerLength);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (pointerOrientation == \"left\") {\n\t\t\t\t\tx += (w * (1 - cw) + pointerLength);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tx -= (w * cw + pointerLength);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// vertical pointer\n\t\t\telse {\n\t\t\t\tif (pointerOrientation == \"vertical\") {\n\t\t\t\t\tif (y > bounds.top + h / 2 + pointerLength) {\n\t\t\t\t\t\ty -= (h * (1 - ch) + pointerLength);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ty += (h * ch + pointerLength);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (pointerOrientation == \"down\") {\n\t\t\t\t\ty -= (h * (1 - ch) + pointerLength);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty += (h * ch + pointerLength);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tx = $math.fitToRange(x, bounds.left + w * cw, bounds.left + boundsW - w * (1 - cw));\n\t\t\ty = $math.fitToRange(y, bounds.top + h * ch, bounds.top + boundsH - h * (1 - ch));\n\n\t\t\tpointerX = pointTo.x - x + w * cw;\n\t\t\tpointerY = pointTo.y - y + h * ch;\n\n\t\t\tthis._fx = x;\n\t\t\tthis._fy = y;\n\n\t\t\tconst animationDuration = this.get(\"animationDuration\", 0);\n\n\t\t\tif (animationDuration > 0 && this.get(\"visible\") && this.get(\"opacity\") > 0.1) {\n\t\t\t\tconst animationEasing = this.get(\"animationEasing\");\n\t\t\t\tthis.animate({ key: \"x\", to: x, duration: animationDuration, easing: animationEasing });\n\t\t\t\tthis.animate({ key: \"y\", to: y, duration: animationDuration, easing: animationEasing });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.set(\"x\", x);\n\t\t\t\tthis.set(\"y\", y);\n\t\t\t}\n\n\t\t\tif (background instanceof PointedRectangle) {\n\t\t\t\tbackground.set(\"pointerX\", pointerX);\n\t\t\t\tbackground.set(\"pointerY\", pointerY);\n\t\t\t}\n\n\t\t\tif (w > 0) {\n\t\t\t\tthis._w = w;\n\t\t\t}\n\t\t\tif (h > 0) {\n\t\t\t\tthis._h = h;\n\t\t\t}\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}