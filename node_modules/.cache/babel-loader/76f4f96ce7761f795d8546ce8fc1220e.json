{"ast":null,"code":"import { __extends, __generator } from \"tslib\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param index  Index\r\n * @param len    Length\r\n * @ignore\r\n */\nfunction checkBounds(index, len) {\n  if (!(index >= 0 && index < len)) {\n    throw new Error(\"Index out of bounds: \" + index);\n  }\n}\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\nvar List = /** @class */function () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param initial  Inital list of values to add to list\r\n   */\n  function List(initial) {\n    if (initial === void 0) {\n      initial = [];\n    }\n    /**\r\n     * List values.\r\n     */\n    Object.defineProperty(this, \"_values\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new EventDispatcher()\n    });\n    this._values = initial;\n  }\n  Object.defineProperty(List.prototype, \"values\", {\n    /**\r\n     * An array of values in the list.\r\n     *\r\n     * Do not use this property to add values. Rather use dedicated methods, like\r\n     * `push()`, `removeIndex()`, etc.\r\n     *\r\n     * @readonly\r\n     * @return List values\r\n     */\n    get: function () {\n      return this._values;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Checks if list contains specific item reference.\r\n   *\r\n   * @param item  Item to search for\r\n   * @return `true` if found, `false` if not found\r\n   */\n  Object.defineProperty(List.prototype, \"contains\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      return this._values.indexOf(value) !== -1;\n    }\n  });\n  /**\r\n   * Removes specific item from the list.\r\n   *\r\n   * @param item An item to remove\r\n   */\n  Object.defineProperty(List.prototype, \"removeValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      var i = 0;\n      var length = this._values.length;\n      while (i < length) {\n        // TODO handle NaN\n        if (this._values[i] === value) {\n          this.removeIndex(i);\n          --length;\n        } else {\n          ++i;\n        }\n      }\n    }\n  });\n  /**\r\n   * Searches the list for specific item and returns its index.\r\n   *\r\n   * @param item  An item to search for\r\n   * @return Index or -1 if not found\r\n   */\n  Object.defineProperty(List.prototype, \"indexOf\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      return $array.indexOf(this._values, value);\n    }\n  });\n  Object.defineProperty(List.prototype, \"length\", {\n    /**\r\n     * Number of items in list.\r\n     *\r\n     * @readonly\r\n     * @return Number of items\r\n     */\n    get: function () {\n      return this._values.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Checks if there's a value at specific index.\r\n   *\r\n   * @param index  Index\r\n   * @return Value exists?\r\n   */\n  Object.defineProperty(List.prototype, \"hasIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      return index >= 0 && index < this._values.length;\n    }\n  });\n  /**\r\n   * Returns an item at specified index.\r\n   *\r\n   * @param index  Index\r\n   * @return List item\r\n   */\n  Object.defineProperty(List.prototype, \"getIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      return this._values[index];\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onPush\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (newValue) {\n      if (this.events.isEnabled(\"push\")) {\n        this.events.dispatch(\"push\", {\n          type: \"push\",\n          target: this,\n          newValue: newValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onInsertIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, newValue) {\n      if (this.events.isEnabled(\"insertIndex\")) {\n        this.events.dispatch(\"insertIndex\", {\n          type: \"insertIndex\",\n          target: this,\n          index: index,\n          newValue: newValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onSetIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue, newValue) {\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatch(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue,\n          newValue: newValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onRemoveIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue) {\n      if (this.events.isEnabled(\"removeIndex\")) {\n        this.events.dispatch(\"removeIndex\", {\n          type: \"removeIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onClear\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (oldValues) {\n      if (this.events.isEnabled(\"clear\")) {\n        this.events.dispatch(\"clear\", {\n          type: \"clear\",\n          target: this,\n          oldValues: oldValues\n        });\n      }\n    }\n  });\n  /**\r\n   * Sets value at specific index.\r\n   *\r\n   * If there's already a value at the index, it is overwritten.\r\n   *\r\n   * @param index  Index\r\n   * @param value  New value\r\n   * @return New value\r\n   */\n  Object.defineProperty(List.prototype, \"setIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, value) {\n      checkBounds(index, this._values.length);\n      var oldValue = this._values[index];\n      // Do nothing if the old value and the new value are the same\n      if (oldValue !== value) {\n        this._values[index] = value;\n        this._onSetIndex(index, oldValue, value);\n      }\n      return oldValue;\n    }\n  });\n  /**\r\n   * Adds an item to the list at a specific index, which pushes all the other\r\n   * items further down the list.\r\n   *\r\n   * @param index Index\r\n   * @param item  An item to add\r\n   */\n  Object.defineProperty(List.prototype, \"insertIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, value) {\n      checkBounds(index, this._values.length + 1);\n      $array.insertIndex(this._values, index, value);\n      this._onInsertIndex(index, value);\n      return value;\n    }\n  });\n  /**\r\n   * Swaps indexes of two items in the list.\r\n   *\r\n   * @param a  Item 1\r\n   * @param b  Item 2\r\n   */\n  Object.defineProperty(List.prototype, \"swap\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (a, b) {\n      var len = this._values.length;\n      checkBounds(a, len);\n      checkBounds(b, len);\n      if (a !== b) {\n        var value_a = this._values[a];\n        var value_b = this._values[b];\n        this._values[a] = value_b;\n        this._onSetIndex(a, value_a, value_b);\n        this._values[b] = value_a;\n        this._onSetIndex(b, value_b, value_a);\n      }\n    }\n  });\n  /**\r\n   * Removes a value at specific index.\r\n   *\r\n   * @param index  Index of value to remove\r\n   * @return Removed value\r\n   */\n  Object.defineProperty(List.prototype, \"removeIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      checkBounds(index, this._values.length);\n      var oldValue = this._values[index];\n      $array.removeIndex(this._values, index);\n      this._onRemoveIndex(index, oldValue);\n      return oldValue;\n    }\n  });\n  /**\r\n   * Moves an item to a specific index within the list.\r\n   *\r\n   * If the index is not specified it will move the item to the end of the\r\n   * list.\r\n   *\r\n   * @param value  Item to move\r\n   * @param index  Index to place item at\r\n   */\n  Object.defineProperty(List.prototype, \"moveValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, toIndex) {\n      // TODO don't do anything if the desired index is the same as the current index\n      var index = this.indexOf(value);\n      // TODO remove all old values rather than only the first ?\n      if (index !== -1) {\n        var oldValue = this._values[index];\n        $array.removeIndex(this._values, index);\n        this._onRemoveIndex(index, oldValue);\n      }\n      if (toIndex == null) {\n        this._values.push(value);\n        this._onPush(value);\n      } else {\n        $array.insertIndex(this._values, toIndex, value);\n        this._onInsertIndex(toIndex, value);\n      }\n      return value;\n    }\n  });\n  /**\r\n   * Adds an item to the end of the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n  Object.defineProperty(List.prototype, \"push\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      this._values.push(value);\n      this._onPush(value);\n      return value;\n    }\n  });\n  /**\r\n   * Adds an item as a first item in the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n  Object.defineProperty(List.prototype, \"unshift\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      this.insertIndex(0, value);\n      return value;\n    }\n  });\n  /**\r\n   * Adds multiple items to the list.\r\n   *\r\n   * @param items  An Array of items to add\r\n   */\n  Object.defineProperty(List.prototype, \"pushAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (values) {\n      var _this = this;\n      $array.each(values, function (value) {\n        _this.push(value);\n      });\n    }\n  });\n  /**\r\n   * Copies and adds items from abother list.\r\n   *\r\n   * @param source  A list top copy items from\r\n   */\n  Object.defineProperty(List.prototype, \"copyFrom\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (source) {\n      this.pushAll(source._values);\n    }\n  });\n  /**\r\n   * Returns the last item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n  Object.defineProperty(List.prototype, \"pop\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var index = this._values.length - 1;\n      return index < 0 ? undefined : this.removeIndex(this._values.length - 1);\n    }\n  });\n  /**\r\n   * Returns the first item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n  Object.defineProperty(List.prototype, \"shift\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._values.length ? this.removeIndex(0) : undefined;\n    }\n  });\n  /**\r\n   * Sets multiple items to the list.\r\n   *\r\n   * All current items are removed.\r\n   *\r\n   * @param newArray  New items\r\n   */\n  Object.defineProperty(List.prototype, \"setAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (newArray) {\n      var _this = this;\n      var old = this._values;\n      this._values = [];\n      this._onClear(old);\n      $array.each(newArray, function (value) {\n        _this._values.push(value);\n        _this._onPush(value);\n      });\n    }\n  });\n  /**\r\n   * Removes all items from the list.\r\n   */\n  Object.defineProperty(List.prototype, \"clear\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.setAll([]);\n    }\n  });\n  /**\r\n   * Returns an ES6 iterator for the list.\r\n   */\n  Object.defineProperty(List.prototype, Symbol.iterator, {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var length, i;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            length = this._values.length;\n            i = 0;\n            _a.label = 1;\n          case 1:\n            if (!(i < length)) return [3 /*break*/, 4];\n            return [4 /*yield*/, this._values[i]];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            ++i;\n            return [3 /*break*/, 1];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    }\n  });\n  /**\r\n   * Calls `f` for each element in the list.\r\n   *\r\n   * `f` should have at least one parameter defined which will get a current\r\n   * item, with optional second argument - index.\r\n   */\n  Object.defineProperty(List.prototype, \"each\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (f) {\n      $array.each(this._values, f);\n    }\n  });\n  return List;\n}();\nexport { List };\n/**\r\n * A version of a [[List]] where the elements are disposed automatically when\r\n * removed from the list, unless `autoDispose` is set to `false`.\r\n */\nvar ListAutoDispose = /** @class */function (_super) {\n  __extends(ListAutoDispose, _super);\n  function ListAutoDispose() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Automatically disposes elements that are removed from the list.\r\n     *\r\n     * @default true\r\n     */\n    Object.defineProperty(_this, \"autoDispose\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(_this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    return _this;\n  }\n  Object.defineProperty(ListAutoDispose.prototype, \"_onSetIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue, newValue) {\n      if (this.autoDispose) {\n        oldValue.dispose();\n      }\n      _super.prototype._onSetIndex.call(this, index, oldValue, newValue);\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"_onRemoveIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue) {\n      if (this.autoDispose) {\n        oldValue.dispose();\n      }\n      _super.prototype._onRemoveIndex.call(this, index, oldValue);\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"_onClear\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (oldValues) {\n      if (this.autoDispose) {\n        $array.each(oldValues, function (x) {\n          x.dispose();\n        });\n      }\n      _super.prototype._onClear.call(this, oldValues);\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._disposed;\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._disposed) {\n        this._disposed = true;\n        if (this.autoDispose) {\n          $array.each(this._values, function (x) {\n            x.dispose();\n          });\n        }\n      }\n    }\n  });\n  return ListAutoDispose;\n}(List);\nexport { ListAutoDispose };\n/**\r\n * A version of a [[List]] that is able to create new elements as well as\r\n * apply additional settings to newly created items.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/list-templates/} for more info\r\n */\nvar ListTemplate = /** @class */function (_super) {\n  __extends(ListTemplate, _super);\n  function ListTemplate(template, make) {\n    var _this = _super.call(this) || this;\n    Object.defineProperty(_this, \"template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"make\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    _this.template = template;\n    _this.make = make;\n    return _this;\n  }\n  return ListTemplate;\n}(ListAutoDispose);\nexport { ListTemplate };","map":{"version":3,"names":["EventDispatcher","$array","checkBounds","index","len","Error","List","initial","Object","defineProperty","_values","prototype","get","value","indexOf","i","length","removeIndex","newValue","events","isEnabled","dispatch","type","target","oldValue","oldValues","_onSetIndex","insertIndex","_onInsertIndex","a","b","value_a","value_b","_onRemoveIndex","toIndex","push","_onPush","values","_this","each","source","pushAll","undefined","newArray","old","_onClear","setAll","Symbol","iterator","_a","sent","f","ListAutoDispose","_super","__extends","apply","arguments","autoDispose","dispose","call","x","_disposed","ListTemplate","template","make"],"sources":["../../../../../src/.internal/core/util/List.ts"],"sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport type { Entity } from \"./Entity\";\nimport type { Template } from \"./Template\";\nimport type { IDisposer } from \"./Disposer\";\nimport { EventDispatcher, Events } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\nimport type { Optional } from \"./Type\";\n\n\n/**\n * Checks if specific index fits into length.\n *\n * @param index  Index\n * @param len    Length\n * @ignore\n */\nfunction checkBounds(index: number, len: number): void {\n\tif (!(index >= 0 && index < len)) {\n\t\tthrow new Error(\"Index out of bounds: \" + index);\n\t}\n}\n\n\nexport interface IListEvents<A> {\n\tclear: {\n\t\toldValues: Array<A>,\n\t};\n\tpush: {\n\t\tnewValue: A,\n\t};\n\tinsertIndex: {\n\t\tindex: number,\n\t\tnewValue: A,\n\t};\n\tsetIndex: {\n\t\tindex: number,\n\t\toldValue: A,\n\t\tnewValue: A,\n\t};\n\tremoveIndex: {\n\t\tindex: number,\n\t\toldValue: A,\n\t};\n}\n\n\n/**\n * A List class is used to hold a number of indexed items of the same type.\n */\nexport class List<T> {\n\n\t/**\n\t * List values.\n\t */\n\tprotected _values: Array<T>;\n\n\tpublic events = new EventDispatcher<Events<this, IListEvents<T>>>();\n\n\t/**\n\t * Constructor\n\t *\n\t * @param initial  Inital list of values to add to list\n\t */\n\tconstructor(initial: Array<T> = []) {\n\t\tthis._values = initial;\n\t}\n\n\t/**\n\t * An array of values in the list.\n\t *\n\t * Do not use this property to add values. Rather use dedicated methods, like\n\t * `push()`, `removeIndex()`, etc.\n\t *\n\t * @readonly\n\t * @return List values\n\t */\n\tpublic get values(): Array<T> {\n\t\treturn this._values;\n\t}\n\n\t/**\n\t * Checks if list contains specific item reference.\n\t *\n\t * @param item  Item to search for\n\t * @return `true` if found, `false` if not found\n\t */\n\tpublic contains(value: T): boolean {\n\t\treturn this._values.indexOf(value) !== -1;\n\t}\n\n\t/**\n\t * Removes specific item from the list.\n\t *\n\t * @param item An item to remove\n\t */\n\tpublic removeValue(value: T): void {\n\t\tlet i = 0;\n\t\tlet length = this._values.length;\n\n\t\twhile (i < length) {\n\t\t\t// TODO handle NaN\n\t\t\tif (this._values[i] === value) {\n\t\t\t\tthis.removeIndex(i);\n\t\t\t\t--length;\n\n\t\t\t} else {\n\t\t\t\t++i;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Searches the list for specific item and returns its index.\n\t *\n\t * @param item  An item to search for\n\t * @return Index or -1 if not found\n\t */\n\tpublic indexOf(value: T): number {\n\t\treturn $array.indexOf(this._values, value);\n\t}\n\n\t/**\n\t * Number of items in list.\n\t *\n\t * @readonly\n\t * @return Number of items\n\t */\n\tpublic get length(): number {\n\t\treturn this._values.length;\n\t}\n\n\t/**\n\t * Checks if there's a value at specific index.\n\t *\n\t * @param index  Index\n\t * @return Value exists?\n\t */\n\tpublic hasIndex(index: number): boolean {\n\t\treturn index >= 0 && index < this._values.length;\n\t}\n\n\t/**\n\t * Returns an item at specified index.\n\t *\n\t * @param index  Index\n\t * @return List item\n\t */\n\tpublic getIndex(index: number): T | undefined {\n\t\treturn this._values[index];\n\t}\n\n\tprotected _onPush(newValue: T) {\n\t\tif (this.events.isEnabled(\"push\")) {\n\t\t\tthis.events.dispatch(\"push\", {\n\t\t\t\ttype: \"push\",\n\t\t\t\ttarget: this,\n\t\t\t\tnewValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onInsertIndex(index: number, newValue: T) {\n\t\tif (this.events.isEnabled(\"insertIndex\")) {\n\t\t\tthis.events.dispatch(\"insertIndex\", {\n\t\t\t\ttype: \"insertIndex\",\n\t\t\t\ttarget: this,\n\t\t\t\tindex,\n\t\t\t\tnewValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onSetIndex(index: number, oldValue: T, newValue: T) {\n\t\tif (this.events.isEnabled(\"setIndex\")) {\n\t\t\tthis.events.dispatch(\"setIndex\", {\n\t\t\t\ttype: \"setIndex\",\n\t\t\t\ttarget: this,\n\t\t\t\tindex,\n\t\t\t\toldValue,\n\t\t\t\tnewValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onRemoveIndex(index: number, oldValue: T) {\n\t\tif (this.events.isEnabled(\"removeIndex\")) {\n\t\t\tthis.events.dispatch(\"removeIndex\", {\n\t\t\t\ttype: \"removeIndex\",\n\t\t\t\ttarget: this,\n\t\t\t\tindex,\n\t\t\t\toldValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onClear(oldValues: Array<T>) {\n\t\tif (this.events.isEnabled(\"clear\")) {\n\t\t\tthis.events.dispatch(\"clear\", {\n\t\t\t\ttype: \"clear\",\n\t\t\t\ttarget: this,\n\t\t\t\toldValues\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Sets value at specific index.\n\t *\n\t * If there's already a value at the index, it is overwritten.\n\t *\n\t * @param index  Index\n\t * @param value  New value\n\t * @return New value\n\t */\n\tpublic setIndex(index: number, value: T): T {\n\t\tcheckBounds(index, this._values.length);\n\n\t\tconst oldValue = this._values[index];\n\n\t\t// Do nothing if the old value and the new value are the same\n\t\tif (oldValue !== value) {\n\t\t\tthis._values[index] = value;\n\t\t\tthis._onSetIndex(index, oldValue, value);\n\t\t}\n\n\t\treturn oldValue;\n\t}\n\n\t/**\n\t * Adds an item to the list at a specific index, which pushes all the other\n\t * items further down the list.\n\t *\n\t * @param index Index\n\t * @param item  An item to add\n\t */\n\tpublic insertIndex<K extends T>(index: number, value: K): K {\n\t\tcheckBounds(index, this._values.length + 1);\n\n\t\t$array.insertIndex(this._values, index, value);\n\t\tthis._onInsertIndex(index, value);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Swaps indexes of two items in the list.\n\t *\n\t * @param a  Item 1\n\t * @param b  Item 2\n\t */\n\tpublic swap(a: number, b: number): void {\n\t\tconst len = this._values.length;\n\n\t\tcheckBounds(a, len);\n\t\tcheckBounds(b, len);\n\n\t\tif (a !== b) {\n\t\t\tconst value_a = this._values[a];\n\t\t\tconst value_b = this._values[b];\n\n\t\t\tthis._values[a] = value_b;\n\t\t\tthis._onSetIndex(a, value_a, value_b);\n\n\t\t\tthis._values[b] = value_a;\n\t\t\tthis._onSetIndex(b, value_b, value_a);\n\t\t}\n\t}\n\n\t/**\n\t * Removes a value at specific index.\n\t *\n\t * @param index  Index of value to remove\n\t * @return Removed value\n\t */\n\tpublic removeIndex(index: number): T {\n\t\tcheckBounds(index, this._values.length);\n\n\t\tconst oldValue = this._values[index];\n\n\t\t$array.removeIndex(this._values, index);\n\t\tthis._onRemoveIndex(index, oldValue);\n\n\t\treturn oldValue;\n\t}\n\n\t/**\n\t * Moves an item to a specific index within the list.\n\t *\n\t * If the index is not specified it will move the item to the end of the\n\t * list.\n\t *\n\t * @param value  Item to move\n\t * @param index  Index to place item at\n\t */\n\tpublic moveValue<K extends T>(value: K, toIndex?: number): K {\n\t\t// TODO don't do anything if the desired index is the same as the current index\n\t\tlet index = this.indexOf(value);\n\n\t\t// TODO remove all old values rather than only the first ?\n\t\tif (index !== -1) {\n\t\t\tconst oldValue = this._values[index];\n\n\t\t\t$array.removeIndex(this._values, index);\n\t\t\tthis._onRemoveIndex(index, oldValue);\n\t\t}\n\n\t\tif (toIndex == null) {\n\t\t\tthis._values.push(value);\n\t\t\tthis._onPush(value);\n\n\t\t} else {\n\t\t\t$array.insertIndex(this._values, toIndex, value);\n\t\t\tthis._onInsertIndex(toIndex, value);\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Adds an item to the end of the list.\n\t *\n\t * @param item  An item to add\n\t */\n\tpublic push<K extends T>(value: K): K {\n\t\tthis._values.push(value);\n\t\tthis._onPush(value);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Adds an item as a first item in the list.\n\t *\n\t * @param item  An item to add\n\t */\n\tpublic unshift<K extends T>(value: K): K {\n\t\tthis.insertIndex(0, value);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Adds multiple items to the list.\n\t *\n\t * @param items  An Array of items to add\n\t */\n\tpublic pushAll(values: Array<T>): void {\n\t\t$array.each(values, (value) => {\n\t\t\tthis.push(value);\n\t\t});\n\t}\n\n\t/**\n\t * Copies and adds items from abother list.\n\t *\n\t * @param source  A list top copy items from\n\t */\n\tpublic copyFrom(source: this): void {\n\t\tthis.pushAll(source._values);\n\t}\n\n\t/**\n\t * Returns the last item from the list, and removes it.\n\t *\n\t * @return Item\n\t */\n\tpublic pop(): Optional<T> {\n\t\tlet index = this._values.length - 1;\n\t\treturn index < 0 ? undefined : this.removeIndex(this._values.length - 1);\n\t}\n\n\t/**\n\t * Returns the first item from the list, and removes it.\n\t *\n\t * @return Item\n\t */\n\tpublic shift(): Optional<T> {\n\t\treturn this._values.length ? this.removeIndex(0) : undefined;\n\t}\n\n\t/**\n\t * Sets multiple items to the list.\n\t *\n\t * All current items are removed.\n\t *\n\t * @param newArray  New items\n\t */\n\tpublic setAll(newArray: Array<T>): void {\n\t\tconst old = this._values;\n\t\tthis._values = [];\n\t\tthis._onClear(old);\n\n\t\t$array.each(newArray, (value) => {\n\t\t\tthis._values.push(value);\n\t\t\tthis._onPush(value);\n\t\t});\n\t}\n\n\t/**\n\t * Removes all items from the list.\n\t */\n\tpublic clear(): void {\n\t\tthis.setAll([]);\n\t}\n\n\t/**\n\t * Returns an ES6 iterator for the list.\n\t */\n\tpublic *[Symbol.iterator](): Iterator<T> {\n\t\tconst length = this._values.length;\n\n\t\tfor (let i = 0; i < length; ++i) {\n\t\t\tyield this._values[i];\n\t\t}\n\t}\n\n\t/**\n\t * Calls `f` for each element in the list.\n\t *\n\t * `f` should have at least one parameter defined which will get a current\n\t * item, with optional second argument - index.\n\t */\n\tpublic each(f: (value: T, index: number) => void): void {\n\t\t$array.each(this._values, f);\n\t}\n}\n\n\n/**\n * A version of a [[List]] where the elements are disposed automatically when\n * removed from the list, unless `autoDispose` is set to `false`.\n */\nexport class ListAutoDispose<A extends IDisposer> extends List<A> implements IDisposer {\n\t/**\n\t * Automatically disposes elements that are removed from the list.\n\t *\n\t * @default true\n\t */\n\tpublic autoDispose: boolean = true;\n\n\tprivate _disposed: boolean = false;\n\n\tprotected _onSetIndex(index: number, oldValue: A, newValue: A) {\n\t\tif (this.autoDispose) {\n\t\t\toldValue.dispose();\n\t\t}\n\n\t\tsuper._onSetIndex(index, oldValue, newValue);\n\t}\n\n\tprotected _onRemoveIndex(index: number, oldValue: A) {\n\t\tif (this.autoDispose) {\n\t\t\toldValue.dispose();\n\t\t}\n\n\t\tsuper._onRemoveIndex(index, oldValue);\n\t}\n\n\tprotected _onClear(oldValues: Array<A>) {\n\t\tif (this.autoDispose) {\n\t\t\t$array.each(oldValues, (x) => {\n\t\t\t\tx.dispose();\n\t\t\t});\n\t\t}\n\n\t\tsuper._onClear(oldValues);\n\t}\n\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\tpublic dispose(): void {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\n\t\t\tif (this.autoDispose) {\n\t\t\t\t$array.each(this._values, (x) => {\n\t\t\t\t\tx.dispose();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * A version of a [[List]] that is able to create new elements as well as\n * apply additional settings to newly created items.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/list-templates/} for more info\n */\nexport class ListTemplate<A extends Entity> extends ListAutoDispose<A> {\n\tpublic template: Template<A>;\n\tpublic make: () => A;\n\n\tconstructor(template: Template<A>, make: () => A) {\n\t\tsuper();\n\t\tthis.template = template;\n\t\tthis.make = make;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}