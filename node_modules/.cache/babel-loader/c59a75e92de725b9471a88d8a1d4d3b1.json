{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Entity } from \"./Entity\";\nimport { Color } from \"./Color\";\nimport * as $type from \"./Type\";\nimport * as $object from \"./Object\";\nimport * as $array from \"./Array\";\n/**\r\n * A tool that can process the data before it is being used in charts.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Pre_processing_data} for more info\r\n * @important\r\n */\n\nvar DataProcessor =\n/** @class */\nfunction (_super) {\n  __extends(DataProcessor, _super);\n\n  function DataProcessor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_checkDates\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_checkNumbers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_checkColors\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_checkEmpty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_checkDeep\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    return _this;\n  }\n\n  Object.defineProperty(DataProcessor.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._afterNew.call(this);\n\n      this._checkFeatures();\n\n      this.on(\"dateFields\", function () {\n        return _this._checkFeatures();\n      });\n      this.on(\"dateFormat\", function () {\n        return _this._checkFeatures();\n      });\n      this.on(\"numericFields\", function () {\n        return _this._checkFeatures();\n      });\n      this.on(\"colorFields\", function () {\n        return _this._checkFeatures();\n      });\n      this.on(\"emptyAs\", function () {\n        return _this._checkFeatures();\n      });\n    }\n  });\n  Object.defineProperty(DataProcessor.prototype, \"_checkFeatures\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.isDirty(\"dateFields\") || this.isDirty(\"dateFormat\")) {\n        this._checkDates = this.get(\"dateFields\") && this.get(\"dateFields\").length > 0;\n      }\n\n      if (this.isDirty(\"numericFields\")) {\n        this._checkNumbers = this.get(\"numericFields\") && this.get(\"numericFields\").length > 0;\n      }\n\n      if (this.isDirty(\"colorFields\")) {\n        this._checkColors = this.get(\"colorFields\") && this.get(\"colorFields\").length > 0;\n      }\n\n      if (this.isDirty(\"emptyAs\")) {\n        this._checkEmpty = this.get(\"emptyAs\") != null;\n      }\n\n      this._checkDeepFeatures();\n    }\n  });\n  Object.defineProperty(DataProcessor.prototype, \"_checkDeepFeatures\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var deepFields = [];\n      $array.each([\"dateFields\", \"numericFields\", \"colorFields\"], function (where) {\n        $array.each(_this.get(where, []), function (field) {\n          var steps = field.split(\".\");\n          steps.pop();\n\n          while (steps.length > 0) {\n            deepFields.push(steps.join(\".\"));\n            steps.pop();\n          }\n        });\n      });\n      this._checkDeep = deepFields.length > 0;\n      this.setPrivate(\"deepFields\", deepFields);\n    }\n  });\n  /**\r\n   * Processess entire array of data.\r\n   *\r\n   * NOTE: calling this will modify original array!\r\n   */\n\n  Object.defineProperty(DataProcessor.prototype, \"processMany\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (data) {\n      var _this = this;\n\n      if ($type.isArray(data) && (this._checkDates || this._checkNumbers || this._checkColors || this._checkEmpty)) {\n        $array.each(data, function (row) {\n          _this.processRow(row);\n        });\n      }\n    }\n  });\n  /**\r\n   * Processes a row (object) of data.\r\n   *\r\n   * NOTE: calling this will modify values of the original object!\r\n   */\n\n  Object.defineProperty(DataProcessor.prototype, \"processRow\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (row, prefix) {\n      var _this = this;\n\n      if (prefix === void 0) {\n        prefix = \"\";\n      }\n\n      $object.each(row, function (key, _value) {\n        var lookupKey = prefix + key;\n\n        if (_this._checkEmpty) {\n          row[key] = _this._maybeToEmpty(row[key]);\n        }\n\n        if (_this._checkNumbers) {\n          row[key] = _this._maybeToNumber(lookupKey, row[key]);\n        }\n\n        if (_this._checkDates) {\n          row[key] = _this._maybeToDate(lookupKey, row[key]);\n        }\n\n        if (_this._checkColors) {\n          row[key] = _this._maybeToColor(lookupKey, row[key]);\n        }\n\n        if (_this._checkDeep && _this.getPrivate(\"deepFields\", []).indexOf(lookupKey) !== -1 && $type.isObject(row[key])) {\n          _this.processRow(row[key], lookupKey + \".\");\n        }\n      });\n    }\n  });\n  Object.defineProperty(DataProcessor.prototype, \"_maybeToNumber\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (field, value) {\n      if (this.get(\"numericFields\").indexOf(field) !== -1) {\n        return $type.toNumber(value);\n      }\n\n      return value;\n    }\n  });\n  Object.defineProperty(DataProcessor.prototype, \"_maybeToDate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (field, value) {\n      if (this.get(\"dateFields\").indexOf(field) !== -1) {\n        return this._root.dateFormatter.parse(value, this.get(\"dateFormat\", \"\")).getTime();\n      }\n\n      return value;\n    }\n  });\n  Object.defineProperty(DataProcessor.prototype, \"_maybeToEmpty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      if ((value == null || value == \"\") && this.get(\"emptyAs\") != null) {\n        return this.get(\"emptyAs\");\n      }\n\n      return value;\n    }\n  });\n  Object.defineProperty(DataProcessor.prototype, \"_maybeToColor\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (field, value) {\n      if (this.get(\"colorFields\").indexOf(field) !== -1) {\n        return Color.fromAny(value);\n      }\n\n      return value;\n    }\n  });\n  return DataProcessor;\n}(Entity);\n\nexport { DataProcessor };","map":{"version":3,"sources":["../../../../../src/.internal/core/util/DataProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Entity, IEntitySettings, IEntityPrivate, IEntityEvents } from \"./Entity\"\nimport { Color } from \"./Color\"\nimport * as $type from \"./Type\"\nimport * as $object from \"./Object\"\nimport * as $array from \"./Array\"\n\n\nexport interface IDataProcessorSettings extends IEntitySettings {\n\n\t/**\n\t * Date format used for parsing string-based dates.\n\t */\n\tdateFormat?: string;\n\n\t/**\n\t * A list of fields in data that need to be converted to tiemstamps.\n\t */\n\tdateFields?: string[];\n\n\t/**\n\t * A list of fields in data that need to be converted to numbers.\n\t */\n\tnumericFields?: string[];\n\n\t/**\n\t * A list of fields in data that need to be converted to [[Color]] objects.\n\t */\n\tcolorFields?: string[];\n\n\t/**\n\t * Replace empty values with this.\n\t */\n\temptyAs?: any;\n\n}\n\nexport interface IDataProcessorPrivate extends IEntityPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tdeepFields?: string[];\n}\n\nexport interface IDataProcessorEvents extends IEntityEvents {\n}\n\n/**\n * A tool that can process the data before it is being used in charts.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Pre_processing_data} for more info\n * @important\n */\nexport class DataProcessor extends Entity {\n\tdeclare public _settings: IDataProcessorSettings;\n\tdeclare public _privateSettings: IDataProcessorPrivate;\n\n\tprotected _checkDates: boolean = false;\n\tprotected _checkNumbers: boolean = false;\n\tprotected _checkColors: boolean = false;\n\tprotected _checkEmpty: boolean = false;\n\tprotected _checkDeep: boolean = false;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis._checkFeatures();\n\t\tthis.on(\"dateFields\", () => this._checkFeatures());\n\t\tthis.on(\"dateFormat\", () => this._checkFeatures());\n\t\tthis.on(\"numericFields\", () => this._checkFeatures());\n\t\tthis.on(\"colorFields\", () => this._checkFeatures());\n\t\tthis.on(\"emptyAs\", () => this._checkFeatures());\n\t}\n\n\tprotected _checkFeatures(): void {\n\t\tif (this.isDirty(\"dateFields\") || this.isDirty(\"dateFormat\")) {\n\t\t\tthis._checkDates = this.get(\"dateFields\") && (this.get(\"dateFields\")!.length > 0);\n\t\t}\n\t\tif (this.isDirty(\"numericFields\")) {\n\t\t\tthis._checkNumbers = this.get(\"numericFields\") && (this.get(\"numericFields\")!.length > 0);\n\t\t}\n\t\tif (this.isDirty(\"colorFields\")) {\n\t\t\tthis._checkColors = this.get(\"colorFields\") && (this.get(\"colorFields\")!.length > 0);\n\t\t}\n\t\tif (this.isDirty(\"emptyAs\")) {\n\t\t\tthis._checkEmpty = this.get(\"emptyAs\") != null;\n\t\t}\n\t\tthis._checkDeepFeatures();\n\t}\n\n\tprotected _checkDeepFeatures(): void {\n\t\tconst deepFields: string[] = [];\n\t\t$array.each([\"dateFields\", \"numericFields\", \"colorFields\"], (where: any) => {\n\t\t\t$array.each(this.get(where, []), (field) => {\n\t\t\t\tconst steps = (<string>field).split(\".\");\n\t\t\t\tsteps.pop();\n\t\t\t\twhile (steps.length > 0) {\n\t\t\t\t\tdeepFields.push(steps.join(\".\"));\n\t\t\t\t\tsteps.pop();\n\t\t\t\t}\n\t\t\t});\n\t\t})\n\t\tthis._checkDeep = deepFields.length > 0;\n\t\tthis.setPrivate(\"deepFields\", deepFields);\n\t}\n\n\t/**\n\t * Processess entire array of data.\n\t *\n\t * NOTE: calling this will modify original array!\n\t */\n\tpublic processMany(data: { [index: string]: any }[]): void {\n\t\tif ($type.isArray(data) && (this._checkDates || this._checkNumbers || this._checkColors || this._checkEmpty)) {\n\t\t\t$array.each(data, (row) => {\n\t\t\t\tthis.processRow(row);\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * Processes a row (object) of data.\n\t * \n\t * NOTE: calling this will modify values of the original object!\n\t */\n\tpublic processRow(row: { [index: string]: any }, prefix: string = \"\"): void {\n\t\t$object.each(row, (key: any, _value) => {\n\t\t\tconst lookupKey: string = prefix + key;\n\t\t\tif (this._checkEmpty) {\n\t\t\t\trow[key] = this._maybeToEmpty(row[key]);\n\t\t\t}\n\t\t\tif (this._checkNumbers) {\n\t\t\t\trow[key] = this._maybeToNumber(lookupKey, row[key]);\n\t\t\t}\n\t\t\tif (this._checkDates) {\n\t\t\t\trow[key] = this._maybeToDate(lookupKey, row[key]);\n\t\t\t}\n\t\t\tif (this._checkColors) {\n\t\t\t\trow[key] = this._maybeToColor(lookupKey, row[key]);\n\t\t\t}\n\t\t\tif (this._checkDeep && (<any>this).getPrivate(\"deepFields\", []).indexOf(lookupKey) !== -1 && $type.isObject(row[key])) {\n\t\t\t\tthis.processRow(row[key], lookupKey + \".\");\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _maybeToNumber(field: string, value: any): any {\n\t\tif (this.get(\"numericFields\")!.indexOf(field) !== -1) {\n\t\t\treturn $type.toNumber(value);\n\t\t}\n\t\treturn value;\n\t}\n\n\tprotected _maybeToDate(field: string, value: any): any {\n\t\tif (this.get(\"dateFields\")!.indexOf(field) !== -1) {\n\t\t\treturn this._root.dateFormatter.parse(value, this.get(\"dateFormat\", \"\")).getTime();\n\t\t}\n\t\treturn value;\n\t}\n\n\tprotected _maybeToEmpty(value: any): any {\n\t\tif ((value == null || value == \"\") && this.get(\"emptyAs\") != null) {\n\t\t\treturn this.get(\"emptyAs\");\n\t\t}\n\t\treturn value;\n\t}\n\n\tprotected _maybeToColor(field: string, value: any): any {\n\t\tif (this.get(\"colorFields\")!.indexOf(field) !== -1) {\n\t\t\treturn Color.fromAny(value);\n\t\t}\n\t\treturn value;\n\t}\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}