{"ast":null,"code":"import { EventDispatcher } from \"./EventDispatcher\";\nimport { Disposer, MultiDisposer } from \"./Disposer\";\nimport * as $array from \"./Array\";\nimport * as $object from \"./Object\";\n\nvar TemplateState =\n/** @class */\nfunction () {\n  function TemplateState(name, template, settings) {\n    Object.defineProperty(this, \"_settings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._name = name;\n    this._template = template;\n    this._settings = settings;\n  }\n\n  Object.defineProperty(TemplateState.prototype, \"get\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, fallback) {\n      var value = this._settings[key];\n\n      if (value !== undefined) {\n        return value;\n      } else {\n        return fallback;\n      }\n    }\n  });\n  Object.defineProperty(TemplateState.prototype, \"set\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._settings[key] = value; // TODO maybe only do this if the value changed ?\n\n      this._template._stateChanged(this._name);\n    }\n  });\n  Object.defineProperty(TemplateState.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      delete this._settings[key]; // TODO maybe only do this if the value changed ?\n\n      this._template._stateChanged(this._name);\n    }\n  });\n  Object.defineProperty(TemplateState.prototype, \"setAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (settings) {\n      var _this = this;\n\n      $object.keys(settings).forEach(function (key) {\n        _this._settings[key] = settings[key];\n      });\n\n      this._template._stateChanged(this._name);\n    }\n  });\n  Object.defineProperty(TemplateState.prototype, \"_apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (other, seen) {\n      $object.each(this._settings, function (key, value) {\n        if (!seen[key] && !other._userSettings[key]) {\n          seen[key] = true;\n          other.setRaw(key, value);\n        }\n      });\n    }\n  });\n  return TemplateState;\n}();\n\nexport { TemplateState };\n\nvar TemplateStates =\n/** @class */\nfunction () {\n  function TemplateStates(template) {\n    Object.defineProperty(this, \"_template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_states\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._template = template;\n  }\n\n  Object.defineProperty(TemplateStates.prototype, \"lookup\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name) {\n      return this._states[name];\n    }\n  });\n  Object.defineProperty(TemplateStates.prototype, \"create\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name, settings) {\n      var state = this._states[name];\n\n      if (state) {\n        state.setAll(settings);\n        return state;\n      } else {\n        var state_1 = new TemplateState(name, this._template, settings);\n        this._states[name] = state_1;\n\n        this._template._stateChanged(name);\n\n        return state_1;\n      }\n    }\n  });\n  Object.defineProperty(TemplateStates.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name) {\n      delete this._states[name];\n\n      this._template._stateChanged(name);\n    }\n  });\n  Object.defineProperty(TemplateStates.prototype, \"_apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (entity, state) {\n      $object.each(this._states, function (key, value) {\n        var seen = state.states[key];\n\n        if (seen == null) {\n          seen = state.states[key] = {};\n        }\n\n        var other = entity.states.create(key, {});\n\n        value._apply(other, seen);\n      });\n    }\n  });\n  return TemplateStates;\n}();\n\nexport { TemplateStates };\n\nvar TemplateAdapters =\n/** @class */\nfunction () {\n  function TemplateAdapters() {\n    Object.defineProperty(this, \"_callbacks\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n  }\n\n  Object.defineProperty(TemplateAdapters.prototype, \"add\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, callback) {\n      var callbacks = this._callbacks[key];\n\n      if (callbacks === undefined) {\n        callbacks = this._callbacks[key] = [];\n      }\n\n      callbacks.push(callback);\n    }\n  });\n  Object.defineProperty(TemplateAdapters.prototype, \"_apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (entity) {\n      var disposers = [];\n      $object.each(this._callbacks, function (key, callbacks) {\n        $array.each(callbacks, function (callback) {\n          disposers.push(entity.adapters.add(key, callback));\n        });\n      });\n      return new MultiDisposer(disposers);\n    }\n  });\n  return TemplateAdapters;\n}();\n\nexport { TemplateAdapters }; // TODO maybe extend from Properties ?\n\nvar Template =\n/** @class */\nfunction () {\n  function Template(settings, isReal) {\n    Object.defineProperty(this, \"_settings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_privateSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    }); // TODO code duplication with Properties\n\n    Object.defineProperty(this, \"_settingEvents\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_privateSettingEvents\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_entities\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"states\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new TemplateStates(this)\n    });\n    Object.defineProperty(this, \"adapters\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new TemplateAdapters()\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new EventDispatcher()\n    });\n    Object.defineProperty(this, \"setup\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n\n    if (!isReal) {\n      throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n    }\n\n    this._settings = settings;\n  }\n  /**\r\n   * Use this method to create an instance of this class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @param   root      Root element\r\n   * @param   settings  Settings\r\n   * @param   template  Template\r\n   * @return            Instantiated object\r\n   */\n\n\n  Object.defineProperty(Template, \"new\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (settings) {\n      return new Template(settings, true);\n    }\n  });\n  Object.defineProperty(Template.prototype, \"get\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, fallback) {\n      var value = this._settings[key];\n\n      if (value !== undefined) {\n        return value;\n      } else {\n        return fallback;\n      }\n    }\n  });\n  Object.defineProperty(Template.prototype, \"setRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._settings[key] = value;\n    }\n  });\n  Object.defineProperty(Template.prototype, \"set\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      var _this = this;\n\n      if (this._settings[key] !== value) {\n        this.setRaw(key, value);\n\n        this._entities.forEach(function (entity) {\n          entity._setTemplateProperty(_this, key, value);\n        });\n      }\n    }\n  });\n  Object.defineProperty(Template.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      if (key in this._settings) {\n        delete this._settings[key];\n\n        this._entities.forEach(function (entity) {\n          entity._removeTemplateProperty(key);\n        });\n      }\n    }\n  });\n  Object.defineProperty(Template.prototype, \"removeAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      $object.each(this._settings, function (key, _value) {\n        _this.remove(key);\n      });\n    }\n  });\n  Object.defineProperty(Template.prototype, \"getPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, fallback) {\n      var value = this._privateSettings[key];\n\n      if (value !== undefined) {\n        return value;\n      } else {\n        return fallback;\n      }\n    }\n  });\n  Object.defineProperty(Template.prototype, \"setPrivateRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._privateSettings[key] = value;\n      return value;\n    }\n  });\n  Object.defineProperty(Template.prototype, \"setPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      var _this = this;\n\n      if (this._privateSettings[key] !== value) {\n        this.setPrivateRaw(key, value);\n\n        this._entities.forEach(function (entity) {\n          entity._setTemplatePrivateProperty(_this, key, value);\n        });\n      }\n\n      return value;\n    }\n  });\n  Object.defineProperty(Template.prototype, \"removePrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      if (key in this._privateSettings) {\n        delete this._privateSettings[key];\n\n        this._entities.forEach(function (entity) {\n          entity._removeTemplatePrivateProperty(key);\n        });\n      }\n    }\n  });\n  Object.defineProperty(Template.prototype, \"setAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      var _this = this;\n\n      $object.each(value, function (key, value) {\n        _this.set(key, value);\n      });\n    }\n  }); // TODO code duplication with Properties\n\n  Object.defineProperty(Template.prototype, \"on\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, callback) {\n      var _this = this;\n\n      var events = this._settingEvents[key];\n\n      if (events === undefined) {\n        events = this._settingEvents[key] = [];\n      }\n\n      events.push(callback);\n      return new Disposer(function () {\n        $array.removeFirst(events, callback);\n\n        if (events.length === 0) {\n          delete _this._settingEvents[key];\n        }\n      });\n    }\n  }); // TODO code duplication with Properties\n\n  Object.defineProperty(Template.prototype, \"onPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, callback) {\n      var _this = this;\n\n      var events = this._privateSettingEvents[key];\n\n      if (events === undefined) {\n        events = this._privateSettingEvents[key] = [];\n      }\n\n      events.push(callback);\n      return new Disposer(function () {\n        $array.removeFirst(events, callback);\n\n        if (events.length === 0) {\n          delete _this._privateSettingEvents[key];\n        }\n      });\n    }\n  });\n  Object.defineProperty(Template.prototype, \"_apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (entity, state) {\n      var disposers = [];\n      $object.each(this._settingEvents, function (key, events) {\n        $array.each(events, function (event) {\n          disposers.push(entity.on(key, event));\n        });\n      });\n      $object.each(this._privateSettingEvents, function (key, events) {\n        $array.each(events, function (event) {\n          disposers.push(entity.onPrivate(key, event));\n        });\n      });\n\n      this.states._apply(entity, state);\n\n      disposers.push(this.adapters._apply(entity));\n      disposers.push(entity.events.copyFrom(this.events));\n      return new MultiDisposer(disposers);\n    }\n  });\n  Object.defineProperty(Template.prototype, \"_setObjectTemplate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (entity) {\n      this._entities.push(entity);\n    }\n  });\n  Object.defineProperty(Template.prototype, \"_removeObjectTemplate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (entity) {\n      $array.keepIf(this._entities, function (x) {\n        return x !== entity;\n      });\n    }\n  });\n  Object.defineProperty(Template.prototype, \"_stateChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name) {\n      this._entities.forEach(function (entity) {\n        entity._applyStateByKey(name);\n      });\n    }\n  });\n  return Template;\n}();\n\nexport { Template };","map":{"version":3,"sources":["../../../../../src/.internal/core/util/Template.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Entity, Dirty } from \"./Entity\";\nimport type { State } from \"./States\";\nimport { EventDispatcher, Events } from \"./EventDispatcher\";\nimport { IDisposer, Disposer, MultiDisposer } from \"./Disposer\";\nimport * as $array from \"./Array\";\nimport * as $object from \"./Object\";\n\nexport class TemplateState<E extends Entity> {\n\tpublic _settings: Partial<E[\"_settings\"]>;\n\n\tprivate _name: string;\n\tprivate _template: Template<E>;\n\n\tconstructor(name: string, template: Template<E>, settings: Partial<E[\"_settings\"]>) {\n\t\tthis._name = name;\n\t\tthis._template = template;\n\t\tthis._settings = settings;\n\t}\n\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key): this[\"_settings\"][Key];\n\tpublic get<Key extends keyof this[\"_settings\"], F>(key: Key, fallback: F): NonNullable<this[\"_settings\"][Key]> | F;\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key, fallback?: any): any {\n\t\tconst value = this._settings[key];\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n\n\tpublic set<Key extends keyof E[\"_settings\"]>(key: Key, value: E[\"_settings\"][Key]) {\n\t\tthis._settings[key] = value;\n\t\t// TODO maybe only do this if the value changed ?\n\t\tthis._template._stateChanged(this._name);\n\t}\n\n\tpublic remove<Key extends keyof this[\"_settings\"]>(key: Key) {\n\t\tdelete this._settings[key];\n\t\t// TODO maybe only do this if the value changed ?\n\t\tthis._template._stateChanged(this._name);\n\t}\n\n\tpublic setAll(settings: this[\"_settings\"]) {\n\t\t$object.keys(settings).forEach((key) => {\n\t\t\tthis._settings[key] = settings[key];\n\t\t});\n\n\t\tthis._template._stateChanged(this._name);\n\t}\n\n\tpublic _apply(other: State<E>, seen: Dirty<E[\"_settings\"]>): void {\n\t\t$object.each(this._settings, (key, value) => {\n\t\t\tif (!seen[key] && !other._userSettings[key]) {\n\t\t\t\tseen[key] = true;\n\t\t\t\tother.setRaw(key, value);\n\t\t\t}\n\t\t});\n\t}\n}\n\n\nexport class TemplateStates<E extends Entity> {\n\tprivate _template: Template<E>;\n\tprivate _states: { [key: string]: TemplateState<E> } = {};\n\n\tconstructor(template: Template<E>) {\n\t\tthis._template = template;\n\t}\n\n\tpublic lookup(name: string): TemplateState<E> | undefined {\n\t\treturn this._states[name];\n\t}\n\n\tpublic create(name: string, settings: Partial<E[\"_settings\"]>): TemplateState<E> {\n\t\tconst state = this._states[name];\n\n\t\tif (state) {\n\t\t\tstate.setAll(settings);\n\t\t\treturn state;\n\n\t\t} else {\n\t\t\tconst state = new TemplateState(name, this._template, settings);\n\t\t\tthis._states[name] = state;\n\t\t\tthis._template._stateChanged(name);\n\t\t\treturn state;\n\t\t}\n\t}\n\n\tpublic remove(name: string) {\n\t\tdelete this._states[name];\n\t\tthis._template._stateChanged(name);\n\t}\n\n\tpublic _apply(entity: E, state: ApplyState<E>): void {\n\t\t$object.each(this._states, (key, value) => {\n\t\t\tlet seen = state.states[key];\n\n\t\t\tif (seen == null) {\n\t\t\t\tseen = state.states[key] = {};\n\t\t\t}\n\n\t\t\tconst other = entity.states.create(key as string, {});\n\t\t\tvalue._apply(other, seen);\n\t\t});\n\t}\n}\n\n\nexport class TemplateAdapters<E extends Entity> {\n\tprivate _callbacks: { [K in keyof E[\"_settings\"]]?: Array<<O extends E[\"_settings\"]>(value: O[K], target?: O, key?: K) => O[K]> } = {};\n\n\tpublic add<Key extends keyof E[\"_settings\"]>(key: Key, callback: <O extends E[\"_settings\"]>(value: O[Key], target?: O, key?: Key) => O[Key]) {\n\t\tlet callbacks = this._callbacks[key];\n\n\t\tif (callbacks === undefined) {\n\t\t\tcallbacks = this._callbacks[key] = [];\n\t\t}\n\n\t\tcallbacks.push(callback);\n\t}\n\n\tpublic _apply(entity: E): IDisposer {\n\t\tconst disposers: Array<IDisposer> = [];\n\n\t\t$object.each(this._callbacks, (key, callbacks) => {\n\t\t\t$array.each(callbacks, (callback) => {\n\t\t\t\tdisposers.push(entity.adapters.add(key, callback));\n\t\t\t});\n\t\t});\n\n\t\treturn new MultiDisposer(disposers);\n\t}\n}\n\n\nexport interface ApplyState<E extends Entity> {\n\tsettings: Dirty<E[\"_settings\"]>;\n\tprivateSettings: Dirty<E[\"_privateSettings\"]>;\n\tstates: { [name: string]: Dirty<E[\"_settings\"]> };\n}\n\n\n// TODO maybe extend from Properties ?\nexport class Template<E extends Entity> {\n\tpublic _settings: Partial<E[\"_settings\"]>;\n\tpublic _privateSettings: E[\"_privateSettings\"] = {};\n\n\t// TODO code duplication with Properties\n\tpublic _settingEvents: { [K in keyof this[\"_settings\"]]?: Array<<V extends this[\"_settings\"][K]>(value: V) => void> } = {};\n\tpublic _privateSettingEvents: { [K in keyof this[\"_settings\"]]?: Array<<V extends this[\"_settings\"][K]>(value: V) => void> } = {};\n\n\tpublic _entities: Array<E> = [];\n\n\tpublic readonly states: TemplateStates<E> = new TemplateStates(this);\n\n\tpublic readonly adapters: TemplateAdapters<E> = new TemplateAdapters();\n\tpublic readonly events: EventDispatcher<Events<E, E[\"_events\"]>> = new EventDispatcher();\n\n\tpublic setup: (<O extends E>(entity: O) => void) | undefined;\n\n\t/**\n\t * Use this method to create an instance of this class.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\n\t * @param   root      Root element\n\t * @param   settings  Settings\n\t * @param   template  Template\n\t * @return            Instantiated object\n\t */\n\tpublic static new<E extends Entity>(settings: E[\"_settings\"]): Template<E> {\n\t\treturn new Template<E>(settings, true);\n\t}\n\n\tconstructor(settings: E[\"_settings\"], isReal: boolean) {\n\t\tif (!isReal) {\n\t\t\tthrow new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n\t\t}\n\n\t\tthis._settings = settings;\n\t}\n\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key): this[\"_settings\"][Key];\n\tpublic get<Key extends keyof this[\"_settings\"], F>(key: Key, fallback: F): NonNullable<this[\"_settings\"][Key]> | F;\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key, fallback?: any): any {\n\t\tconst value = this._settings[key];\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n\n\tpublic setRaw<Key extends keyof this[\"_settings\"]>(key: Key, value: this[\"_settings\"][Key]) {\n\t\tthis._settings[key] = value;\n\t}\n\n\tpublic set<Key extends keyof this[\"_settings\"]>(key: Key, value: this[\"_settings\"][Key]) {\n\t\tif (this._settings[key] !== value) {\n\t\t\tthis.setRaw(key, value);\n\n\t\t\tthis._entities.forEach((entity) => {\n\t\t\t\tentity._setTemplateProperty(this, key, value);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic remove<Key extends keyof this[\"_settings\"]>(key: Key): void {\n\t\tif (key in this._settings) {\n\t\t\tdelete this._settings[key];\n\n\t\t\tthis._entities.forEach((entity) => {\n\t\t\t\tentity._removeTemplateProperty(key);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic removeAll(): void {\n\t\t$object.each(this._settings, (key, _value) => {\n\t\t\tthis.remove(key);\n\t\t});\n\t}\n\n\tpublic getPrivate<Key extends keyof this[\"_privateSettings\"], F>(key: Key, fallback: F): NonNullable<this[\"_privateSettings\"][Key]> | F;\n\tpublic getPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key): this[\"_privateSettings\"][Key];\n\tpublic getPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key, fallback?: any): any {\n\t\tconst value = this._privateSettings[key];\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n\n\tpublic setPrivateRaw<Key extends keyof this[\"_privateSettings\"], Value extends this[\"_privateSettings\"][Key]>(key: Key, value: Value): Value {\n\t\tthis._privateSettings[key] = value;\n\t\treturn value;\n\t}\n\n\tpublic setPrivate<Key extends keyof this[\"_privateSettings\"], Value extends this[\"_privateSettings\"][Key]>(key: Key, value: Value): Value {\n\t\tif (this._privateSettings[key] !== value) {\n\t\t\tthis.setPrivateRaw(key, value);\n\n\t\t\tthis._entities.forEach((entity) => {\n\t\t\t\tentity._setTemplatePrivateProperty(this, key, value);\n\t\t\t});\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tpublic removePrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key): void {\n\t\tif (key in this._privateSettings) {\n\t\t\tdelete this._privateSettings[key];\n\n\t\t\tthis._entities.forEach((entity) => {\n\t\t\t\tentity._removeTemplatePrivateProperty(key);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic setAll(value: this[\"_settings\"]) {\n\t\t$object.each(value, (key, value) => {\n\t\t\tthis.set(key, value);\n\t\t});\n\t}\n\n\t// TODO code duplication with Properties\n\tpublic on<Key extends keyof this[\"_settings\"]>(key: Key, callback: (value: this[\"_settings\"][Key], target?: E, key?: Key) => void): IDisposer {\n\t\tlet events = this._settingEvents[key];\n\n\t\tif (events === undefined) {\n\t\t\tevents = this._settingEvents[key] = [];\n\t\t}\n\n\t\tevents.push(callback);\n\n\t\treturn new Disposer(() => {\n\t\t\t$array.removeFirst(events!, callback);\n\n\t\t\tif (events!.length === 0) {\n\t\t\t\tdelete this._settingEvents[key];\n\t\t\t}\n\t\t});\n\t}\n\n\t// TODO code duplication with Properties\n\tpublic onPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key, callback: (value: this[\"_privateSettings\"][Key], target?: E, key?: Key) => void): IDisposer {\n\t\tlet events = this._privateSettingEvents[key];\n\n\t\tif (events === undefined) {\n\t\t\tevents = this._privateSettingEvents[key] = [];\n\t\t}\n\n\t\tevents.push(callback);\n\n\t\treturn new Disposer(() => {\n\t\t\t$array.removeFirst(events!, callback);\n\n\t\t\tif (events!.length === 0) {\n\t\t\t\tdelete this._privateSettingEvents[key];\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic _apply(entity: E, state: ApplyState<E>): IDisposer {\n\t\tconst disposers: Array<IDisposer> = [];\n\n\t\t$object.each(this._settingEvents, (key, events) => {\n\t\t\t$array.each(events, (event) => {\n\t\t\t\tdisposers.push(entity.on(key, event));\n\t\t\t});\n\t\t});\n\n\t\t$object.each(this._privateSettingEvents, (key, events) => {\n\t\t\t$array.each(events, (event) => {\n\t\t\t\tdisposers.push(entity.onPrivate(key, event));\n\t\t\t});\n\t\t});\n\n\t\tthis.states._apply(entity, state);\n\n\t\tdisposers.push(this.adapters._apply(entity));\n\t\tdisposers.push(entity.events.copyFrom(this.events));\n\n\t\treturn new MultiDisposer(disposers);\n\t}\n\n\tpublic _setObjectTemplate(entity: E) {\n\t\tthis._entities.push(entity);\n\t}\n\n\tpublic _removeObjectTemplate(entity: E) {\n\t\t$array.keepIf(this._entities, (x) => x !== entity);\n\t}\n\n\tpublic _stateChanged(name: string): void {\n\t\tthis._entities.forEach((entity) => {\n\t\t\tentity._applyStateByKey(name);\n\t\t});\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}