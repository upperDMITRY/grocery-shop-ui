{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Pattern } from \"./Pattern\";\nimport * as $math from \"../../util/Math\";\n/**\r\n * Rectangle pattern.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\nvar RectanglePattern = /** @class */function (_super) {\n  __extends(RectanglePattern, _super);\n  function RectanglePattern() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(RectanglePattern.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n      if (this.isDirty(\"gap\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(RectanglePattern.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._draw.call(this);\n      var checkered = this.get(\"checkered\", false);\n      var centered = this.get(\"centered\", true);\n      var gap = this.get(\"gap\", 0);\n      var rotation = this.get(\"rotation\", 0);\n      var w = this.get(\"width\", 100);\n      var h = this.get(\"height\", 100);\n      var rectW = this.get(\"maxWidth\", 5);\n      var rectH = this.get(\"maxHeight\", 5);\n      var cellW = rectW + gap;\n      var cellH = rectH + gap;\n      var cols = Math.round(w / cellW);\n      var rows = Math.round(h / cellH);\n      cellW = w / cols;\n      cellH = h / rows;\n      if (rotation != 0) {\n        // @todo this is probably not right\n        this._display.x = cellW / 2 * $math.cos(rotation);\n        this._display.y = -cellH / 2 * $math.sin(rotation);\n      }\n      for (var r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n        for (var c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n          if (!checkered || (r & 1) != 1 && (c & 1) != 1 || (r & 1) == 1 && (c & 1) == 1) {\n            var x = c * cellW;\n            var y = r * cellH;\n            if (centered) {\n              x += (cellW - rectW) / 2;\n              y += (cellH - rectH) / 2;\n            }\n            this._display.drawRect(x, y, rectW, rectH);\n          }\n        }\n      }\n      if (checkered) {\n        w = w / 2 - gap * 2;\n        h = h / 2 - gap * 2;\n      } else {\n        w -= gap;\n        h -= gap;\n      }\n      var color = this.get(\"color\");\n      var colorOpacity = this.get(\"colorOpacity\");\n      if (color || colorOpacity) {\n        // this._display.lineStyle(strokeWidth, stroke, colorOpacity);\n        // this._display.endStroke();\n        this._display.beginFill(color, colorOpacity);\n        this._display.endFill();\n      }\n    }\n  });\n  Object.defineProperty(RectanglePattern, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"RectanglePattern\"\n  });\n  Object.defineProperty(RectanglePattern, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Pattern.classNames.concat([RectanglePattern.className])\n  });\n  return RectanglePattern;\n}(Pattern);\nexport { RectanglePattern };","map":{"version":3,"names":["Pattern","$math","RectanglePattern","_super","__extends","value","prototype","_beforeChanged","call","isDirty","_clear","_draw","checkered","get","centered","gap","rotation","w","h","rectW","rectH","cellW","cellH","cols","Math","round","rows","_display","x","cos","y","sin","r","c","drawRect","color","colorOpacity","beginFill","endFill","Object","defineProperty","classNames","concat","className"],"sources":["../../../../../../src/.internal/core/render/patterns/RectanglePattern.ts"],"sourcesContent":["import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\n\nimport * as $math from \"../../util/Math\";\n\nexport interface IRectanglePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between rectangles, in pixels.\n\t *\n\t * @default 6\n\t */\n\tgap?: number;\n\n\t/**\n\t * Maximum width of the rectangle, in pixels.\n\t *\n\t * @default 5\n\t */\n\tmaxWidth?: number;\n\n\t/**\n\t * Maximum height of the rectangle, in pixels.\n\t *\n\t * @default 5\n\t */\n\tmaxHeight?: number;\n\n\t/**\n\t * If set to `true`, will place every second rectangle, creating checkered\n\t * pattern.\n\t *\n\t * @default false\n\t */\n\tcheckered?: boolean;\n\n\t/**\n\t * Center rectangles.\n\t *\n\t * @default true\n\t */\n\tcentered?: boolean;\n\n}\n\nexport interface IRectanglePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Rectangle pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class RectanglePattern extends Pattern {\n\tdeclare public _settings: IRectanglePatternSettings;\n\tdeclare public _privateSettings: IRectanglePatternPrivate;\n\n\tpublic static className: string = \"RectanglePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([RectanglePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst checkered = this.get(\"checkered\", false);\n\t\tconst centered = this.get(\"centered\", true);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet w = this.get(\"width\", 100);\n\t\tlet h = this.get(\"height\", 100);\n\t\tlet rectW = this.get(\"maxWidth\", 5);\n\t\tlet rectH = this.get(\"maxHeight\", 5);\n\n\n\t\tlet cellW = rectW + gap;\n\t\tlet cellH = rectH + gap;\n\n\t\tlet cols = Math.round(w / cellW);\n\t\tlet rows = Math.round(h / cellH);\n\n\t\tcellW = w / cols;\n\t\tcellH = h / rows;\n\n\t\tif (rotation != 0) {\n\t\t\t// @todo this is probably not right\n\t\t\tthis._display.x = cellW / 2 * $math.cos(rotation);\n\t\t\tthis._display.y = -cellH / 2 * $math.sin(rotation);\n\t\t}\n\n\t\tfor (let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n\t\t\tfor (let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n\t\t\t\tif (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {\n\t\t\t\t\tlet x = c * cellW;\n\t\t\t\t\tlet y = r * cellH;\n\t\t\t\t\tif (centered) {\n\t\t\t\t\t\tx += (cellW - rectW) / 2;\n\t\t\t\t\t\ty += (cellH - rectH) / 2;\n\t\t\t\t\t}\n\t\t\t\t\tthis._display.drawRect(x, y, rectW, rectH);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (checkered) {\n\t\t\tw = w / 2 - gap * 2;\n\t\t\th = h / 2 - gap * 2;\n\t\t}\n\t\telse {\n\t\t\tw -= gap;\n\t\t\th -= gap;\n\t\t}\n\n\t\tconst color = this.get(\"color\");\n\t\tconst colorOpacity = this.get(\"colorOpacity\");\n\t\tif (color || colorOpacity) {\n\t\t\t// this._display.lineStyle(strokeWidth, stroke, colorOpacity);\n\t\t\t// this._display.endStroke();\n\t\t\tthis._display.beginFill(color, colorOpacity);\n\t\t\tthis._display.endFill();\n\t\t}\n\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}