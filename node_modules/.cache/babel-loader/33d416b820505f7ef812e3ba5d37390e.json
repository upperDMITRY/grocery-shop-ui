{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Entity } from \"./Entity\";\nimport { TextFormatter } from \"./TextFormatter\";\nimport * as $object from \"./Object\";\nimport * as $utils from \"./Utils\";\nimport * as $type from \"./Type\";\n/**\r\n * A class used to format numberic values as time duration.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/} for more info\r\n */\nvar DurationFormatter = /** @class */function (_super) {\n  __extends(DurationFormatter, _super);\n  function DurationFormatter() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Collection of aliases for units.\r\n     */\n    Object.defineProperty(_this, \"_unitAliases\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {\n        \"Y\": \"y\",\n        \"D\": \"d\",\n        \"H\": \"h\",\n        \"K\": \"h\",\n        \"k\": \"h\",\n        \"n\": \"S\"\n      }\n    });\n    return _this;\n  }\n  Object.defineProperty(DurationFormatter.prototype, \"_setDefaults\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var dmillisecond = \"_duration_millisecond\";\n      var dsecond = \"_duration_second\";\n      var dminute = \"_duration_minute\";\n      var dhour = \"_duration_hour\";\n      var dday = \"_duration_day\";\n      var dweek = \"_duration_week\";\n      var dmonth = \"_duration_month\";\n      var dyear = \"_duration_year\";\n      var asecond = \"_second\";\n      var aminute = \"_minute\";\n      var ahour = \"_hour\";\n      var aday = \"_day\";\n      var aweek = \"_week\";\n      var amonth = \"_week\";\n      var ayear = \"_year\";\n      // Defaults\n      this._setDefault(\"negativeBase\", 0);\n      this._setDefault(\"baseUnit\", \"second\");\n      this._setDefault(\"durationFormats\", {\n        \"millisecond\": {\n          \"millisecond\": this._t(dmillisecond),\n          \"second\": this._t(dmillisecond + asecond),\n          \"minute\": this._t(dmillisecond + aminute),\n          \"hour\": this._t(dmillisecond + ahour),\n          \"day\": this._t(dmillisecond + aday),\n          \"week\": this._t(dmillisecond + aweek),\n          \"month\": this._t(dmillisecond + amonth),\n          \"year\": this._t(dmillisecond + ayear)\n        },\n        \"second\": {\n          \"second\": this._t(dsecond),\n          \"minute\": this._t(dsecond + aminute),\n          \"hour\": this._t(dsecond + ahour),\n          \"day\": this._t(dsecond + aday),\n          \"week\": this._t(dsecond + aweek),\n          \"month\": this._t(dsecond + amonth),\n          \"year\": this._t(dsecond + ayear)\n        },\n        \"minute\": {\n          \"minute\": this._t(dminute),\n          \"hour\": this._t(dminute + ahour),\n          \"day\": this._t(dminute + aday),\n          \"week\": this._t(dminute + aweek),\n          \"month\": this._t(dminute + amonth),\n          \"year\": this._t(dminute + ayear)\n        },\n        \"hour\": {\n          \"hour\": this._t(dhour),\n          \"day\": this._t(dhour + aday),\n          \"week\": this._t(dhour + aweek),\n          \"month\": this._t(dhour + amonth),\n          \"year\": this._t(dhour + ayear)\n        },\n        \"day\": {\n          \"day\": this._t(dday),\n          \"week\": this._t(dday + aweek),\n          \"month\": this._t(dday + amonth),\n          \"year\": this._t(dday + ayear)\n        },\n        \"week\": {\n          \"week\": this._t(dweek),\n          \"month\": this._t(dweek + amonth),\n          \"year\": this._t(dweek + ayear)\n        },\n        \"month\": {\n          \"month\": this._t(dmonth),\n          \"year\": this._t(dmonth + ayear)\n        },\n        \"year\": {\n          \"year\": this._t(dyear)\n        }\n      });\n      _super.prototype._setDefaults.call(this);\n    }\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n    }\n  });\n  /**\r\n   * Formats the number as duration.\r\n   *\r\n   * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n   * 16 minutes and 40 seconds.\r\n   *\r\n   * @param value   Value to format\r\n   * @param format  Format to apply\r\n   * @param base    Override base unit\r\n   * @return Formatted number\r\n   */\n  Object.defineProperty(DurationFormatter.prototype, \"format\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, format, base) {\n      // no base unit?\n      var baseUnit = base || this.get(\"baseUnit\");\n      // no format passed in or empty\n      if (typeof format === \"undefined\" || format === \"\") {\n        if (this.get(\"durationFormat\") != null) {\n          format = this.get(\"durationFormat\");\n        } else {\n          format = this.getFormat($type.toNumber(value), undefined, baseUnit);\n        }\n      }\n      // Clean format\n      format = $utils.cleanFormat(format);\n      // get format info (it will also deal with parser caching)\n      var info = this.parseFormat(format, baseUnit);\n      // cast to number just in case\n      // TODO: maybe use better casting\n      var source = Number(value);\n      // format and replace the number\n      var details;\n      if (source > this.get(\"negativeBase\")) {\n        details = info.positive;\n      } else if (source < this.get(\"negativeBase\")) {\n        details = info.negative;\n      } else {\n        details = info.zero;\n      }\n      // Format\n      var formatted = this.applyFormat(source, details);\n      // Apply color?\n      if (details.color !== \"\") {\n        formatted = \"[\" + details.color + \"]\" + formatted + \"[/]\";\n      }\n      return formatted;\n    }\n  });\n  /**\r\n   * Parses supplied format into structured object which can be used to format\r\n   * the number.\r\n   *\r\n   * @param format  Format string, i.e. \"#,###.00\"\r\n   * @param base    Override base unit\r\n   * @return Parsed information\r\n   */\n  Object.defineProperty(DurationFormatter.prototype, \"parseFormat\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (format, base) {\n      // Check cache\n      // TODO\n      // let cached = this.getCache(format);\n      // if (cached != null) {\n      // \treturn cached;\n      // }\n      var _this = this;\n      // no base unit?\n      var baseUnit = base || this.get(\"baseUnit\");\n      // Initialize duration parsing info\n      var info = {\n        \"positive\": {\n          \"color\": \"\",\n          \"template\": \"\",\n          \"parts\": [],\n          \"source\": \"\",\n          \"baseUnit\": baseUnit,\n          \"parsed\": false,\n          \"absolute\": false\n        },\n        \"negative\": {\n          \"color\": \"\",\n          \"template\": \"\",\n          \"parts\": [],\n          \"source\": \"\",\n          \"baseUnit\": baseUnit,\n          \"parsed\": false,\n          \"absolute\": false\n        },\n        \"zero\": {\n          \"color\": \"\",\n          \"template\": \"\",\n          \"parts\": [],\n          \"source\": \"\",\n          \"baseUnit\": baseUnit,\n          \"parsed\": false,\n          \"absolute\": false\n        }\n      };\n      // Escape double vertical bars (that mean display one vertical bar)\n      format = format.replace(\"||\", $type.PLACEHOLDER2);\n      // Split it up and deal with different formats\n      var parts = format.split(\"|\");\n      info.positive.source = parts[0];\n      if (typeof parts[2] === \"undefined\") {\n        info.zero = info.positive;\n      } else {\n        info.zero.source = parts[2];\n      }\n      if (typeof parts[1] === \"undefined\") {\n        info.negative = info.positive;\n      } else {\n        info.negative.source = parts[1];\n      }\n      // Parse each\n      $object.each(info, function (_part, item) {\n        // Already parsed\n        if (item.parsed) {\n          return;\n        }\n        // Check cached\n        // TODO\n        // if (typeof this.getCache(item.source) !== \"undefined\") {\n        // \tinfo[part] = this.getCache(item.source);\n        // \treturn;\n        // }\n        // Begin parsing\n        var partFormat = item.source;\n        // Check for [] directives\n        var dirs = [];\n        dirs = item.source.match(/^\\[([^\\]]*)\\]/);\n        if (dirs && dirs.length && dirs[0] !== \"\") {\n          partFormat = item.source.substr(dirs[0].length);\n          item.color = dirs[1];\n        }\n        // Let TextFormatter split into chunks\n        var chunks = TextFormatter.chunk(partFormat, true);\n        for (var i = 0; i < chunks.length; i++) {\n          var chunk = chunks[i];\n          // replace back double vertical bar\n          chunk.text = chunk.text.replace($type.PLACEHOLDER2, \"|\");\n          if (chunk.type === \"value\") {\n            // Just \"Duration\"?\n            // if (chunk.text.toLowerCase() === \"duration\") {\n            // \tchunk.text = durationFormat;\n            // }\n            // Check for \"a\" (absolute) modifier\n            if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\n              item.absolute = true;\n              chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\n            }\n            // Find all possible parts\n            var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\n            if (matches) {\n              // Populate template\n              for (var x = 0; x < matches.length; x++) {\n                // Is it an alias?\n                if (matches[x] == null) {\n                  matches[x] = _this._unitAliases[matches[x]];\n                }\n                item.parts.push(matches[x]);\n                chunk.text = chunk.text.replace(matches[x], $type.PLACEHOLDER);\n              }\n            }\n          }\n          // Apply to template\n          item.template += chunk.text;\n        }\n        // Apply style formatting\n        //item.template = TextFormatter.format(item.template, this.outputFormat);\n        // Save cache\n        // TODO\n        //this.setCache(item.source, item);\n        // Mark this as parsed\n        item.parsed = true;\n      });\n      // Save cache (the whole thing)\n      // TODO\n      //this.setCache(format, info);\n      return info;\n    }\n  });\n  /**\r\n   * Applies parsed format to a numeric value.\r\n   *\r\n   * @param value    Value\r\n   * @param details  Parsed format as returned by {parseFormat}\r\n   * @return Formatted duration\r\n   */\n  Object.defineProperty(DurationFormatter.prototype, \"applyFormat\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, details) {\n      // Use absolute values\n      var negative = !details.absolute && value < this.get(\"negativeBase\");\n      value = Math.abs(value);\n      // Recalculate to milliseconds\n      var tstamp = this.toTimeStamp(value, details.baseUnit);\n      // Init return value\n      var res = details.template;\n      // Iterate through duration parts\n      for (var i = 0, len = details.parts.length; i < len; i++) {\n        // Gather the part\n        var part = details.parts[i];\n        var unit = this._toTimeUnit(part.substr(0, 1));\n        var digits = part.length;\n        // Calculate current unit value\n        var ints = Math.floor(tstamp / this._getUnitValue(unit));\n        res = res.replace($type.PLACEHOLDER, $utils.padString(ints, digits, \"0\"));\n        // Reduce timestamp\n        tstamp -= ints * this._getUnitValue(unit);\n      }\n      // Reapply negative sign\n      if (negative) {\n        res = \"-\" + res;\n      }\n      return res;\n    }\n  });\n  /**\r\n   * Converts numeric value to timestamp in milliseconds.\r\n   *\r\n   * @param value     A source value\r\n   * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n   * @return Value representation as a timestamp in milliseconds\r\n   */\n  Object.defineProperty(DurationFormatter.prototype, \"toTimeStamp\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, baseUnit) {\n      return value * this._getUnitValue(baseUnit);\n    }\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"_toTimeUnit\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (code) {\n      switch (code) {\n        case \"S\":\n          return \"millisecond\";\n        case \"s\":\n          return \"second\";\n        case \"m\":\n          return \"minute\";\n        case \"h\":\n          return \"hour\";\n        case \"d\":\n          return \"day\";\n        case \"w\":\n          return \"week\";\n        case \"M\":\n          return \"month\";\n        case \"y\":\n          return \"year\";\n      }\n      ;\n    }\n  });\n  /**\r\n   * Returns appropriate default format for the value.\r\n   *\r\n   * If `maxValue` is sepcified, it will use that value to determine the time\r\n   * unit for the format.\r\n   *\r\n   * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n   * will get `\"10\"`.\r\n   *\r\n   * However, you might want it to be formatted in the context of bigger scale,\r\n   * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n   * values, including small ones will use format with minutes, e.g.:\r\n   * `00:10`, `00:50`, `12: 30`, etc.\r\n   *\r\n   * @param value     Value to format\r\n   * @param maxValue  Maximum value to be used to determine format\r\n   * @param baseUnit  Base unit of the value\r\n   * @return Format\r\n   */\n  Object.defineProperty(DurationFormatter.prototype, \"getFormat\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, maxValue, baseUnit) {\n      // Is format override set?\n      if (this.get(\"durationFormat\") != null) {\n        return this.get(\"durationFormat\");\n      }\n      // Get base unit\n      if (!baseUnit) {\n        baseUnit = this.get(\"baseUnit\");\n      }\n      if (maxValue != null && value != maxValue) {\n        value = Math.abs(value);\n        maxValue = Math.abs(maxValue);\n        var maxUnit = this.getValueUnit(Math.max(value, maxValue), baseUnit);\n        //let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\n        //console.log(maxUnit, diffUnit);\n        return this.get(\"durationFormats\")[baseUnit][maxUnit];\n      } else {\n        var unit = this.getValueUnit(value, baseUnit);\n        return this.get(\"durationFormats\")[baseUnit][unit];\n      }\n    }\n  });\n  /**\r\n   * Returns value's closest denominator time unit, e.g 100 seconds is\r\n   * `\"minute\"`, while 59 seconds would still be `second`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Denominator\r\n   */\n  Object.defineProperty(DurationFormatter.prototype, \"getValueUnit\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, baseUnit) {\n      // Get base unit\n      if (!baseUnit) {\n        baseUnit = this.get(\"baseUnit\");\n      }\n      // Convert to milliseconds\n      var currentUnit;\n      var ms = this.getMilliseconds(value, baseUnit);\n      $object.eachContinue(this._getUnitValues(), function (key, val) {\n        if (key == baseUnit || currentUnit) {\n          var num = ms / val;\n          if (num <= 1) {\n            if (!currentUnit) {\n              currentUnit = key;\n            }\n            return false;\n          }\n          currentUnit = key;\n        }\n        return true;\n      });\n      return currentUnit;\n    }\n  });\n  /**\r\n   * Converts value to milliseconds according to `baseUnit`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Value in milliseconds\r\n   */\n  Object.defineProperty(DurationFormatter.prototype, \"getMilliseconds\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, baseUnit) {\n      // Get base unit\n      if (!baseUnit) {\n        baseUnit = this.get(\"baseUnit\");\n      }\n      return value * this._getUnitValue(baseUnit);\n    }\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"_getUnitValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (timeUnit) {\n      return this._getUnitValues()[timeUnit];\n    }\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"_getUnitValues\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return {\n        \"millisecond\": 1,\n        \"second\": 1000,\n        \"minute\": 60000,\n        \"hour\": 3600000,\n        \"day\": 86400000,\n        \"week\": 604800000,\n        \"month\": 2592000000,\n        \"year\": 31536000000\n      };\n    }\n  });\n  return DurationFormatter;\n}(Entity);\nexport { DurationFormatter };","map":{"version":3,"names":["Entity","TextFormatter","$object","$utils","$type","DurationFormatter","_super","__extends","_this","apply","arguments","Object","defineProperty","value","dmillisecond","dsecond","dminute","dhour","dday","dweek","dmonth","dyear","asecond","aminute","ahour","aday","aweek","amonth","ayear","_setDefault","_t","prototype","_setDefaults","call","_beforeChanged","format","base","baseUnit","get","getFormat","toNumber","undefined","cleanFormat","info","parseFormat","source","Number","details","positive","negative","zero","formatted","applyFormat","color","replace","PLACEHOLDER2","parts","split","each","_part","item","parsed","partFormat","dirs","match","length","substr","chunks","chunk","i","text","type","absolute","matches","x","_unitAliases","push","PLACEHOLDER","template","Math","abs","tstamp","toTimeStamp","res","len","part","unit","_toTimeUnit","digits","ints","floor","_getUnitValue","padString","code","maxValue","maxUnit","getValueUnit","max","currentUnit","ms","getMilliseconds","eachContinue","_getUnitValues","key","val","num","timeUnit"],"sources":["../../../../../src/.internal/core/util/DurationFormatter.ts"],"sourcesContent":["import type { TimeUnit } from \"./Time\";\r\n\r\nimport { Entity, IEntitySettings, IEntityPrivate } from \"./Entity\"\r\nimport { TextFormatter } from \"./TextFormatter\";\r\n\r\nimport * as $object from \"./Object\";\r\nimport * as $utils from \"./Utils\";\r\nimport * as $type from \"./Type\";\r\n\r\n\r\nexport interface IDurationFormatterSettings extends IEntitySettings {\r\n\r\n\t/**\r\n\t * A universal duration format to use wherever number needs to be formatted\r\n\t * as a duration.\r\n\t */\r\n\tdurationFormat?: string;\r\n\r\n\t/**\r\n\t * A base value. Any number below it will be considered \"negative\".\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tnegativeBase?: number;\r\n\r\n\t/**\r\n\t * Identifies what values are used in duration.\r\n\t *\r\n\t * Available options: `\"millisecond\"`, `\"second\"` (default), `\"minute\"`, `\"hour\"`, `\"day\"`, `\"week\"`, `\"month\"`, and `\"year\"`.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/#Base_unit} for more info\r\n\t * @default \"second\"\r\n\t */\r\n\tbaseUnit?: TimeUnit;\r\n\r\n\t/**\r\n\t * Time unit dependent duration formats.\r\n\t *\r\n\t * Used be [[DurationAxis]].\r\n\t */\r\n\tdurationFormats?: Partial<Record<TimeUnit, Partial<Record<TimeUnit, string>>>>;\r\n\r\n\t/**\r\n\t * An array of data fields that hold duration values and should be formatted\r\n\t * with a [[DurationFormatter]].\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/data-placeholders/#Formatting_placeholders} for more info\r\n\t */\r\n\tdurationFields?: string[];\r\n\r\n}\r\n\r\nexport interface IDurationFormatterPrivate extends IEntityPrivate {\r\n}\r\n\r\n/**\r\n * A class used to format numberic values as time duration.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/} for more info\r\n */\r\nexport class DurationFormatter extends Entity {\r\n\tdeclare public _settings: IDurationFormatterSettings;\r\n\tdeclare public _privateSettings: IDurationFormatterPrivate;\r\n\r\n\tprotected _setDefaults() {\r\n\t\tconst dmillisecond = \"_duration_millisecond\";\r\n\t\tconst dsecond = \"_duration_second\";\r\n\t\tconst dminute = \"_duration_minute\";\r\n\t\tconst dhour = \"_duration_hour\";\r\n\t\tconst dday = \"_duration_day\";\r\n\t\tconst dweek = \"_duration_week\";\r\n\t\tconst dmonth = \"_duration_month\";\r\n\t\tconst dyear = \"_duration_year\";\r\n\r\n\t\tconst asecond = \"_second\";\r\n\t\tconst aminute = \"_minute\";\r\n\t\tconst ahour = \"_hour\";\r\n\t\tconst aday = \"_day\";\r\n\t\tconst aweek = \"_week\";\r\n\t\tconst amonth = \"_week\";\r\n\t\tconst ayear = \"_year\";\r\n\r\n\t\t// Defaults\r\n\t\tthis._setDefault(\"negativeBase\", 0);\r\n\t\tthis._setDefault(\"baseUnit\", \"second\");\r\n\t\tthis._setDefault(\"durationFormats\", {\r\n\t\t\t\"millisecond\": {\r\n\t\t\t\t\"millisecond\": this._t(dmillisecond),\r\n\t\t\t\t\"second\": this._t((dmillisecond + asecond) as any),\r\n\t\t\t\t\"minute\": this._t((dmillisecond + aminute) as any),\r\n\t\t\t\t\"hour\": this._t((dmillisecond + ahour) as any),\r\n\t\t\t\t\"day\": this._t((dmillisecond + aday) as any),\r\n\t\t\t\t\"week\": this._t((dmillisecond + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dmillisecond + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dmillisecond + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"second\": {\r\n\t\t\t\t\"second\": this._t((dsecond) as any),\r\n\t\t\t\t\"minute\": this._t((dsecond + aminute) as any),\r\n\t\t\t\t\"hour\": this._t((dsecond + ahour) as any),\r\n\t\t\t\t\"day\": this._t((dsecond + aday) as any),\r\n\t\t\t\t\"week\": this._t((dsecond + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dsecond + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dsecond + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"minute\": {\r\n\t\t\t\t\"minute\": this._t((dminute) as any),\r\n\t\t\t\t\"hour\": this._t((dminute + ahour) as any),\r\n\t\t\t\t\"day\": this._t((dminute + aday) as any),\r\n\t\t\t\t\"week\": this._t((dminute + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dminute + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dminute + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"hour\": {\r\n\t\t\t\t\"hour\": this._t((dhour) as any),\r\n\t\t\t\t\"day\": this._t((dhour + aday) as any),\r\n\t\t\t\t\"week\": this._t((dhour + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dhour + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dhour + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"day\": {\r\n\t\t\t\t\"day\": this._t((dday) as any),\r\n\t\t\t\t\"week\": this._t((dday + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dday + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dday + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"week\": {\r\n\t\t\t\t\"week\": this._t((dweek) as any),\r\n\t\t\t\t\"month\": this._t((dweek + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dweek + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"month\": {\r\n\t\t\t\t\"month\": this._t((dmonth) as any),\r\n\t\t\t\t\"year\": this._t((dmonth + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"year\": {\r\n\t\t\t\t\"year\": this._t(dyear)\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsuper._setDefaults();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Collection of aliases for units.\r\n\t */\r\n\tprotected _unitAliases: { [index: string]: string } = {\r\n\t\t\"Y\": \"y\",\r\n\t\t\"D\": \"d\",\r\n\t\t\"H\": \"h\",\r\n\t\t\"K\": \"h\",\r\n\t\t\"k\": \"h\",\r\n\t\t\"n\": \"S\"\r\n\t};\r\n\r\n\tpublic _beforeChanged() {\r\n\t\tsuper._beforeChanged();\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the number as duration.\r\n\t *\r\n\t * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n\t * 16 minutes and 40 seconds.\r\n\t *\r\n\t * @param value   Value to format\r\n\t * @param format  Format to apply\r\n\t * @param base    Override base unit\r\n\t * @return Formatted number\r\n\t */\r\n\tpublic format(value: number | string, format?: string, base?: TimeUnit): string {\r\n\r\n\t\t// no base unit?\r\n\t\tlet baseUnit = base || this.get(\"baseUnit\");\r\n\r\n\t\t// no format passed in or empty\r\n\t\tif (typeof format === \"undefined\" || format === \"\") {\r\n\t\t\tif (this.get(\"durationFormat\") != null) {\r\n\t\t\t\tformat = this.get(\"durationFormat\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tformat = this.getFormat($type.toNumber(value), undefined, baseUnit);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Clean format\r\n\t\tformat = $utils.cleanFormat(format!);\r\n\r\n\t\t// get format info (it will also deal with parser caching)\r\n\t\tlet info = this.parseFormat(format, baseUnit);\r\n\r\n\t\t// cast to number just in case\r\n\t\t// TODO: maybe use better casting\r\n\t\tlet source: number = Number(value);\r\n\r\n\t\t// format and replace the number\r\n\t\tlet details;\r\n\t\tif (source > this.get(\"negativeBase\")) {\r\n\t\t\tdetails = info.positive;\r\n\t\t}\r\n\t\telse if (source < this.get(\"negativeBase\")) {\r\n\t\t\tdetails = info.negative;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdetails = info.zero;\r\n\t\t}\r\n\r\n\r\n\t\t// Format\r\n\t\tlet formatted = this.applyFormat(source, details);\r\n\r\n\t\t// Apply color?\r\n\t\tif (details.color !== \"\") {\r\n\t\t\tformatted = \"[\" + details.color + \"]\" + formatted + \"[/]\";\r\n\t\t}\r\n\r\n\t\treturn formatted;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses supplied format into structured object which can be used to format\r\n\t * the number.\r\n\t *\r\n\t * @param format  Format string, i.e. \"#,###.00\"\r\n\t * @param base    Override base unit\r\n\t * @return Parsed information\r\n\t */\r\n\tprotected parseFormat(format: string, base?: TimeUnit): any {\r\n\r\n\t\t// Check cache\r\n\t\t// TODO\r\n\t\t// let cached = this.getCache(format);\r\n\t\t// if (cached != null) {\r\n\t\t// \treturn cached;\r\n\t\t// }\r\n\r\n\t\t// no base unit?\r\n\t\tlet baseUnit = base || this.get(\"baseUnit\");\r\n\r\n\t\t// Initialize duration parsing info\r\n\t\tlet info = {\r\n\t\t\t\"positive\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t},\r\n\t\t\t\"negative\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t},\r\n\t\t\t\"zero\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Escape double vertical bars (that mean display one vertical bar)\r\n\t\tformat = format.replace(\"||\", $type.PLACEHOLDER2);\r\n\r\n\t\t// Split it up and deal with different formats\r\n\t\tlet parts = format.split(\"|\");\r\n\t\tinfo.positive.source = parts[0];\r\n\r\n\t\tif (typeof parts[2] === \"undefined\") {\r\n\t\t\tinfo.zero = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.zero.source = parts[2];\r\n\t\t}\r\n\r\n\t\tif (typeof parts[1] === \"undefined\") {\r\n\t\t\tinfo.negative = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.negative.source = parts[1];\r\n\t\t}\r\n\r\n\t\t// Parse each\r\n\t\t$object.each(info, (_part, item) => {\r\n\t\t\t// Already parsed\r\n\t\t\tif (item.parsed) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Check cached\r\n\t\t\t// TODO\r\n\t\t\t// if (typeof this.getCache(item.source) !== \"undefined\") {\r\n\t\t\t// \tinfo[part] = this.getCache(item.source);\r\n\t\t\t// \treturn;\r\n\t\t\t// }\r\n\r\n\t\t\t// Begin parsing\r\n\t\t\tlet partFormat: string = item.source;\r\n\r\n\t\t\t// Check for [] directives\r\n\t\t\tlet dirs: string[] | null = [];\r\n\t\t\tdirs = item.source.match(/^\\[([^\\]]*)\\]/);\r\n\t\t\tif (dirs && dirs.length && dirs[0] !== \"\") {\r\n\t\t\t\tpartFormat = item.source.substr(dirs[0].length);\r\n\t\t\t\titem.color = dirs[1];\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Let TextFormatter split into chunks\r\n\t\t\tlet chunks = TextFormatter.chunk(partFormat, true);\r\n\t\t\tfor (let i: number = 0; i < chunks.length; i++) {\r\n\t\t\t\tlet chunk = chunks[i];\r\n\r\n\t\t\t\t// replace back double vertical bar\r\n\t\t\t\tchunk.text = chunk.text.replace($type.PLACEHOLDER2, \"|\");\r\n\r\n\t\t\t\tif (chunk.type === \"value\") {\r\n\r\n\t\t\t\t\t// Just \"Duration\"?\r\n\t\t\t\t\t// if (chunk.text.toLowerCase() === \"duration\") {\r\n\t\t\t\t\t// \tchunk.text = durationFormat;\r\n\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t// Check for \"a\" (absolute) modifier\r\n\t\t\t\t\tif (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\r\n\t\t\t\t\t\titem.absolute = true;\r\n\t\t\t\t\t\tchunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Find all possible parts\r\n\t\t\t\t\tlet matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\r\n\r\n\t\t\t\t\tif (matches) {\r\n\t\t\t\t\t\t// Populate template\r\n\t\t\t\t\t\tfor (let x = 0; x < matches.length; x++) {\r\n\t\t\t\t\t\t\t// Is it an alias?\r\n\t\t\t\t\t\t\tif (matches[x] == null) {\r\n\t\t\t\t\t\t\t\tmatches[x] = this._unitAliases[matches[x]];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\titem.parts.push(matches[x]);\r\n\t\t\t\t\t\t\tchunk.text = chunk.text.replace(matches[x], $type.PLACEHOLDER);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply to template\r\n\t\t\t\titem.template += chunk.text;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply style formatting\r\n\t\t\t//item.template = TextFormatter.format(item.template, this.outputFormat);\r\n\r\n\t\t\t// Save cache\r\n\t\t\t// TODO\r\n\t\t\t//this.setCache(item.source, item);\r\n\r\n\t\t\t// Mark this as parsed\r\n\t\t\titem.parsed = true;\r\n\t\t});\r\n\r\n\t\t// Save cache (the whole thing)\r\n\t\t// TODO\r\n\t\t//this.setCache(format, info);\r\n\r\n\t\treturn info;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies parsed format to a numeric value.\r\n\t *\r\n\t * @param value    Value\r\n\t * @param details  Parsed format as returned by {parseFormat}\r\n\t * @return Formatted duration\r\n\t */\r\n\tprotected applyFormat(value: number, details: any): string {\r\n\r\n\t\t// Use absolute values\r\n\t\tlet negative = !details.absolute && (value < this.get(\"negativeBase\"));\r\n\t\tvalue = Math.abs(value);\r\n\r\n\t\t// Recalculate to milliseconds\r\n\t\tlet tstamp = this.toTimeStamp(value, details.baseUnit);\r\n\r\n\t\t// Init return value\r\n\t\tlet res = details.template;\r\n\r\n\t\t// Iterate through duration parts\r\n\t\tfor (let i = 0, len = details.parts.length; i < len; i++) {\r\n\r\n\t\t\t// Gather the part\r\n\t\t\tlet part = details.parts[i];\r\n\t\t\tlet unit = this._toTimeUnit(part.substr(0, 1));\r\n\t\t\tlet digits = part.length;\r\n\r\n\t\t\t// Calculate current unit value\r\n\t\t\tlet ints = Math.floor(tstamp / this._getUnitValue(unit!));\r\n\t\t\tres = res.replace($type.PLACEHOLDER, $utils.padString(ints, digits, \"0\"));\r\n\r\n\t\t\t// Reduce timestamp\r\n\t\t\ttstamp -= ints * this._getUnitValue(unit!);\r\n\t\t}\r\n\r\n\t\t// Reapply negative sign\r\n\t\tif (negative) {\r\n\t\t\tres = \"-\" + res;\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts numeric value to timestamp in milliseconds.\r\n\t *\r\n\t * @param value     A source value\r\n\t * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n\t * @return Value representation as a timestamp in milliseconds\r\n\t */\r\n\tpublic toTimeStamp(value: number, baseUnit: TimeUnit): number {\r\n\t\treturn value * this._getUnitValue(baseUnit);\r\n\t}\r\n\r\n\tprotected _toTimeUnit(code: string): TimeUnit | undefined {\r\n\t\tswitch (code) {\r\n\t\t\tcase \"S\":\r\n\t\t\t\treturn \"millisecond\";\r\n\t\t\tcase \"s\":\r\n\t\t\t\treturn \"second\";\r\n\t\t\tcase \"m\":\r\n\t\t\t\treturn \"minute\";\r\n\t\t\tcase \"h\":\r\n\t\t\t\treturn \"hour\";\r\n\t\t\tcase \"d\":\r\n\t\t\t\treturn \"day\";\r\n\t\t\tcase \"w\":\r\n\t\t\t\treturn \"week\";\r\n\t\t\tcase \"M\":\r\n\t\t\t\treturn \"month\";\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn \"year\";\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Returns appropriate default format for the value.\r\n\t *\r\n\t * If `maxValue` is sepcified, it will use that value to determine the time\r\n\t * unit for the format.\r\n\t *\r\n\t * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n\t * will get `\"10\"`.\r\n\t *\r\n\t * However, you might want it to be formatted in the context of bigger scale,\r\n\t * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n\t * values, including small ones will use format with minutes, e.g.:\r\n\t * `00:10`, `00:50`, `12: 30`, etc.\r\n\t *\r\n\t * @param value     Value to format\r\n\t * @param maxValue  Maximum value to be used to determine format\r\n\t * @param baseUnit  Base unit of the value\r\n\t * @return Format\r\n\t */\r\n\tpublic getFormat(value: number, maxValue?: number, baseUnit?: TimeUnit): string {\r\n\r\n\t\t// Is format override set?\r\n\t\tif (this.get(\"durationFormat\") != null) {\r\n\t\t\treturn this.get(\"durationFormat\")!;\r\n\t\t}\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.get(\"baseUnit\");\r\n\t\t}\r\n\r\n\t\tif (maxValue != null && value != maxValue) {\r\n\t\t\tvalue = Math.abs(value);\r\n\t\t\tmaxValue = Math.abs(maxValue);\r\n\t\t\tlet maxUnit = this.getValueUnit(Math.max(value, maxValue), baseUnit);\r\n\t\t\t//let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\r\n\t\t\t//console.log(maxUnit, diffUnit);\r\n\t\t\treturn (<any>this.get(\"durationFormats\"))[baseUnit!][maxUnit!];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet unit = this.getValueUnit(value, baseUnit);\r\n\t\t\treturn (<any>this.get(\"durationFormats\"))[baseUnit!][unit!];\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns value's closest denominator time unit, e.g 100 seconds is\r\n\t * `\"minute\"`, while 59 seconds would still be `second`.\r\n\t *\r\n\t * @param value     Source duration value\r\n\t * @param baseUnit  Base unit\r\n\t * @return Denominator\r\n\t */\r\n\tpublic getValueUnit(value: number, baseUnit?: TimeUnit): TimeUnit | undefined {\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.get(\"baseUnit\");\r\n\t\t}\r\n\r\n\t\t// Convert to milliseconds\r\n\t\tlet currentUnit: any;\r\n\t\tlet ms = this.getMilliseconds(value, baseUnit);\r\n\t\t$object.eachContinue(this._getUnitValues(), (key, val) => {\r\n\t\t\tif (key == baseUnit || currentUnit) {\r\n\t\t\t\tlet num = ms / val;\r\n\t\t\t\tif (num <= 1) {\r\n\t\t\t\t\tif (!currentUnit) {\r\n\t\t\t\t\t\tcurrentUnit = key;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tcurrentUnit = key;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn currentUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts value to milliseconds according to `baseUnit`.\r\n\t *\r\n\t * @param value     Source duration value\r\n\t * @param baseUnit  Base unit\r\n\t * @return Value in milliseconds\r\n\t */\r\n\tpublic getMilliseconds(value: number, baseUnit?: TimeUnit): number {\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.get(\"baseUnit\");\r\n\t\t}\r\n\r\n\t\treturn value * this._getUnitValue(baseUnit!);\r\n\t}\r\n\r\n\tprotected _getUnitValue(timeUnit: TimeUnit): number {\r\n\t\treturn this._getUnitValues()[timeUnit];\r\n\t}\r\n\r\n\tprotected _getUnitValues(): any {\r\n\t\treturn {\r\n\t\t\t\"millisecond\": 1,\r\n\t\t\t\"second\": 1000,\r\n\t\t\t\"minute\": 60000,\r\n\t\t\t\"hour\": 3600000,\r\n\t\t\t\"day\": 86400000,\r\n\t\t\t\"week\": 604800000,\r\n\t\t\t\"month\": 2592000000,\r\n\t\t\t\"year\": 31536000000,\r\n\t\t};\r\n\t}\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}