{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\nimport * as $math from \"../util/Math\";\n/**\r\n * Draws a rectangle with a pointer.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\nvar PointedRectangle = /** @class */function (_super) {\n  __extends(PointedRectangle, _super);\n  function PointedRectangle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(PointedRectangle.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n      if (this.isDirty(\"pointerBaseWidth\") || this.isDirty(\"cornerRadius\") || this.isDirty(\"pointerLength\") || this.isDirty(\"pointerX\") || this.isDirty(\"pointerY\") || this.isDirty(\"width\") || this.isDirty(\"height\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(PointedRectangle.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n      if (this._clear) {\n        this.markDirtyBounds();\n        var w = this.width();\n        var h = this.height();\n        if (w > 0 && h > 0) {\n          var cr = this.get(\"cornerRadius\", 8);\n          cr = $math.fitToRange(cr, 0, Math.min(w / 2, h / 2));\n          var x = this.get(\"pointerX\", 0);\n          var y = this.get(\"pointerY\", 0);\n          var bwh = this.get(\"pointerBaseWidth\", 15) / 2;\n          // corner coordinates\n          // top left\n          var xtl = 0;\n          var ytl = 0;\n          // top right\n          var xtr = w;\n          var ytr = 0;\n          // bottom right\n          var xbr = w;\n          var ybr = h;\n          // bottom left\n          var xbl = 0;\n          var ybl = h;\n          // find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located\n          // d=(x−x1)(y2−y1)−(y−y1)(x2−x1)\n          var d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);\n          var d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl);\n          var display = this._display;\n          // top\n          display.moveTo(cr, 0);\n          if (d1 > 0 && d2 > 0) {\n            var stemX = Math.round($math.fitToRange(x, cr + bwh, w - bwh - cr));\n            y = $math.fitToRange(y, -Infinity, 0);\n            display.lineTo(stemX - bwh, 0);\n            display.lineTo(x, y);\n            display.lineTo(stemX + bwh, 0);\n          }\n          display.lineTo(w - cr, 0);\n          display.arcTo(w, 0, w, cr, cr);\n          // right\n          if (d1 > 0 && d2 < 0) {\n            var stemY = Math.round($math.fitToRange(y, cr + bwh, h - bwh - cr));\n            x = $math.fitToRange(x, w, Infinity);\n            display.lineTo(w, cr);\n            display.lineTo(w, stemY - bwh);\n            display.lineTo(x, y);\n            display.lineTo(w, stemY + bwh);\n          }\n          display.lineTo(w, h - cr);\n          display.arcTo(w, h, w - cr, h, cr);\n          // bottom\n          if (d1 < 0 && d2 < 0) {\n            var stemX = Math.round($math.fitToRange(x, cr + bwh, w - bwh - cr));\n            y = $math.fitToRange(y, h, Infinity);\n            display.lineTo(w - cr, h);\n            display.lineTo(stemX + bwh, h);\n            display.lineTo(x, y);\n            display.lineTo(stemX - bwh, h);\n          }\n          display.lineTo(cr, h);\n          display.arcTo(0, h, 0, h - cr, cr);\n          // left\n          if (d1 < 0 && d2 > 0) {\n            var stemY = Math.round($math.fitToRange(y, cr + bwh, h - cr - bwh));\n            x = $math.fitToRange(x, -Infinity, 0);\n            display.lineTo(0, h - cr);\n            display.lineTo(0, stemY + bwh);\n            display.lineTo(x, y);\n            display.lineTo(0, stemY - bwh);\n          }\n          display.lineTo(0, cr);\n          display.arcTo(0, 0, cr, 0, cr);\n        }\n      }\n    }\n  });\n  Object.defineProperty(PointedRectangle, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"PointedRectangle\"\n  });\n  Object.defineProperty(PointedRectangle, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([PointedRectangle.className])\n  });\n  return PointedRectangle;\n}(Graphics);\nexport { PointedRectangle };","map":{"version":3,"names":["Graphics","$math","PointedRectangle","_super","__extends","value","prototype","_beforeChanged","call","isDirty","_clear","_changed","markDirtyBounds","w","width","h","height","cr","get","fitToRange","Math","min","x","y","bwh","xtl","ytl","xtr","ytr","xbr","ybr","xbl","ybl","d1","d2","display","_display","moveTo","stemX","round","Infinity","lineTo","arcTo","stemY","Object","defineProperty","classNames","concat","className"],"sources":["../../../../../src/.internal/core/render/PointedRectangle.ts"],"sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\nimport * as $math from \"../util/Math\";\n\nexport interface IPointedRectangleSettings extends IGraphicsSettings {\n\n\t/**\n\t * A width of the pinter's (stem's) thick end (base) in pixels.\n\t */\n\tpointerBaseWidth?: number;\n\n\t/**\n\t * A length of the pinter (stem) in pixels.\n\t */\n\tpointerLength?: number;\n\n\t/**\n\t * X coordinate the shape is pointing to.\n\t */\n\tpointerX?: number;\n\n\t/**\n\t * Y coordinate the shape is pointing to.\n\t */\n\tpointerY?: number;\n\n\t/**\n\t * Corner radius in pixels.\n\t */\n\tcornerRadius?: number;\n}\n\nexport interface IPointedRectanglePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a rectangle with a pointer.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n * @important\n */\nexport class PointedRectangle extends Graphics {\n\n\tdeclare public _settings: IPointedRectangleSettings;\n\tdeclare public _privateSettings: IPointedRectanglePrivate;\n\n\tpublic static className: string = \"PointedRectangle\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([PointedRectangle.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"pointerBaseWidth\") || this.isDirty(\"cornerRadius\") || this.isDirty(\"pointerLength\") || this.isDirty(\"pointerX\") || this.isDirty(\"pointerY\") || this.isDirty(\"width\") || this.isDirty(\"height\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\n\t\t\tthis.markDirtyBounds();\n\n\t\t\tlet w = this.width();\n\t\t\tlet h = this.height();\n\n\t\t\tif (w > 0 && h > 0) {\n\t\t\t\tlet cr = this.get(\"cornerRadius\", 8);\n\t\t\t\tcr = $math.fitToRange(cr, 0, Math.min(w / 2, h / 2));\n\n\t\t\t\tlet x = this.get(\"pointerX\", 0);\n\t\t\t\tlet y = this.get(\"pointerY\", 0);\n\t\t\t\tlet bwh = this.get(\"pointerBaseWidth\", 15) / 2;\n\n\t\t\t\t// corner coordinates\n\t\t\t\t// top left\n\t\t\t\tlet xtl = 0;\n\t\t\t\tlet ytl = 0;\n\t\t\t\t// top right\n\t\t\t\tlet xtr = w;\n\t\t\t\tlet ytr = 0;\n\t\t\t\t// bottom right\n\t\t\t\tlet xbr = w;\n\t\t\t\tlet ybr = h;\n\t\t\t\t// bottom left\n\t\t\t\tlet xbl = 0;\n\t\t\t\tlet ybl = h;\n\n\t\t\t\t// find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located\n\t\t\t\t// d=(x−x1)(y2−y1)−(y−y1)(x2−x1)\n\t\t\t\tlet d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);\n\t\t\t\tlet d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl);\n\n\t\t\t\tconst display = this._display;\n\t\t\t\t// top\n\t\t\t\tdisplay.moveTo(cr, 0);\n\n\t\t\t\tif (d1 > 0 && d2 > 0) {\n\t\t\t\t\tlet stemX = Math.round($math.fitToRange(x, cr + bwh, w - bwh - cr));\n\t\t\t\t\ty = $math.fitToRange(y, -Infinity, 0);\n\n\t\t\t\t\tdisplay.lineTo(stemX - bwh, 0);\n\t\t\t\t\tdisplay.lineTo(x, y);\n\t\t\t\t\tdisplay.lineTo(stemX + bwh, 0);\n\t\t\t\t}\n\n\t\t\t\tdisplay.lineTo(w - cr, 0);\n\t\t\t\tdisplay.arcTo(w, 0, w, cr, cr);\n\n\t\t\t\t// right\n\t\t\t\tif (d1 > 0 && d2 < 0) {\n\t\t\t\t\tlet stemY = Math.round($math.fitToRange(y, cr + bwh, h - bwh - cr));\n\t\t\t\t\tx = $math.fitToRange(x, w, Infinity);\n\t\t\t\t\tdisplay.lineTo(w, cr);\n\t\t\t\t\tdisplay.lineTo(w, stemY - bwh);\n\t\t\t\t\tdisplay.lineTo(x, y);\n\t\t\t\t\tdisplay.lineTo(w, stemY + bwh);\n\t\t\t\t}\n\t\t\t\tdisplay.lineTo(w, h - cr);\n\t\t\t\tdisplay.arcTo(w, h, w - cr, h, cr);\n\n\t\t\t\t// bottom\n\t\t\t\tif (d1 < 0 && d2 < 0) {\n\t\t\t\t\tlet stemX = Math.round($math.fitToRange(x, cr + bwh, w - bwh - cr));\n\t\t\t\t\ty = $math.fitToRange(y, h, Infinity);\n\n\t\t\t\t\tdisplay.lineTo(w - cr, h);\n\t\t\t\t\tdisplay.lineTo(stemX + bwh, h);\n\t\t\t\t\tdisplay.lineTo(x, y);\n\t\t\t\t\tdisplay.lineTo(stemX - bwh, h);\n\t\t\t\t}\n\t\t\t\tdisplay.lineTo(cr, h)\n\t\t\t\tdisplay.arcTo(0, h, 0, h - cr, cr);\n\n\n\t\t\t\t// left\n\t\t\t\tif (d1 < 0 && d2 > 0) {\n\t\t\t\t\tlet stemY = Math.round($math.fitToRange(y, cr + bwh, h - cr - bwh));\n\t\t\t\t\tx = $math.fitToRange(x, -Infinity, 0);\n\t\t\t\t\tdisplay.lineTo(0, h - cr);\n\t\t\t\t\tdisplay.lineTo(0, stemY + bwh);\n\t\t\t\t\tdisplay.lineTo(x, y);\n\t\t\t\t\tdisplay.lineTo(0, stemY - bwh);\n\t\t\t\t}\n\t\t\t\tdisplay.lineTo(0, cr);\n\t\t\t\tdisplay.arcTo(0, 0, cr, 0, cr);\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}