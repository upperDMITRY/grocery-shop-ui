{"ast":null,"code":"import * as $object from \"./Object\";\nimport * as $ease from \"./Ease\";\n/**\r\n * An object representing a collection of setting values to apply as required.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info\r\n */\n\nvar State =\n/** @class */\nfunction () {\n  function State(entity, settings) {\n    Object.defineProperty(this, \"_entity\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_settings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_userSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._entity = entity;\n    this._settings = settings;\n  }\n\n  Object.defineProperty(State.prototype, \"get\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, fallback) {\n      var value = this._settings[key];\n\n      if (value !== undefined) {\n        return value;\n      } else {\n        return fallback;\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(State.prototype, \"setRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._settings[key] = value;\n    }\n  });\n  /**\r\n   * Sets a setting `value` for the specified `key` to be set when the state\r\n   * is applied.\r\n   *\r\n   * @param   key       Setting key\r\n   * @param   value     Setting value\r\n   * @return            Setting value\r\n   */\n\n  Object.defineProperty(State.prototype, \"set\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._userSettings[key] = true;\n      this.setRaw(key, value);\n    }\n  });\n  /**\r\n   * Removes a setting value for the specified `key`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   */\n\n  Object.defineProperty(State.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      delete this._userSettings[key];\n      delete this._settings[key];\n    }\n  });\n  /**\r\n   * Sets multiple settings at once.\r\n   *\r\n   * `settings` must be an object with key: value pairs.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param settings Settings\r\n   */\n\n  Object.defineProperty(State.prototype, \"setAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (settings) {\n      var _this = this;\n\n      $object.keys(settings).forEach(function (key) {\n        _this.set(key, settings[key]);\n      });\n    }\n  });\n  Object.defineProperty(State.prototype, \"_eachSetting\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (f) {\n      $object.each(this._settings, f);\n    }\n  });\n  /**\r\n   * Applies the state to the target element.\r\n   *\r\n   * All setting values are set immediately.\r\n   */\n\n  Object.defineProperty(State.prototype, \"apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var seen = {};\n      seen[\"stateAnimationEasing\"] = true;\n      seen[\"stateAnimationDuration\"] = true;\n\n      var defaultState = this._entity.states.lookup(\"default\");\n\n      this._eachSetting(function (key, value) {\n        if (!seen[key]) {\n          seen[key] = true; // save values to default state\n\n          if (_this !== defaultState) {\n            if (!(key in defaultState._settings)) {\n              defaultState._settings[key] = _this._entity.get(key);\n            }\n          }\n\n          _this._entity.set(key, value);\n        }\n      });\n    }\n  });\n  /**\r\n   * Applies the state to the target element.\r\n   *\r\n   * Returns an object representing all [[Animation]] objects created for\r\n   * each setting key transition.\r\n   *\r\n   * @return           Animations\r\n   */\n\n  Object.defineProperty(State.prototype, \"applyAnimate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (duration) {\n      var _this = this;\n\n      if (duration == null) {\n        duration = this._settings.stateAnimationDuration;\n      }\n\n      if (duration == null) {\n        duration = this.get(\"stateAnimationDuration\", this._entity.get(\"stateAnimationDuration\", 0));\n      }\n\n      var easing = this._settings.stateAnimationEasing;\n\n      if (easing == null) {\n        easing = this.get(\"stateAnimationEasing\", this._entity.get(\"stateAnimationEasing\", $ease.cubic));\n      }\n\n      var defaultState = this._entity.states.lookup(\"default\");\n\n      var seen = {};\n      seen[\"stateAnimationEasing\"] = true;\n      seen[\"stateAnimationDuration\"] = true;\n      var animations = {};\n\n      this._eachSetting(function (key, value) {\n        if (!seen[key]) {\n          seen[key] = true; // save values to default state\n\n          if (_this != defaultState) {\n            if (!(key in defaultState._settings)) {\n              defaultState._settings[key] = _this._entity.get(key);\n            }\n          }\n\n          var animation = _this._entity.animate({\n            key: key,\n            to: value,\n            duration: duration,\n            easing: easing\n          });\n\n          if (animation) {\n            animations[key] = animation;\n          }\n        }\n      });\n\n      return animations;\n    }\n  });\n  return State;\n}();\n\nexport { State };\n/**\r\n * Collection of [[State]] objects for an element.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info\r\n */\n\nvar States =\n/** @class */\nfunction () {\n  function States(entity) {\n    Object.defineProperty(this, \"_states\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_entity\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._entity = entity;\n  }\n  /**\r\n   * Checks if a state by `name` exists. Returns it there is one.\r\n   *\r\n   * @param  name  State name\r\n   * @return       State\r\n   */\n\n\n  Object.defineProperty(States.prototype, \"lookup\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name) {\n      return this._states[name];\n    }\n  });\n  /**\r\n   * Sets supplied `settings` on a state by the `name`.\r\n   *\r\n   * If such state does not yet exists, it is created.\r\n   *\r\n   * @param   name      State name\r\n   * @param   settings  Settings\r\n   * @return            New State\r\n   */\n\n  Object.defineProperty(States.prototype, \"create\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name, settings) {\n      var state = this._states[name];\n\n      if (state) {\n        state.setAll(settings);\n        return state;\n      } else {\n        var state_1 = new State(this._entity, settings);\n        this._states[name] = state_1;\n        return state_1;\n      }\n    }\n  });\n  /**\r\n   * Removes the state called `name`.\r\n   *\r\n   * @param   name      State name\r\n   */\n\n  Object.defineProperty(States.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name) {\n      delete this._states[name];\n    }\n  });\n  /**\r\n   * Applies a named state to the target element.\r\n   *\r\n   * @param  newState  State name\r\n   */\n\n  Object.defineProperty(States.prototype, \"apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (newState) {\n      var state = this._states[newState];\n\n      if (state) {\n        state.apply();\n      }\n\n      this._entity._applyState(newState);\n    }\n  });\n  /**\r\n   * Applies a named state to the element.\r\n   *\r\n   * Returns an object representing all [[Animation]] objects created for\r\n   * each setting key transition.\r\n   *\r\n   * @param   newState  State name\r\n   * @return            Animations\r\n   */\n\n  Object.defineProperty(States.prototype, \"applyAnimate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (newState, duration) {\n      var animations;\n      var state = this._states[newState];\n\n      if (state) {\n        animations = state.applyAnimate(duration);\n      }\n\n      this._entity._applyStateAnimated(newState, duration);\n\n      return animations;\n    }\n  });\n  return States;\n}();\n\nexport { States };","map":{"version":3,"sources":["../../../../../src/.internal/core/util/States.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,OAAZ,MAAyB,UAAzB;AACA,OAAO,KAAK,KAAZ,MAAuB,QAAvB;AAEA;;;;AAIG;;AACH,IAAA,KAAA;AAAA;AAAA,YAAA;AAKC,WAAA,KAAA,CAAY,MAAZ,EAAuB,QAAvB,EAAwD;AAJxD,IAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,SAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,WAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,eAAA,EAAA;sBAAA;wBAAA;oBAAA;aAA8C;AAA9C,KAAA;AAGC,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,SAAL,GAAiB,QAAjB;AACA;;;;;;WAcD,UAAgD,GAAhD,EAA0D,QAA1D,EAAwE;AACvE,UAAM,KAAK,GAAG,KAAK,SAAL,CAAe,GAAf,CAAd;;AAEA,UAAI,KAAK,KAAK,SAAd,EAAyB;AACxB,eAAO,KAAP;AAEA,OAHD,MAGO;AACN,eAAO,QAAP;AACA;AACD;;AAED;;AAEG;;;;;;WACH,UAAgD,GAAhD,EAA0D,KAA1D,EAAoF;AACnF,WAAK,SAAL,CAAe,GAAf,IAAsB,KAAtB;AACA;;AAED;;;;;;;AAOG;;;;;;WACH,UAA6C,GAA7C,EAAuD,KAAvD,EAAiF;AAChF,WAAK,aAAL,CAAmB,GAAnB,IAA0B,IAA1B;AACA,WAAK,MAAL,CAAY,GAAZ,EAAiB,KAAjB;AACA;;AAED;;;;;AAKG;;;;;;WACH,UAAmD,GAAnD,EAA2D;AAC1D,aAAO,KAAK,aAAL,CAAmB,GAAnB,CAAP;AACA,aAAO,KAAK,SAAL,CAAe,GAAf,CAAP;AACA;;AAED;;;;;;;AAOG;;;;;;WACH,UAAc,QAAd,EAAyC;AAAzC,UAAA,KAAA,GAAA,IAAA;;AACC,MAAA,OAAO,CAAC,IAAR,CAAa,QAAb,EAAuB,OAAvB,CAA+B,UAAC,GAAD,EAAI;AAClC,QAAA,KAAI,CAAC,GAAL,CAAS,GAAT,EAAc,QAAQ,CAAC,GAAD,CAAtB;AACA,OAFD;AAGA;;;;;;WAED,UAA0F,CAA1F,EAA6H;AAC5H,MAAA,OAAO,CAAC,IAAR,CAAa,KAAK,SAAlB,EAA6B,CAA7B;AACA;;AAED;;;;AAIG;;;;;;WACH,YAAA;AAAA,UAAA,KAAA,GAAA,IAAA;;AACC,UAAM,IAAI,GAA0B,EAApC;AAEA,MAAA,IAAI,CAAC,sBAAD,CAAJ,GAA+B,IAA/B;AACA,MAAA,IAAI,CAAC,wBAAD,CAAJ,GAAiC,IAAjC;;AAEA,UAAM,YAAY,GAAG,KAAK,OAAL,CAAa,MAAb,CAAoB,MAApB,CAA2B,SAA3B,CAArB;;AAEA,WAAK,YAAL,CAAkB,UAAC,GAAD,EAAM,KAAN,EAAW;AAC5B,YAAI,CAAC,IAAI,CAAC,GAAD,CAAT,EAAgB;AACf,UAAA,IAAI,CAAC,GAAD,CAAJ,GAAY,IAAZ,CADe,CAGf;;AACA,cAAI,KAAI,KAAK,YAAb,EAA2B;AAC1B,gBAAI,EAAE,GAAG,IAAI,YAAY,CAAC,SAAtB,CAAJ,EAAsC;AACrC,cAAA,YAAY,CAAC,SAAb,CAAuB,GAAvB,IAA8B,KAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,GAAjB,CAA9B;AACA;AACD;;AAED,UAAA,KAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,GAAjB,EAAsB,KAAtB;AACA;AACD,OAbD;AAcA;;AAID;;;;;;;AAOG;;;;;;WACH,UAAoB,QAApB,EAAqC;AAArC,UAAA,KAAA,GAAA,IAAA;;AAEC,UAAI,QAAQ,IAAI,IAAhB,EAAsB;AACrB,QAAA,QAAQ,GAAG,KAAK,SAAL,CAAe,sBAA1B;AACA;;AACD,UAAI,QAAQ,IAAI,IAAhB,EAAsB;AACrB,QAAA,QAAQ,GAAG,KAAK,GAAL,CAAS,wBAAT,EAAmC,KAAK,OAAL,CAAa,GAAb,CAAiB,wBAAjB,EAA2C,CAA3C,CAAnC,CAAX;AACA;;AAED,UAAI,MAAM,GAAG,KAAK,SAAL,CAAe,oBAA5B;;AACA,UAAI,MAAM,IAAI,IAAd,EAAoB;AACnB,QAAA,MAAM,GAAG,KAAK,GAAL,CAAS,sBAAT,EAAiC,KAAK,OAAL,CAAa,GAAb,CAAiB,sBAAjB,EAAyC,KAAK,CAAC,KAA/C,CAAjC,CAAT;AACA;;AAED,UAAM,YAAY,GAAG,KAAK,OAAL,CAAa,MAAb,CAAoB,MAApB,CAA2B,SAA3B,CAArB;;AAEA,UAAM,IAAI,GAA0B,EAApC;AAEA,MAAA,IAAI,CAAC,sBAAD,CAAJ,GAA+B,IAA/B;AACA,MAAA,IAAI,CAAC,wBAAD,CAAJ,GAAiC,IAAjC;AAEA,UAAM,UAAU,GAA+B,EAA/C;;AAEA,WAAK,YAAL,CAAkB,UAAC,GAAD,EAAM,KAAN,EAAW;AAC5B,YAAI,CAAC,IAAI,CAAC,GAAD,CAAT,EAAgB;AACf,UAAA,IAAI,CAAC,GAAD,CAAJ,GAAY,IAAZ,CADe,CAGf;;AACA,cAAI,KAAI,IAAI,YAAZ,EAA0B;AACzB,gBAAI,EAAE,GAAG,IAAI,YAAY,CAAC,SAAtB,CAAJ,EAAsC;AACrC,cAAA,YAAY,CAAC,SAAb,CAAuB,GAAvB,IAA8B,KAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,GAAjB,CAA9B;AACA;AACD;;AAED,cAAM,SAAS,GAAG,KAAI,CAAC,OAAL,CAAa,OAAb,CAAqB;AACtC,YAAA,GAAG,EAAE,GADiC;AAEtC,YAAA,EAAE,EAAE,KAFkC;AAGtC,YAAA,QAAQ,EAAE,QAH4B;AAItC,YAAA,MAAM,EAAE;AAJ8B,WAArB,CAAlB;;AAOA,cAAI,SAAJ,EAAe;AACd,YAAA,UAAU,CAAC,GAAD,CAAV,GAAkB,SAAlB;AACA;AACD;AACD,OAtBD;;AAwBA,aAAO,UAAP;AACA;;AACF,SAAA,KAAA;AAAC,CA1KD,EAAA;;;AA4KA;;;;AAIG;;AACH,IAAA,MAAA;AAAA;AAAA,YAAA;AAIC,WAAA,MAAA,CAAY,MAAZ,EAAqB;AAHrB,IAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,SAAA,EAAA;sBAAA;wBAAA;oBAAA;aAA+C;AAA/C,KAAA;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,SAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AAGC,SAAK,OAAL,GAAe,MAAf;AACA;AAED;;;;;AAKG;;;;;;;WACH,UAAc,IAAd,EAA0B;AACzB,aAAO,KAAK,OAAL,CAAa,IAAb,CAAP;AACA;;AAED;;;;;;;;AAQG;;;;;;WACH,UAAc,IAAd,EAA4B,QAA5B,EAA6D;AAC5D,UAAM,KAAK,GAAG,KAAK,OAAL,CAAa,IAAb,CAAd;;AAEA,UAAI,KAAJ,EAAW;AACV,QAAA,KAAK,CAAC,MAAN,CAAa,QAAb;AACA,eAAO,KAAP;AAEA,OAJD,MAIO;AACN,YAAM,OAAK,GAAG,IAAI,KAAJ,CAAU,KAAK,OAAf,EAAwB,QAAxB,CAAd;AACA,aAAK,OAAL,CAAa,IAAb,IAAqB,OAArB;AACA,eAAO,OAAP;AACA;AACD;;AAED;;;;AAIG;;;;;;WACH,UAAc,IAAd,EAA0B;AACzB,aAAO,KAAK,OAAL,CAAa,IAAb,CAAP;AACA;;AAED;;;;AAIG;;;;;;WACH,UAAa,QAAb,EAA6B;AAC5B,UAAM,KAAK,GAAG,KAAK,OAAL,CAAa,QAAb,CAAd;;AAEA,UAAI,KAAJ,EAAW;AACV,QAAA,KAAK,CAAC,KAAN;AACA;;AAED,WAAK,OAAL,CAAa,WAAb,CAAyB,QAAzB;AACA;;AAED;;;;;;;;AAQG;;;;;;WACH,UAAoB,QAApB,EAAsC,QAAtC,EAAuD;AACtD,UAAI,UAAJ;AACA,UAAM,KAAK,GAAG,KAAK,OAAL,CAAa,QAAb,CAAd;;AAEA,UAAI,KAAJ,EAAW;AACV,QAAA,UAAU,GAAG,KAAK,CAAC,YAAN,CAAmB,QAAnB,CAAb;AACA;;AAED,WAAK,OAAL,CAAa,mBAAb,CAAiC,QAAjC,EAA2C,QAA3C;;AACA,aAAO,UAAP;AACA;;AACF,SAAA,MAAA;AAAC,CArFD,EAAA","sourcesContent":["import type { Entity, Dirty } from \"./Entity\";\nimport type { Animations } from \"./Animation\";\nimport * as $object from \"./Object\";\nimport * as $ease from \"./Ease\";\n\n/**\n * An object representing a collection of setting values to apply as required.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info\n */\nexport class State<E extends Entity> {\n\tprivate _entity: E;\n\tpublic _settings: Partial<E[\"_settings\"]>;\n\tpublic _userSettings: Dirty<E[\"_settings\"]> = {};\n\n\tconstructor(entity: E, settings: Partial<E[\"_settings\"]>) {\n\t\tthis._entity = entity;\n\t\tthis._settings = settings;\n\t}\n\n\t/**\n\t * Returns settings value for the specified `key`.\n\t *\n\t * If there is no value, `fallback` is returned instead (if set).\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Settings value\n\t * @param   callback  Fallback value\n\t * @return            Value\n\t */\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key): this[\"_settings\"][Key];\n\tpublic get<Key extends keyof this[\"_settings\"], F>(key: Key, fallback: F): NonNullable<this[\"_settings\"][Key]> | F;\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key, fallback?: any): any {\n\t\tconst value = this._settings[key];\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic setRaw<Key extends keyof E[\"_settings\"]>(key: Key, value: E[\"_settings\"][Key]) {\n\t\tthis._settings[key] = value;\n\t}\n\n\t/**\n\t * Sets a setting `value` for the specified `key` to be set when the state\n\t * is applied.\n\t *\n\t * @param   key       Setting key\n\t * @param   value     Setting value\n\t * @return            Setting value\n\t */\n\tpublic set<Key extends keyof E[\"_settings\"]>(key: Key, value: E[\"_settings\"][Key]) {\n\t\tthis._userSettings[key] = true;\n\t\tthis.setRaw(key, value);\n\t}\n\n\t/**\n\t * Removes a setting value for the specified `key`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Setting key\n\t */\n\tpublic remove<Key extends keyof this[\"_settings\"]>(key: Key) {\n\t\tdelete this._userSettings[key];\n\t\tdelete this._settings[key];\n\t}\n\n\t/**\n\t * Sets multiple settings at once.\n\t *\n\t * `settings` must be an object with key: value pairs.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param settings Settings\n\t */\n\tpublic setAll(settings: this[\"_settings\"]) {\n\t\t$object.keys(settings).forEach((key) => {\n\t\t\tthis.set(key, settings[key]);\n\t\t});\n\t}\n\n\tprivate _eachSetting<Key extends keyof E[\"_settings\"], Value extends E[\"_settings\"][Key]>(f: (key: Key, value: Value) => void): void {\n\t\t$object.each(this._settings, f as any);\n\t}\n\n\t/**\n\t * Applies the state to the target element.\n\t *\n\t * All setting values are set immediately.\n\t */\n\tpublic apply() {\n\t\tconst seen: Dirty<E[\"_settings\"]> = {};\n\n\t\tseen[\"stateAnimationEasing\"] = true;\n\t\tseen[\"stateAnimationDuration\"] = true;\n\n\t\tconst defaultState = this._entity.states.lookup(\"default\")!;\n\n\t\tthis._eachSetting((key, value) => {\n\t\t\tif (!seen[key]) {\n\t\t\t\tseen[key] = true;\n\n\t\t\t\t// save values to default state\n\t\t\t\tif (this !== defaultState) {\n\t\t\t\t\tif (!(key in defaultState._settings)) {\n\t\t\t\t\t\tdefaultState._settings[key] = this._entity.get(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._entity.set(key, value);\n\t\t\t}\n\t\t});\n\t}\n\n\n\n\t/**\n\t * Applies the state to the target element.\n\t *\n\t * Returns an object representing all [[Animation]] objects created for\n\t * each setting key transition.\n\t *\n\t * @return           Animations\n\t */\n\tpublic applyAnimate(duration?: number): Animations<E[\"_settings\"]> {\n\n\t\tif (duration == null) {\n\t\t\tduration = this._settings.stateAnimationDuration;\n\t\t}\n\t\tif (duration == null) {\n\t\t\tduration = this.get(\"stateAnimationDuration\", this._entity.get(\"stateAnimationDuration\", 0));\n\t\t}\n\n\t\tlet easing = this._settings.stateAnimationEasing;\n\t\tif (easing == null) {\n\t\t\teasing = this.get(\"stateAnimationEasing\", this._entity.get(\"stateAnimationEasing\", $ease.cubic));\n\t\t}\n\n\t\tconst defaultState = this._entity.states.lookup(\"default\")!;\n\n\t\tconst seen: Dirty<E[\"_settings\"]> = {};\n\n\t\tseen[\"stateAnimationEasing\"] = true;\n\t\tseen[\"stateAnimationDuration\"] = true;\n\n\t\tconst animations: Animations<E[\"_settings\"]> = {};\n\n\t\tthis._eachSetting((key, value) => {\n\t\t\tif (!seen[key]) {\n\t\t\t\tseen[key] = true;\n\n\t\t\t\t// save values to default state\n\t\t\t\tif (this != defaultState) {\n\t\t\t\t\tif (!(key in defaultState._settings)) {\n\t\t\t\t\t\tdefaultState._settings[key] = this._entity.get(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst animation = this._entity.animate({\n\t\t\t\t\tkey: key,\n\t\t\t\t\tto: value,\n\t\t\t\t\tduration: duration!,\n\t\t\t\t\teasing: easing\n\t\t\t\t});\n\n\t\t\t\tif (animation) {\n\t\t\t\t\tanimations[key] = animation;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn animations;\n\t}\n}\n\n/**\n * Collection of [[State]] objects for an element.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info\n */\nexport class States<E extends Entity> {\n\tprivate _states: { [key: string]: State<E> } = {};\n\tprivate _entity: E;\n\n\tconstructor(entity: E) {\n\t\tthis._entity = entity;\n\t}\n\n\t/**\n\t * Checks if a state by `name` exists. Returns it there is one.\n\t *\n\t * @param  name  State name\n\t * @return       State\n\t */\n\tpublic lookup(name: string): State<E> | undefined {\n\t\treturn this._states[name];\n\t}\n\n\t/**\n\t * Sets supplied `settings` on a state by the `name`.\n\t *\n\t * If such state does not yet exists, it is created.\n\t *\n\t * @param   name      State name\n\t * @param   settings  Settings\n\t * @return            New State\n\t */\n\tpublic create(name: string, settings: Partial<E[\"_settings\"]>): State<E> {\n\t\tconst state = this._states[name];\n\n\t\tif (state) {\n\t\t\tstate.setAll(settings);\n\t\t\treturn state;\n\n\t\t} else {\n\t\t\tconst state = new State(this._entity, settings);\n\t\t\tthis._states[name] = state;\n\t\t\treturn state;\n\t\t}\n\t}\n\n\t/**\n\t * Removes the state called `name`.\n\t *\n\t * @param   name      State name\n\t */\n\tpublic remove(name: string): void {\n\t\tdelete this._states[name];\n\t}\n\n\t/**\n\t * Applies a named state to the target element.\n\t *\n\t * @param  newState  State name\n\t */\n\tpublic apply(newState: string) {\n\t\tconst state = this._states[newState];\n\n\t\tif (state) {\n\t\t\tstate.apply();\n\t\t}\n\n\t\tthis._entity._applyState(newState);\n\t}\n\n\t/**\n\t * Applies a named state to the element.\n\t *\n\t * Returns an object representing all [[Animation]] objects created for\n\t * each setting key transition.\n\t *\n\t * @param   newState  State name\n\t * @return            Animations\n\t */\n\tpublic applyAnimate(newState: string, duration?: number): Animations<E[\"_settings\"]> | undefined {\n\t\tlet animations;\n\t\tconst state = this._states[newState];\n\n\t\tif (state) {\n\t\t\tanimations = state.applyAnimate(duration);\n\t\t}\n\n\t\tthis._entity._applyStateAnimated(newState, duration);\n\t\treturn animations;\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}