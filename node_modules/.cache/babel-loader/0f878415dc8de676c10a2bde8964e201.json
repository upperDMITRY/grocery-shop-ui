{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Layout } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\n/**\r\n * A horizontal children layout for [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\r\n */\nvar HorizontalLayout = /** @class */function (_super) {\n  __extends(HorizontalLayout, _super);\n  function HorizontalLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @ignore\r\n   */\n  Object.defineProperty(HorizontalLayout.prototype, \"updateContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (container) {\n      var paddingLeft = container.get(\"paddingLeft\", 0);\n      var availableWidth = container.innerWidth();\n      var totalPercent = 0;\n      container.children.each(function (child) {\n        if (child.get(\"position\") == \"relative\") {\n          var childWidth = child.get(\"width\");\n          if (childWidth instanceof Percent) {\n            totalPercent += childWidth.value;\n          } else {\n            if (!$type.isNumber(childWidth)) {\n              childWidth = child.width();\n            }\n            availableWidth -= childWidth + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0);\n          }\n        }\n      });\n      if (availableWidth > 0) {\n        container.children.each(function (child) {\n          if (child.get(\"position\") == \"relative\") {\n            var childWidth = child.get(\"width\");\n            if (childWidth instanceof Percent) {\n              var privateWidth = availableWidth * childWidth.value / totalPercent - child.get(\"marginLeft\", 0) - child.get(\"marginRight\", 0);\n              child.setPrivate(\"width\", privateWidth);\n            }\n          }\n        });\n      }\n      var prevX = paddingLeft;\n      container.children.each(function (child) {\n        if (child.get(\"position\") == \"relative\") {\n          var bounds = child.adjustedLocalBounds();\n          var marginLeft = child.get(\"marginLeft\", 0);\n          var marginRight = child.get(\"marginRight\", 0);\n          var x = prevX + marginLeft - bounds.left;\n          child.setPrivate(\"x\", x);\n          prevX = x + bounds.right + marginRight;\n        }\n      });\n    }\n  });\n  Object.defineProperty(HorizontalLayout, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"HorizontalLayout\"\n  });\n  Object.defineProperty(HorizontalLayout, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Layout.classNames.concat([HorizontalLayout.className])\n  });\n  return HorizontalLayout;\n}(Layout);\nexport { HorizontalLayout };","map":{"version":3,"names":["Layout","$type","Percent","HorizontalLayout","_super","__extends","value","container","paddingLeft","get","availableWidth","innerWidth","totalPercent","children","each","child","childWidth","isNumber","width","privateWidth","setPrivate","prevX","bounds","adjustedLocalBounds","marginLeft","marginRight","x","left","right","Object","defineProperty","classNames","concat","className"],"sources":["../../../../../src/.internal/core/render/HorizontalLayout.ts"],"sourcesContent":["import { Layout } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { Container } from \"./Container\";\n\n/**\n * A horizontal children layout for [[Container]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\n */\nexport class HorizontalLayout extends Layout {\n\n\tpublic static className: string = \"HorizontalLayout\";\n\tpublic static classNames: Array<string> = Layout.classNames.concat([HorizontalLayout.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateContainer(container: Container): void {\n\n\t\tlet paddingLeft = container.get(\"paddingLeft\", 0);\n\n\t\tlet availableWidth = container.innerWidth();\n\n\t\tlet totalPercent = 0;\n\n\t\tcontainer.children.each((child) => {\n\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\tlet childWidth = child.get(\"width\");\n\t\t\t\tif (childWidth instanceof Percent) {\n\t\t\t\t\ttotalPercent += childWidth.value;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!$type.isNumber(childWidth)) {\n\t\t\t\t\t\tchildWidth = child.width();\n\t\t\t\t\t}\n\t\t\t\t\tavailableWidth -= childWidth + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif(availableWidth > 0){\n\t\t\tcontainer.children.each((child) => {\n\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\tlet childWidth = child.get(\"width\");\n\t\t\t\t\tif (childWidth instanceof Percent) {\n\t\t\t\t\t\tlet privateWidth = availableWidth * childWidth.value / totalPercent - child.get(\"marginLeft\", 0) - child.get(\"marginRight\", 0);\n\t\t\t\t\t\tchild.setPrivate(\"width\", privateWidth);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet prevX = paddingLeft;\n\n\t\tcontainer.children.each((child) => {\n\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\tlet bounds = child.adjustedLocalBounds();\n\t\t\t\tlet marginLeft = child.get(\"marginLeft\", 0);\n\t\t\t\tlet marginRight = child.get(\"marginRight\", 0);\n\t\t\t\tlet x = prevX + marginLeft - bounds.left;\n\t\t\t\tchild.setPrivate(\"x\", x);\n\t\t\t\tprevX = x + bounds.right + marginRight;\n\t\t\t}\n\t\t});\n\t}\n}\n"],"mappings":";AAAA,SAASA,MAAM,QAAQ,UAAU;AACjC,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,SAASC,OAAO,QAAQ,iBAAiB;AAGzC;;;;;AAKA,IAAAC,gBAAA,0BAAAC,MAAA;EAAsCC,SAAA,CAAAF,gBAAA,EAAAC,MAAA;EAAtC,SAAAD,iBAAA;;EAwDA;EAnDC;;;;;;;WAGA,SAAAG,CAAuBC,SAAoB;MAE1C,IAAIC,WAAW,GAAGD,SAAS,CAACE,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC;MAEjD,IAAIC,cAAc,GAAGH,SAAS,CAACI,UAAU,EAAE;MAE3C,IAAIC,YAAY,GAAG,CAAC;MAEpBL,SAAS,CAACM,QAAQ,CAACC,IAAI,CAAC,UAACC,KAAK;QAC7B,IAAIA,KAAK,CAACN,GAAG,CAAC,UAAU,CAAC,IAAI,UAAU,EAAE;UACxC,IAAIO,UAAU,GAAGD,KAAK,CAACN,GAAG,CAAC,OAAO,CAAC;UACnC,IAAIO,UAAU,YAAYd,OAAO,EAAE;YAClCU,YAAY,IAAII,UAAU,CAACV,KAAK;WAChC,MACI;YACJ,IAAI,CAACL,KAAK,CAACgB,QAAQ,CAACD,UAAU,CAAC,EAAE;cAChCA,UAAU,GAAGD,KAAK,CAACG,KAAK,EAAE;;YAE3BR,cAAc,IAAIM,UAAU,GAAGD,KAAK,CAACN,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC,GAAGM,KAAK,CAACN,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC;;;MAG1F,CAAC,CAAC;MAEF,IAAGC,cAAc,GAAG,CAAC,EAAC;QACrBH,SAAS,CAACM,QAAQ,CAACC,IAAI,CAAC,UAACC,KAAK;UAC7B,IAAIA,KAAK,CAACN,GAAG,CAAC,UAAU,CAAC,IAAI,UAAU,EAAE;YACxC,IAAIO,UAAU,GAAGD,KAAK,CAACN,GAAG,CAAC,OAAO,CAAC;YACnC,IAAIO,UAAU,YAAYd,OAAO,EAAE;cAClC,IAAIiB,YAAY,GAAGT,cAAc,GAAGM,UAAU,CAACV,KAAK,GAAGM,YAAY,GAAGG,KAAK,CAACN,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC,GAAGM,KAAK,CAACN,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC;cAC9HM,KAAK,CAACK,UAAU,CAAC,OAAO,EAAED,YAAY,CAAC;;;QAG1C,CAAC,CAAC;;MAGH,IAAIE,KAAK,GAAGb,WAAW;MAEvBD,SAAS,CAACM,QAAQ,CAACC,IAAI,CAAC,UAACC,KAAK;QAC7B,IAAIA,KAAK,CAACN,GAAG,CAAC,UAAU,CAAC,IAAI,UAAU,EAAE;UACxC,IAAIa,MAAM,GAAGP,KAAK,CAACQ,mBAAmB,EAAE;UACxC,IAAIC,UAAU,GAAGT,KAAK,CAACN,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;UAC3C,IAAIgB,WAAW,GAAGV,KAAK,CAACN,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC;UAC7C,IAAIiB,CAAC,GAAGL,KAAK,GAAGG,UAAU,GAAGF,MAAM,CAACK,IAAI;UACxCZ,KAAK,CAACK,UAAU,CAAC,GAAG,EAAEM,CAAC,CAAC;UACxBL,KAAK,GAAGK,CAAC,GAAGJ,MAAM,CAACM,KAAK,GAAGH,WAAW;;MAExC,CAAC,CAAC;IACH;;EArDAI,MAAA,CAAAC,cAAA,CAAA3B,gBAAA;;;;WAAkC;;EAClC0B,MAAA,CAAAC,cAAA,CAAA3B,gBAAA;;;;WAA0CH,MAAM,CAAC+B,UAAU,CAACC,MAAM,CAAC,CAAC7B,gBAAgB,CAAC8B,SAAS,CAAC;;EAqDhG,OAAA9B,gBAAC;CAAA,CAxDqCH,MAAM;SAA/BG,gBAAgB"},"metadata":{},"sourceType":"module"}