{"ast":null,"code":"import { Template } from \"./util/Template\";\nimport * as $order from \"./util/Order\";\nimport * as $array from \"./util/Array\";\n/**\r\n * A base class for an amCharts theme.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info\r\n * @important\r\n */\n\nvar Theme =\n/** @class */\nfunction () {\n  function Theme(root, isReal) {\n    Object.defineProperty(this, \"_root\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_rules\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._root = root;\n\n    if (!isReal) {\n      throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n    }\n  }\n  /**\r\n   * Use this method to create an instance of this class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @param   root      Root element\r\n   * @param   settings  Settings\r\n   * @param   template  Template\r\n   * @return            Instantiated object\r\n   */\n\n\n  Object.defineProperty(Theme, \"new\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (root) {\n      var x = new this(root, true);\n      x.setupDefaultRules();\n      return x;\n    }\n  });\n  Object.defineProperty(Theme.prototype, \"setupDefaultRules\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  /**\r\n   * Looks up the rules for a specific theme class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\r\n   * @param   themeClass Theme class\r\n   * @return             Array<IRule<A>>\r\n   */\n\n  Object.defineProperty(Theme.prototype, \"_lookupRules\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (themeClass) {\n      return this._rules[themeClass];\n    }\n  });\n  /**\r\n   * Creates a [[Template]] for specific theme class and tags.\r\n   *\r\n   * NOTE: the difference from `rule()` is that `ruleRaw()` does not do any\r\n   * type checks.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\r\n   * @param   themeClass Theme class\r\n   * @param   themeTags  Theme tags\r\n   * @return             Template\r\n   */\n\n  Object.defineProperty(Theme.prototype, \"ruleRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (themeClass, themeTags) {\n      if (themeTags === void 0) {\n        themeTags = [];\n      }\n\n      var rules = this._rules[themeClass];\n\n      if (!rules) {\n        rules = this._rules[themeClass] = [];\n      }\n\n      themeTags.sort($order.compare);\n\n      var _a = $array.getSortedIndex(rules, function (x) {\n        var order = $order.compare(x.tags.length, themeTags.length);\n\n        if (order === 0) {\n          return $order.compareArray(x.tags, themeTags, $order.compare);\n        } else {\n          return order;\n        }\n      }),\n          index = _a.index,\n          found = _a.found;\n\n      if (found) {\n        return rules[index].template;\n      } else {\n        var template = Template.new({});\n        rules.splice(index, 0, {\n          tags: themeTags,\n          template: template\n        });\n        return template;\n      }\n    }\n  });\n  /**\r\n   * Creates a [[Template]] for specific theme class and tags.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\r\n   * @param   themeClass Theme class\r\n   * @param   themeTags  Theme tags\r\n   * @return             Template\r\n   */\n\n  Object.defineProperty(Theme.prototype, \"rule\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (themeClass, themeTags) {\n      if (themeTags === void 0) {\n        themeTags = [];\n      }\n\n      return this.ruleRaw(themeClass, themeTags);\n    }\n  });\n  return Theme;\n}();\n\nexport { Theme };","map":{"version":3,"sources":["../../../../src/.internal/core/Theme.ts"],"names":[],"mappings":"AACA,SAAS,QAAT,QAAyB,iBAAzB;AAGA,OAAO,KAAK,MAAZ,MAAwB,cAAxB;AACA,OAAO,KAAK,MAAZ,MAAwB,cAAxB;AAOA;;;;;AAKG;;AACH,IAAA,KAAA;AAAA;AAAA,YAAA;AAmBC,WAAA,KAAA,CAAY,IAAZ,EAAwB,MAAxB,EAAsC;AAjBtC,IAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,OAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AA0BA,IAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,QAAA,EAAA;sBAAA;wBAAA;oBAAA;aAA8D;AAA9D,KAAA;AARC,SAAK,KAAL,GAAa,IAAb;;AACA,QAAI,CAAC,MAAL,EAAa;AACZ,YAAM,IAAI,KAAJ,CAAU,yDAAV,CAAN;AACA;AACD;AApBD;;;;;;;;AAQG;;;;;;;WACH,UAA4C,IAA5C,EAAsD;AACrD,UAAM,CAAC,GAAI,IAAI,IAAJ,CAAS,IAAT,EAAe,IAAf,CAAX;AACA,MAAA,CAAC,CAAC,iBAAF;AACA,aAAO,CAAP;AACA;;;;;;WASD,YAAA,CAAsC;;AAItC;;;;;;AAMG;;;;;;WACH,UAAsC,UAAtC,EAAwD;AACvD,aAAO,KAAK,MAAL,CAAY,UAAZ,CAAP;AACA;;AAED;;;;;;;;;;AAUG;;;;;;WACH,UAAiC,UAAjC,EAAqD,SAArD,EAAkF;AAA7B,UAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,QAAA,SAAA,GAAA,EAAA;AAA6B;;AACjF,UAAI,KAAK,GAAG,KAAK,MAAL,CAAY,UAAZ,CAAZ;;AAEA,UAAI,CAAC,KAAL,EAAY;AACX,QAAA,KAAK,GAAG,KAAK,MAAL,CAAY,UAAZ,IAA0B,EAAlC;AACA;;AAED,MAAA,SAAS,CAAC,IAAV,CAAe,MAAM,CAAC,OAAtB;;AAEM,UAAA,EAAA,GAAmB,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA6B,UAAC,CAAD,EAAE;AACvD,YAAM,KAAK,GAAG,MAAM,CAAC,OAAP,CAAe,CAAC,CAAC,IAAF,CAAO,MAAtB,EAA8B,SAAS,CAAC,MAAxC,CAAd;;AAEA,YAAI,KAAK,KAAK,CAAd,EAAiB;AAChB,iBAAO,MAAM,CAAC,YAAP,CAAoB,CAAC,CAAC,IAAtB,EAA4B,SAA5B,EAAuC,MAAM,CAAC,OAA9C,CAAP;AAEA,SAHD,MAGO;AACN,iBAAO,KAAP;AACA;AACD,OATwB,CAAnB;AAAA,UAAE,KAAK,GAAA,EAAA,CAAA,KAAP;AAAA,UAAS,KAAK,GAAA,EAAA,CAAA,KAAd;;AAWN,UAAI,KAAJ,EAAW;AACV,eAAO,KAAK,CAAC,KAAD,CAAL,CAAa,QAApB;AAEA,OAHD,MAGO;AACN,YAAM,QAAQ,GAAG,QAAQ,CAAC,GAAT,CAAgB,EAAhB,CAAjB;AAEA,QAAA,KAAK,CAAC,MAAN,CAAa,KAAb,EAAoB,CAApB,EAAuB;AACtB,UAAA,IAAI,EAAE,SADgB;AAEtB,UAAA,QAAQ,EAAA;AAFc,SAAvB;AAKA,eAAO,QAAP;AACA;AACD;;AAED;;;;;;;AAOG;;;;;;WACH,UAAsC,UAAtC,EAAqD,SAArD,EAAkF;AAA7B,UAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,QAAA,SAAA,GAAA,EAAA;AAA6B;;AACjF,aAAO,KAAK,OAAL,CAAa,UAAb,EAAyB,SAAzB,CAAP;AACA;;AACF,SAAA,KAAA;AAAC,CAlGD,EAAA","sourcesContent":["import type { Entity } from \"./util/Entity\";\nimport { Template } from \"./util/Template\";\nimport type { Root } from \"./Root\";\nimport type { IClasses } from \"./Classes\";\nimport * as $order from \"./util/Order\";\nimport * as $array from \"./util/Array\";\n\nexport interface IRule<A extends Entity> {\n\ttags: Array<string>;\n\ttemplate: Template<A>;\n}\n\n/**\n * A base class for an amCharts theme.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info\n * @important\n */\nexport class Theme {\n\n\tprotected _root!: Root;\n\n\t/**\n\t * Use this method to create an instance of this class.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\n\t * @param   root      Root element\n\t * @param   settings  Settings\n\t * @param   template  Template\n\t * @return            Instantiated object\n\t */\n\tstatic new<T extends typeof Theme>(this: T, root: Root): InstanceType<T> {\n\t\tconst x = (new this(root, true)) as InstanceType<T>;\n\t\tx.setupDefaultRules();\n\t\treturn x;\n\t}\n\n\tconstructor(root: Root, isReal:boolean) {\n\t\tthis._root = root;\n\t\tif (!isReal) {\n\t\t\tthrow new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n\t\t}\n\t}\n\n\tprotected setupDefaultRules(): void {}\n\n\tprotected _rules: { [type: string]: Array<IRule<Entity>>; } = {};\n\n\t/**\n\t * Looks up the rules for a specific theme class.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\n\t * @param   themeClass Theme class\n\t * @return             Array<IRule<A>>\n\t */\n\tpublic _lookupRules<A extends Entity>(themeClass: string): Array<IRule<A>> | undefined {\n\t\treturn this._rules[themeClass] as unknown as Array<IRule<A>> | undefined;\n\t}\n\n\t/**\n\t * Creates a [[Template]] for specific theme class and tags.\n\t *\n\t * NOTE: the difference from `rule()` is that `ruleRaw()` does not do any\n\t * type checks.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\n\t * @param   themeClass Theme class\n\t * @param   themeTags  Theme tags\n\t * @return             Template\n\t */\n\tpublic ruleRaw<A extends Entity>(themeClass: string, themeTags: Array<string> = []): Template<A> {\n\t\tlet rules = this._rules[themeClass];\n\n\t\tif (!rules) {\n\t\t\trules = this._rules[themeClass] = [];\n\t\t}\n\n\t\tthemeTags.sort($order.compare);\n\n\t\tconst { index, found } = $array.getSortedIndex(rules, (x) => {\n\t\t\tconst order = $order.compare(x.tags.length, themeTags.length);\n\n\t\t\tif (order === 0) {\n\t\t\t\treturn $order.compareArray(x.tags, themeTags, $order.compare);\n\n\t\t\t} else {\n\t\t\t\treturn order;\n\t\t\t}\n\t\t});\n\n\t\tif (found) {\n\t\t\treturn rules[index].template as Template<A>;\n\n\t\t} else {\n\t\t\tconst template = Template.new<A>({});\n\n\t\t\trules.splice(index, 0, {\n\t\t\t\ttags: themeTags,\n\t\t\t\ttemplate,\n\t\t\t});\n\n\t\t\treturn template;\n\t\t}\n\t}\n\n\t/**\n\t * Creates a [[Template]] for specific theme class and tags.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\n\t * @param   themeClass Theme class\n\t * @param   themeTags  Theme tags\n\t * @return             Template\n\t */\n\tpublic rule<K extends keyof IClasses>(themeClass: K, themeTags: Array<string> = []): Template<IClasses[K]> {\n\t\treturn this.ruleRaw(themeClass, themeTags) as Template<IClasses[K]>;\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}