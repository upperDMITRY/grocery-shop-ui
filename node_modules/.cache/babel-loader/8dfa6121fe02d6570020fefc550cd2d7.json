{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Chart } from \"./Chart\";\nimport { Container } from \"../../core/render/Container\";\nimport { ListAutoDispose } from \"../../core/util/List\";\nimport { p100 } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\n/**\r\n * A base class for all series-based charts.\r\n */\nvar SerialChart = /** @class */function (_super) {\n  __extends(SerialChart, _super);\n  function SerialChart() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * A [[Container]] where chart will store all series.\r\n     *\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(_this, \"seriesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(_this._root, {\n        width: p100,\n        height: p100,\n        isMeasured: false\n      })\n    });\n    /**\r\n     * A list of chart's series.\r\n     */\n    Object.defineProperty(_this, \"series\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListAutoDispose()\n    });\n    return _this;\n  }\n  Object.defineProperty(SerialChart.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n      _super.prototype._afterNew.call(this);\n      this._disposers.push(this.series);\n      var children = this.seriesContainer.children;\n      this._disposers.push(this.series.events.onAll(function (change) {\n        if (change.type === \"clear\") {\n          $array.each(change.oldValues, function (series) {\n            _this._removeSeries(series);\n          });\n          var colors = _this.get(\"colors\");\n          if (colors) {\n            colors.reset();\n          }\n        } else if (change.type === \"push\") {\n          children.moveValue(change.newValue);\n          _this._processSeries(change.newValue);\n        } else if (change.type === \"setIndex\") {\n          children.setIndex(change.index, change.newValue);\n          _this._processSeries(change.newValue);\n        } else if (change.type === \"insertIndex\") {\n          children.insertIndex(change.index, change.newValue);\n          _this._processSeries(change.newValue);\n        } else if (change.type === \"removeIndex\") {\n          _this._removeSeries(change.oldValue);\n        } else {\n          throw new Error(\"Unknown IListEvent type\");\n        }\n      }));\n    }\n  });\n  Object.defineProperty(SerialChart.prototype, \"_processSeries\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (series) {\n      series.chart = this;\n      series._placeBulletsContainer(this);\n    }\n  });\n  Object.defineProperty(SerialChart.prototype, \"_removeSeries\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (series) {\n      if (!series.isDisposed()) {\n        this.seriesContainer.children.removeValue(series);\n        series._removeBulletsContainer();\n      }\n    }\n  });\n  Object.defineProperty(SerialChart, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"SerialChart\"\n  });\n  Object.defineProperty(SerialChart, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Chart.classNames.concat([SerialChart.className])\n  });\n  return SerialChart;\n}(Chart);\nexport { SerialChart };","map":{"version":3,"names":["Chart","Container","ListAutoDispose","p100","$array","SerialChart","_super","__extends","_this","apply","arguments","Object","defineProperty","new","_root","width","height","isMeasured","value","prototype","_afterNew","call","_disposers","push","series","children","seriesContainer","events","onAll","change","type","each","oldValues","_removeSeries","colors","get","reset","moveValue","newValue","_processSeries","setIndex","index","insertIndex","oldValue","Error","chart","_placeBulletsContainer","isDisposed","removeValue","_removeBulletsContainer","classNames","concat","className"],"sources":["../../../../../src/.internal/core/render/SerialChart.ts"],"sourcesContent":["import type { Series } from \"./Series\";\n\nimport { Chart, IChartSettings, IChartPrivate, IChartEvents } from \"./Chart\";\nimport { Container } from \"../../core/render/Container\";\nimport { ListAutoDispose } from \"../../core/util/List\";\nimport { p100 } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\nimport type { ColorSet } from \"../../core/util/ColorSet\";\n\nexport interface ISerialChartSettings extends IChartSettings {\n\t/**\n\t * A [[ColorSet]] to use when asigning colors for series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Series_colors} for more info\n\t */\n\tcolors?: ColorSet;\n}\n\nexport interface ISerialChartPrivate extends IChartPrivate {\n}\n\nexport interface ISerialChartEvents extends IChartEvents {\n}\n\n/**\n * A base class for all series-based charts.\n */\nexport abstract class SerialChart extends Chart {\n\tpublic static className: string = \"SerialChart\";\n\tpublic static classNames: Array<string> = Chart.classNames.concat([SerialChart.className]);\n\n\tdeclare public _settings: ISerialChartSettings;\n\tdeclare public _privateSettings: ISerialChartPrivate;\n\tdeclare public _seriesType: Series;\n\tdeclare public _events: ISerialChartEvents;\n\n\t/**\n\t * A [[Container]] where chart will store all series.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly seriesContainer: Container = Container.new(this._root, { width: p100, height: p100, isMeasured: false });\n\n\t/**\n\t * A list of chart's series.\n\t */\n\tpublic readonly series: ListAutoDispose<this[\"_seriesType\"]> = new ListAutoDispose();\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis._disposers.push(this.series);\n\n\t\tconst children = this.seriesContainer.children;\n\n\t\tthis._disposers.push(this.series.events.onAll((change) => {\n\t\t\tif (change.type === \"clear\") {\n\t\t\t\t$array.each(change.oldValues, (series) => {\n\t\t\t\t\tthis._removeSeries(series);\n\t\t\t\t})\n\t\t\t\tconst colors = this.get(\"colors\");\n\t\t\t\tif (colors) {\n\t\t\t\t\tcolors.reset();\n\t\t\t\t}\n\n\t\t\t} else if (change.type === \"push\") {\n\t\t\t\tchildren.moveValue(change.newValue);\n\t\t\t\tthis._processSeries(change.newValue);\n\t\t\t} else if (change.type === \"setIndex\") {\n\t\t\t\tchildren.setIndex(change.index, change.newValue);\n\t\t\t\tthis._processSeries(change.newValue);\n\t\t\t} else if (change.type === \"insertIndex\") {\n\t\t\t\tchildren.insertIndex(change.index, change.newValue);\n\t\t\t\tthis._processSeries(change.newValue);\n\t\t\t} else if (change.type === \"removeIndex\") {\n\t\t\t\tthis._removeSeries(change.oldValue);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unknown IListEvent type\");\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected _processSeries(series: this[\"_seriesType\"]) {\n\t\tseries.chart = this;\n\t\tseries._placeBulletsContainer(this);\n\t}\n\n\tprotected _removeSeries(series: this[\"_seriesType\"]) {\n\t\tif (!series.isDisposed()) {\n\t\t\tthis.seriesContainer.children.removeValue(series);\n\t\t\tseries._removeBulletsContainer();\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}