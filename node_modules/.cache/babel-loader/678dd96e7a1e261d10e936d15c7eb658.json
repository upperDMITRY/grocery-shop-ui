{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Entity } from \"../../util/Entity\";\n/**\r\n * Base class for patterns.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\nvar Pattern = /** @class */function (_super) {\n  __extends(Pattern, _super);\n  function Pattern() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeGraphics()\n    });\n    Object.defineProperty(_this, \"_backgroundDisplay\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeGraphics()\n    });\n    Object.defineProperty(_this, \"_clear\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_pattern\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n  Object.defineProperty(Pattern.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      // Applying themes because pattern will not have parent\n      _super.prototype._afterNewApplyThemes.call(this);\n    }\n  });\n  Object.defineProperty(Pattern.prototype, \"pattern\", {\n    get: function () {\n      return this._pattern;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  Object.defineProperty(Pattern.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n      if (this.isDirty(\"repetition\") || this.isDirty(\"width\") || this.isDirty(\"height\") || this.isDirty(\"rotation\") || this.isDirty(\"color\") || this.isDirty(\"strokeWidth\") || this.isDirty(\"strokeDasharray\") || this.isDirty(\"strokeDashoffset\") || this.isDirty(\"colorOpacity\") || this.isDirty(\"fill\") || this.isDirty(\"fillOpacity\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Pattern.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n      if (this._clear) {\n        var repetition = this.get(\"repetition\", \"\");\n        var width = this.get(\"width\", 100);\n        var height = this.get(\"height\", 100);\n        var fill = this.get(\"fill\");\n        var fillOpacity = this.get(\"fillOpacity\", 1);\n        this._display.clear();\n        this._backgroundDisplay.clear();\n        if (fill && fillOpacity > 0) {\n          this._backgroundDisplay.beginFill(fill, fillOpacity);\n          this._backgroundDisplay.drawRect(0, 0, width, height);\n          this._backgroundDisplay.endFill();\n        }\n        this._display.angle = this.get(\"rotation\", 0);\n        //this._display.pivot = { x: width / 2, y: height / 2 };\n        this._draw();\n        this._pattern = this._root._renderer.createPattern(this._display, this._backgroundDisplay, repetition, width, height);\n      }\n    }\n  });\n  Object.defineProperty(Pattern, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Pattern\"\n  });\n  Object.defineProperty(Pattern, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Entity.classNames.concat([Pattern.className])\n  });\n  return Pattern;\n}(Entity);\nexport { Pattern };","map":{"version":3,"names":["Entity","Pattern","_super","__extends","_this","apply","arguments","Object","defineProperty","_root","_renderer","makeGraphics","value","prototype","_afterNewApplyThemes","call","get","_pattern","_beforeChanged","isDirty","_clear","_changed","repetition","width","height","fill","fillOpacity","_display","clear","_backgroundDisplay","beginFill","drawRect","endFill","angle","_draw","createPattern","classNames","concat","className"],"sources":["../../../../../../src/.internal/core/render/patterns/Pattern.ts"],"sourcesContent":["import type { IGraphics, IPattern } from \"../backend/Renderer\";\nimport type { Color } from \"../../util/Color\";\n\nimport { Entity, IEntitySettings, IEntityPrivate } from \"../../util/Entity\";\n\nexport interface IPatternSettings extends IEntitySettings {\n\n\t/**\n\t * Rotation of patterm in degrees. Supported values: -90 to 90.\n\t *\n\t * @default 0\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Rotation} for more info\n\t */\n\trotation?: number;\n\n\t/**\n\t * How pattern tiles are repeated when filling the area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Repetition} for more info\n\t */\n\trepetition?: \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"no-repeat\";\n\n\t/**\n\t * Width of the pattern tile, in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Sizing_patterns} for more info\n\t */\n\twidth?: number;\n\n\t/**\n\t * Width of the pattern tile, in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Sizing_patterns} for more info\n\t */\n\theight?: number;\n\n\t/**\n\t * Color of the pattern shape.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tcolor?: Color;\n\n\t/**\n\t * Opacity of the pattern shape.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tcolorOpacity?: number;\n\n\t/**\n\t * Width of the pattern's line elements.\n\t *\n\t * @default 1\n\t */\n\tstrokeWidth?: number;\n\n\t/**\n\t * Stroke (border or line) dash settings.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/#Dashed_lines} for more information\n\t */\n\tstrokeDasharray?: number[] | number;\n\n\t/**\n\t * Stroke (border or line) dash offset.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/#Dashed_lines} for more information\n\t */\n\tstrokeDashoffset?: number;\n\n\t/**\n\t * Color to fill gaps between pattern shapes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tfill?: Color;\n\n\t/**\n\t * Opacity of the fill for gaps between pattern shapes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tfillOpacity?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tcolorInherited?: boolean;\n\n\t/**\n\t * @ignore\n\t */\n\tfillInherited?: boolean;\n}\n\nexport interface IPatternPrivate extends IEntityPrivate {\n}\n\n/**\n * Base class for patterns.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class Pattern extends Entity {\n\tprotected _afterNew() {\n\t\t// Applying themes because pattern will not have parent\n\t\tsuper._afterNewApplyThemes();\n\t}\n\n\tdeclare public _settings: IPatternSettings;\n\tdeclare public _privateSettings: IPatternPrivate;\n\n\tpublic static className: string = \"Pattern\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([Pattern.className]);\n\n\tpublic _display: IGraphics = this._root._renderer.makeGraphics();\n\tpublic _backgroundDisplay: IGraphics = this._root._renderer.makeGraphics();\n\n\tprotected _clear = false;\n\n\tprotected _pattern: IPattern | undefined;\n\n\tpublic get pattern(): IPattern | undefined {\n\t\treturn this._pattern;\n\t}\n\n\tprotected _draw(): void { }\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"repetition\") || this.isDirty(\"width\") || this.isDirty(\"height\") || this.isDirty(\"rotation\") || this.isDirty(\"color\") || this.isDirty(\"strokeWidth\") || this.isDirty(\"strokeDasharray\") || this.isDirty(\"strokeDashoffset\") || this.isDirty(\"colorOpacity\") || this.isDirty(\"fill\") || this.isDirty(\"fillOpacity\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\t\t\tconst repetition = this.get(\"repetition\", \"\");\n\t\t\tconst width = this.get(\"width\", 100);\n\t\t\tconst height = this.get(\"height\", 100);\n\t\t\tconst fill = this.get(\"fill\");\n\t\t\tconst fillOpacity = this.get(\"fillOpacity\", 1);\n\n\t\t\tthis._display.clear();\n\t\t\tthis._backgroundDisplay.clear();\n\n\t\t\tif (fill && (fillOpacity > 0)) {\n\t\t\t\tthis._backgroundDisplay.beginFill(fill, fillOpacity);\n\t\t\t\tthis._backgroundDisplay.drawRect(0, 0, width, height);\n\t\t\t\tthis._backgroundDisplay.endFill();\n\t\t\t}\n\n\t\t\tthis._display.angle = this.get(\"rotation\", 0);\n\t\t\t//this._display.pivot = { x: width / 2, y: height / 2 };\n\t\t\tthis._draw();\n\n\t\t\tthis._pattern = this._root._renderer.createPattern(this._display, this._backgroundDisplay, repetition, width, height);\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}