{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $type from \"./Type\";\nimport * as $utils from \"./Utils\";\nexport function sleep(ms) {\n  return new Promise(function (resolve, _reject) {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * Maps time period names to their numeric representations in milliseconds.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport var timeUnitDurations = {\n  millisecond: 1,\n  second: 1000,\n  minute: 60000,\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n  month: 365.242 / 12 * 86400000,\n  year: 31536000000\n};\n/**\r\n * Returns the next time unit that goes after source `unit`.\r\n *\r\n * E.g. \"hour\" is the next unit after \"minute\", etc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit  Source time unit\r\n * @return Next time unit\r\n */\nexport function getNextUnit(unit) {\n  switch (unit) {\n    case \"year\":\n      return;\n    case \"month\":\n      return \"year\";\n    case \"week\":\n      return \"month\";\n    case \"day\":\n      return \"month\";\n    // not a mistake\n    case \"hour\":\n      return \"day\";\n    case \"minute\":\n      return \"hour\";\n    case \"second\":\n      return \"minute\";\n    case \"millisecond\":\n      return \"second\";\n  }\n}\n/**\r\n * Returns number of milliseconds in the `count` of time `unit`.\r\n *\r\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\r\n * \"month\", and \"year\".\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit   Time unit\r\n * @param count  Number of units\r\n * @return Milliseconds\r\n */\nexport function getDuration(unit, count) {\n  if (count == null) {\n    count = 1;\n  }\n  return timeUnitDurations[unit] * count;\n}\n/**\r\n * @ignore\r\n */\nexport function getIntervalDuration(interval) {\n  if (interval) {\n    return timeUnitDurations[interval.timeUnit] * interval.count;\n  }\n  return 0;\n}\n/**\r\n * Returns current `Date` object.\r\n *\r\n * @return Current date\r\n */\nexport function now() {\n  return new Date();\n}\n/**\r\n * Returns current timestamp.\r\n *\r\n * @return Current timestamp\r\n */\nexport function getTime() {\n  return now().getTime();\n}\n/**\r\n * Returns a copy of the `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date  Source date\r\n * @return Copy\r\n */\nexport function copy(date) {\n  return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\n}\n/**\r\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\r\n * represent a \"range\" of time, rather the same time date.\r\n *\r\n * @ignore Exclude from docs\r\n * @param dateOne  Date 1\r\n * @param dateTwo  Date 2\r\n * @param unit     Time unit to check\r\n * @return Range?\r\n */\nexport function checkChange(dateOne, dateTwo, unit, utc) {\n  var timeOne = dateOne.getTime();\n  var timeTwo = dateTwo.getTime();\n  // quick\n  if (timeTwo - timeOne > getDuration(unit, 1.2)) {\n    return true;\n  }\n  dateOne = new Date(timeOne);\n  dateTwo = new Date(timeTwo);\n  var timeZoneOffset1 = 0;\n  var timeZoneOffset2 = 0;\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset1 = dateOne.getTimezoneOffset();\n    dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\n    timeZoneOffset2 = dateTwo.getTimezoneOffset();\n    dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\n  }\n  var changed = false;\n  switch (unit) {\n    case \"year\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      }\n      break;\n    case \"month\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      } else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      }\n      break;\n    case \"day\":\n      if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      } else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\n        changed = true;\n      }\n      break;\n    case \"hour\":\n      if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\n        changed = true;\n      }\n      break;\n    case \"minute\":\n      if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\n        changed = true;\n      }\n      break;\n    case \"second\":\n      if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\n        changed = true;\n      }\n      break;\n    case \"millisecond\":\n      if (dateOne.getTime() != dateTwo.getTime()) {\n        changed = true;\n      }\n      break;\n  }\n  if (changed) {\n    return true;\n  }\n  var nextUnit = getNextUnit(unit);\n  if (nextUnit) {\n    dateOne.setUTCMinutes(dateOne.getUTCMinutes() + timeZoneOffset1);\n    dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() + timeZoneOffset2);\n    return checkChange(dateOne, dateTwo, nextUnit, utc);\n  } else {\n    return false;\n  }\n}\n/**\r\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date   Source date\r\n * @param unit   Time unit\r\n * @param count  Number of units to add\r\n * @return Modified date\r\n */\nexport function add(date, unit, count, utc) {\n  var timeZoneOffset = 0;\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset = date.getTimezoneOffset();\n    date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n  }\n  switch (unit) {\n    case \"day\":\n      var day = date.getUTCDate();\n      date.setUTCDate(day + count);\n      break;\n    case \"second\":\n      var seconds = date.getUTCSeconds();\n      date.setUTCSeconds(seconds + count);\n      break;\n    case \"millisecond\":\n      var milliseconds = date.getUTCMilliseconds();\n      date.setUTCMilliseconds(milliseconds + count);\n      break;\n    case \"hour\":\n      var hours = date.getUTCHours();\n      date.setUTCHours(hours + count);\n      break;\n    case \"minute\":\n      var minutes = date.getUTCMinutes();\n      date.setUTCMinutes(minutes + count);\n      break;\n    case \"year\":\n      var year = date.getUTCFullYear();\n      date.setUTCFullYear(year + count);\n      break;\n    case \"month\":\n      var month = date.getUTCMonth();\n      date.setUTCMonth(month + count);\n      break;\n    case \"week\":\n      var wday = date.getUTCDate();\n      date.setUTCDate(wday + count * 7);\n      break;\n  }\n  if (!utc && unit != \"millisecond\") {\n    date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n    if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n      var newTimeZoneOffset = date.getTimezoneOffset();\n      if (newTimeZoneOffset != timeZoneOffset) {\n        var diff = newTimeZoneOffset - timeZoneOffset;\n        date.setUTCMinutes(date.getUTCMinutes() + diff);\n        // solves issues if newe time falls back to old time zone\n        if (date.getTimezoneOffset() != newTimeZoneOffset) {\n          date.setUTCMinutes(date.getUTCMinutes() - diff);\n        }\n      }\n    }\n  }\n  return date;\n}\n/**\r\n * \"Rounds\" the date to specific time unit.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date             Source date\r\n * @param unit             Time unit\r\n * @param count            Number of units to round to\r\n * @param firstDateOfWeek  First day of week\r\n * @return New date\r\n */\nexport function round(date, unit, count, firstDateOfWeek, utc, firstDate) {\n  if (!$type.isNumber(count)) {\n    count = 1;\n  }\n  var timeZoneOffset = 0;\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset = date.getTimezoneOffset();\n    date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n  }\n  switch (unit) {\n    case \"day\":\n      var day = date.getUTCDate();\n      if (count > 1) {\n        //\tday = Math.floor(day / count) * count;\n        if (firstDate) {\n          firstDate = round(firstDate, \"day\", 1);\n          var difference = date.getTime() - firstDate.getTime();\n          var unitCount = Math.floor(difference / getDuration(\"day\") / count);\n          var duration = getDuration(\"day\", unitCount * count);\n          date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n        }\n      } else {\n        date.setUTCDate(day);\n      }\n      date.setUTCHours(0, 0, 0, 0);\n      break;\n    case \"second\":\n      var seconds = date.getUTCSeconds();\n      if (count > 1) {\n        seconds = Math.floor(seconds / count) * count;\n      }\n      date.setUTCSeconds(seconds, 0);\n      break;\n    case \"millisecond\":\n      if (count == 1) {\n        return date; // much better for perf!\n      }\n\n      var milliseconds = date.getUTCMilliseconds();\n      milliseconds = Math.floor(milliseconds / count) * count;\n      date.setUTCMilliseconds(milliseconds);\n      break;\n    case \"hour\":\n      var hours = date.getUTCHours();\n      if (count > 1) {\n        hours = Math.floor(hours / count) * count;\n      }\n      date.setUTCHours(hours, 0, 0, 0);\n      break;\n    case \"minute\":\n      var minutes = date.getUTCMinutes();\n      milliseconds = date.getUTCMilliseconds();\n      if (count > 1) {\n        minutes = Math.floor(minutes / count) * count;\n      }\n      date.setUTCMinutes(minutes, 0, 0);\n      break;\n    case \"month\":\n      var month = date.getUTCMonth();\n      if (count > 1) {\n        month = Math.floor(month / count) * count;\n      }\n      date.setUTCMonth(month, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      break;\n    case \"year\":\n      var year = date.getUTCFullYear();\n      if (count > 1) {\n        year = Math.floor(year / count) * count;\n      }\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      //let nonUTCDateY = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n      //timeZoneOffset = nonUTCDateY.getTimezoneOffset();\n      break;\n    case \"week\":\n      var wday = date.getUTCDate();\n      var weekDay = date.getUTCDay();\n      if (!$type.isNumber(firstDateOfWeek)) {\n        firstDateOfWeek = 1;\n      }\n      // todo: rounding when count is not 1\n      if (weekDay >= firstDateOfWeek) {\n        wday = wday - weekDay + firstDateOfWeek;\n      } else {\n        wday = wday - (7 + weekDay) + firstDateOfWeek;\n      }\n      date.setUTCDate(wday);\n      date.setUTCHours(0, 0, 0, 0);\n      break;\n  }\n  if (!utc && unit != \"millisecond\") {\n    date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n    if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n      var newTimeZoneOffset = date.getTimezoneOffset();\n      if (newTimeZoneOffset != timeZoneOffset) {\n        var diff = newTimeZoneOffset - timeZoneOffset;\n        date.setUTCMinutes(date.getUTCMinutes() + diff);\n      }\n    }\n  }\n  return date;\n}\n/**\r\n * Returns a new `Date` object which corresponds to the source date in a\r\n * specific timezone.\r\n *\r\n * @since 4.10.1\r\n * @param   date      Source date\r\n * @param   timezone  Timezone identifier\r\n * @return            Recalculated new Date\r\n */\nexport function setTimezone(date, timezone) {\n  var d = new Date(date.toLocaleString(\"en-US\", {\n    timeZone: timezone\n  }));\n  return d;\n}\n/**\r\n * @ignore\r\n */\nexport function chooseInterval(index, duration, gridCount, intervals) {\n  var gridInterval = intervals[index];\n  var intervalDuration = getIntervalDuration(gridInterval);\n  var lastIndex = intervals.length - 1;\n  if (index >= lastIndex) {\n    return __assign({}, intervals[lastIndex]);\n  }\n  var count = Math.ceil(duration / intervalDuration);\n  if (duration < intervalDuration && index > 0) {\n    return __assign({}, intervals[index - 1]);\n  }\n  if (count <= gridCount) {\n    return __assign({}, intervals[index]);\n  } else {\n    if (index + 1 < intervals.length) {\n      return chooseInterval(index + 1, duration, gridCount, intervals);\n    } else {\n      return __assign({}, intervals[index]);\n    }\n  }\n}\n/**\r\n * @ignore\r\n */\nexport function getUnitValue(date, unit) {\n  switch (unit) {\n    case \"day\":\n      return date.getDate();\n    case \"second\":\n      return date.getSeconds();\n    case \"millisecond\":\n      return date.getMilliseconds();\n    case \"hour\":\n      return date.getHours();\n    case \"minute\":\n      return date.getMinutes();\n    case \"month\":\n      return date.getMonth();\n    case \"year\":\n      return date.getFullYear();\n    case \"week\":\n      return $utils.getWeek(date);\n  }\n}","map":{"version":3,"names":["$type","$utils","sleep","ms","Promise","resolve","_reject","setTimeout","timeUnitDurations","millisecond","second","minute","hour","day","week","month","year","getNextUnit","unit","getDuration","count","getIntervalDuration","interval","timeUnit","now","Date","getTime","copy","date","checkChange","dateOne","dateTwo","utc","timeOne","timeTwo","timeZoneOffset1","timeZoneOffset2","getTimezoneOffset","setUTCMinutes","getUTCMinutes","changed","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCSeconds","nextUnit","add","timeZoneOffset","setUTCDate","seconds","setUTCSeconds","milliseconds","getUTCMilliseconds","setUTCMilliseconds","hours","setUTCHours","minutes","setUTCFullYear","setUTCMonth","wday","newTimeZoneOffset","diff","round","firstDateOfWeek","firstDate","isNumber","difference","unitCount","Math","floor","duration","setTime","weekDay","getUTCDay","setTimezone","timezone","d","toLocaleString","timeZone","chooseInterval","index","gridCount","intervals","gridInterval","intervalDuration","lastIndex","length","__assign","ceil","getUnitValue","getDate","getSeconds","getMilliseconds","getHours","getMinutes","getMonth","getFullYear","getWeek"],"sources":["../../../../../src/.internal/core/util/Time.ts"],"sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport * as $type from \"./Type\";\nimport * as $utils from \"./Utils\";\n\n\nexport type TimeUnit = \"millisecond\" | \"second\" | \"minute\" | \"hour\" | \"day\" | \"week\" | \"month\" | \"year\";\n\nexport interface ITimeInterval {\n\ttimeUnit: TimeUnit;\n\tcount: number;\n}\n\n\nexport function sleep(ms: number): Promise<void> {\n\treturn new Promise((resolve, _reject) => {\n\t\tsetTimeout(resolve, ms);\n\t});\n}\n\n\n/**\n * Maps time period names to their numeric representations in milliseconds.\n *\n * @ignore Exclude from docs\n */\nexport let timeUnitDurations: { [Key in TimeUnit]: number } = {\n\tmillisecond: 1,\n\tsecond: 1000,\n\tminute: 60000,\n\thour: 3600000,\n\tday: 86400000,\n\tweek: 604800000,\n\tmonth: 365.242 / 12 * 86400000,\n\tyear: 31536000000\n};\n\n/**\n * Returns the next time unit that goes after source `unit`.\n *\n * E.g. \"hour\" is the next unit after \"minute\", etc.\n *\n * @ignore Exclude from docs\n * @param unit  Source time unit\n * @return Next time unit\n */\nexport function getNextUnit(unit: TimeUnit): TimeUnit | undefined {\n\tswitch (unit) {\n\t\tcase \"year\":\n\t\t\treturn;\n\t\tcase \"month\":\n\t\t\treturn \"year\";\n\n\t\tcase \"week\":\n\t\t\treturn \"month\";\n\n\t\tcase \"day\":\n\t\t\treturn \"month\"; // not a mistake\n\n\t\tcase \"hour\":\n\t\t\treturn \"day\";\n\n\t\tcase \"minute\":\n\t\t\treturn \"hour\";\n\n\t\tcase \"second\":\n\t\t\treturn \"minute\"\n\n\t\tcase \"millisecond\":\n\t\t\treturn \"second\";\n\t}\n}\n\n/**\n * Returns number of milliseconds in the `count` of time `unit`.\n *\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\n * \"month\", and \"year\".\n *\n * @ignore Exclude from docs\n * @param unit   Time unit\n * @param count  Number of units\n * @return Milliseconds\n */\nexport function getDuration(unit: TimeUnit, count?: number): number {\n\tif (count == null) {\n\t\tcount = 1;\n\t}\n\treturn timeUnitDurations[unit] * count;\n}\n\n/**\n * @ignore\n */\nexport function getIntervalDuration(interval: ITimeInterval | undefined) {\n\tif (interval) {\n\t\treturn timeUnitDurations[interval.timeUnit] * interval.count;\n\t}\n\treturn 0;\n}\n\n/**\n * Returns current `Date` object.\n *\n * @return Current date\n */\nexport function now(): Date {\n\treturn new Date();\n}\n\n/**\n * Returns current timestamp.\n *\n * @return Current timestamp\n */\nexport function getTime(): number {\n\treturn now().getTime();\n}\n\n/**\n * Returns a copy of the `Date` object.\n *\n * @ignore Exclude from docs\n * @param date  Source date\n * @return Copy\n */\nexport function copy(date: Date): Date {\n\treturn new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\n}\n\n/**\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\n * represent a \"range\" of time, rather the same time date.\n *\n * @ignore Exclude from docs\n * @param dateOne  Date 1\n * @param dateTwo  Date 2\n * @param unit     Time unit to check\n * @return Range?\n */\nexport function checkChange(dateOne: Date, dateTwo: Date, unit: TimeUnit, utc?: boolean): boolean {\n\n\tconst timeOne = dateOne.getTime();\n\tconst timeTwo = dateTwo.getTime();\n\n\t// quick\n\tif ((timeTwo - timeOne) > getDuration(unit, 1.2)) {\n\t\treturn true;\n\t}\n\n\tdateOne = new Date(timeOne);\n\tdateTwo = new Date(timeTwo);\n\n\tlet timeZoneOffset1 = 0;\n\tlet timeZoneOffset2 = 0;\n\n\tif (!utc && unit != \"millisecond\") {\n\t\ttimeZoneOffset1 = dateOne.getTimezoneOffset();\n\t\tdateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\n\n\t\ttimeZoneOffset2 = dateTwo.getTimezoneOffset();\n\t\tdateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\n\t}\n\n\tlet changed = false;\n\tswitch (unit) {\n\t\tcase \"year\":\n\t\t\tif (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"month\":\n\t\t\tif (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\telse if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"day\":\n\t\t\tif (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\telse if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase \"hour\":\n\t\t\tif (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"minute\":\n\t\t\tif (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase \"second\":\n\t\t\tif (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"millisecond\":\n\t\t\tif (dateOne.getTime() != dateTwo.getTime()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\tif (changed) {\n\t\treturn true;\n\t}\n\n\tlet nextUnit: $type.Optional<TimeUnit> = getNextUnit(unit);\n\tif (nextUnit) {\n\t\tdateOne.setUTCMinutes(dateOne.getUTCMinutes() + timeZoneOffset1);\n\t\tdateTwo.setUTCMinutes(dateTwo.getUTCMinutes() + timeZoneOffset2);\n\t\treturn checkChange(dateOne, dateTwo, nextUnit, utc);\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\n/**\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\n *\n * @ignore Exclude from docs\n * @param date   Source date\n * @param unit   Time unit\n * @param count  Number of units to add\n * @return Modified date\n */\nexport function add(date: Date, unit: TimeUnit, count: number, utc?: boolean): Date {\n\tlet timeZoneOffset = 0;\n\n\tif (!utc && unit != \"millisecond\") {\n\t\ttimeZoneOffset = date.getTimezoneOffset();\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n\t}\n\n\tswitch (unit) {\n\t\tcase \"day\":\n\t\t\tlet day: number = date.getUTCDate();\n\t\t\tdate.setUTCDate(day + count);\n\t\t\tbreak;\n\n\t\tcase \"second\":\n\t\t\tlet seconds: number = date.getUTCSeconds();\n\t\t\tdate.setUTCSeconds(seconds + count);\n\t\t\tbreak;\n\n\t\tcase \"millisecond\":\n\t\t\tlet milliseconds: number = date.getUTCMilliseconds();\n\t\t\tdate.setUTCMilliseconds(milliseconds + count);\n\t\t\tbreak;\n\n\t\tcase \"hour\":\n\t\t\tlet hours: number = date.getUTCHours();\n\t\t\tdate.setUTCHours(hours + count);\n\t\t\tbreak;\n\n\t\tcase \"minute\":\n\t\t\tlet minutes: number = date.getUTCMinutes();\n\t\t\tdate.setUTCMinutes(minutes + count);\n\t\t\tbreak;\n\n\t\tcase \"year\":\n\t\t\tlet year: number = date.getUTCFullYear();\n\t\t\tdate.setUTCFullYear(year + count);\n\t\t\tbreak;\n\n\t\tcase \"month\":\n\t\t\tlet month: number = date.getUTCMonth();\n\t\t\tdate.setUTCMonth(month + count);\n\t\t\tbreak;\n\n\t\tcase \"week\":\n\t\t\tlet wday: number = date.getUTCDate();\n\t\t\tdate.setUTCDate(wday + count * 7);\n\t\t\tbreak;\n\t}\n\tif (!utc && unit != \"millisecond\") {\n\t\tdate.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n\t\tif (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n\t\t\tlet newTimeZoneOffset = date.getTimezoneOffset();\n\t\t\tif (newTimeZoneOffset != timeZoneOffset) {\n\t\t\t\tlet diff = newTimeZoneOffset - timeZoneOffset;\n\n\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() + diff);\n\t\t\t\t// solves issues if newe time falls back to old time zone\n\t\t\t\tif (date.getTimezoneOffset() != newTimeZoneOffset) {\n\t\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() - diff);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn date;\n}\n\n/**\n * \"Rounds\" the date to specific time unit.\n *\n * @ignore Exclude from docs\n * @param date             Source date\n * @param unit             Time unit\n * @param count            Number of units to round to\n * @param firstDateOfWeek  First day of week\n * @return New date\n */\nexport function round(date: Date, unit: TimeUnit, count: number, firstDateOfWeek?: number, utc?: boolean, firstDate?: Date): Date {\n\n\tif (!$type.isNumber(count)) {\n\t\tcount = 1;\n\t}\n\n\tlet timeZoneOffset = 0;\n\n\tif (!utc && unit != \"millisecond\") {\n\t\ttimeZoneOffset = date.getTimezoneOffset();\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n\t}\n\n\tswitch (unit) {\n\n\t\tcase \"day\":\n\t\t\tlet day = date.getUTCDate();\n\n\t\t\tif (count > 1) {\n\t\t\t\t//\tday = Math.floor(day / count) * count;\n\t\t\t\tif (firstDate) {\n\t\t\t\t\tfirstDate = round(firstDate, \"day\", 1);\n\n\t\t\t\t\tlet difference = date.getTime() - firstDate.getTime();\n\t\t\t\t\tlet unitCount = Math.floor(difference / getDuration(\"day\") / count);\n\t\t\t\t\tlet duration = getDuration(\"day\", unitCount * count);\n\t\t\t\t\tdate.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdate.setUTCDate(day);\n\t\t\t}\n\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\n\t\t\tbreak;\n\n\t\tcase \"second\":\n\t\t\tlet seconds = date.getUTCSeconds();\n\t\t\tif (count > 1) {\n\t\t\t\tseconds = Math.floor(seconds / count) * count;\n\t\t\t}\n\t\t\tdate.setUTCSeconds(seconds, 0);\n\t\t\tbreak;\n\n\t\tcase \"millisecond\":\n\t\t\tif (count == 1) {\n\t\t\t\treturn date; // much better for perf!\n\t\t\t}\n\n\t\t\tlet milliseconds = date.getUTCMilliseconds();\n\t\t\tmilliseconds = Math.floor(milliseconds / count) * count;\n\t\t\tdate.setUTCMilliseconds(milliseconds);\n\t\t\tbreak;\n\n\t\tcase \"hour\":\n\n\t\t\tlet hours = date.getUTCHours();\n\t\t\tif (count > 1) {\n\t\t\t\thours = Math.floor(hours / count) * count;\n\t\t\t}\n\t\t\tdate.setUTCHours(hours, 0, 0, 0);\n\n\t\t\tbreak;\n\n\t\tcase \"minute\":\n\n\t\t\tlet minutes = date.getUTCMinutes();\n\t\t\tmilliseconds = date.getUTCMilliseconds();\n\t\t\tif (count > 1) {\n\t\t\t\tminutes = Math.floor(minutes / count) * count;\n\t\t\t}\n\n\t\t\tdate.setUTCMinutes(minutes, 0, 0);\n\n\t\t\tbreak;\n\n\t\tcase \"month\":\n\n\t\t\tlet month = date.getUTCMonth();\n\t\t\tif (count > 1) {\n\t\t\t\tmonth = Math.floor(month / count) * count;\n\t\t\t}\n\n\t\t\tdate.setUTCMonth(month, 1);\n\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\n\t\t\tbreak;\n\n\t\tcase \"year\":\n\n\t\t\tlet year = date.getUTCFullYear();\n\t\t\tif (count > 1) {\n\t\t\t\tyear = Math.floor(year / count) * count;\n\t\t\t}\n\t\t\tdate.setUTCFullYear(year, 0, 1);\n\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\n\t\t\t//let nonUTCDateY = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n\t\t\t//timeZoneOffset = nonUTCDateY.getTimezoneOffset();\n\n\t\t\tbreak;\n\n\n\t\tcase \"week\":\n\n\t\t\tlet wday = date.getUTCDate();\n\t\t\tlet weekDay = date.getUTCDay();\n\n\t\t\tif (!$type.isNumber(firstDateOfWeek)) {\n\t\t\t\tfirstDateOfWeek = 1;\n\t\t\t}\n\n\t\t\t// todo: rounding when count is not 1\n\t\t\tif (weekDay >= firstDateOfWeek) {\n\t\t\t\twday = wday - weekDay + firstDateOfWeek;\n\t\t\t} else {\n\t\t\t\twday = wday - (7 + weekDay) + firstDateOfWeek;\n\t\t\t}\n\n\t\t\tdate.setUTCDate(wday);\n\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\n\t\t\tbreak;\n\t}\n\tif (!utc && unit != \"millisecond\") {\n\t\tdate.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n\t\tif (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n\t\t\tlet newTimeZoneOffset = date.getTimezoneOffset();\n\t\t\tif (newTimeZoneOffset != timeZoneOffset) {\n\t\t\t\tlet diff = newTimeZoneOffset - timeZoneOffset;\n\n\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() + diff);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn date;\n}\n\n/**\n * Returns a new `Date` object which corresponds to the source date in a\n * specific timezone.\n *\n * @since 4.10.1\n * @param   date      Source date\n * @param   timezone  Timezone identifier\n * @return            Recalculated new Date\n */\nexport function setTimezone(date: Date, timezone: string): Date {\n\tconst d = new Date(date.toLocaleString(\"en-US\", { timeZone: timezone }));\n\treturn d;\n}\n\n/**\n * @ignore\n */\nexport function chooseInterval(index: number, duration: number, gridCount: number, intervals: Array<ITimeInterval>): ITimeInterval {\n\tlet gridInterval: ITimeInterval = intervals[index];\n\tlet intervalDuration = getIntervalDuration(gridInterval);\n\n\tlet lastIndex = intervals.length - 1;\n\tif (index >= lastIndex) {\n\t\treturn { ...intervals[lastIndex] };\n\t}\n\n\tlet count = Math.ceil(duration / intervalDuration);\n\n\tif (duration < intervalDuration && index > 0) {\n\t\treturn { ...intervals[index - 1] };\n\t}\n\tif (count <= gridCount) {\n\t\treturn { ...intervals[index] };\n\t} else {\n\t\tif (index + 1 < intervals.length) {\n\t\t\treturn chooseInterval(index + 1, duration, gridCount, intervals);\n\t\t} else {\n\t\t\treturn { ...intervals[index] };\n\t\t}\n\t}\n}\n\n/**\n * @ignore\n */\nexport function getUnitValue(date: Date, unit: TimeUnit) {\n\tswitch (unit) {\n\t\tcase \"day\":\n\t\t\treturn date.getDate();\n\t\tcase \"second\":\n\t\t\treturn date.getSeconds();\n\t\tcase \"millisecond\":\n\t\t\treturn date.getMilliseconds();\n\t\tcase \"hour\":\n\t\t\treturn date.getHours();\n\t\tcase \"minute\":\n\t\t\treturn date.getMinutes();\n\t\tcase \"month\":\n\t\t\treturn date.getMonth();\n\t\tcase \"year\":\n\t\t\treturn date.getFullYear();\n\t\tcase \"week\":\n\t\t\treturn $utils.getWeek(date);\n\t}\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}