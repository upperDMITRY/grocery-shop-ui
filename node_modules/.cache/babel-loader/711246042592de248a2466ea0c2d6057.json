{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Text } from \"../render/Text\";\nimport { p50, p100 } from \"../util/Percent\";\nimport { Container } from \"./Container\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\n/**\r\n * Creates a label with support for in-line styling and data bindings.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/labels/} for more info\r\n */\nvar Label = /** @class */function (_super) {\n  __extends(Label, _super);\n  function Label() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    Object.defineProperty(_this, \"_text\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_textKeys\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"text\", \"fill\", \"textAlign\", \"fontFamily\", \"fontSize\", \"fontStyle\", \"fontWeight\", \"fontStyle\", \"fontVariant\", \"shadowColor\", \"shadowBlur\", \"shadowOffsetX\", \"shadowOffsetY\", \"shadowOpacity\",\n      // \"leading\",\n      // \"letterSpacing\",\n      \"lineHeight\", \"baselineRatio\",\n      //\"padding\",\n      // \"stroke\",\n      // \"strokeThickness\",\n      // \"trim\",\n      // \"wordWrap\",\n      \"direction\", \"textBaseline\", \"oversizedBehavior\", \"breakWords\", \"ellipsis\", \"minScale\", \"populateText\", \"role\", \"ignoreFormatting\"]\n    });\n    return _this;\n  }\n  Object.defineProperty(Label.prototype, \"text\", {\n    /**\r\n     * @ignore Text is not to be used directly\r\n     */\n    get: function () {\n      return this._text;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Label.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n      _super.prototype._afterNew.call(this);\n      this._makeText();\n      $array.each(this._textKeys, function (property) {\n        var propValue = _this.get(property);\n        if (propValue != undefined) {\n          _this._text.set(property, propValue);\n        }\n      });\n    }\n  });\n  Object.defineProperty(Label.prototype, \"_makeText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._text = this.children.push(Text.new(this._root, {}));\n    }\n  });\n  Object.defineProperty(Label.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n      _super.prototype._updateChildren.call(this);\n      $array.each(this._textKeys, function (property) {\n        _this._text.set(property, _this.get(property));\n      });\n      if (this.isDirty(\"maxWidth\")) {\n        this._setMaxDimentions();\n      }\n      if (this.isDirty(\"maxHeight\")) {\n        this._setMaxDimentions();\n      }\n      if (this.isDirty(\"rotation\")) {\n        this._setMaxDimentions();\n      }\n      if (this.isDirty(\"textAlign\") || this.isDirty(\"width\")) {\n        var textAlign = this.get(\"textAlign\");\n        var x = void 0;\n        if (this.get(\"width\") != null) {\n          if (textAlign == \"right\") {\n            x = p100;\n          } else if (textAlign == \"center\") {\n            x = p50;\n          } else {\n            x = 0;\n          }\n        } else {\n          if (textAlign == \"left\" || textAlign == \"start\") {\n            x = this.get(\"paddingLeft\");\n          } else if (textAlign == \"right\" || textAlign == \"end\") {\n            x = -this.get(\"paddingRight\");\n          }\n        }\n        this.text.set(\"x\", x);\n      }\n    }\n  });\n  Object.defineProperty(Label.prototype, \"_setMaxDimentions\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var rotation = this.get(\"rotation\");\n      var vertical = rotation == 90 || rotation == 270;\n      var maxWidth = this.get(\"maxWidth\", Infinity);\n      if ($type.isNumber(maxWidth)) {\n        this.text.set(vertical ? \"maxHeight\" : \"maxWidth\", maxWidth - this.get(\"paddingLeft\", 0) - this.get(\"paddingRight\", 0));\n      } else {\n        this.text.set(vertical ? \"maxHeight\" : \"maxWidth\", undefined);\n      }\n      var maxHeight = this.get(\"maxHeight\", Infinity);\n      if ($type.isNumber(maxHeight)) {\n        this.text.set(vertical ? \"maxWidth\" : \"maxHeight\", maxHeight - this.get(\"paddingTop\", 0) - this.get(\"paddingBottom\", 0));\n      } else {\n        this.text.set(vertical ? \"maxWidth\" : \"maxHeight\", undefined);\n      }\n    }\n  });\n  Object.defineProperty(Label.prototype, \"_setDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      _super.prototype._setDataItem.call(this, dataItem);\n      this._markDirtyKey(\"text\");\n      if (this.text.get(\"populateText\")) {\n        this.text.markDirtyText();\n      }\n    }\n  });\n  /**\r\n   * Returns text with populated placeholders and formatting if `populateText` is\r\n   * set to `true`.\r\n   *\r\n   * @return Populated text\r\n   */\n  Object.defineProperty(Label.prototype, \"getText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._text._getText();\n    }\n  });\n  Object.defineProperty(Label, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Label\"\n  });\n  Object.defineProperty(Label, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Container.classNames.concat([Label.className])\n  });\n  return Label;\n}(Container);\nexport { Label };","map":{"version":3,"names":["Text","p50","p100","Container","$array","$type","Label","_super","__extends","_this","apply","arguments","Object","defineProperty","prototype","get","_text","value","_afterNew","call","_makeText","each","_textKeys","property","propValue","undefined","set","children","push","new","_root","_updateChildren","isDirty","_setMaxDimentions","textAlign","x","text","rotation","vertical","maxWidth","Infinity","isNumber","maxHeight","dataItem","_setDataItem","_markDirtyKey","markDirtyText","_getText","classNames","concat","className"],"sources":["../../../../../src/.internal/core/render/Label.ts"],"sourcesContent":["import type { Color } from \"../util/Color\";\nimport type { Percent } from \"../util/Percent\";\nimport type { DataItem, IComponentDataItem } from \"./Component\";\n\nimport { Text } from \"../render/Text\";\nimport { p50, p100 } from \"../util/Percent\";\nimport { Container, IContainerPrivate, IContainerSettings } from \"./Container\";\n\nimport * as  $array from \"../../core/util/Array\";\nimport * as  $type from \"../../core/util/Type\";\n\n\nexport interface ILabelSettings extends IContainerSettings {\n\n\t/**\n\t * Labels' text.\n\t */\n\ttext?: string;\n\n\t/**\n\t * Text color.\n\t */\n\tfill?: Color;\n\n\t/**\n\t * Alignment.\n\t */\n\ttextAlign?: \"start\" | \"end\" | \"left\" | \"right\" | \"center\";\n\n\t/**\n\t * Font family to use for the label.\n\t *\n\t * Multiple fonts can be separated by commas.\n\t */\n\tfontFamily?: string;\n\n\t/**\n\t * Font size in misc any supported CSS format (pixel, point, em, etc.).\n\t */\n\tfontSize?: string | number;\n\n\t/**\n\t * Font weight.\n\t */\n\tfontWeight?: \"normal\" | \"bold\" | \"bolder\" | \"lighter\" | \"100\" | \"200\" | \"300\" | \"400\" | \"500\" | \"600\" | \"700\" | \"800\" | \"900\";\n\n\t/**\n\t * Font style.\n\t */\n\tfontStyle?: \"normal\" | \"italic\" | \"oblique\";\n\n\n\t/**\n\t * Font variant.\n\t */\n\tfontVariant?: \"normal\" | \"small-caps\";\n\n\t/**\n\t * Line height in percent or absolute pixels.\n\t */\n\tlineHeight?: Percent | number;\n\n\t/**\n\t * How mouch of the height should be considered to go below baseline.\n\t *\n\t * @default 0.19\n\t */\n\tbaselineRatio?: number;\n\n\t/**\n\t * Opacity of the label.\n\t *\n\t * 0 - fully transparent; 1 - fully opaque.\n\t */\n\topacity?: number;\n\n\t/**\n\t * Text direction.\n\t *\n\t * @default \"ltr\"\n\t */\n\tdirection?: \"ltr\" | \"rtl\";\n\n\t/**\n\t * A base line to use when aligning text chunks vertically.\n\t */\n\ttextBaseline?: \"top\" | \"hanging\" | \"middle\" | \"alphabetic\" | \"ideographic\" | \"bottom\";\n\n\t/**\n\t * How to handle labels that do not fit into its designated space.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/labels/#Oversized_text} for more info\n\t */\n\toversizedBehavior?: \"none\" | \"hide\" | \"fit\" | \"wrap\" | \"truncate\";\n\n\t/**\n\t * Whether words can be broken when truncating or wrapping text.\n\t *\n\t * @default false\n\t */\n\tbreakWords?: boolean;\n\n\t/**\n\t * Ellipsis characters to use when truncating text.\n\t *\n\t * Will use Unicode ellipsis symbol (`\"…\"`) by default, which might not be\n\t * available in all fonts. If ellipsis looks broken, use different\n\t * characters. E.g.:\n\t *\n\t * ```TypeScript\n\t * label.set(\"ellipsis\", \"...\");\n\t * ```\n\t * ```JavaScript\n\t * label.set(\"ellipsis\", \"...\");\n\t * ```\n\t *\n\t *\n\t * @default \"…\"\n\t */\n\tellipsis?: string;\n\n\t/**\n\t * Minimum relative scale allowed for label when scaling down\n\t * when `oversizedBehavior` is set to `\"fit\"`.\n\t *\n\t * If fitting the label would require it to scale beyond `minScale` it would\n\t * be hidden instead.\n\t */\n\tminScale?: number;\n\n\t/**\n\t * If set to `true` the label will parse `text` for data placeholders and\n\t * will try to populate them with actual data.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/labels/#Data_placeholders} for more info\n\t */\n\tpopulateText?: boolean;\n\n\t/**\n\t * If set to `true`, will ignore in-line formatting blocks and will display\n\t * text exactly as it is.\n\t *\n\t * @default false\n\t */\n\tignoreFormatting?: boolean;\n\n\t/**\n\t * Color of the element's shadow.\n\t *\n\t * For this to work at least one of the following needs to be set as well:\n\t * `shadowBlur`, `shadowOffsetX`, `shadowOffsetY`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowColor?: Color | null;\n\n\t/**\n\t * Blurriness of the the shadow.\n\t *\n\t * The bigger the number, the more blurry shadow will be.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowBlur?: number;\n\n\t/**\n\t * Horizontal shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetX?: number;\n\n\t/**\n\t * Vertical shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetY?: number;\n\n\t/**\n\t * Opacity of the shadow (0-1).\n\t *\n\t * If not set, will use the same as `fillOpacity` of the element.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOpacity?: number;\n\n\t// The following migh be supported some day:\n\t// padding?: number;\n\t// stroke?: number;\n\t// strokeThickness?: number;\n\t// trim?: number;\n\t// wordWrap?: boolean;\n\t// leading?: number;\n\t// letterSpacing?: number;\n}\n\nexport interface ILabelPrivate extends IContainerPrivate {\n}\n\n/**\n * Creates a label with support for in-line styling and data bindings.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/labels/} for more info\n */\nexport class Label extends Container {\n\n\tdeclare public _settings: ILabelSettings;\n\tdeclare public _privateSettings: ILabelPrivate;\n\n\tprotected _text!: Text;\n\n\tprotected _textKeys: Array<string> = [\n\t\t\"text\",\n\t\t\"fill\",\n\t\t\"textAlign\",\n\t\t\"fontFamily\",\n\t\t\"fontSize\",\n\t\t\"fontStyle\",\n\t\t\"fontWeight\",\n\t\t\"fontStyle\",\n\t\t\"fontVariant\",\n\t\t\"shadowColor\",\n\t\t\"shadowBlur\",\n\t\t\"shadowOffsetX\",\n\t\t\"shadowOffsetY\",\n\t\t\"shadowOpacity\",\n\t\t// \"leading\",\n\t\t// \"letterSpacing\",\n\t\t\"lineHeight\",\n\t\t\"baselineRatio\",\n\t\t//\"padding\",\n\t\t// \"stroke\",\n\t\t// \"strokeThickness\",\n\t\t// \"trim\",\n\t\t// \"wordWrap\",\n\t\t\"direction\",\n\t\t\"textBaseline\",\n\t\t\"oversizedBehavior\",\n\t\t\"breakWords\",\n\t\t\"ellipsis\",\n\t\t\"minScale\",\n\t\t\"populateText\",\n\t\t\"role\",\n\t\t\"ignoreFormatting\"\n\t];\n\n\tpublic static className: string = \"Label\";\n\tpublic static classNames: Array<string> = Container.classNames.concat([Label.className]);\n\n\t/**\n\t * @ignore Text is not to be used directly\n\t */\n\tpublic get text(): Text {\n\t\treturn this._text;\n\t}\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis._makeText();\n\n\t\t$array.each(this._textKeys, (property) => {\n\t\t\tconst propValue = this.get(property as any);\n\t\t\tif (propValue != undefined) {\n\t\t\t\tthis._text.set(property as any, propValue);\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic _makeText() {\n\t\tthis._text = this.children.push(Text.new(this._root, {}));\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\n\t\t$array.each(this._textKeys, (property) => {\n\t\t\tthis._text.set(property as any, this.get(property as any));\n\t\t})\n\n\t\tif (this.isDirty(\"maxWidth\")) {\n\t\t\tthis._setMaxDimentions();\n\t\t}\n\n\t\tif (this.isDirty(\"maxHeight\")) {\n\t\t\tthis._setMaxDimentions();\n\t\t}\n\n\t\tif (this.isDirty(\"rotation\")) {\n\t\t\tthis._setMaxDimentions();\n\t\t}\n\n\t\tif (this.isDirty(\"textAlign\") || this.isDirty(\"width\")) {\n\t\t\tconst textAlign = this.get(\"textAlign\");\n\t\t\tlet x: number | Percent | undefined;\n\t\t\tif (this.get(\"width\") != null) {\n\t\t\t\tif (textAlign == \"right\") {\n\t\t\t\t\tx = p100;\n\t\t\t\t}\n\t\t\t\telse if (textAlign == \"center\") {\n\t\t\t\t\tx = p50;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tx = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (textAlign == \"left\" || textAlign == \"start\") {\n\t\t\t\t\tx = this.get(\"paddingLeft\");\n\t\t\t\t}\n\t\t\t\telse if (textAlign == \"right\" || textAlign == \"end\") {\n\t\t\t\t\tx = -this.get(\"paddingRight\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.text.set(\"x\", x);\n\t\t}\n\t}\n\n\tprotected _setMaxDimentions() {\n\t\tconst rotation = this.get(\"rotation\");\n\t\tconst vertical = rotation == 90 || rotation == 270;\n\n\t\tconst maxWidth = this.get(\"maxWidth\", Infinity);\n\t\tif ($type.isNumber(maxWidth)) {\n\t\t\tthis.text.set(vertical ? \"maxHeight\" : \"maxWidth\", maxWidth - this.get(\"paddingLeft\", 0) - this.get(\"paddingRight\", 0));\n\t\t}\n\t\telse {\n\t\t\tthis.text.set(vertical ? \"maxHeight\" : \"maxWidth\", undefined);\n\t\t}\n\n\t\tconst maxHeight = this.get(\"maxHeight\", Infinity);\n\t\tif ($type.isNumber(maxHeight)) {\n\t\t\tthis.text.set(vertical ? \"maxWidth\" : \"maxHeight\", maxHeight - this.get(\"paddingTop\", 0) - this.get(\"paddingBottom\", 0));\n\t\t}\n\t\telse {\n\t\t\tthis.text.set(vertical ? \"maxWidth\" : \"maxHeight\", undefined);\n\t\t}\n\t}\n\n\tpublic _setDataItem(dataItem?: DataItem<IComponentDataItem>): void {\n\t\tsuper._setDataItem(dataItem);\n\t\tthis._markDirtyKey(\"text\")\n\t\tif (this.text.get(\"populateText\")) {\n\t\t\tthis.text.markDirtyText();\n\t\t}\n\t}\n\n\t/**\n\t * Returns text with populated placeholders and formatting if `populateText` is\n\t * set to `true`.\n\t *\n\t * @return Populated text\n\t */\n\tpublic getText(): string {\n\t\treturn this._text._getText();\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}