{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Sprite } from \"./Sprite\";\nimport { BlendMode } from \"./backend/Renderer\";\nimport * as $type from \"../util/Type\";\nimport * as $array from \"../util/Array\";\nexport var visualSettings = [\"fill\", \"fillOpacity\", \"stroke\", \"strokeWidth\", \"strokeOpacity\", \"fillPattern\", \"strokePattern\", \"fillGradient\", \"strokeGradient\", \"strokeDasharray\", \"strokeDashoffset\"];\n/**\r\n * Base class used for drawing shapes.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\nvar Graphics = /** @class */function (_super) {\n  __extends(Graphics, _super);\n  function Graphics() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeGraphics()\n    });\n    Object.defineProperty(_this, \"_clear\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    return _this;\n  }\n  Object.defineProperty(Graphics.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n      _super.prototype._beforeChanged.call(this);\n      if (this.isDirty(\"draw\") || this.isDirty(\"svgPath\")) {\n        this.markDirtyBounds();\n      }\n      if (this.isDirty(\"fill\") || this.isDirty(\"stroke\") || this.isDirty(\"fillGradient\") || this.isDirty(\"strokeGradient\") || this.isDirty(\"fillPattern\") || this.isDirty(\"strokePattern\") || this.isDirty(\"fillOpacity\") || this.isDirty(\"strokeOpacity\") || this.isDirty(\"strokeWidth\") || this.isDirty(\"draw\") || this.isDirty(\"blendMode\") || this.isDirty(\"strokeDasharray\") || this.isDirty(\"strokeDashoffset\") || this.isDirty(\"svgPath\") || this.isDirty(\"shadowColor\") || this.isDirty(\"shadowBlur\") || this.isDirty(\"shadowOffsetX\") || this.isDirty(\"shadowOffsetY\")) {\n        this._clear = true;\n      }\n      if (this.isDirty(\"fillGradient\")) {\n        var gradient = this.get(\"fillGradient\");\n        if (gradient) {\n          this._display.isMeasured = true;\n          var gradientTarget = gradient.get(\"target\");\n          if (gradientTarget) {\n            this._disposers.push(gradientTarget.events.on(\"boundschanged\", function () {\n              _this._markDirtyKey(\"fill\");\n            }));\n            this._disposers.push(gradientTarget.events.on(\"positionchanged\", function () {\n              _this._markDirtyKey(\"fill\");\n            }));\n          }\n        }\n      }\n      if (this.isDirty(\"strokeGradient\")) {\n        var gradient = this.get(\"strokeGradient\");\n        if (gradient) {\n          this._display.isMeasured = true;\n          var gradientTarget = gradient.get(\"target\");\n          if (gradientTarget) {\n            this._disposers.push(gradientTarget.events.on(\"boundschanged\", function () {\n              _this._markDirtyKey(\"stroke\");\n            }));\n            this._disposers.push(gradientTarget.events.on(\"positionchanged\", function () {\n              _this._markDirtyKey(\"stroke\");\n            }));\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(Graphics.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n      if (this._clear) {\n        this.markDirtyLayer();\n        this._display.clear();\n        var strokeDasharray = this.get(\"strokeDasharray\");\n        if ($type.isNumber(strokeDasharray)) {\n          if (strokeDasharray < 0.5) {\n            strokeDasharray = [0];\n          } else {\n            strokeDasharray = [strokeDasharray];\n          }\n        }\n        this._display.setLineDash(strokeDasharray);\n        var strokeDashoffset = this.get(\"strokeDashoffset\");\n        if (strokeDashoffset) {\n          this._display.setLineDashOffset(strokeDashoffset);\n        }\n        var blendMode = this.get(\"blendMode\", BlendMode.NORMAL);\n        this._display.blendMode = blendMode;\n        var draw = this.get(\"draw\");\n        if (draw) {\n          draw(this._display, this);\n        }\n        var svgPath = this.get(\"svgPath\");\n        if (svgPath != null) {\n          this._display.svgPath(svgPath);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Graphics.prototype, \"_afterChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._afterChanged.call(this);\n      if (this._clear) {\n        var fill_1 = this.get(\"fill\");\n        var fillGradient = this.get(\"fillGradient\");\n        var fillPattern = this.get(\"fillPattern\");\n        var fillOpacity_1 = this.get(\"fillOpacity\");\n        var stroke_1 = this.get(\"stroke\");\n        var strokeGradient = this.get(\"strokeGradient\");\n        var strokePattern = this.get(\"strokePattern\");\n        var shadowColor = this.get(\"shadowColor\");\n        var shadowBlur = this.get(\"shadowBlur\");\n        var shadowOffsetX = this.get(\"shadowOffsetX\");\n        var shadowOffsetY = this.get(\"shadowOffsetY\");\n        var shadowOpacity = this.get(\"shadowOpacity\");\n        //const bounds = this._display.getLocalBounds();\n        if (shadowColor && (shadowBlur || shadowOffsetX || shadowOffsetY)) {\n          this._display.shadow(shadowColor, shadowBlur, shadowOffsetX, shadowOffsetY, shadowOpacity);\n        }\n        if (fillPattern) {\n          var changed = false;\n          if (fill_1 && (!fillPattern.get(\"fill\") || fillPattern.get(\"fillInherited\"))) {\n            fillPattern.set(\"fill\", fill_1);\n            fillPattern.set(\"fillInherited\", true);\n            changed = true;\n          }\n          if (stroke_1 && (!fillPattern.get(\"color\") || fillPattern.get(\"colorInherited\"))) {\n            fillPattern.set(\"color\", stroke_1);\n            fillPattern.set(\"colorInherited\", true);\n            changed = true;\n          }\n          if (changed) {\n            // @todo: is this OK?\n            fillPattern._changed();\n          }\n          var pattern = fillPattern.pattern;\n          if (pattern) {\n            this._display.beginFill(pattern, fillOpacity_1);\n            this._display.endFill();\n          }\n        } else if (fillGradient) {\n          if (fill_1) {\n            var stops = fillGradient.get(\"stops\", []);\n            if (stops.length) {\n              $array.each(stops, function (stop) {\n                if ((!stop.color || stop.colorInherited) && fill_1) {\n                  stop.color = fill_1;\n                  stop.colorInherited = true;\n                }\n                if (stop.opacity == null || stop.opacityInherited) {\n                  stop.opacity = fillOpacity_1;\n                  stop.opacityInherited = true;\n                }\n              });\n            }\n          }\n          var gradient = fillGradient.getFill(this);\n          if (gradient) {\n            this._display.beginFill(gradient, fillOpacity_1);\n            this._display.endFill();\n          }\n        } else if (fill_1) {\n          this._display.beginFill(fill_1, fillOpacity_1);\n          this._display.endFill();\n        }\n        if (stroke_1 || strokeGradient || strokePattern) {\n          var strokeOpacity_1 = this.get(\"strokeOpacity\");\n          var strokeWidth = this.get(\"strokeWidth\", 1);\n          if (strokePattern) {\n            var changed = false;\n            if (stroke_1 && (!strokePattern.get(\"color\") || strokePattern.get(\"colorInherited\"))) {\n              strokePattern.set(\"color\", stroke_1);\n              strokePattern.set(\"colorInherited\", true);\n              changed = true;\n            }\n            if (changed) {\n              // @todo: is this OK?\n              strokePattern._changed();\n            }\n            var pattern = strokePattern.pattern;\n            if (pattern) {\n              this._display.lineStyle(strokeWidth, pattern, strokeOpacity_1);\n              this._display.endStroke();\n            }\n          } else if (strokeGradient) {\n            var stops = strokeGradient.get(\"stops\", []);\n            if (stops.length) {\n              $array.each(stops, function (stop) {\n                if ((!stop.color || stop.colorInherited) && stroke_1) {\n                  stop.color = stroke_1;\n                  stop.colorInherited = true;\n                }\n                if (stop.opacity == null || stop.opacityInherited) {\n                  stop.opacity = strokeOpacity_1;\n                  stop.opacityInherited = true;\n                }\n              });\n            }\n            var gradient = strokeGradient.getFill(this);\n            if (gradient) {\n              this._display.lineStyle(strokeWidth, gradient, strokeOpacity_1);\n              this._display.endStroke();\n            }\n          } else if (stroke_1) {\n            this._display.lineStyle(strokeWidth, stroke_1, strokeOpacity_1);\n            this._display.endStroke();\n          }\n        }\n      }\n      this._clear = false;\n    }\n  });\n  Object.defineProperty(Graphics, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Graphics\"\n  });\n  Object.defineProperty(Graphics, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Sprite.classNames.concat([Graphics.className])\n  });\n  return Graphics;\n}(Sprite);\nexport { Graphics };","map":{"version":3,"names":["Sprite","BlendMode","$type","$array","visualSettings","Graphics","_super","__extends","_this","apply","arguments","Object","defineProperty","_root","_renderer","makeGraphics","value","prototype","_beforeChanged","call","isDirty","markDirtyBounds","_clear","gradient","get","_display","isMeasured","gradientTarget","_disposers","push","events","on","_markDirtyKey","_changed","markDirtyLayer","clear","strokeDasharray","isNumber","setLineDash","strokeDashoffset","setLineDashOffset","blendMode","NORMAL","draw","svgPath","_afterChanged","fill_1","fillGradient","fillPattern","fillOpacity_1","stroke_1","strokeGradient","strokePattern","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","shadowOpacity","shadow","changed","set","pattern","beginFill","endFill","stops","length","each","stop","color","colorInherited","opacity","opacityInherited","getFill","strokeOpacity_1","strokeWidth","lineStyle","endStroke","classNames","concat","className"],"sources":["../../../../../src/.internal/core/render/Graphics.ts"],"sourcesContent":["import type { Color } from \"../util/Color\";\nimport type { Pattern } from \"../render/patterns/Pattern\";\nimport type { Gradient } from \"../render/gradients/Gradient\";\n\nimport { ISpriteSettings, ISpritePrivate, ISpriteEvents, Sprite } from \"./Sprite\";\nimport { IGraphics, BlendMode } from \"./backend/Renderer\";\n\nimport * as $type from \"../util/Type\";\nimport * as $array from \"../util/Array\";\n\n\nexport const visualSettings = [\"fill\", \"fillOpacity\", \"stroke\", \"strokeWidth\", \"strokeOpacity\", \"fillPattern\", \"strokePattern\", \"fillGradient\", \"strokeGradient\", \"strokeDasharray\", \"strokeDashoffset\"];\n\nexport interface IGraphicsSettings extends ISpriteSettings {\n\n\t/**\n\t * Fill color.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/} for more information\n\t */\n\tfill?: Color;\n\n\t/**\n\t * Stroke (border or line) color.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/} for more information\n\t */\n\tstroke?: Color;\n\n\t/**\n\t * Fill pattern.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more information\n\t */\n\tfillPattern?: Pattern;\n\n\t/**\n\t * Stroke (border or line) pattern.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more information\n\t */\n\tstrokePattern?: Pattern;\n\n\t/**\n\t * Fill gradient.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more information\n\t */\n\tfillGradient?: Gradient;\n\n\t/**\n\t * Stroke (border or line) gradient.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more information\n\t */\n\tstrokeGradient?: Gradient;\n\n\t/**\n\t * Stroke (border or line) dash settings.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/#Dashed_lines} for more information\n\t */\n\tstrokeDasharray?: number[] | number;\n\n\t/**\n\t * Stroke (border or line) dash offset.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/#Dashed_lines} for more information\n\t */\n\tstrokeDashoffset?: number;\n\n\t/**\n\t * Opacity of the fill. 0 - fully transparent; 1 - fully opaque.\n\t */\n\tfillOpacity?: number;\n\n\t/**\n\t * Opacity of the stroke (border or line). 0 - fully transparent; 1 - fully opaque.\n\t */\n\tstrokeOpacity?: number;\n\n\t/**\n\t * Width of the stroke (border or line) in pixels.\n\t */\n\tstrokeWidth?: number;\n\n\t/**\n\t * Drawing function.\n\t *\n\t * Must use renderer (`display` parameter) methods to draw.\n\t */\n\tdraw?: (display: IGraphics, graphics: Graphics) => void;\n\n\t/**\n\t * Rendering mode.\n\t *\n\t * @default BlendMode.NORMAL (\"source-over\")\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation} for more information\n\t * @ignore\n\t */\n\tblendMode?: BlendMode;\n\n\t/**\n\t * Draw a shape using an SVG path.\n\t *\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths} for more information\n\t */\n\tsvgPath?: string;\n\n\t/**\n\t * Color of the element's shadow.\n\t *\n\t * For this to work at least one of the following needs to be set as well:\n\t * `shadowBlur`, `shadowOffsetX`, `shadowOffsetY`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowColor?: Color | null;\n\n\t/**\n\t * Blurriness of the the shadow.\n\t *\n\t * The bigger the number, the more blurry shadow will be.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowBlur?: number;\n\n\t/**\n\t * Horizontal shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetX?: number;\n\n\t/**\n\t * Vertical shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetY?: number;\n\n\t/**\n\t * Opacity of the shadow (0-1).\n\t *\n\t * If not set, will use the same as `fillOpacity` of the element.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOpacity?: number;\n\n}\n\nexport interface IGraphicsPrivate extends ISpritePrivate {\n}\n\nexport interface IGraphicsEvents extends ISpriteEvents {\n}\n\n/**\n * Base class used for drawing shapes.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n * @important\n */\nexport class Graphics extends Sprite {\n\n\tdeclare public _settings: IGraphicsSettings;\n\tdeclare public _privateSettings: IGraphicsPrivate;\n\tdeclare public _events: IGraphicsEvents;\n\n\tpublic _display: IGraphics = this._root._renderer.makeGraphics();\n\n\tprotected _clear = false;\n\n\tpublic static className: string = \"Graphics\";\n\tpublic static classNames: Array<string> = Sprite.classNames.concat([Graphics.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"draw\") || this.isDirty(\"svgPath\")) {\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"fill\") || this.isDirty(\"stroke\") || this.isDirty(\"fillGradient\") || this.isDirty(\"strokeGradient\") || this.isDirty(\"fillPattern\") || this.isDirty(\"strokePattern\") || this.isDirty(\"fillOpacity\") || this.isDirty(\"strokeOpacity\") || this.isDirty(\"strokeWidth\") || this.isDirty(\"draw\") || this.isDirty(\"blendMode\") || this.isDirty(\"strokeDasharray\") || this.isDirty(\"strokeDashoffset\") || this.isDirty(\"svgPath\") || this.isDirty(\"shadowColor\") || this.isDirty(\"shadowBlur\") || this.isDirty(\"shadowOffsetX\") || this.isDirty(\"shadowOffsetY\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\n\t\tif (this.isDirty(\"fillGradient\")) {\n\t\t\tconst gradient = this.get(\"fillGradient\");\n\t\t\tif (gradient) {\n\t\t\t\tthis._display.isMeasured = true;\n\t\t\t\tconst gradientTarget = gradient.get(\"target\");\n\t\t\t\tif (gradientTarget) {\n\t\t\t\t\tthis._disposers.push(gradientTarget.events.on(\"boundschanged\", () => {\n\t\t\t\t\t\tthis._markDirtyKey(\"fill\");\n\t\t\t\t\t}))\n\t\t\t\t\tthis._disposers.push(\n\t\t\t\t\t\tgradientTarget.events.on(\"positionchanged\", () => {\n\t\t\t\t\t\t\tthis._markDirtyKey(\"fill\");\n\t\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"strokeGradient\")) {\n\t\t\tconst gradient = this.get(\"strokeGradient\");\n\t\t\tif (gradient) {\n\t\t\t\tthis._display.isMeasured = true;\n\t\t\t\tconst gradientTarget = gradient.get(\"target\");\n\t\t\t\tif (gradientTarget) {\n\t\t\t\t\tthis._disposers.push(\n\t\t\t\t\t\tgradientTarget.events.on(\"boundschanged\", () => {\n\t\t\t\t\t\t\tthis._markDirtyKey(\"stroke\");\n\t\t\t\t\t\t}))\n\t\t\t\t\tthis._disposers.push(\n\t\t\t\t\t\tgradientTarget.events.on(\"positionchanged\", () => {\n\t\t\t\t\t\t\tthis._markDirtyKey(\"stroke\");\n\t\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\t\t\tthis.markDirtyLayer();\n\t\t\tthis._display.clear();\n\n\t\t\tlet strokeDasharray = this.get(\"strokeDasharray\");\n\t\t\tif ($type.isNumber(strokeDasharray)) {\n\t\t\t\tif (strokeDasharray < 0.5) {\n\t\t\t\t\tstrokeDasharray = [0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tstrokeDasharray = [strokeDasharray]\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._display.setLineDash(strokeDasharray as number[]);\n\n\t\t\tconst strokeDashoffset = this.get(\"strokeDashoffset\");\n\t\t\tif (strokeDashoffset) {\n\t\t\t\tthis._display.setLineDashOffset(strokeDashoffset);\n\t\t\t}\n\n\t\t\tconst blendMode = this.get(\"blendMode\", BlendMode.NORMAL);\n\t\t\tthis._display.blendMode = blendMode;\n\n\t\t\tconst draw = this.get(\"draw\");\n\t\t\tif (draw) {\n\t\t\t\tdraw(this._display, this);\n\t\t\t}\n\n\t\t\tconst svgPath = this.get(\"svgPath\");\n\t\t\tif (svgPath != null) {\n\t\t\t\tthis._display.svgPath(svgPath!);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _afterChanged() {\n\t\tsuper._afterChanged();\n\n\t\tif (this._clear) {\n\t\t\tconst fill = this.get(\"fill\");\n\t\t\tconst fillGradient = this.get(\"fillGradient\");\n\t\t\tconst fillPattern = this.get(\"fillPattern\");\n\t\t\tconst fillOpacity = this.get(\"fillOpacity\");\n\n\t\t\tconst stroke = this.get(\"stroke\");\n\t\t\tconst strokeGradient = this.get(\"strokeGradient\");\n\t\t\tconst strokePattern = this.get(\"strokePattern\");\n\n\t\t\tconst shadowColor = this.get(\"shadowColor\");\n\t\t\tconst shadowBlur = this.get(\"shadowBlur\");\n\t\t\tconst shadowOffsetX = this.get(\"shadowOffsetX\");\n\t\t\tconst shadowOffsetY = this.get(\"shadowOffsetY\");\n\t\t\tconst shadowOpacity = this.get(\"shadowOpacity\");\n\n\t\t\t//const bounds = this._display.getLocalBounds();\n\n\t\t\tif (shadowColor && (shadowBlur || shadowOffsetX || shadowOffsetY)) {\n\t\t\t\tthis._display.shadow(shadowColor, shadowBlur, shadowOffsetX, shadowOffsetY, shadowOpacity);\n\t\t\t}\n\n\t\t\tif (fillPattern) {\n\t\t\t\tlet changed = false;\n\t\t\t\tif (fill && (!fillPattern.get(\"fill\") || fillPattern.get(\"fillInherited\"))) {\n\t\t\t\t\tfillPattern.set(\"fill\", fill);\n\t\t\t\t\tfillPattern.set(\"fillInherited\", true)\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t\tif (stroke && (!fillPattern.get(\"color\") || fillPattern.get(\"colorInherited\"))) {\n\t\t\t\t\tfillPattern.set(\"color\", stroke);\n\t\t\t\t\tfillPattern.set(\"colorInherited\", true)\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t\tif (changed) {\n\t\t\t\t\t// @todo: is this OK?\n\t\t\t\t\tfillPattern._changed();\n\t\t\t\t}\n\t\t\t\tconst pattern = fillPattern.pattern;\n\t\t\t\tif (pattern) {\n\t\t\t\t\tthis._display.beginFill(pattern, fillOpacity);\n\t\t\t\t\tthis._display.endFill();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (fillGradient) {\n\t\t\t\tif (fill) {\n\t\t\t\t\tconst stops = fillGradient.get(\"stops\", []);\n\t\t\t\t\tif (stops.length) {\n\t\t\t\t\t\t$array.each(stops, (stop: any) => {\n\t\t\t\t\t\t\tif ((!stop.color || stop.colorInherited) && fill) {\n\t\t\t\t\t\t\t\tstop.color = fill;\n\t\t\t\t\t\t\t\tstop.colorInherited = true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (stop.opacity == null || stop.opacityInherited) {\n\t\t\t\t\t\t\t\tstop.opacity = fillOpacity;\n\t\t\t\t\t\t\t\tstop.opacityInherited = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst gradient = fillGradient.getFill(this);\n\t\t\t\tif (gradient) {\n\t\t\t\t\tthis._display.beginFill(gradient, fillOpacity);\n\t\t\t\t\tthis._display.endFill();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (fill) {\n\t\t\t\tthis._display.beginFill(fill, fillOpacity);\n\t\t\t\tthis._display.endFill();\n\t\t\t}\n\n\t\t\tif (stroke || strokeGradient || strokePattern) {\n\t\t\t\tconst strokeOpacity = this.get(\"strokeOpacity\");\n\t\t\t\tconst strokeWidth = this.get(\"strokeWidth\", 1);\n\n\t\t\t\tif (strokePattern) {\n\t\t\t\t\tlet changed = false;\n\t\t\t\t\tif (stroke && (!strokePattern.get(\"color\") || strokePattern.get(\"colorInherited\"))) {\n\t\t\t\t\t\tstrokePattern.set(\"color\", stroke);\n\t\t\t\t\t\tstrokePattern.set(\"colorInherited\", true);\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (changed) {\n\t\t\t\t\t\t// @todo: is this OK?\n\t\t\t\t\t\tstrokePattern._changed();\n\t\t\t\t\t}\n\t\t\t\t\tconst pattern = strokePattern.pattern;\n\t\t\t\t\tif (pattern) {\n\t\t\t\t\t\tthis._display.lineStyle(strokeWidth, pattern, strokeOpacity);\n\t\t\t\t\t\tthis._display.endStroke();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (strokeGradient) {\n\n\t\t\t\t\tconst stops = strokeGradient.get(\"stops\", []);\n\t\t\t\t\tif (stops.length) {\n\t\t\t\t\t\t$array.each(stops, (stop: any) => {\n\t\t\t\t\t\t\tif ((!stop.color || stop.colorInherited) && stroke) {\n\t\t\t\t\t\t\t\tstop.color = stroke;\n\t\t\t\t\t\t\t\tstop.colorInherited = true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (stop.opacity == null || stop.opacityInherited) {\n\t\t\t\t\t\t\t\tstop.opacity = strokeOpacity;\n\t\t\t\t\t\t\t\tstop.opacityInherited = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\n\t\t\t\t\tconst gradient = strokeGradient.getFill(this);\n\t\t\t\t\tif (gradient) {\n\t\t\t\t\t\tthis._display.lineStyle(strokeWidth, gradient, strokeOpacity);\n\t\t\t\t\t\tthis._display.endStroke();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (stroke) {\n\t\t\t\t\tthis._display.lineStyle(strokeWidth, stroke, strokeOpacity);\n\t\t\t\t\tthis._display.endStroke();\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\tthis._clear = false;\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}