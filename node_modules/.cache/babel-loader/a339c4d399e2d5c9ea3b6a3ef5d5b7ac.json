{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\nconst counter = cart => {\n  const reducer = (acc, item) => acc + item.quantity;\n\n  return cart.reduce(reducer, 0);\n};\n\nconst saveInStore = cart => {\n  localStorage.setItem('cart', JSON.stringify(cart));\n};\n\nexport const initialState = {\n  cartItems: localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : [],\n  counter: 0,\n  anchorEl: null,\n  isEmpty: null,\n  totalQuantity: localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')).reduce((acc, item) => acc + item.quantity, 0) : 0\n};\nexport const cart = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    setAnchorEl: (state, action) => {\n      state.anchorEl = action.payload;\n    },\n    setIsEmpty: (state, action) => {\n      state.isEmpty = action.payload;\n    },\n    deleteItem: (state, action) => {\n      const {\n        productId,\n        size\n      } = action.payload;\n      const index = state.cartItems.findIndex(item => item.productId === productId && item.size === size);\n      state.cartItems.splice(index, 1);\n\n      if (state.cartItems.length === 0) {\n        state.anchorEl = null;\n      }\n\n      state.totalQuantity = counter(state.cartItems);\n      saveInStore(state.cartItems);\n    },\n    addItem: (state, action) => {\n      const match = state.cartItems.find(item => item.productId === action.payload.productId && item.size === action.payload.size);\n      const index = state.cartItems.indexOf(match);\n      match ? state.cartItems[index].quantity += action.payload.quantity : state.cartItems.push(action.payload);\n      state.totalQuantity = counter(state.cartItems);\n      saveInStore(state.cartItems);\n    },\n    rewriteCart: (state, action) => {\n      state.cartItems = action.payload;\n      state.totalQuantity = counter(state.cartItems);\n      saveInStore(state.cartItems);\n    }\n  }\n});\nexport const {\n  setAnchorEl,\n  setIsEmpty,\n  deleteItem,\n  addItem,\n  rewriteCart\n} = cart.actions;\nexport default cart.reducer;","map":{"version":3,"sources":["/Users/dcurchin/Desktop/final/grocery-shop-ui/src/redux/slices/cartSlice.js"],"names":["createSlice","counter","cart","reducer","acc","item","quantity","reduce","saveInStore","localStorage","setItem","JSON","stringify","initialState","cartItems","getItem","parse","anchorEl","isEmpty","totalQuantity","name","reducers","setAnchorEl","state","action","payload","setIsEmpty","deleteItem","productId","size","index","findIndex","splice","length","addItem","match","find","indexOf","push","rewriteCart","actions"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst counter = (cart) => {\n  const reducer = (acc, item) => acc + item.quantity;\n  return cart.reduce(reducer, 0);\n};\nconst saveInStore = (cart) => {\n  localStorage.setItem('cart', JSON.stringify(cart));\n};\n\nexport const initialState = {\n  cartItems: localStorage.getItem('cart')\n    ? JSON.parse(localStorage.getItem('cart'))\n    : [],\n  counter: 0,\n  anchorEl: null,\n  isEmpty: null,\n  totalQuantity: localStorage.getItem('cart')\n    ? JSON.parse(localStorage.getItem('cart')).reduce(\n        (acc, item) => acc + item.quantity,\n        0\n      )\n    : 0,\n};\n\nexport const cart = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    setAnchorEl: (state, action) => {\n      state.anchorEl = action.payload;\n    },\n    setIsEmpty: (state, action) => {\n      state.isEmpty = action.payload;\n    },\n    deleteItem: (state, action) => {\n      const { productId, size } = action.payload;\n      const index = state.cartItems.findIndex(\n        (item) => item.productId === productId && item.size === size\n      );\n      state.cartItems.splice(index, 1);\n      if (state.cartItems.length === 0) {\n        state.anchorEl = null;\n      }\n      state.totalQuantity = counter(state.cartItems);\n      saveInStore(state.cartItems);\n    },\n    addItem: (state, action) => {\n      const match = state.cartItems.find(\n        (item) =>\n          item.productId === action.payload.productId &&\n          item.size === action.payload.size\n      );\n      const index = state.cartItems.indexOf(match);\n      match\n        ? (state.cartItems[index].quantity += action.payload.quantity)\n        : state.cartItems.push(action.payload);\n      state.totalQuantity = counter(state.cartItems);\n      saveInStore(state.cartItems);\n    },\n    rewriteCart: (state, action) => {\n      state.cartItems = action.payload;\n      state.totalQuantity = counter(state.cartItems);\n      saveInStore(state.cartItems);\n    },\n  },\n});\n\nexport const { setAnchorEl, setIsEmpty, deleteItem, addItem, rewriteCart } =\n  cart.actions;\n\nexport default cart.reducer;\n"]},"metadata":{},"sourceType":"module"}