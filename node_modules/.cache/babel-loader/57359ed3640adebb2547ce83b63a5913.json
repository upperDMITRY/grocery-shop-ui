{"ast":null,"code":"/**\r\n * A collection of network-related functions\r\n */\n/**\r\n * Loads an external file via its URL.\r\n *\r\n * Please note that this is an asynchronous function.\r\n *\r\n * It will not return the result, but rather a `Promise`.\r\n *\r\n * You can use the `await` notion, or `then()`.\r\n *\r\n * ```TypeScript\r\n * // Using await\r\n * let response = await Net.load( \"http://www.my.com/data.json\" );\r\n * console.log( response.response );\r\n *\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * ```JavaScript\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n *\r\n * @async\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/data/net-load-utility/} for more info\r\n * @param url      URL for the file to load\r\n * @param target   A target element that is requesting the net load\r\n * @param options  Request options\r\n * @return Result (Promise)\r\n */\nexport function load(url, target, options) {\n  return new Promise(function (success, error) {\n    // Is return type Blob?\n    var isBlob = options != null && options.responseType == \"blob\";\n    // Create request and set up handlers\n    var xhr = new XMLHttpRequest();\n    xhr.onload = function () {\n      if (xhr.status === 200) {\n        var response = void 0;\n        var blob_1;\n        if (isBlob) {\n          blob_1 = xhr.response;\n          readBlob(blob_1).then(function (response) {\n            var output = {\n              xhr: xhr,\n              error: false,\n              response: response,\n              blob: blob_1,\n              type: xhr.getResponseHeader(\"Content-Type\"),\n              target: target\n            };\n            success(output);\n          });\n          return;\n        } else {\n          response = xhr.responseText || xhr.response;\n        }\n        var output = {\n          xhr: xhr,\n          error: false,\n          response: response,\n          blob: blob_1,\n          type: xhr.getResponseHeader(\"Content-Type\"),\n          target: target\n        };\n        success(output);\n      } else {\n        error({\n          xhr: xhr,\n          error: true,\n          type: xhr.getResponseHeader(\"Content-Type\"),\n          target: target\n        });\n      }\n    };\n    xhr.onerror = function () {\n      error({\n        xhr: xhr,\n        error: true,\n        type: xhr.getResponseHeader(\"Content-Type\"),\n        target: target\n      });\n    };\n    // Open request\n    xhr.open(\"GET\", url, true);\n    if (options && options.withCredentials) {\n      xhr.withCredentials = true;\n    }\n    // Process options\n    if (options != null) {\n      if (options.requestHeaders != null) {\n        for (var i = 0; i < options.requestHeaders.length; i++) {\n          var header = options.requestHeaders[i];\n          xhr.setRequestHeader(header.key, header.value);\n        }\n      }\n      if (options.responseType != null) {\n        xhr.responseType = options.responseType;\n      }\n    }\n    // Send request\n    xhr.send();\n  });\n}\n/**\r\n * Returns textual representation of a Blob object.\r\n *\r\n * @param   blob  Target blob\r\n * @return        Text promise\r\n */\nexport function readBlob(blob) {\n  return new Promise(function (success, error) {\n    var reader = new FileReader();\n    reader.onload = function (_event) {\n      success(reader.result);\n    };\n    reader.onerror = function (e) {\n      error(e);\n    };\n    reader.readAsText(blob);\n  });\n}","map":{"version":3,"names":["load","url","target","options","Promise","success","error","isBlob","responseType","xhr","XMLHttpRequest","onload","status","response","blob_1","readBlob","then","output","blob","type","getResponseHeader","responseText","onerror","open","withCredentials","requestHeaders","i","length","header","setRequestHeader","key","value","send","reader","FileReader","_event","result","e","readAsText"],"sources":["../../../../../src/.internal/core/util/Net.ts"],"sourcesContent":["/**\n * A collection of network-related functions\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport type { Optional } from \"./Type\";\n\n/**\n * Defines an interface for objects that hold a net request result.\n */\nexport interface INetLoadResult<A> {\n\n\t/**\n\t * A reference to original [[XMLHttpRequest]].\n\t */\n\txhr: XMLHttpRequest;\n\n\t/**\n\t * Request response body.\n\t */\n\tresponse?: string;\n\n\t/**\n\t * Request response as Blob. (if set `responseType = \"blob\"`)\n\t */\n\tblob?: Blob;\n\n\t/**\n\t * Response `Content-Type`.\n\t */\n\ttype: string | null;\n\n\t/**\n\t * Was there an error?\n\t */\n\terror: boolean;\n\n\t/**\n\t * A target object that made the net load request.\n\t */\n\ttarget?: A;\n\n}\n\nexport interface INetRequestOptions {\n\n\t/**\n\t * Custom request headers to be added to HTTP(S) request.\n\t */\n\trequestHeaders?: { key: string, value: string }[];\n\n\t/**\n\t * Specify expected response type.\n\t *\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType} for more info\n\t */\n\tresponseType?: XMLHttpRequestResponseType;\n\n\t/**\n\t * Specify whether to send CORS credentials (defaults to `false`).\n\t *\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials} for more info\n\t */\n\twithCredentials?: boolean;\n}\n\n/**\n * Loads an external file via its URL.\n *\n * Please note that this is an asynchronous function.\n *\n * It will not return the result, but rather a `Promise`.\n *\n * You can use the `await` notion, or `then()`.\n *\n * ```TypeScript\n * // Using await\n * let response = await Net.load( \"http://www.my.com/data.json\" );\n * console.log( response.response );\n *\n * // Using then()\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\n *   console.log( response.response );\n * } );\n * ```\n * ```JavaScript\n * // Using then()\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\n *   console.log( response.response );\n * } );\n * ```\n *\n * @async\n * @see {@link https://www.amcharts.com/docs/v5/concepts/data/net-load-utility/} for more info\n * @param url      URL for the file to load\n * @param target   A target element that is requesting the net load\n * @param options  Request options\n * @return Result (Promise)\n */\nexport function load<A>(url: string, target?: A, options?: INetRequestOptions): Promise<INetLoadResult<A>> {\n\treturn new Promise<INetLoadResult<A>>((success, error) => {\n\n\t\t// Is return type Blob?\n\t\tlet isBlob = options != null && options.responseType == \"blob\";\n\n\t\t// Create request and set up handlers\n\t\tlet xhr = new XMLHttpRequest();\n\t\txhr.onload = () => {\n\t\t\tif (xhr.status === 200) {\n\n\t\t\t\tlet response: Optional<string>;\n\t\t\t\tlet blob: Optional<Blob>;\n\n\t\t\t\tif (isBlob) {\n\t\t\t\t\tblob = xhr.response;\n\t\t\t\t\treadBlob(blob!).then((response: any) => {\n\t\t\t\t\t\tlet output: INetLoadResult<A> = {\n\t\t\t\t\t\t\txhr: xhr,\n\t\t\t\t\t\t\terror: false,\n\t\t\t\t\t\t\tresponse: response,\n\t\t\t\t\t\t\tblob: blob,\n\t\t\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\n\t\t\t\t\t\t\ttarget: target\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsuccess(output);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresponse = xhr.responseText || xhr.response\n\t\t\t\t}\n\n\t\t\t\tlet output: INetLoadResult<A> = {\n\t\t\t\t\txhr: xhr,\n\t\t\t\t\terror: false,\n\t\t\t\t\tresponse: response,\n\t\t\t\t\tblob: blob,\n\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\n\t\t\t\t\ttarget: target\n\t\t\t\t};\n\t\t\t\tsuccess(output);\n\t\t\t}\n\t\t\telse {\n\t\t\t\terror({\n\t\t\t\t\txhr: xhr,\n\t\t\t\t\terror: true,\n\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\n\t\t\t\t\ttarget: target\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\txhr.onerror = () => {\n\t\t\terror({\n\t\t\t\txhr: xhr,\n\t\t\t\terror: true,\n\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\n\t\t\t\ttarget: target\n\t\t\t});\n\t\t};\n\n\t\t// Open request\n\t\txhr.open(\"GET\", url, true);\n\n\t\tif (options && options.withCredentials) {\n\t\t\txhr.withCredentials = true;\n\t\t}\n\n\t\t// Process options\n\t\tif (options != null) {\n\n\t\t\tif (options.requestHeaders != null) {\n\t\t\t\tfor (let i = 0; i < options.requestHeaders.length; i++) {\n\t\t\t\t\tlet header = options.requestHeaders[i];\n\t\t\t\t\txhr.setRequestHeader(header.key, header.value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (options.responseType != null) {\n\t\t\t\txhr.responseType = options.responseType;\n\t\t\t}\n\t\t}\n\n\t\t// Send request\n\t\txhr.send();\n\n\t});\n\n}\n\n/**\n * Returns textual representation of a Blob object.\n *\n * @param   blob  Target blob\n * @return        Text promise\n */\nexport function readBlob(blob: Blob): Promise<string> {\n\treturn new Promise<string>((success, error) => {\n\t\tconst reader = new FileReader()\n\n\t\treader.onload = _event => {\n\t\t\tsuccess(<string>reader.result);\n\t\t}\n\n\t\treader.onerror = (e) => {\n\t\t\terror(e);\n\t\t}\n\n\t\treader.readAsText(blob);\n\t});\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}