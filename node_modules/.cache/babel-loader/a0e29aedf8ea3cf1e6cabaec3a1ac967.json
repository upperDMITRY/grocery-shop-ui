{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { isServer, isValidTimeout, noop, replaceEqualDeep, shallowEqualObjects, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { focusManager } from './focusManager';\nimport { Subscribable } from './subscribable';\nimport { getLogger } from './logger';\nimport { isCancelledError } from './retryer';\nexport var QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueryObserver, _Subscribable);\n  function QueryObserver(client, options) {\n    var _this;\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.options = options;\n    _this.trackedProps = [];\n    _this.previousSelectError = null;\n    _this.bindMethods();\n    _this.setOptions(options);\n    return _this;\n  }\n  var _proto = QueryObserver.prototype;\n  _proto.bindMethods = function bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  };\n  _proto.onSubscribe = function onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n      this.updateTimers();\n    }\n  };\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n  _proto.shouldFetchOnReconnect = function shouldFetchOnReconnect() {\n    return _shouldFetchOnReconnect(this.currentQuery, this.options);\n  };\n  _proto.shouldFetchOnWindowFocus = function shouldFetchOnWindowFocus() {\n    return _shouldFetchOnWindowFocus(this.currentQuery, this.options);\n  };\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.clearTimers();\n    this.currentQuery.removeObserver(this);\n  };\n  _proto.setOptions = function setOptions(options, notifyOptions) {\n    var prevOptions = this.options;\n    var prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryObserverOptions(options);\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n    this.updateQuery();\n    var mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    }\n    var nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n      this.updateRefetchInterval(nextRefetchInterval);\n    }\n  };\n  _proto.getOptimisticResult = function getOptimisticResult(options) {\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return this.createResult(query, defaultedOptions);\n  };\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  };\n  _proto.trackResult = function trackResult(result) {\n    var _this2 = this;\n    var trackedResult = {};\n    Object.keys(result).forEach(function (key) {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: function get() {\n          var typedKey = key;\n          if (!_this2.trackedProps.includes(typedKey)) {\n            _this2.trackedProps.push(typedKey);\n          }\n          return result[typedKey];\n        }\n      });\n    });\n    return trackedResult;\n  };\n  _proto.getNextResult = function getNextResult(options) {\n    var _this3 = this;\n    return new Promise(function (resolve, reject) {\n      var unsubscribe = _this3.subscribe(function (result) {\n        if (!result.isFetching) {\n          unsubscribe();\n          if (result.isError && (options == null ? void 0 : options.throwOnError)) {\n            reject(result.error);\n          } else {\n            resolve(result);\n          }\n        }\n      });\n    });\n  };\n  _proto.getCurrentQuery = function getCurrentQuery() {\n    return this.currentQuery;\n  };\n  _proto.remove = function remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  };\n  _proto.refetch = function refetch(options) {\n    return this.fetch(_extends({}, options, {\n      meta: {\n        refetchPage: options == null ? void 0 : options.refetchPage\n      }\n    }));\n  };\n  _proto.fetchOptimistic = function fetchOptimistic(options) {\n    var _this4 = this;\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return query.fetch().then(function () {\n      return _this4.createResult(query, defaultedOptions);\n    });\n  };\n  _proto.fetch = function fetch(fetchOptions) {\n    var _this5 = this;\n    return this.executeFetch(fetchOptions).then(function () {\n      _this5.updateResult();\n      return _this5.currentResult;\n    });\n  };\n  _proto.executeFetch = function executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    var promise = this.currentQuery.fetch(this.options, fetchOptions);\n    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  };\n  _proto.updateStaleTimeout = function updateStaleTimeout() {\n    var _this6 = this;\n    this.clearStaleTimeout();\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n    var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    var timeout = time + 1;\n    this.staleTimeoutId = setTimeout(function () {\n      if (!_this6.currentResult.isStale) {\n        _this6.updateResult();\n      }\n    }, timeout);\n  };\n  _proto.computeRefetchInterval = function computeRefetchInterval() {\n    var _this$options$refetch;\n    return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n  };\n  _proto.updateRefetchInterval = function updateRefetchInterval(nextInterval) {\n    var _this7 = this;\n    this.clearRefetchInterval();\n    this.currentRefetchInterval = nextInterval;\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n      return;\n    }\n    this.refetchIntervalId = setInterval(function () {\n      if (_this7.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        _this7.executeFetch();\n      }\n    }, this.currentRefetchInterval);\n  };\n  _proto.updateTimers = function updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval(this.computeRefetchInterval());\n  };\n  _proto.clearTimers = function clearTimers() {\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n  };\n  _proto.clearStaleTimeout = function clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  };\n  _proto.clearRefetchInterval = function clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  };\n  _proto.createResult = function createResult(query, options) {\n    var prevQuery = this.currentQuery;\n    var prevOptions = this.options;\n    var prevResult = this.currentResult;\n    var prevResultState = this.currentResultState;\n    var prevResultOptions = this.currentResultOptions;\n    var queryChange = query !== prevQuery;\n    var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    var state = query.state;\n    var dataUpdatedAt = state.dataUpdatedAt,\n      error = state.error,\n      errorUpdatedAt = state.errorUpdatedAt,\n      isFetching = state.isFetching,\n      status = state.status;\n    var isPreviousData = false;\n    var isPlaceholderData = false;\n    var data; // Optimistically set result in fetching state if needed\n\n    if (options.optimisticResults) {\n      var mounted = this.hasListeners();\n      var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true;\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n    } // Keep previous data if needed\n\n    if (options.keepPreviousData && !state.dataUpdateCount && (prevQueryResult == null ? void 0 : prevQueryResult.isSuccess) && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === (prevResultOptions == null ? void 0 : prevResultOptions.select) && !this.previousSelectError) {\n        data = prevResult.data;\n      } else {\n        try {\n          data = options.select(state.data);\n          if (options.structuralSharing !== false) {\n            data = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, data);\n          }\n          this.previousSelectError = null;\n        } catch (selectError) {\n          getLogger().error(selectError);\n          error = selectError;\n          this.previousSelectError = selectError;\n          errorUpdatedAt = Date.now();\n          status = 'error';\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && (status === 'loading' || status === 'idle')) {\n      var placeholderData; // Memoize placeholder data\n\n      if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n            if (options.structuralSharing !== false) {\n              placeholderData = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, placeholderData);\n            }\n            this.previousSelectError = null;\n          } catch (selectError) {\n            getLogger().error(selectError);\n            error = selectError;\n            this.previousSelectError = selectError;\n            errorUpdatedAt = Date.now();\n            status = 'error';\n          }\n        }\n      }\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n    var result = {\n      status: status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data: data,\n      dataUpdatedAt: dataUpdatedAt,\n      error: error,\n      errorUpdatedAt: errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData: isPlaceholderData,\n      isPreviousData: isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  };\n  _proto.shouldNotifyListeners = function shouldNotifyListeners(result, prevResult) {\n    if (!prevResult) {\n      return true;\n    }\n    if (result === prevResult) {\n      return false;\n    }\n    var _this$options = this.options,\n      notifyOnChangeProps = _this$options.notifyOnChangeProps,\n      notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true;\n    }\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true;\n    }\n    var includedProps = notifyOnChangeProps === 'tracked' ? this.trackedProps : notifyOnChangeProps;\n    return Object.keys(result).some(function (key) {\n      var typedKey = key;\n      var changed = result[typedKey] !== prevResult[typedKey];\n      var isIncluded = includedProps == null ? void 0 : includedProps.some(function (x) {\n        return x === key;\n      });\n      var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function (x) {\n        return x === key;\n      });\n      return changed && !isExcluded && (!includedProps || isIncluded);\n    });\n  };\n  _proto.updateResult = function updateResult(notifyOptions) {\n    var prevResult = this.currentResult;\n    this.currentResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify if something has changed\n\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return;\n    } // Determine which callbacks to trigger\n\n    var defaultNotifyOptions = {\n      cache: true\n    };\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && this.shouldNotifyListeners(this.currentResult, prevResult)) {\n      defaultNotifyOptions.listeners = true;\n    }\n    this.notify(_extends({}, defaultNotifyOptions, notifyOptions));\n  };\n  _proto.updateQuery = function updateQuery() {\n    var query = this.client.getQueryCache().build(this.client, this.options);\n    if (query === this.currentQuery) {\n      return;\n    }\n    var prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  };\n  _proto.onQueryUpdate = function onQueryUpdate(action) {\n    var notifyOptions = {};\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n    this.updateResult(notifyOptions);\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  };\n  _proto.notify = function notify(notifyOptions) {\n    var _this8 = this;\n    notifyManager.batch(function () {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(undefined, _this8.currentResult.error);\n      } // Then trigger the listeners\n\n      if (notifyOptions.listeners) {\n        _this8.listeners.forEach(function (listener) {\n          listener(_this8.currentResult);\n        });\n      } // Then the cache listeners\n\n      if (notifyOptions.cache) {\n        _this8.client.getQueryCache().notify({\n          query: _this8.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  };\n  return QueryObserver;\n}(Subscribable);\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\nfunction shouldRefetchOnMount(query, options) {\n  return options.enabled !== false && query.state.dataUpdatedAt > 0 && (options.refetchOnMount === 'always' || options.refetchOnMount !== false && isStale(query, options));\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options);\n}\nfunction _shouldFetchOnReconnect(query, options) {\n  return options.enabled !== false && (options.refetchOnReconnect === 'always' || options.refetchOnReconnect !== false && isStale(query, options));\n}\nfunction _shouldFetchOnWindowFocus(query, options) {\n  return options.enabled !== false && (options.refetchOnWindowFocus === 'always' || options.refetchOnWindowFocus !== false && isStale(query, options));\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error' || prevOptions.enabled === false) && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}","map":{"version":3,"names":["_extends","_inheritsLoose","isServer","isValidTimeout","noop","replaceEqualDeep","shallowEqualObjects","timeUntilStale","notifyManager","focusManager","Subscribable","getLogger","isCancelledError","QueryObserver","_Subscribable","client","options","_this","call","trackedProps","previousSelectError","bindMethods","setOptions","_proto","prototype","remove","bind","refetch","onSubscribe","listeners","length","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","destroy","shouldFetchOnReconnect","_shouldFetchOnReconnect","shouldFetchOnWindowFocus","_shouldFetchOnWindowFocus","clearTimers","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryObserverOptions","enabled","Error","queryKey","updateQuery","mounted","hasListeners","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","defaultedOptions","query","getQueryCache","build","createResult","getCurrentResult","currentResult","trackResult","result","_this2","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","typedKey","includes","push","getNextResult","_this3","Promise","resolve","reject","unsubscribe","subscribe","isFetching","isError","throwOnError","error","getCurrentQuery","fetch","meta","refetchPage","fetchOptimistic","_this4","then","fetchOptions","_this5","promise","catch","_this6","clearStaleTimeout","isStale","time","dataUpdatedAt","timeout","staleTimeoutId","setTimeout","_this$options$refetch","refetchInterval","data","nextInterval","_this7","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","isFocused","clearTimeout","undefined","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","state","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","status","isPreviousData","isPlaceholderData","optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","dataUpdateCount","isSuccess","select","structuralSharing","selectError","Date","now","placeholderData","isLoading","isIdle","failureCount","fetchFailureCount","isFetched","errorUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","shouldNotifyListeners","_this$options","notifyOnChangeProps","notifyOnChangePropsExclusions","includedProps","some","changed","isIncluded","x","isExcluded","defaultNotifyOptions","cache","notify","onQueryUpdate","action","type","onSuccess","onError","_this8","batch","onSettled","listener","shouldLoadOnMount","retryOnMount","shouldRefetchOnMount","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","suspense","isStaleByTime"],"sources":["/Users/dcurchin/Desktop/final/grocery-shop-ui/node_modules/react-query/es/core/queryObserver.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { isServer, isValidTimeout, noop, replaceEqualDeep, shallowEqualObjects, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { focusManager } from './focusManager';\nimport { Subscribable } from './subscribable';\nimport { getLogger } from './logger';\nimport { isCancelledError } from './retryer';\nexport var QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueryObserver, _Subscribable);\n\n  function QueryObserver(client, options) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.options = options;\n    _this.trackedProps = [];\n    _this.previousSelectError = null;\n\n    _this.bindMethods();\n\n    _this.setOptions(options);\n\n    return _this;\n  }\n\n  var _proto = QueryObserver.prototype;\n\n  _proto.bindMethods = function bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  };\n\n  _proto.onSubscribe = function onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n\n  _proto.shouldFetchOnReconnect = function shouldFetchOnReconnect() {\n    return _shouldFetchOnReconnect(this.currentQuery, this.options);\n  };\n\n  _proto.shouldFetchOnWindowFocus = function shouldFetchOnWindowFocus() {\n    return _shouldFetchOnWindowFocus(this.currentQuery, this.options);\n  };\n\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.clearTimers();\n    this.currentQuery.removeObserver(this);\n  };\n\n  _proto.setOptions = function setOptions(options, notifyOptions) {\n    var prevOptions = this.options;\n    var prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryObserverOptions(options);\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    var mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    }\n\n    var nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n      this.updateRefetchInterval(nextRefetchInterval);\n    }\n  };\n\n  _proto.getOptimisticResult = function getOptimisticResult(options) {\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return this.createResult(query, defaultedOptions);\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  };\n\n  _proto.trackResult = function trackResult(result) {\n    var _this2 = this;\n\n    var trackedResult = {};\n    Object.keys(result).forEach(function (key) {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: function get() {\n          var typedKey = key;\n\n          if (!_this2.trackedProps.includes(typedKey)) {\n            _this2.trackedProps.push(typedKey);\n          }\n\n          return result[typedKey];\n        }\n      });\n    });\n    return trackedResult;\n  };\n\n  _proto.getNextResult = function getNextResult(options) {\n    var _this3 = this;\n\n    return new Promise(function (resolve, reject) {\n      var unsubscribe = _this3.subscribe(function (result) {\n        if (!result.isFetching) {\n          unsubscribe();\n\n          if (result.isError && (options == null ? void 0 : options.throwOnError)) {\n            reject(result.error);\n          } else {\n            resolve(result);\n          }\n        }\n      });\n    });\n  };\n\n  _proto.getCurrentQuery = function getCurrentQuery() {\n    return this.currentQuery;\n  };\n\n  _proto.remove = function remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  };\n\n  _proto.refetch = function refetch(options) {\n    return this.fetch(_extends({}, options, {\n      meta: {\n        refetchPage: options == null ? void 0 : options.refetchPage\n      }\n    }));\n  };\n\n  _proto.fetchOptimistic = function fetchOptimistic(options) {\n    var _this4 = this;\n\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return query.fetch().then(function () {\n      return _this4.createResult(query, defaultedOptions);\n    });\n  };\n\n  _proto.fetch = function fetch(fetchOptions) {\n    var _this5 = this;\n\n    return this.executeFetch(fetchOptions).then(function () {\n      _this5.updateResult();\n\n      return _this5.currentResult;\n    });\n  };\n\n  _proto.executeFetch = function executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    var promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  };\n\n  _proto.updateStaleTimeout = function updateStaleTimeout() {\n    var _this6 = this;\n\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    var timeout = time + 1;\n    this.staleTimeoutId = setTimeout(function () {\n      if (!_this6.currentResult.isStale) {\n        _this6.updateResult();\n      }\n    }, timeout);\n  };\n\n  _proto.computeRefetchInterval = function computeRefetchInterval() {\n    var _this$options$refetch;\n\n    return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n  };\n\n  _proto.updateRefetchInterval = function updateRefetchInterval(nextInterval) {\n    var _this7 = this;\n\n    this.clearRefetchInterval();\n    this.currentRefetchInterval = nextInterval;\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(function () {\n      if (_this7.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        _this7.executeFetch();\n      }\n    }, this.currentRefetchInterval);\n  };\n\n  _proto.updateTimers = function updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval(this.computeRefetchInterval());\n  };\n\n  _proto.clearTimers = function clearTimers() {\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n  };\n\n  _proto.clearStaleTimeout = function clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  };\n\n  _proto.clearRefetchInterval = function clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  };\n\n  _proto.createResult = function createResult(query, options) {\n    var prevQuery = this.currentQuery;\n    var prevOptions = this.options;\n    var prevResult = this.currentResult;\n    var prevResultState = this.currentResultState;\n    var prevResultOptions = this.currentResultOptions;\n    var queryChange = query !== prevQuery;\n    var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    var state = query.state;\n    var dataUpdatedAt = state.dataUpdatedAt,\n        error = state.error,\n        errorUpdatedAt = state.errorUpdatedAt,\n        isFetching = state.isFetching,\n        status = state.status;\n    var isPreviousData = false;\n    var isPlaceholderData = false;\n    var data; // Optimistically set result in fetching state if needed\n\n    if (options.optimisticResults) {\n      var mounted = this.hasListeners();\n      var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true;\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdateCount && (prevQueryResult == null ? void 0 : prevQueryResult.isSuccess) && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n        // Memoize select result\n        if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === (prevResultOptions == null ? void 0 : prevResultOptions.select) && !this.previousSelectError) {\n          data = prevResult.data;\n        } else {\n          try {\n            data = options.select(state.data);\n\n            if (options.structuralSharing !== false) {\n              data = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, data);\n            }\n\n            this.previousSelectError = null;\n          } catch (selectError) {\n            getLogger().error(selectError);\n            error = selectError;\n            this.previousSelectError = selectError;\n            errorUpdatedAt = Date.now();\n            status = 'error';\n          }\n        }\n      } // Use query data\n      else {\n          data = state.data;\n        } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && (status === 'loading' || status === 'idle')) {\n      var placeholderData; // Memoize placeholder data\n\n      if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n\n            if (options.structuralSharing !== false) {\n              placeholderData = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, placeholderData);\n            }\n\n            this.previousSelectError = null;\n          } catch (selectError) {\n            getLogger().error(selectError);\n            error = selectError;\n            this.previousSelectError = selectError;\n            errorUpdatedAt = Date.now();\n            status = 'error';\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    var result = {\n      status: status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data: data,\n      dataUpdatedAt: dataUpdatedAt,\n      error: error,\n      errorUpdatedAt: errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData: isPlaceholderData,\n      isPreviousData: isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  };\n\n  _proto.shouldNotifyListeners = function shouldNotifyListeners(result, prevResult) {\n    if (!prevResult) {\n      return true;\n    }\n\n    if (result === prevResult) {\n      return false;\n    }\n\n    var _this$options = this.options,\n        notifyOnChangeProps = _this$options.notifyOnChangeProps,\n        notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true;\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true;\n    }\n\n    var includedProps = notifyOnChangeProps === 'tracked' ? this.trackedProps : notifyOnChangeProps;\n    return Object.keys(result).some(function (key) {\n      var typedKey = key;\n      var changed = result[typedKey] !== prevResult[typedKey];\n      var isIncluded = includedProps == null ? void 0 : includedProps.some(function (x) {\n        return x === key;\n      });\n      var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function (x) {\n        return x === key;\n      });\n      return changed && !isExcluded && (!includedProps || isIncluded);\n    });\n  };\n\n  _proto.updateResult = function updateResult(notifyOptions) {\n    var prevResult = this.currentResult;\n    this.currentResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify if something has changed\n\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return;\n    } // Determine which callbacks to trigger\n\n\n    var defaultNotifyOptions = {\n      cache: true\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && this.shouldNotifyListeners(this.currentResult, prevResult)) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify(_extends({}, defaultNotifyOptions, notifyOptions));\n  };\n\n  _proto.updateQuery = function updateQuery() {\n    var query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    var prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  };\n\n  _proto.onQueryUpdate = function onQueryUpdate(action) {\n    var notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  };\n\n  _proto.notify = function notify(notifyOptions) {\n    var _this8 = this;\n\n    notifyManager.batch(function () {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(undefined, _this8.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        _this8.listeners.forEach(function (listener) {\n          listener(_this8.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        _this8.client.getQueryCache().notify({\n          query: _this8.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  };\n\n  return QueryObserver;\n}(Subscribable);\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldRefetchOnMount(query, options) {\n  return options.enabled !== false && query.state.dataUpdatedAt > 0 && (options.refetchOnMount === 'always' || options.refetchOnMount !== false && isStale(query, options));\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options);\n}\n\nfunction _shouldFetchOnReconnect(query, options) {\n  return options.enabled !== false && (options.refetchOnReconnect === 'always' || options.refetchOnReconnect !== false && isStale(query, options));\n}\n\nfunction _shouldFetchOnWindowFocus(query, options) {\n  return options.enabled !== false && (options.refetchOnWindowFocus === 'always' || options.refetchOnWindowFocus !== false && isStale(query, options));\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error' || prevOptions.enabled === false) && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}