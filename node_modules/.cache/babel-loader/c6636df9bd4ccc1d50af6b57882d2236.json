{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { List } from \"./List\";\nimport * as $array from \"./Array\";\n/**\r\n * A version of [[List]] to hold children of the [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info\r\n */\n\nvar Children =\n/** @class */\nfunction (_super) {\n  __extends(Children, _super);\n\n  function Children(container) {\n    var _this = _super.call(this) || this;\n\n    Object.defineProperty(_this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_container\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    _this._container = container;\n    _this._events = _this.events.onAll(function (change) {\n      if (change.type === \"clear\") {\n        $array.each(change.oldValues, function (x) {\n          _this._onRemoved(x);\n        });\n      } else if (change.type === \"push\") {\n        _this._onInserted(change.newValue);\n      } else if (change.type === \"setIndex\") {\n        _this._onRemoved(change.oldValue);\n\n        _this._onInserted(change.newValue, change.index);\n      } else if (change.type === \"insertIndex\") {\n        _this._onInserted(change.newValue, change.index);\n      } else if (change.type === \"removeIndex\") {\n        _this._onRemoved(change.oldValue);\n      } else {\n        throw new Error(\"Unknown IListEvent type\");\n      }\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Children.prototype, \"_onInserted\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (child, index) {\n      child._setParent(this._container, true);\n\n      var childrenDisplay = this._container._childrenDisplay;\n\n      if (index === undefined) {\n        childrenDisplay.addChild(child._display);\n      } else {\n        childrenDisplay.addChildAt(child._display, index);\n      }\n    }\n  });\n  Object.defineProperty(Children.prototype, \"_onRemoved\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (child) {\n      this._container._childrenDisplay.removeChild(child._display);\n\n      this._container.markDirtyBounds();\n\n      this._container.markDirty();\n    }\n  });\n  /**\r\n   * Returns `true` if obejct is disposed.\r\n   */\n\n  Object.defineProperty(Children.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._disposed;\n    }\n  });\n  /**\r\n   * Permanently dispose this object.\r\n   */\n\n  Object.defineProperty(Children.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._disposed) {\n        this._disposed = true;\n\n        this._events.dispose();\n\n        $array.each(this.values, function (child) {\n          child.dispose();\n        });\n      }\n    }\n  });\n  return Children;\n}(List);\n\nexport { Children };","map":{"version":3,"sources":["../../../../../src/.internal/core/util/Children.ts"],"names":[],"mappings":"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","sourcesContent":["import { List } from \"./List\";\nimport type { IDisposer } from \"./Disposer\";\nimport type { Container } from \"../render/Container\";\nimport type { Sprite } from \"../render/Sprite\";\nimport * as $array from \"./Array\";\n\n/**\n * A version of [[List]] to hold children of the [[Container]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info\n */\nexport class Children<A extends Sprite> extends List<A> implements IDisposer {\n\tprivate _disposed: boolean = false;\n\tprivate _container: Container;\n\tprivate _events: IDisposer;\n\n\tpublic constructor(container: Container) {\n\t\tsuper();\n\n\t\tthis._container = container;\n\n\t\tthis._events = this.events.onAll((change) => {\n\t\t\tif (change.type === \"clear\") {\n\t\t\t\t$array.each(change.oldValues, (x) => {\n\t\t\t\t\tthis._onRemoved(x);\n\t\t\t\t});\n\n\t\t\t} else if (change.type === \"push\") {\n\t\t\t\tthis._onInserted(change.newValue);\n\n\t\t\t} else if (change.type === \"setIndex\") {\n\t\t\t\tthis._onRemoved(change.oldValue);\n\t\t\t\tthis._onInserted(change.newValue, change.index);\n\n\t\t\t} else if (change.type === \"insertIndex\") {\n\t\t\t\tthis._onInserted(change.newValue, change.index);\n\n\t\t\t} else if (change.type === \"removeIndex\") {\n\t\t\t\tthis._onRemoved(change.oldValue);\n\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unknown IListEvent type\");\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _onInserted(child: A, index?: number) {\n\t\tchild._setParent(this._container, true);\n\t\tconst childrenDisplay = this._container._childrenDisplay;\n\t\tif (index === undefined) {\n\t\t\tchildrenDisplay.addChild(child._display);\n\n\t\t} else {\n\t\t\tchildrenDisplay.addChildAt(child._display, index);\n\t\t}\n\t}\n\n\tprotected _onRemoved(child: A) {\n\t\tthis._container._childrenDisplay.removeChild(child._display);\n\t\tthis._container.markDirtyBounds();\n\t\tthis._container.markDirty();\n\t}\n\n\t/**\n\t * Returns `true` if obejct is disposed.\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Permanently dispose this object.\n\t */\n\tpublic dispose() {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\n\t\t\tthis._events.dispose();\n\n\t\t\t$array.each(this.values, (child) => {\n\t\t\t\tchild.dispose();\n\t\t\t});\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}