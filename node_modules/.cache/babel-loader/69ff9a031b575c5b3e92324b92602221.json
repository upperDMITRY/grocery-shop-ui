{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Chart } from \"./Chart\";\nimport { Container } from \"../../core/render/Container\";\nimport { ListAutoDispose } from \"../../core/util/List\";\nimport { p100 } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\n/**\r\n * A base class for all series-based charts.\r\n */\n\nvar SerialChart =\n/** @class */\nfunction (_super) {\n  __extends(SerialChart, _super);\n\n  function SerialChart() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * A [[Container]] where chart will store all series.\r\n     *\r\n     * @default Container.new()\r\n     */\n\n\n    Object.defineProperty(_this, \"seriesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(_this._root, {\n        width: p100,\n        height: p100,\n        isMeasured: false\n      })\n    });\n    /**\r\n     * A list of chart's series.\r\n     */\n\n    Object.defineProperty(_this, \"series\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListAutoDispose()\n    });\n    return _this;\n  }\n\n  Object.defineProperty(SerialChart.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      _super.prototype._afterNew.call(this);\n\n      this._disposers.push(this.series);\n\n      var children = this.seriesContainer.children;\n\n      this._disposers.push(this.series.events.onAll(function (change) {\n        if (change.type === \"clear\") {\n          $array.each(change.oldValues, function (series) {\n            _this._removeSeries(series);\n          });\n\n          var colors = _this.get(\"colors\");\n\n          if (colors) {\n            colors.reset();\n          }\n        } else if (change.type === \"push\") {\n          children.moveValue(change.newValue);\n\n          _this._processSeries(change.newValue);\n        } else if (change.type === \"setIndex\") {\n          children.setIndex(change.index, change.newValue);\n\n          _this._processSeries(change.newValue);\n        } else if (change.type === \"insertIndex\") {\n          children.insertIndex(change.index, change.newValue);\n\n          _this._processSeries(change.newValue);\n        } else if (change.type === \"removeIndex\") {\n          _this._removeSeries(change.oldValue);\n        } else {\n          throw new Error(\"Unknown IListEvent type\");\n        }\n      }));\n    }\n  });\n  Object.defineProperty(SerialChart.prototype, \"_processSeries\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(series) {\n      series.chart = this;\n\n      series._placeBulletsContainer(this);\n    }\n  });\n  Object.defineProperty(SerialChart.prototype, \"_removeSeries\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(series) {\n      if (!series.isDisposed()) {\n        this.seriesContainer.children.removeValue(series);\n\n        series._removeBulletsContainer();\n      }\n    }\n  });\n  Object.defineProperty(SerialChart, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"SerialChart\"\n  });\n  Object.defineProperty(SerialChart, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Chart.classNames.concat([SerialChart.className])\n  });\n  return SerialChart;\n}(Chart);\n\nexport { SerialChart };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/SerialChart.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Series } from \"./Series\";\n\nimport { Chart, IChartSettings, IChartPrivate, IChartEvents } from \"./Chart\";\nimport { Container } from \"../../core/render/Container\";\nimport { ListAutoDispose } from \"../../core/util/List\";\nimport { p100 } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\nimport type { ColorSet } from \"../../core/util/ColorSet\";\n\nexport interface ISerialChartSettings extends IChartSettings {\n\t/**\n\t * A [[ColorSet]] to use when asigning colors for series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Series_colors} for more info\n\t */\n\tcolors?: ColorSet;\n}\n\nexport interface ISerialChartPrivate extends IChartPrivate {\n}\n\nexport interface ISerialChartEvents extends IChartEvents {\n}\n\n/**\n * A base class for all series-based charts.\n */\nexport abstract class SerialChart extends Chart {\n\tpublic static className: string = \"SerialChart\";\n\tpublic static classNames: Array<string> = Chart.classNames.concat([SerialChart.className]);\n\n\tdeclare public _settings: ISerialChartSettings;\n\tdeclare public _privateSettings: ISerialChartPrivate;\n\tdeclare public _seriesType: Series;\n\tdeclare public _events: ISerialChartEvents;\n\n\t/**\n\t * A [[Container]] where chart will store all series.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly seriesContainer: Container = Container.new(this._root, { width: p100, height: p100, isMeasured: false });\n\n\t/**\n\t * A list of chart's series.\n\t */\n\tpublic readonly series: ListAutoDispose<this[\"_seriesType\"]> = new ListAutoDispose();\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis._disposers.push(this.series);\n\n\t\tconst children = this.seriesContainer.children;\n\n\t\tthis._disposers.push(this.series.events.onAll((change) => {\n\t\t\tif (change.type === \"clear\") {\n\t\t\t\t$array.each(change.oldValues, (series) => {\n\t\t\t\t\tthis._removeSeries(series);\n\t\t\t\t})\n\t\t\t\tconst colors = this.get(\"colors\");\n\t\t\t\tif (colors) {\n\t\t\t\t\tcolors.reset();\n\t\t\t\t}\n\n\t\t\t} else if (change.type === \"push\") {\n\t\t\t\tchildren.moveValue(change.newValue);\n\t\t\t\tthis._processSeries(change.newValue);\n\t\t\t} else if (change.type === \"setIndex\") {\n\t\t\t\tchildren.setIndex(change.index, change.newValue);\n\t\t\t\tthis._processSeries(change.newValue);\n\t\t\t} else if (change.type === \"insertIndex\") {\n\t\t\t\tchildren.insertIndex(change.index, change.newValue);\n\t\t\t\tthis._processSeries(change.newValue);\n\t\t\t} else if (change.type === \"removeIndex\") {\n\t\t\t\tthis._removeSeries(change.oldValue);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unknown IListEvent type\");\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected _processSeries(series: this[\"_seriesType\"]) {\n\t\tseries.chart = this;\n\t\tseries._placeBulletsContainer(this);\n\t}\n\n\tprotected _removeSeries(series: this[\"_seriesType\"]) {\n\t\tif (!series.isDisposed()) {\n\t\t\tthis.seriesContainer.children.removeValue(series);\n\t\t\tseries._removeBulletsContainer();\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}