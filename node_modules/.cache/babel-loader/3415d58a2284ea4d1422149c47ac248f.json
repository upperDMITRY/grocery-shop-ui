{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as $type from \"../util/Type\";\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\nimport { Rectangle } from \"./Rectangle\";\n/**\r\n * Draws a rectangle with rounded corners.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\n\nvar RoundedRectangle =\n/** @class */\nfunction (_super) {\n  __extends(RoundedRectangle, _super);\n\n  function RoundedRectangle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(RoundedRectangle.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"cornerRadiusTL\") || this.isDirty(\"cornerRadiusTR\") || this.isDirty(\"cornerRadiusBR\") || this.isDirty(\"cornerRadiusBL\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var width = this.width();\n      var height = this.height();\n      var w = width;\n      var h = height;\n      var wSign = w / Math.abs(width);\n      var hSign = h / Math.abs(height);\n\n      if ($type.isNumber(w) && $type.isNumber(h)) {\n        var minSide = Math.min(w, h) / 2;\n        var crtl = $utils.relativeToValue(this.get(\"cornerRadiusTL\", 8), minSide);\n        var crtr = $utils.relativeToValue(this.get(\"cornerRadiusTR\", 8), minSide);\n        var crbr = $utils.relativeToValue(this.get(\"cornerRadiusBR\", 8), minSide);\n        var crbl = $utils.relativeToValue(this.get(\"cornerRadiusBL\", 8), minSide);\n        var maxcr = Math.min(Math.abs(w / 2), Math.abs(h / 2));\n        crtl = $math.fitToRange(crtl, 0, maxcr);\n        crtr = $math.fitToRange(crtr, 0, maxcr);\n        crbr = $math.fitToRange(crbr, 0, maxcr);\n        crbl = $math.fitToRange(crbl, 0, maxcr);\n\n        this._display.moveTo(crtl * wSign, 0);\n\n        this._display.lineTo(w - crtr * wSign, 0);\n\n        if (crtr > 0) {\n          this._display.arcTo(w, 0, w, crtr * hSign, crtr);\n        }\n\n        this._display.lineTo(w, h - crbr * hSign);\n\n        if (crbr > 0) {\n          this._display.arcTo(w, h, w - crbr * wSign, h, crbr);\n        }\n\n        this._display.lineTo(crbl * wSign, h);\n\n        if (crbl > 0) {\n          this._display.arcTo(0, h, 0, h - crbl * hSign, crbl);\n        }\n\n        this._display.lineTo(0, crtl * hSign);\n\n        if (crtl > 0) {\n          this._display.arcTo(0, 0, crtl * wSign, 0, crtl);\n        }\n      }\n    }\n  });\n  Object.defineProperty(RoundedRectangle, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"RoundedRectangle\"\n  });\n  Object.defineProperty(RoundedRectangle, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Rectangle.classNames.concat([RoundedRectangle.className])\n  });\n  return RoundedRectangle;\n}(Rectangle);\n\nexport { RoundedRectangle };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/RoundedRectangle.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,cAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,cAAvB;AACA,OAAO,KAAK,MAAZ,MAAwB,eAAxB;AACA,SAAS,SAAT,QAAiE,aAAjE;AA8BA;;;;;AAKG;;AACH,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsC,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;;AAAtC,WAAA,gBAAA,GAAA;;AA6DC;;;;;;WArDA,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB;;AAEA,UAAI,KAAK,OAAL,CAAa,gBAAb,KAAkC,KAAK,OAAL,CAAa,gBAAb,CAAlC,IAAoE,KAAK,OAAL,CAAa,gBAAb,CAApE,IAAsG,KAAK,OAAL,CAAa,gBAAb,CAA1G,EAA0I;AACzI,aAAK,MAAL,GAAc,IAAd;AACA;AACD;;;;;;WAED,YAAA;AACC,UAAI,KAAK,GAAG,KAAK,KAAL,EAAZ;AACA,UAAI,MAAM,GAAG,KAAK,MAAL,EAAb;AAEA,UAAI,CAAC,GAAG,KAAR;AACA,UAAI,CAAC,GAAG,MAAR;AAEA,UAAI,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,CAAhB;AACA,UAAI,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,MAAT,CAAhB;;AAEA,UAAI,KAAK,CAAC,QAAN,CAAe,CAAf,KAAqB,KAAK,CAAC,QAAN,CAAe,CAAf,CAAzB,EAA4C;AAE3C,YAAI,OAAO,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,CAAZ,IAAiB,CAA/B;AAEA,YAAI,IAAI,GAAG,MAAM,CAAC,eAAP,CAAuB,KAAK,GAAL,CAAS,gBAAT,EAA2B,CAA3B,CAAvB,EAAsD,OAAtD,CAAX;AACA,YAAI,IAAI,GAAG,MAAM,CAAC,eAAP,CAAuB,KAAK,GAAL,CAAS,gBAAT,EAA2B,CAA3B,CAAvB,EAAsD,OAAtD,CAAX;AACA,YAAI,IAAI,GAAG,MAAM,CAAC,eAAP,CAAuB,KAAK,GAAL,CAAS,gBAAT,EAA2B,CAA3B,CAAvB,EAAsD,OAAtD,CAAX;AACA,YAAI,IAAI,GAAG,MAAM,CAAC,eAAP,CAAuB,KAAK,GAAL,CAAS,gBAAT,EAA2B,CAA3B,CAAvB,EAAsD,OAAtD,CAAX;AAEA,YAAI,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,CAAT,EAA0B,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,CAA1B,CAAZ;AAEA,QAAA,IAAI,GAAG,KAAK,CAAC,UAAN,CAAiB,IAAjB,EAAuB,CAAvB,EAA0B,KAA1B,CAAP;AACA,QAAA,IAAI,GAAG,KAAK,CAAC,UAAN,CAAiB,IAAjB,EAAuB,CAAvB,EAA0B,KAA1B,CAAP;AACA,QAAA,IAAI,GAAG,KAAK,CAAC,UAAN,CAAiB,IAAjB,EAAuB,CAAvB,EAA0B,KAA1B,CAAP;AACA,QAAA,IAAI,GAAG,KAAK,CAAC,UAAN,CAAiB,IAAjB,EAAuB,CAAvB,EAA0B,KAA1B,CAAP;;AAEA,aAAK,QAAL,CAAc,MAAd,CAAqB,IAAI,GAAG,KAA5B,EAAmC,CAAnC;;AACA,aAAK,QAAL,CAAc,MAAd,CAAqB,CAAC,GAAG,IAAI,GAAG,KAAhC,EAAuC,CAAvC;;AACA,YAAI,IAAI,GAAG,CAAX,EAAc;AACb,eAAK,QAAL,CAAc,KAAd,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,IAAI,GAAG,KAApC,EAA2C,IAA3C;AACA;;AACD,aAAK,QAAL,CAAc,MAAd,CAAqB,CAArB,EAAwB,CAAC,GAAG,IAAI,GAAG,KAAnC;;AACA,YAAI,IAAI,GAAG,CAAX,EAAc;AACb,eAAK,QAAL,CAAc,KAAd,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAAC,GAAG,IAAI,GAAG,KAArC,EAA4C,CAA5C,EAA+C,IAA/C;AACA;;AACD,aAAK,QAAL,CAAc,MAAd,CAAqB,IAAI,GAAG,KAA5B,EAAmC,CAAnC;;AACA,YAAI,IAAI,GAAG,CAAX,EAAc;AACb,eAAK,QAAL,CAAc,KAAd,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAAC,GAAG,IAAI,GAAG,KAAxC,EAA+C,IAA/C;AACA;;AACD,aAAK,QAAL,CAAc,MAAd,CAAqB,CAArB,EAAwB,IAAI,GAAG,KAA/B;;AACA,YAAI,IAAI,GAAG,CAAX,EAAc;AACb,eAAK,QAAL,CAAc,KAAd,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,IAAI,GAAG,KAAjC,EAAwC,CAAxC,EAA2C,IAA3C;AACA;AACD;AACD;;AAvDD,EAAA,MAAA,CAAA,cAAA,CAAA,gBAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,gBAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,SAAS,CAAC,UAAV,CAAqB,MAArB,CAA4B,CAAC,gBAAgB,CAAC,SAAlB,CAA5B;AAA1C,GAAA;AAuDD,SAAA,gBAAA;AAAC,CA7DD,CAAsC,SAAtC,CAAA;;SAAa,gB","sourcesContent":["import * as $type from \"../util/Type\";\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\nimport { Rectangle, IRectangleSettings, IRectanglePrivate } from \"./Rectangle\";\n\n\nexport interface IRoundedRectangleSettings extends IRectangleSettings {\n\n\t/**\n\t * Radius of the top-left corner in pixels.\n\t */\n\tcornerRadiusTL?: number;\n\n\t/**\n\t * Radius of the top-right corner in pixels.\n\t */\n\tcornerRadiusTR?: number;\n\n\t/**\n\t * Radius of the botttom-right corner in pixels.\n\t */\n\tcornerRadiusBR?: number;\n\n\t/**\n\t * Radius of the bottom-left corner in pixels.\n\t */\n\tcornerRadiusBL?: number;\n\n}\n\nexport interface IRoundedRectanglePrivate extends IRectanglePrivate {\n}\n\n/**\n * Draws a rectangle with rounded corners.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n * @important\n */\nexport class RoundedRectangle extends Rectangle {\n\n\tdeclare public _settings: IRoundedRectangleSettings;\n\tdeclare public _privateSettings: IRoundedRectanglePrivate;\n\n\tpublic static className: string = \"RoundedRectangle\";\n\tpublic static classNames: Array<string> = Rectangle.classNames.concat([RoundedRectangle.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"cornerRadiusTL\") || this.isDirty(\"cornerRadiusTR\") || this.isDirty(\"cornerRadiusBR\") || this.isDirty(\"cornerRadiusBL\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _draw() {\t\t\n\t\tlet width = this.width();\n\t\tlet height = this.height();\n\n\t\tlet w = width;\n\t\tlet h = height;\n\n\t\tlet wSign = w / Math.abs(width);\n\t\tlet hSign = h / Math.abs(height);\n\n\t\tif ($type.isNumber(w) && $type.isNumber(h)) {\n\n\t\t\tlet minSide = Math.min(w, h) / 2;\n\n\t\t\tlet crtl = $utils.relativeToValue(this.get(\"cornerRadiusTL\", 8), minSide);\n\t\t\tlet crtr = $utils.relativeToValue(this.get(\"cornerRadiusTR\", 8), minSide);\n\t\t\tlet crbr = $utils.relativeToValue(this.get(\"cornerRadiusBR\", 8), minSide);\n\t\t\tlet crbl = $utils.relativeToValue(this.get(\"cornerRadiusBL\", 8), minSide);\n\n\t\t\tlet maxcr = Math.min(Math.abs(w / 2), Math.abs(h / 2));\n\n\t\t\tcrtl = $math.fitToRange(crtl, 0, maxcr);\n\t\t\tcrtr = $math.fitToRange(crtr, 0, maxcr);\n\t\t\tcrbr = $math.fitToRange(crbr, 0, maxcr);\n\t\t\tcrbl = $math.fitToRange(crbl, 0, maxcr);\n\n\t\t\tthis._display.moveTo(crtl * wSign, 0);\n\t\t\tthis._display.lineTo(w - crtr * wSign, 0);\n\t\t\tif (crtr > 0) {\n\t\t\t\tthis._display.arcTo(w, 0, w, crtr * hSign, crtr);\n\t\t\t}\n\t\t\tthis._display.lineTo(w, h - crbr * hSign);\n\t\t\tif (crbr > 0) {\n\t\t\t\tthis._display.arcTo(w, h, w - crbr * wSign, h, crbr);\n\t\t\t}\n\t\t\tthis._display.lineTo(crbl * wSign, h);\n\t\t\tif (crbl > 0) {\n\t\t\t\tthis._display.arcTo(0, h, 0, h - crbl * hSign, crbl);\n\t\t\t}\n\t\t\tthis._display.lineTo(0, crtl * hSign);\n\t\t\tif (crtl > 0) {\n\t\t\t\tthis._display.arcTo(0, 0, crtl * wSign, 0, crtl);\n\t\t\t}\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}