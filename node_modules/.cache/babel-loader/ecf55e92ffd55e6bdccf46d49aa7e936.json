{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useQuery } from 'react-query';\nexport const useUsersFilters = (filters, token) => {\n  _s();\n\n  return useQuery(['usersFilters', filters, token], fetchApi, {\n    retry: 0,\n    staleTime: 60 * 1000 * 5,\n    cacheTime: 0\n  });\n};\n\n_s(useUsersFilters, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\n\nconst fetchApi = async context => {\n  const [, {\n    email,\n    pageNumber\n  }, token] = context.queryKey;\n\n  try {\n    const res = await axios({\n      method: 'get',\n      url: `/api/admin/users/?email=${email}&pageNumber=${pageNumber}`,\n      headers: {\n        Authorization: `${token}`\n      }\n    });\n\n    if (res.status >= 200 && res.status < 300) {\n      return res.data;\n    }\n  } catch (err) {\n    if (axios.isAxiosError(err)) {\n      if (err && err.response) {\n        throw Error(err.response.data.message);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/dcurchin/Desktop/final/grocery-shop-ui/src/hooks/useUsersFilters.js"],"names":["axios","useQuery","useUsersFilters","filters","token","fetchApi","retry","staleTime","cacheTime","context","email","pageNumber","queryKey","res","method","url","headers","Authorization","status","data","err","isAxiosError","response","Error","message"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,OAAD,EAAUC,KAAV;AAAA;;AAAA,SAC7BH,QAAQ,CAAC,CAAC,cAAD,EAAiBE,OAAjB,EAA0BC,KAA1B,CAAD,EAAmCC,QAAnC,EAA6C;AACnDC,IAAAA,KAAK,EAAE,CAD4C;AAEnDC,IAAAA,SAAS,EAAE,KAAK,IAAL,GAAY,CAF4B;AAGnDC,IAAAA,SAAS,EAAE;AAHwC,GAA7C,CADqB;AAAA,CAAxB;;GAAMN,e;UACXD,Q;;;AAMF,MAAMI,QAAQ,GAAG,MAAOI,OAAP,IAAmB;AAClC,QAAM,GAAG;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAH,EAA0BP,KAA1B,IAAmCK,OAAO,CAACG,QAAjD;;AACA,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMb,KAAK,CAAC;AACtBc,MAAAA,MAAM,EAAE,KADc;AAEtBC,MAAAA,GAAG,EAAG,2BAA0BL,KAAM,eAAcC,UAAW,EAFzC;AAGtBK,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,GAAEb,KAAM;AADjB;AAHa,KAAD,CAAvB;;AAOA,QAAIS,GAAG,CAACK,MAAJ,IAAc,GAAd,IAAqBL,GAAG,CAACK,MAAJ,GAAa,GAAtC,EAA2C;AACzC,aAAOL,GAAG,CAACM,IAAX;AACD;AACF,GAXD,CAWE,OAAOC,GAAP,EAAY;AACZ,QAAIpB,KAAK,CAACqB,YAAN,CAAmBD,GAAnB,CAAJ,EAA6B;AAC3B,UAAIA,GAAG,IAAIA,GAAG,CAACE,QAAf,EAAyB;AACvB,cAAMC,KAAK,CAACH,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBK,OAAnB,CAAX;AACD;AACF;AACF;AACF,CApBD","sourcesContent":["import axios from 'axios';\r\nimport { useQuery } from 'react-query';\r\n\r\nexport const useUsersFilters = (filters, token) =>\r\n  useQuery(['usersFilters', filters, token], fetchApi, {\r\n    retry: 0,\r\n    staleTime: 60 * 1000 * 5,\r\n    cacheTime: 0,\r\n  });\r\n\r\nconst fetchApi = async (context) => {\r\n  const [, { email, pageNumber }, token] = context.queryKey;\r\n  try {\r\n    const res = await axios({\r\n      method: 'get',\r\n      url: `/api/admin/users/?email=${email}&pageNumber=${pageNumber}`,\r\n      headers: {\r\n        Authorization: `${token}`,\r\n      },\r\n    });\r\n    if (res.status >= 200 && res.status < 300) {\r\n      return res.data;\r\n    }\r\n  } catch (err) {\r\n    if (axios.isAxiosError(err)) {\r\n      if (err && err.response) {\r\n        throw Error(err.response.data.message);\r\n      }\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}