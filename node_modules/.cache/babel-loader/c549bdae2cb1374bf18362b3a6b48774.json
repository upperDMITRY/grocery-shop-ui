{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\n/**\r\n * Draws a rectangle.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\n\nvar Rectangle =\n/** @class */\nfunction (_super) {\n  __extends(Rectangle, _super);\n\n  function Rectangle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(Rectangle.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"width\") || this.isDirty(\"height\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Rectangle.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear && !this.get(\"draw\")) {\n        this._draw();\n      }\n    }\n  });\n  Object.defineProperty(Rectangle.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._display.drawRect(0, 0, this.width(), this.height());\n    }\n  });\n  Object.defineProperty(Rectangle.prototype, \"_updateSize\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.markDirty();\n      this._clear = true;\n    }\n  });\n  Object.defineProperty(Rectangle, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Rectangle\"\n  });\n  Object.defineProperty(Rectangle, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([Rectangle.className])\n  });\n  return Rectangle;\n}(Graphics);\n\nexport { Rectangle };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/Rectangle.ts"],"names":[],"mappings":";AAAA,SAAS,QAAT,QAA8D,YAA9D;AAQA;;;;;AAKG;;AACH,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+B,EAAA,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;;AAA/B,WAAA,SAAA,GAAA;;AAgCC;;;;;;WAxBA,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB;;AAEA,UAAI,KAAK,OAAL,CAAa,OAAb,KAAyB,KAAK,OAAL,CAAa,QAAb,CAAzB,IAAmD,KAAK,cAAL,CAAoB,OAApB,CAAnD,IAAmF,KAAK,cAAL,CAAoB,QAApB,CAAvF,EAAsH;AACrH,aAAK,MAAL,GAAc,IAAd;AACA;AACD;;;;;;WAED,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd;;AAEA,UAAI,KAAK,MAAL,IAAe,CAAC,KAAK,GAAL,CAAS,MAAT,CAApB,EAAsC;AACrC,aAAK,KAAL;AACA;AACD;;;;;;WAED,YAAA;AACC,WAAK,QAAL,CAAc,QAAd,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,KAAK,KAAL,EAA7B,EAA2C,KAAK,MAAL,EAA3C;AACA;;;;;;WAED,YAAA;AACC,WAAK,SAAL;AACA,WAAK,MAAL,GAAc,IAAd;AACA;;AA1BD,EAAA,MAAA,CAAA,cAAA,CAAA,SAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,SAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,QAAQ,CAAC,UAAT,CAAoB,MAApB,CAA2B,CAAC,SAAS,CAAC,SAAX,CAA3B;AAA1C,GAAA;AA0BD,SAAA,SAAA;AAAC,CAhCD,CAA+B,QAA/B,CAAA;;SAAa,S","sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\n\nexport interface IRectangleSettings extends IGraphicsSettings {\n}\n\nexport interface IRectanglePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a rectangle.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n * @important\n */\nexport class Rectangle extends Graphics {\n\n\tdeclare public _settings: IRectangleSettings;\n\tdeclare public _privateSettings: IRectanglePrivate;\n\n\tpublic static className: string = \"Rectangle\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Rectangle.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"width\") || this.isDirty(\"height\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear && !this.get(\"draw\")) {\n\t\t\tthis._draw();\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tthis._display.drawRect(0, 0, this.width(), this.height());\n\t}\n\n\tpublic _updateSize() {\n\t\tthis.markDirty()\n\t\tthis._clear = true;\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}