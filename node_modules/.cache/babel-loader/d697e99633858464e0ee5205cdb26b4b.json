{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\nimport * as $utils from \"../../core/util/Utils\";\n/**\r\n * Draws a Star.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\n\nvar Star =\n/** @class */\nfunction (_super) {\n  __extends(Star, _super);\n\n  function Star() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(Star.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"spikes\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Star.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear) {\n        var display = this._display;\n        var r = this.get(\"radius\", 0);\n        var ir = $utils.relativeToValue(this.get(\"innerRadius\", 0), r);\n        var spikes = this.get(\"spikes\", 0);\n        var step = Math.PI / spikes;\n        var angle = Math.PI / 2 * 3;\n        display.moveTo(0, -r);\n\n        for (var i = 0; i < spikes; i++) {\n          display.lineTo(Math.cos(angle) * r, Math.sin(angle) * r);\n          angle += step;\n          display.lineTo(Math.cos(angle) * ir, Math.sin(angle) * ir);\n          angle += step;\n        }\n\n        display.lineTo(0, -r);\n      }\n    }\n  });\n  Object.defineProperty(Star, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Star\"\n  });\n  Object.defineProperty(Star, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([Star.className])\n  });\n  return Star;\n}(Graphics);\n\nexport { Star };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/Star.ts"],"names":[],"mappings":";AAAA,SAAS,QAAT,QAA8D,YAA9D;AAEA,OAAO,KAAK,MAAZ,MAAwB,uBAAxB;AAwBA;;;;;AAKG;;AACH,IAAA,IAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0B,EAAA,SAAA,CAAA,IAAA,EAAA,MAAA,CAAA;;AAA1B,WAAA,IAAA,GAAA;;AAuCC;;;;;;WA/BA,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB;;AAEA,UAAI,KAAK,OAAL,CAAa,QAAb,KAA0B,KAAK,OAAL,CAAa,aAAb,CAA1B,IAAyD,KAAK,OAAL,CAAa,QAAb,CAA7D,EAAqF;AACpF,aAAK,MAAL,GAAc,IAAd;AACA;AACD;;;;;;WAED,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd;;AAEA,UAAI,KAAK,MAAT,EAAiB;AAChB,YAAM,OAAO,GAAG,KAAK,QAArB;AACA,YAAM,CAAC,GAAG,KAAK,GAAL,CAAS,QAAT,EAAmB,CAAnB,CAAV;AACA,YAAM,EAAE,GAAG,MAAM,CAAC,eAAP,CAAuB,KAAK,GAAL,CAAS,aAAT,EAAwB,CAAxB,CAAvB,EAAmD,CAAnD,CAAX;AACA,YAAM,MAAM,GAAG,KAAK,GAAL,CAAS,QAAT,EAAmB,CAAnB,CAAf;AACA,YAAM,IAAI,GAAG,IAAI,CAAC,EAAL,GAAU,MAAvB;AACA,YAAI,KAAK,GAAG,IAAI,CAAC,EAAL,GAAU,CAAV,GAAc,CAA1B;AAEA,QAAA,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,CAAE,CAApB;;AAEA,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAChC,UAAA,OAAO,CAAC,MAAR,CAAe,IAAI,CAAC,GAAL,CAAS,KAAT,IAAkB,CAAjC,EAAoC,IAAI,CAAC,GAAL,CAAS,KAAT,IAAkB,CAAtD;AACA,UAAA,KAAK,IAAI,IAAT;AAEA,UAAA,OAAO,CAAC,MAAR,CAAe,IAAI,CAAC,GAAL,CAAS,KAAT,IAAkB,EAAjC,EAAqC,IAAI,CAAC,GAAL,CAAS,KAAT,IAAkB,EAAvD;AACA,UAAA,KAAK,IAAI,IAAT;AACA;;AACD,QAAA,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,CAAC,CAAnB;AACA;AACD;;AAjCD,EAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,QAAQ,CAAC,UAAT,CAAoB,MAApB,CAA2B,CAAC,IAAI,CAAC,SAAN,CAA3B;AAA1C,GAAA;AAiCD,SAAA,IAAA;AAAC,CAvCD,CAA0B,QAA1B,CAAA;;SAAa,I","sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\r\nimport type { Percent } from \"../../core/util/Percent\";\r\nimport * as $utils from \"../../core/util/Utils\";\r\n\r\nexport interface IStarSettings extends IGraphicsSettings {\r\n\r\n\t/**\r\n\t * Star's radius in pixels.\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Star's inner radius in pixels.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Number of spikes\r\n\t */\r\n\tspikes?: number;\r\n\r\n}\r\n\r\nexport interface IStarPrivate extends IGraphicsPrivate {\r\n}\r\n\r\n/**\r\n * Draws a Star.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\r\nexport class Star extends Graphics {\r\n\r\n\tdeclare public _settings: IStarSettings;\r\n\tdeclare public _privateSettings: IStarPrivate;\r\n\r\n\tpublic static className: string = \"Star\";\r\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Star.className]);\r\n\r\n\tpublic _beforeChanged() {\r\n\t\tsuper._beforeChanged();\r\n\r\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"spikes\")) {\r\n\t\t\tthis._clear = true;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _changed() {\r\n\t\tsuper._changed();\r\n\r\n\t\tif (this._clear) {\r\n\t\t\tconst display = this._display;\r\n\t\t\tconst r = this.get(\"radius\", 0);\r\n\t\t\tconst ir = $utils.relativeToValue(this.get(\"innerRadius\", 0), r);\r\n\t\t\tconst spikes = this.get(\"spikes\", 0);\r\n\t\t\tconst step = Math.PI / spikes;\r\n\t\t\tlet angle = Math.PI / 2 * 3;\r\n\r\n\t\t\tdisplay.moveTo(0, - r)\r\n\r\n\t\t\tfor (let i = 0; i < spikes; i++) {\r\n\t\t\t\tdisplay.lineTo(Math.cos(angle) * r, Math.sin(angle) * r)\r\n\t\t\t\tangle += step\r\n\r\n\t\t\t\tdisplay.lineTo(Math.cos(angle) * ir, Math.sin(angle) * ir)\r\n\t\t\t\tangle += step\r\n\t\t\t}\r\n\t\t\tdisplay.lineTo(0, -r)\r\n\t\t}\r\n\t}\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}