{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { XYChartDefaultTheme } from \"./XYChartDefaultTheme\";\nimport { Container } from \"../../core/render/Container\";\nimport { Rectangle } from \"../../core/render/Rectangle\";\nimport { SerialChart } from \"../../core/render/SerialChart\";\nimport { ListAutoDispose } from \"../../core/util/List\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { Color } from \"../../core/util/Color\";\nimport { Button } from \"../../core/render/Button\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Percent } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $order from \"../../core/util/Order\";\nimport * as $type from \"../../core/util/Type\";\n/**\r\n * Creates an XY chart.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/} for more info\r\n * @important\r\n */\n\nvar XYChart =\n/** @class */\nfunction (_super) {\n  __extends(XYChart, _super);\n\n  function XYChart() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * A list of horizontal axes.\r\n     */\n\n\n    Object.defineProperty(_this, \"xAxes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListAutoDispose()\n    });\n    /**\r\n     * A list of vertical axes.\r\n     */\n\n    Object.defineProperty(_this, \"yAxes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListAutoDispose()\n    });\n    /**\r\n     * A [[Container]] located on top of the chart, used to store top horizontal\r\n     * axes.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"topAxesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.chartContainer.children.push(Container.new(_this._root, {\n        width: p100,\n        layout: _this._root.verticalLayout\n      }))\n    });\n    /**\r\n     * A [[Container]] located in the middle the chart, used to store vertical axes\r\n     * and plot area container.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"yAxesAndPlotContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.chartContainer.children.push(Container.new(_this._root, {\n        width: p100,\n        height: p100,\n        layout: _this._root.horizontalLayout\n      }))\n    });\n    /**\r\n     * A [[Container]] located on bottom of the chart, used to store bottom\r\n     * horizontal axes.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"bottomAxesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.chartContainer.children.push(Container.new(_this._root, {\n        width: p100,\n        layout: _this._root.verticalLayout\n      }))\n    });\n    /**\r\n     * A [[Container]] located on left of the chart, used to store left-hand\r\n     * vertical axes.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"leftAxesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.yAxesAndPlotContainer.children.push(Container.new(_this._root, {\n        height: p100,\n        layout: _this._root.horizontalLayout\n      }))\n    });\n    /**\r\n     * A [[Container]] located in the middle of the chart, used to store actual\r\n     * plots (series).\r\n     *\r\n     * NOTE: `plotContainer` will automatically have its `background` preset. If\r\n     * you need to modify background or outline for chart's plot area, you can\r\n     * use `plotContainer.get(\"background\")` for that.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"plotContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.yAxesAndPlotContainer.children.push(Container.new(_this._root, {\n        width: p100,\n        height: p100,\n        maskContent: false\n      }))\n    });\n    /**\r\n     * A [[Container]] axis grid elements are stored in.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"gridContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.plotContainer.children.push(Container.new(_this._root, {\n        width: p100,\n        height: p100,\n        isMeasured: false\n      }))\n    });\n    /**\r\n     * A [[Container]] axis background grid elements are stored in.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"topGridContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(_this._root, {\n        width: p100,\n        height: p100,\n        isMeasured: false\n      })\n    });\n    /**\r\n     * A [[Container]] located on right of the chart, used to store right-hand\r\n     * vertical axes.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"rightAxesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.yAxesAndPlotContainer.children.push(Container.new(_this._root, {\n        height: p100,\n        layout: _this._root.horizontalLayout\n      }))\n    });\n    /**\r\n     * A [[Container]] axis headers are stored in.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"axisHeadersContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.plotContainer.children.push(Container.new(_this._root, {}))\n    });\n    /**\r\n     * A button that is shown when chart is not fully zoomed out.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Zoom_out_button} for more info\r\n     * @default Button.new()\r\n     */\n\n    Object.defineProperty(_this, \"zoomOutButton\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.plotContainer.children.push(Button.new(_this._root, {\n        themeTags: [\"zoom\"],\n        icon: Graphics.new(_this._root, {\n          themeTags: [\"button\", \"icon\"]\n        })\n      }))\n    });\n    Object.defineProperty(_this, \"_movePoint\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {\n        x: 0,\n        y: 0\n      }\n    });\n    Object.defineProperty(_this, \"_wheelDp\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_otherCharts\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(XYChart.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      this._defaultThemes.push(XYChartDefaultTheme.new(this._root));\n\n      _super.prototype._afterNew.call(this);\n\n      this._disposers.push(this.xAxes);\n\n      this._disposers.push(this.yAxes);\n\n      var root = this._root;\n      var verticalLayout = this._root.verticalLayout;\n      var zoomOutButton = this.zoomOutButton;\n      zoomOutButton.events.on(\"click\", function () {\n        _this.zoomOut();\n      });\n      zoomOutButton.set(\"opacity\", 0);\n      zoomOutButton.states.lookup(\"default\").set(\"opacity\", 1);\n      this.chartContainer.set(\"layout\", verticalLayout);\n      var plotContainer = this.plotContainer;\n      plotContainer.children.push(this.seriesContainer);\n\n      this._disposers.push(this._processAxis(this.xAxes, this.bottomAxesContainer));\n\n      this._disposers.push(this._processAxis(this.yAxes, this.leftAxesContainer));\n\n      plotContainer.children.push(this.topGridContainer);\n      plotContainer.children.push(this.bulletsContainer);\n      plotContainer.children.moveValue(zoomOutButton); // Setting trasnparent background so that full body of the plot container\n      // is interactive\n\n      plotContainer.set(\"interactive\", true);\n      plotContainer.set(\"interactiveChildren\", false);\n      plotContainer.set(\"background\", Rectangle.new(root, {\n        themeTags: [\"xy\", \"background\"],\n        fill: Color.fromHex(0x000000),\n        fillOpacity: 0\n      }));\n\n      this._disposers.push(plotContainer.events.on(\"pointerdown\", function (event) {\n        _this._handlePlotDown(event.originalEvent);\n      }));\n\n      this._disposers.push(plotContainer.events.on(\"globalpointerup\", function (event) {\n        _this._handlePlotUp(event.originalEvent);\n      }));\n\n      this._disposers.push(plotContainer.events.on(\"globalpointermove\", function (event) {\n        _this._handlePlotMove(event.originalEvent);\n      }));\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_removeSeries\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (series) {\n      var xAxis = series.get(\"xAxis\");\n\n      if (xAxis) {\n        $array.remove(xAxis.series, series);\n      }\n\n      var yAxis = series.get(\"yAxis\");\n\n      if (yAxis) {\n        $array.remove(yAxis.series, series);\n      }\n\n      _super.prototype._removeSeries.call(this, series);\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_handleSetWheel\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var wheelX = this.get(\"wheelX\");\n      var wheelY = this.get(\"wheelY\");\n      var plotContainer = this.plotContainer;\n\n      if (wheelX !== \"none\" || wheelY !== \"none\") {\n        this._wheelDp = plotContainer.events.on(\"wheel\", function (event) {\n          var wheelEvent = event.originalEvent;\n          wheelEvent.preventDefault();\n          var plotPoint = plotContainer.toLocal(_this._root.documentPointToRoot({\n            x: wheelEvent.clientX,\n            y: wheelEvent.clientY\n          }));\n\n          var wheelStep = _this.get(\"wheelStep\", 0.2);\n\n          var shiftY = wheelEvent.deltaY / 100;\n          var shiftX = wheelEvent.deltaX / 100;\n\n          if ((wheelX === \"zoomX\" || wheelX === \"zoomXY\") && shiftX != 0) {\n            _this.xAxes.each(function (axis) {\n              if (axis.get(\"zoomX\")) {\n                var start = axis.get(\"start\");\n                var end = axis.get(\"end\");\n                var position = axis.fixPosition(plotPoint.x / plotContainer.width());\n                var newStart = start - wheelStep * (end - start) * shiftX * position;\n                var newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);\n\n                if (1 / (newEnd - newStart) < axis.get(\"maxZoomFactor\", Infinity)) {\n                  _this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n                }\n              }\n            });\n          }\n\n          if ((wheelY === \"zoomX\" || wheelY === \"zoomXY\") && shiftY != 0) {\n            _this.xAxes.each(function (axis) {\n              if (axis.get(\"zoomX\")) {\n                var start = axis.get(\"start\");\n                var end = axis.get(\"end\");\n                var position = axis.fixPosition(plotPoint.x / plotContainer.width());\n                var newStart = start - wheelStep * (end - start) * shiftY * position;\n                var newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);\n\n                if (1 / (newEnd - newStart) < axis.get(\"maxZoomFactor\", Infinity)) {\n                  _this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n                }\n              }\n            });\n          }\n\n          if ((wheelX === \"zoomY\" || wheelX === \"zoomXY\") && shiftX != 0) {\n            _this.yAxes.each(function (axis) {\n              if (axis.get(\"zoomY\")) {\n                var start = axis.get(\"start\");\n                var end = axis.get(\"end\");\n                var position = axis.fixPosition(plotPoint.y / plotContainer.height());\n                var newStart = start - wheelStep * (end - start) * shiftX * position;\n                var newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);\n\n                if (1 / (newEnd - newStart) < axis.get(\"maxZoomFactor\", Infinity)) {\n                  _this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n                }\n              }\n            });\n          }\n\n          if ((wheelY === \"zoomY\" || wheelY === \"zoomXY\") && shiftY != 0) {\n            _this.yAxes.each(function (axis) {\n              if (axis.get(\"zoomY\")) {\n                var start = axis.get(\"start\");\n                var end = axis.get(\"end\");\n                var position = axis.fixPosition(plotPoint.y / plotContainer.height());\n                var newStart = start - wheelStep * (end - start) * shiftY * position;\n                var newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);\n\n                if (1 / (newEnd - newStart) < axis.get(\"maxZoomFactor\", Infinity)) {\n                  _this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n                }\n              }\n            });\n          }\n\n          if ((wheelX === \"panX\" || wheelX === \"panXY\") && shiftX != 0) {\n            _this.xAxes.each(function (axis) {\n              if (axis.get(\"panX\")) {\n                var start = axis.get(\"start\");\n                var end = axis.get(\"end\");\n                var position = axis.fixPosition(plotPoint.x / plotContainer.width());\n                var newStart = start + wheelStep * (end - start) * shiftX * position;\n                var newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);\n\n                _this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n              }\n            });\n          }\n\n          if ((wheelY === \"panX\" || wheelY === \"panXY\") && shiftY != 0) {\n            _this.xAxes.each(function (axis) {\n              if (axis.get(\"panX\")) {\n                var start = axis.get(\"start\");\n                var end = axis.get(\"end\");\n                var position = axis.fixPosition(plotPoint.x / plotContainer.width());\n                var newStart = start + wheelStep * (end - start) * shiftY * position;\n                var newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);\n\n                _this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n              }\n            });\n          }\n\n          if ((wheelX === \"panY\" || wheelX === \"panXY\") && shiftX != 0) {\n            _this.yAxes.each(function (axis) {\n              if (axis.get(\"panY\")) {\n                var start = axis.get(\"start\");\n                var end = axis.get(\"end\");\n                var position = axis.fixPosition(plotPoint.y / plotContainer.height());\n                var newStart = start + wheelStep * (end - start) * shiftX * position;\n                var newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);\n\n                _this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n              }\n            });\n          }\n\n          if ((wheelY === \"panY\" || wheelY === \"panXY\") && shiftY != 0) {\n            _this.yAxes.each(function (axis) {\n              if (axis.get(\"panY\")) {\n                var start = axis.get(\"start\");\n                var end = axis.get(\"end\");\n                var position = axis.fixPosition(plotPoint.y / plotContainer.height());\n                var newStart = start + wheelStep * (end - start) * shiftY * position;\n                var newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);\n\n                _this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n              }\n            });\n          }\n        });\n\n        this._disposers.push(this._wheelDp);\n      } else {\n        if (this._wheelDp) {\n          this._wheelDp.dispose();\n        }\n      }\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_handlePlotDown\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (event) {\n      // TODO: handle multitouch\n      if (this.get(\"panX\") || this.get(\"panY\")) {\n        var plotContainer = this.plotContainer;\n        var local = plotContainer.toLocal(this._root.documentPointToRoot({\n          x: event.clientX,\n          y: event.clientY\n        }));\n\n        if (local.x >= 0 && local.y >= 0 && local.x <= plotContainer.width() && local.y <= this.height()) {\n          this._downPoint = local;\n          var panX = this.get(\"panX\");\n          var panY = this.get(\"panY\");\n\n          if (panX) {\n            this.xAxes.each(function (axis) {\n              axis._panStart = axis.get(\"start\");\n              axis._panEnd = axis.get(\"end\");\n            });\n          }\n\n          if (panY) {\n            this.yAxes.each(function (axis) {\n              axis._panStart = axis.get(\"start\");\n              axis._panEnd = axis.get(\"end\");\n            });\n          }\n\n          var eventType = \"panstarted\";\n\n          if (this.events.isEnabled(eventType)) {\n            this.events.dispatch(eventType, {\n              type: eventType,\n              target: this\n            });\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_handleWheelAnimation\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (animation) {\n      var _this = this;\n\n      if (animation) {\n        animation.events.on(\"stopped\", function () {\n          _this._dispatchWheelAnimation();\n        });\n      } else {\n        this._dispatchWheelAnimation();\n      }\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_dispatchWheelAnimation\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var eventType = \"wheelended\";\n\n      if (this.events.isEnabled(eventType)) {\n        this.events.dispatch(eventType, {\n          type: eventType,\n          target: this\n        });\n      }\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_handlePlotUp\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_event) {\n      if (this._downPoint) {\n        if (this.get(\"panX\") || this.get(\"panY\")) {\n          var eventType = \"panended\";\n\n          if (this.events.isEnabled(eventType)) {\n            this.events.dispatch(eventType, {\n              type: eventType,\n              target: this\n            });\n          }\n        }\n      } // TODO: handle multitouch\n\n\n      this._downPoint = undefined;\n      this.xAxes.each(function (xAxis) {\n        xAxis._isPanning = false;\n      });\n      this.yAxes.each(function (yAxis) {\n        yAxis._isPanning = false;\n      });\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_handlePlotMove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (event) {\n      // TODO: handle multitouch\n      var downPoint = this._downPoint;\n\n      if (downPoint) {\n        var plotContainer_1 = this.plotContainer;\n        var local_1 = plotContainer_1.toLocal(this._root.documentPointToRoot({\n          x: event.clientX,\n          y: event.clientY\n        }));\n        var panX = this.get(\"panX\");\n        var panY = this.get(\"panY\");\n\n        if (panX) {\n          var scrollbarX = this.get(\"scrollbarX\");\n\n          if (scrollbarX) {\n            scrollbarX.events.disableType(\"rangechanged\");\n          }\n\n          this.xAxes.each(function (axis) {\n            if (axis.get(\"panX\")) {\n              axis._isPanning = true; //const maxDeviation = axis.get(\"maxDeviation\", 0);\n\n              var panStart = axis._panStart;\n              var panEnd = axis._panEnd;\n              var difference = panEnd - panStart;\n              var deltaX = difference * (downPoint.x - local_1.x) / plotContainer_1.width();\n\n              if (axis.get(\"renderer\").get(\"inversed\")) {\n                deltaX *= -1;\n              }\n\n              var start = panStart + deltaX;\n              var end = panEnd + deltaX;\n\n              if (end - start < 1 + axis.get(\"maxDeviation\", 1) * 2) {\n                axis.set(\"start\", start);\n                axis.set(\"end\", end);\n              }\n            }\n          });\n\n          if (scrollbarX) {\n            scrollbarX.events.enableType(\"rangechanged\");\n          }\n        }\n\n        if (panY) {\n          var scrollbarY = this.get(\"scrollbarY\");\n\n          if (scrollbarY) {\n            scrollbarY.events.disableType(\"rangechanged\");\n          }\n\n          this.yAxes.each(function (axis) {\n            if (axis.get(\"panY\")) {\n              axis._isPanning = true; //const maxDeviation = axis.get(\"maxDeviation\", 0);\n\n              var panStart = axis._panStart;\n              var panEnd = axis._panEnd;\n              var difference = panEnd - panStart;\n              var deltaY = difference * (downPoint.y - local_1.y) / plotContainer_1.height();\n\n              if (axis.get(\"renderer\").get(\"inversed\")) {\n                deltaY *= -1;\n              }\n\n              var start = panStart - deltaY;\n              var end = panEnd - deltaY;\n\n              if (end - start < 1 + axis.get(\"maxDeviation\", 1) * 2) {\n                axis.set(\"start\", start);\n                axis.set(\"end\", end);\n              }\n            }\n          });\n\n          if (scrollbarY) {\n            scrollbarY.events.enableType(\"rangechanged\");\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_handleCursorPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var cursor = this.get(\"cursor\");\n\n      if (cursor) {\n        var cursorPoint_1 = cursor.getPrivate(\"point\");\n        var snapToSeries = cursor.get(\"snapToSeries\");\n\n        if (snapToSeries && cursorPoint_1) {\n          var dataItems_1 = [];\n          $array.each(snapToSeries, function (series) {\n            if (!series.isHidden() && !series.isHiding()) {\n              var startIndex = series.getPrivate(\"startIndex\", 0);\n              var endIndex = series.getPrivate(\"endIndex\", series.dataItems.length - 1);\n\n              for (var i = startIndex; i < endIndex; i++) {\n                var dataItem = series.dataItems[i];\n\n                if (dataItem && !dataItem.isHidden()) {\n                  dataItems_1.push(dataItem);\n                }\n              }\n            }\n          });\n          var minDistance_1 = Infinity;\n          var closestItem_1;\n          var snapToSeriesBy_1 = cursor.get(\"snapToSeriesBy\");\n          $array.each(dataItems_1, function (dataItem) {\n            var point = dataItem.get(\"point\");\n\n            if (point) {\n              var distance = 0;\n\n              if (snapToSeriesBy_1 == \"x\") {\n                distance = Math.abs(cursorPoint_1.x - point.x);\n              } else if (snapToSeriesBy_1 == \"y\") {\n                distance = Math.abs(cursorPoint_1.y - point.y);\n              } else {\n                distance = Math.hypot(cursorPoint_1.x - point.x, cursorPoint_1.y - point.y);\n              }\n\n              if (distance < minDistance_1) {\n                minDistance_1 = distance;\n                closestItem_1 = dataItem;\n              }\n            }\n          });\n          $array.each(snapToSeries, function (series) {\n            var tooltip = series.get(\"tooltip\");\n\n            if (tooltip) {\n              tooltip._setDataItem(undefined);\n            }\n          });\n\n          if (closestItem_1) {\n            var series = closestItem_1.component;\n            series.showDataItemTooltip(closestItem_1);\n            var point = closestItem_1.get(\"point\");\n\n            if (point) {\n              cursor.handleMove(series.toGlobal(point), true);\n            }\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_updateCursor\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var cursor = this.get(\"cursor\");\n\n      if (cursor) {\n        cursor.handleMove();\n      }\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_addCursor\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (cursor) {\n      this.plotContainer.children.push(cursor);\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._prepareChildren.call(this);\n\n      this.series.each(function (series) {\n        _this._colorize(series);\n      });\n\n      if (this.isDirty(\"wheelX\") || this.isDirty(\"wheelY\")) {\n        this._handleSetWheel();\n      }\n\n      if (this.isDirty(\"cursor\")) {\n        var previous = this._prevSettings.cursor;\n        var cursor = this.get(\"cursor\");\n\n        if (cursor !== previous) {\n          this._disposeProperty(\"cursor\");\n\n          if (previous) {\n            previous.dispose();\n          }\n\n          if (cursor) {\n            cursor._setChart(this);\n\n            this._addCursor(cursor);\n\n            this._pushPropertyDisposer(\"cursor\", cursor.events.on(\"selectended\", function () {\n              _this._handleCursorSelectEnd();\n            }));\n          } //this.setRaw(\"cursor\", cursor) // to reset previous value\n\n\n          this._prevSettings.cursor = cursor;\n        }\n      }\n\n      if (this.isDirty(\"scrollbarX\")) {\n        var previous = this._prevSettings.scrollbarX;\n        var scrollbarX = this.get(\"scrollbarX\");\n\n        if (scrollbarX !== previous) {\n          this._disposeProperty(\"scrollbarX\");\n\n          if (previous) {\n            previous.dispose();\n          }\n\n          if (scrollbarX) {\n            if (!scrollbarX.parent) {\n              this.topAxesContainer.children.push(scrollbarX);\n            }\n\n            this._pushPropertyDisposer(\"scrollbarX\", scrollbarX.events.on(\"rangechanged\", function (e) {\n              _this._handleScrollbar(_this.xAxes, e.start, e.end);\n            })); // Used to populate `ariaLabel` with meaningful values\n\n\n            scrollbarX.setPrivate(\"positionTextFunction\", function (position) {\n              var axis = _this.xAxes.getIndex(0);\n\n              return axis ? axis.getTooltipText(position) || \"\" : \"\";\n            });\n          }\n\n          this._prevSettings.scrollbarX = scrollbarX;\n        }\n      }\n\n      if (this.isDirty(\"scrollbarY\")) {\n        var previous = this._prevSettings.scrollbarY;\n        var scrollbarY = this.get(\"scrollbarY\");\n\n        if (scrollbarY !== previous) {\n          this._disposeProperty(\"scrollbarY\");\n\n          if (previous) {\n            previous.dispose();\n          }\n\n          if (scrollbarY) {\n            if (!scrollbarY.parent) {\n              this.rightAxesContainer.children.push(scrollbarY);\n            }\n\n            this._pushPropertyDisposer(\"scrollbarY\", scrollbarY.events.on(\"rangechanged\", function (e) {\n              _this._handleScrollbar(_this.yAxes, e.start, e.end);\n            })); // Used to populate `ariaLabel` with meaningful values\n\n\n            scrollbarY.setPrivate(\"positionTextFunction\", function (position) {\n              var axis = _this.yAxes.getIndex(0);\n\n              return axis ? axis.getTooltipText(position) || \"\" : \"\";\n            });\n          }\n\n          this._prevSettings.scrollbarY = scrollbarY;\n        }\n      }\n\n      this._handleZoomOut();\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_processSeries\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (series) {\n      _super.prototype._processSeries.call(this, series);\n\n      this._colorize(series);\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_colorize\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (series) {\n      var colorSet = this.get(\"colors\");\n\n      if (colorSet) {\n        if (series.get(\"fill\") == null) {\n          var color = colorSet.next();\n\n          series._setSoft(\"stroke\", color);\n\n          series._setSoft(\"fill\", color);\n        }\n      }\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_handleCursorSelectEnd\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var cursor = this.get(\"cursor\");\n      var behavior = cursor.get(\"behavior\");\n      var downPositionX = cursor.getPrivate(\"downPositionX\", 0);\n      var downPositionY = cursor.getPrivate(\"downPositionY\", 0);\n      var positionX = cursor.getPrivate(\"positionX\", 0.5);\n      var positionY = cursor.getPrivate(\"positionY\", 0.5);\n      this.xAxes.each(function (axis) {\n        if (behavior === \"zoomX\" || behavior === \"zoomXY\") {\n          var position0 = axis.toAxisPosition(downPositionX);\n          var position1 = axis.toAxisPosition(positionX);\n          axis.zoom(position0, position1);\n        }\n\n        axis.setPrivate(\"updateScrollbar\", true);\n      });\n      this.yAxes.each(function (axis) {\n        if (behavior === \"zoomY\" || behavior === \"zoomXY\") {\n          var position0 = axis.toAxisPosition(downPositionY);\n          var position1 = axis.toAxisPosition(positionY);\n          axis.zoom(position0, position1);\n        }\n\n        axis.setPrivate(\"updateScrollbar\", true);\n      });\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_handleScrollbar\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (axes, start, end) {\n      axes.each(function (axis) {\n        var axisStart = axis.fixPosition(start);\n        var axisEnd = axis.fixPosition(end);\n        var zoomAnimation = axis.zoom(axisStart, axisEnd);\n        var updateScrollbar = \"updateScrollbar\";\n        axis.setPrivateRaw(updateScrollbar, false);\n\n        if (zoomAnimation) {\n          zoomAnimation.events.on(\"stopped\", function () {\n            axis.setPrivateRaw(updateScrollbar, true);\n          });\n        } else {\n          axis.setPrivateRaw(updateScrollbar, true);\n        }\n      });\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_processAxis\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (axes, container) {\n      var _this = this;\n\n      return axes.events.onAll(function (change) {\n        if (change.type === \"clear\") {\n          $array.each(change.oldValues, function (axis) {\n            _this._removeAxis(axis);\n          });\n        } else if (change.type === \"push\") {\n          container.children.push(change.newValue);\n          change.newValue.processChart(_this);\n        } else if (change.type === \"setIndex\") {\n          container.children.setIndex(change.index, change.newValue);\n          change.newValue.processChart(_this);\n        } else if (change.type === \"insertIndex\") {\n          container.children.insertIndex(change.index, change.newValue);\n          change.newValue.processChart(_this);\n        } else if (change.type === \"removeIndex\") {\n          _this._removeAxis(change.oldValue);\n        } else {\n          throw new Error(\"Unknown IListEvent type\");\n        }\n      });\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_removeAxis\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (axis) {\n      if (!axis.isDisposed()) {\n        var axisParent = axis.parent;\n\n        if (axisParent) {\n          axisParent.children.removeValue(axis);\n        }\n\n        var gridContainer = axis.gridContainer;\n        var gridParent = gridContainer.parent;\n\n        if (gridParent) {\n          gridParent.children.removeValue(gridContainer);\n        }\n\n        var topGridContainer = axis.topGridContainer;\n        var topGridParent = topGridContainer.parent;\n\n        if (topGridParent) {\n          topGridParent.children.removeValue(topGridContainer);\n        }\n      }\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_updateChartLayout\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var left = this.leftAxesContainer.width();\n      var right = this.rightAxesContainer.width();\n      var bottomAxesContainer = this.bottomAxesContainer;\n      bottomAxesContainer.set(\"paddingLeft\", left);\n      bottomAxesContainer.set(\"paddingRight\", right);\n      var topAxesContainer = this.topAxesContainer;\n      topAxesContainer.set(\"paddingLeft\", left);\n      topAxesContainer.set(\"paddingRight\", right);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(XYChart.prototype, \"processAxis\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_axis) {}\n  });\n  ;\n  Object.defineProperty(XYChart.prototype, \"_handleAxisSelection\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (axis) {\n      var _a;\n\n      var start = axis.fixPosition(axis.get(\"start\", 0));\n      var end = axis.fixPosition(axis.get(\"end\", 1));\n\n      if (start > end) {\n        _a = __read([end, start], 2), start = _a[0], end = _a[1];\n      }\n\n      if (this.xAxes.indexOf(axis) != -1) {\n        if (axis.getPrivate(\"updateScrollbar\")) {\n          var scrollbarX = this.get(\"scrollbarX\");\n\n          if (scrollbarX && !scrollbarX.getPrivate(\"isBusy\")) {\n            scrollbarX.setRaw(\"start\", start);\n            scrollbarX.setRaw(\"end\", end);\n            scrollbarX.updateGrips();\n          }\n        }\n      } else if (this.yAxes.indexOf(axis) != -1) {\n        if (axis.getPrivate(\"updateScrollbar\")) {\n          var scrollbarY = this.get(\"scrollbarY\");\n\n          if (scrollbarY && !scrollbarY.getPrivate(\"isBusy\")) {\n            scrollbarY.setRaw(\"start\", start);\n            scrollbarY.setRaw(\"end\", end);\n            scrollbarY.updateGrips();\n          }\n        }\n      }\n\n      this._handleZoomOut();\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_handleZoomOut\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var zoomOutButton = this.zoomOutButton;\n\n      if (zoomOutButton && zoomOutButton.parent) {\n        var visible_1 = false;\n        this.xAxes.each(function (axis) {\n          if (axis.get(\"start\") != 0 || axis.get(\"end\") != 1) {\n            visible_1 = true;\n          }\n        });\n        this.yAxes.each(function (axis) {\n          if (axis.get(\"start\") != 0 || axis.get(\"end\") != 1) {\n            visible_1 = true;\n          }\n        });\n\n        if (visible_1) {\n          if (zoomOutButton.isHidden()) {\n            zoomOutButton.show();\n          }\n        } else {\n          zoomOutButton.hide();\n        }\n      }\n    }\n  });\n  /**\r\n   * Checks if point is within plot area.\r\n   *\r\n   * @param   point  Reference point\r\n   * @return         Is within plot area?\r\n   */\n\n  Object.defineProperty(XYChart.prototype, \"inPlot\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (point) {\n      var plotContainer = this.plotContainer;\n      var otherCharts = this._otherCharts;\n      var global = plotContainer.toGlobal(point);\n\n      if (point.x >= -0.1 && point.y >= -0.1 && point.x <= plotContainer.width() + 0.1 && point.y <= plotContainer.height() + 0.1) {\n        return true;\n      }\n\n      if (otherCharts) {\n        for (var i = otherCharts.length - 1; i >= 0; i--) {\n          var chart = otherCharts[i];\n\n          if (chart != this) {\n            var chartPlotContainer = chart.plotContainer;\n            var local = chartPlotContainer.toLocal(global);\n\n            if (local.x >= -0.1 && local.y >= -0.1 && local.x <= chartPlotContainer.width() + 0.1 && local.y <= chartPlotContainer.height() + 0.1) {\n              return true;\n            }\n          }\n        }\n      }\n\n      return false;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(XYChart.prototype, \"arrangeTooltips\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var plotContainer = this.plotContainer;\n      var w = plotContainer.width();\n      var h = plotContainer.height();\n\n      var plotT = plotContainer._display.toGlobal({\n        x: 0,\n        y: 0\n      });\n\n      var plotB = plotContainer._display.toGlobal({\n        x: w,\n        y: h\n      });\n\n      var tooltips = [];\n      var sum = 0;\n      var minDistance = Infinity;\n      var movePoint = this._movePoint;\n      var maxTooltipDistance = this.get(\"maxTooltipDistance\");\n      var closest;\n      var closestPoint;\n\n      if ($type.isNumber(maxTooltipDistance)) {\n        this.series.each(function (series) {\n          var tooltip = series.get(\"tooltip\");\n\n          if (tooltip) {\n            var point = tooltip.get(\"pointTo\");\n\n            if (point) {\n              var distance = Math.hypot(movePoint.x - point.x, movePoint.y - point.y);\n\n              if (distance < minDistance) {\n                minDistance = distance;\n                closest = series;\n                closestPoint = point;\n              }\n            }\n          }\n        });\n      }\n\n      this.series.each(function (series) {\n        var tooltip = series.get(\"tooltip\");\n\n        if (tooltip) {\n          var hidden = false;\n          var point = tooltip.get(\"pointTo\");\n\n          if (point) {\n            if (maxTooltipDistance >= 0) {\n              var point_1 = tooltip.get(\"pointTo\");\n\n              if (point_1) {\n                if (series != closest) {\n                  var distance = Math.hypot(closestPoint.x - point_1.x, closestPoint.y - point_1.y);\n\n                  if (distance > maxTooltipDistance) {\n                    hidden = true;\n                  }\n                }\n              }\n            } else if (maxTooltipDistance == -1) {\n              if (series != closest) {\n                hidden = true;\n              }\n            }\n\n            if (!_this.inPlot(_this._tooltipToLocal(point)) || !tooltip.dataItem) {\n              hidden = true;\n            } else {\n              if (!hidden) {\n                sum += point.y;\n              }\n            }\n\n            if (hidden || series.isHidden() || series.isHiding()) {\n              tooltip.hide(0);\n            } else {\n              tooltip.show();\n              tooltips.push(tooltip);\n            }\n          }\n        }\n      });\n\n      if (this.get(\"arrangeTooltips\")) {\n        var tooltipContainer_1 = this._root.tooltipContainer;\n        tooltips.sort(function (a, b) {\n          return $order.compareNumber(a.get(\"pointTo\").y, b.get(\"pointTo\").y);\n        });\n        var count = tooltips.length;\n        var average = sum / count;\n\n        if (average > h / 2 + plotT.y) {\n          tooltips.reverse();\n          var prevY_1 = plotB.y;\n          $array.each(tooltips, function (tooltip) {\n            var height = tooltip.height();\n            var centerY = tooltip.get(\"centerY\");\n\n            if (centerY instanceof Percent) {\n              height *= centerY.value;\n            }\n\n            height += tooltip.get(\"marginBottom\", 0);\n            tooltip.set(\"bounds\", {\n              left: plotT.x,\n              top: plotT.y,\n              right: plotB.x,\n              bottom: prevY_1\n            });\n            prevY_1 = Math.min(prevY_1 - height, tooltip._fy - height);\n            tooltipContainer_1.children.moveValue(tooltip, 0);\n          });\n        } else {\n          var prevY_2 = 0;\n          $array.each(tooltips, function (tooltip) {\n            var height = tooltip.height();\n            var centerY = tooltip.get(\"centerY\");\n\n            if (centerY instanceof Percent) {\n              height *= centerY.value;\n            }\n\n            height += tooltip.get(\"marginBottom\", 0);\n            tooltip.set(\"bounds\", {\n              left: plotT.x,\n              top: prevY_2,\n              right: plotB.x,\n              bottom: Math.max(plotT.y + h, prevY_2 + height)\n            });\n            tooltipContainer_1.children.moveValue(tooltip, 0);\n            prevY_2 = Math.max(prevY_2 + height, tooltip._fy + height);\n          });\n        }\n      }\n    }\n  });\n  Object.defineProperty(XYChart.prototype, \"_tooltipToLocal\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (point) {\n      return this.plotContainer.toLocal(point);\n    }\n  });\n  /**\r\n   * Fully zooms out the chart.\r\n   */\n\n  Object.defineProperty(XYChart.prototype, \"zoomOut\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.xAxes.each(function (axis) {\n        axis.setPrivate(\"updateScrollbar\", true);\n        axis.zoom(0, 1);\n      });\n      this.yAxes.each(function (axis) {\n        axis.setPrivate(\"updateScrollbar\", true);\n        axis.zoom(0, 1);\n      });\n    }\n  });\n  Object.defineProperty(XYChart, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"XYChart\"\n  });\n  Object.defineProperty(XYChart, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: SerialChart.classNames.concat([XYChart.className])\n  });\n  return XYChart;\n}(SerialChart);\n\nexport { XYChart };","map":{"version":3,"sources":["../../../../../src/.internal/charts/xy/XYChart.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Axis } from \"./axes/Axis\";\nimport type { XYCursor } from \"./XYCursor\";\nimport type { AxisRenderer } from \"./axes/AxisRenderer\";\nimport type { DataItem } from \"../../core/render/Component\";\nimport type { IDisposer } from \"../../core/util/Disposer\";\nimport type { XYSeries, IXYSeriesDataItem } from \"./series/XYSeries\";\nimport type { IPointerEvent } from \"../../core/render/backend/Renderer\";\nimport type { Scrollbar } from \"../../core/render/Scrollbar\";\nimport type { Tooltip } from \"../../core/render/Tooltip\";\nimport type { IPoint } from \"../../core/util/IPoint\";\n\nimport { XYChartDefaultTheme } from \"./XYChartDefaultTheme\";\nimport { Container } from \"../../core/render/Container\";\nimport { Rectangle } from \"../../core/render/Rectangle\";\nimport { SerialChart, ISerialChartPrivate, ISerialChartSettings, ISerialChartEvents } from \"../../core/render/SerialChart\";\nimport { ListAutoDispose } from \"../../core/util/List\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { Color } from \"../../core/util/Color\";\nimport { Button } from \"../../core/render/Button\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Percent } from \"../../core/util/Percent\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $order from \"../../core/util/Order\";\nimport * as $type from \"../../core/util/Type\";\nimport type { Animation } from \"../../core/util/Entity\";\n\nexport interface IXYChartSettings extends ISerialChartSettings {\n\n\t/**\n\t * horizontal scrollbar.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/} for more info\n\t */\n\tscrollbarX?: Scrollbar;\n\n\t/**\n\t * Vertical scrollbar.\n\t *\n\t */\n\tscrollbarY?: Scrollbar;\n\n\t/**\n\t * If this is set to `true`, users will be able to pan the chart horizontally\n\t * by dragging plot area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Panning} for more info\n\t */\n\tpanX?: boolean;\n\n\t/**\n\t * If this is set to `true`, users will be able to pan the chart vertically\n\t * by dragging plot area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Panning} for more info\n\t */\n\tpanY?: boolean;\n\n\t/**\n\t * Indicates what happens when mouse wheel is spinned horizontally while over\n\t * plot area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Mouse_wheel_behavior} for more info\n\t */\n\twheelX?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\n\n\t/**\n\t * Indicates what happens when mouse wheel is spinned vertically while over\n\t * plot area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Mouse_wheel_behavior} for more info\n\t */\n\twheelY?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\n\n\t/**\n\t * Indicates the relative \"speed\" of the mouse wheel.\n\t *\n\t * @default 0.25\n\t */\n\twheelStep?: number;\n\n\t/**\n\t * Chart's cursor.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/} for more info\n\t */\n\tcursor?: XYCursor;\n\n\t/**\n\t * Indicates maximum distance from pointer (moust or touch) to points\n\t * tooltips need to be shown for.\n\t *\n\t * Points that are further from pointer than this setting will not be shown.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/#Tooltips} for more info\n\t */\n\tmaxTooltipDistance?: number;\n\n\t/**\n\t * If set to `false` the chart will not check for overlapping of multiple\n\t * tooltips, and will not arrange them to not overlap.\n\t *\n\t * Will work only if chart has an `XYCursor` enabled.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/#Tooltips} for more info\n\t * @default true\n\t */\n\tarrangeTooltips?: boolean\n\n}\n\nexport interface IXYChartPrivate extends ISerialChartPrivate {\n}\n\n\nexport interface IXYChartEvents extends ISerialChartEvents {\n\n\t/**\n\t * Invoked when panning starts.\n\t *\n\t * @since 5.0.4\n\t */\n\tpanstarted: {};\n\n\t/**\n\t * Invoked when panning ends.\n\t * \n\t * @since 5.0.4\n\t */\n\tpanended: {};\n\n\t/**\n\t * Invoked when wheel caused zoom ends.\n\t * \n\t * @since 5.0.4\n\t */\n\twheelended: {};\n\n}\n\n/**\n * Creates an XY chart.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/} for more info\n * @important\n */\nexport class XYChart extends SerialChart {\n\n\tpublic static className: string = \"XYChart\";\n\tpublic static classNames: Array<string> = SerialChart.classNames.concat([XYChart.className]);\n\n\tdeclare public _settings: IXYChartSettings;\n\tdeclare public _privateSettings: IXYChartPrivate;\n\tdeclare public _seriesType: XYSeries;\n\tdeclare public _events: IXYChartEvents;\n\n\t/**\n\t * A list of horizontal axes.\n\t */\n\tpublic readonly xAxes: ListAutoDispose<Axis<AxisRenderer>> = new ListAutoDispose();\n\n\t/**\n\t * A list of vertical axes.\n\t */\n\tpublic readonly yAxes: ListAutoDispose<Axis<AxisRenderer>> = new ListAutoDispose();\n\n\t/**\n\t * A [[Container]] located on top of the chart, used to store top horizontal\n\t * axes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly topAxesContainer: Container = this.chartContainer.children.push(Container.new(this._root, { width: p100, layout: this._root.verticalLayout }));\n\n\t/**\n\t * A [[Container]] located in the middle the chart, used to store vertical axes\n\t * and plot area container.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly yAxesAndPlotContainer: Container = this.chartContainer.children.push(Container.new(this._root, { width: p100, height: p100, layout: this._root.horizontalLayout }));\n\n\t/**\n\t * A [[Container]] located on bottom of the chart, used to store bottom\n\t * horizontal axes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly bottomAxesContainer: Container = this.chartContainer.children.push(Container.new(this._root, { width: p100, layout: this._root.verticalLayout }));\n\n\t/**\n\t * A [[Container]] located on left of the chart, used to store left-hand\n\t * vertical axes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly leftAxesContainer: Container = this.yAxesAndPlotContainer.children.push(Container.new(this._root, { height: p100, layout: this._root.horizontalLayout }));\n\n\t/**\n\t * A [[Container]] located in the middle of the chart, used to store actual\n\t * plots (series).\n\t *\n\t * NOTE: `plotContainer` will automatically have its `background` preset. If\n\t * you need to modify background or outline for chart's plot area, you can\n\t * use `plotContainer.get(\"background\")` for that.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly plotContainer: Container = this.yAxesAndPlotContainer.children.push(Container.new(this._root, { width: p100, height: p100, maskContent: false }));\n\n\t/**\n\t * A [[Container]] axis grid elements are stored in.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly gridContainer: Container = this.plotContainer.children.push(Container.new(this._root, { width: p100, height: p100, isMeasured: false }));\n\n\t/**\n\t * A [[Container]] axis background grid elements are stored in.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly topGridContainer: Container = Container.new(this._root, { width: p100, height: p100, isMeasured: false });\n\n\t/**\n\t * A [[Container]] located on right of the chart, used to store right-hand\n\t * vertical axes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly rightAxesContainer: Container = this.yAxesAndPlotContainer.children.push(Container.new(this._root, { height: p100, layout: this._root.horizontalLayout }));\n\n\t/**\n\t * A [[Container]] axis headers are stored in.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly axisHeadersContainer: Container = this.plotContainer.children.push(Container.new(this._root, {}));\n\n\t/**\n\t * A button that is shown when chart is not fully zoomed out.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Zoom_out_button} for more info\n\t * @default Button.new()\n\t */\n\tpublic readonly zoomOutButton: Button = this.plotContainer.children.push(Button.new(this._root, {\n\t\tthemeTags: [\"zoom\"],\n\t\ticon: Graphics.new(this._root, {\n\t\t\tthemeTags: [\"button\", \"icon\"]\n\t\t})\n\t}));\n\n\tpublic _movePoint: IPoint = { x: 0, y: 0 };\n\n\tprotected _wheelDp: IDisposer | undefined;\n\n\tpublic _otherCharts?: Array<XYChart>;\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(XYChartDefaultTheme.new(this._root));\n\n\t\tsuper._afterNew();\n\n\t\tthis._disposers.push(this.xAxes);\n\t\tthis._disposers.push(this.yAxes);\n\n\t\tconst root = this._root;\n\n\t\tlet verticalLayout = this._root.verticalLayout;\n\n\t\tconst zoomOutButton = this.zoomOutButton;\n\t\tzoomOutButton.events.on(\"click\", () => {\n\t\t\tthis.zoomOut();\n\t\t})\n\t\tzoomOutButton.set(\"opacity\", 0);\n\t\tzoomOutButton.states.lookup(\"default\")!.set(\"opacity\", 1);\n\n\t\tthis.chartContainer.set(\"layout\", verticalLayout);\n\n\t\tconst plotContainer = this.plotContainer;\n\t\tplotContainer.children.push(this.seriesContainer);\n\n\t\tthis._disposers.push(this._processAxis(this.xAxes, this.bottomAxesContainer));\n\t\tthis._disposers.push(this._processAxis(this.yAxes, this.leftAxesContainer));\n\n\n\t\tplotContainer.children.push(this.topGridContainer);\n\t\tplotContainer.children.push(this.bulletsContainer);\n\n\t\tplotContainer.children.moveValue(zoomOutButton);\n\n\t\t// Setting trasnparent background so that full body of the plot container\n\t\t// is interactive\n\t\tplotContainer.set(\"interactive\", true);\n\t\tplotContainer.set(\"interactiveChildren\", false);\n\t\tplotContainer.set(\"background\", Rectangle.new(root, {\n\t\t\tthemeTags: [\"xy\", \"background\"],\n\t\t\tfill: Color.fromHex(0x000000),\n\t\t\tfillOpacity: 0\n\t\t}));\n\n\t\tthis._disposers.push(plotContainer.events.on(\"pointerdown\", (event) => {\n\t\t\tthis._handlePlotDown(event.originalEvent);\n\t\t}));\n\n\t\tthis._disposers.push(plotContainer.events.on(\"globalpointerup\", (event) => {\n\t\t\tthis._handlePlotUp(event.originalEvent);\n\t\t}));\n\n\t\tthis._disposers.push(plotContainer.events.on(\"globalpointermove\", (event) => {\n\t\t\tthis._handlePlotMove(event.originalEvent);\n\t\t}));\n\t}\n\n\tprotected _removeSeries(series: this[\"_seriesType\"]) {\n\t\tconst xAxis = series.get(\"xAxis\");\n\t\tif (xAxis) {\n\t\t\t$array.remove(xAxis.series, series);\n\t\t}\n\t\tconst yAxis = series.get(\"yAxis\");\n\t\tif (yAxis) {\n\t\t\t$array.remove(yAxis.series, series);\n\t\t}\n\t\tsuper._removeSeries(series);\n\t}\n\n\tprotected _handleSetWheel() {\n\t\tconst wheelX = this.get(\"wheelX\");\n\t\tconst wheelY = this.get(\"wheelY\");\n\t\tconst plotContainer = this.plotContainer;\n\n\t\tif (wheelX !== \"none\" || wheelY !== \"none\") {\n\t\t\tthis._wheelDp = plotContainer.events.on(\"wheel\", (event) => {\n\t\t\t\tconst wheelEvent = event.originalEvent;\n\n\t\t\t\twheelEvent.preventDefault();\n\n\t\t\t\tconst plotPoint = plotContainer.toLocal(this._root.documentPointToRoot({ x: wheelEvent.clientX, y: wheelEvent.clientY }))\n\t\t\t\tconst wheelStep = this.get(\"wheelStep\", 0.2);\n\n\t\t\t\tconst shiftY = wheelEvent.deltaY / 100;\n\t\t\t\tconst shiftX = wheelEvent.deltaX / 100;\n\n\t\t\t\tif ((wheelX === \"zoomX\" || wheelX === \"zoomXY\") && shiftX != 0) {\n\t\t\t\t\tthis.xAxes.each((axis) => {\n\t\t\t\t\t\tif (axis.get(\"zoomX\")) {\n\t\t\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\t\t\t\t\t\t\tlet position = axis.fixPosition(plotPoint.x / plotContainer.width());\n\n\t\t\t\t\t\t\tlet newStart = start - wheelStep * (end - start) * shiftX * position;\n\t\t\t\t\t\t\tlet newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);\n\t\t\t\t\t\t\tif (1 / (newEnd - newStart) < axis.get(\"maxZoomFactor\", Infinity)) {\n\t\t\t\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tif ((wheelY === \"zoomX\" || wheelY === \"zoomXY\") && shiftY != 0) {\n\t\t\t\t\tthis.xAxes.each((axis) => {\n\t\t\t\t\t\tif (axis.get(\"zoomX\")) {\n\t\t\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\n\t\t\t\t\t\t\tlet position = axis.fixPosition(plotPoint.x / plotContainer.width());\n\n\t\t\t\t\t\t\tlet newStart = start - wheelStep * (end - start) * shiftY * position;\n\t\t\t\t\t\t\tlet newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);\n\t\t\t\t\t\t\tif (1 / (newEnd - newStart) < axis.get(\"maxZoomFactor\", Infinity)) {\n\t\t\t\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\n\t\t\t\tif ((wheelX === \"zoomY\" || wheelX === \"zoomXY\") && shiftX != 0) {\n\t\t\t\t\tthis.yAxes.each((axis) => {\n\t\t\t\t\t\tif (axis.get(\"zoomY\")) {\n\t\t\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\t\t\t\t\t\t\tlet position = axis.fixPosition(plotPoint.y / plotContainer.height());\n\n\t\t\t\t\t\t\tlet newStart = start - wheelStep * (end - start) * shiftX * position;\n\t\t\t\t\t\t\tlet newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);\n\t\t\t\t\t\t\tif (1 / (newEnd - newStart) < axis.get(\"maxZoomFactor\", Infinity)) {\n\t\t\t\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tif ((wheelY === \"zoomY\" || wheelY === \"zoomXY\") && shiftY != 0) {\n\t\t\t\t\tthis.yAxes.each((axis) => {\n\t\t\t\t\t\tif (axis.get(\"zoomY\")) {\n\t\t\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\t\t\t\t\t\t\tlet position = axis.fixPosition(plotPoint.y / plotContainer.height());\n\n\t\t\t\t\t\t\tlet newStart = start - wheelStep * (end - start) * shiftY * position;\n\t\t\t\t\t\t\tlet newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);\n\n\t\t\t\t\t\t\tif (1 / (newEnd - newStart) < axis.get(\"maxZoomFactor\", Infinity)) {\n\t\t\t\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\n\t\t\t\tif ((wheelX === \"panX\" || wheelX === \"panXY\") && shiftX != 0) {\n\t\t\t\t\tthis.xAxes.each((axis) => {\n\t\t\t\t\t\tif (axis.get(\"panX\")) {\n\t\t\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\t\t\t\t\t\t\tlet position = axis.fixPosition(plotPoint.x / plotContainer.width());\n\n\t\t\t\t\t\t\tlet newStart = start + wheelStep * (end - start) * shiftX * position;\n\t\t\t\t\t\t\tlet newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);\n\n\t\t\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tif ((wheelY === \"panX\" || wheelY === \"panXY\") && shiftY != 0) {\n\t\t\t\t\tthis.xAxes.each((axis) => {\n\t\t\t\t\t\tif (axis.get(\"panX\")) {\n\t\t\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\t\t\t\t\t\t\tlet position = axis.fixPosition(plotPoint.x / plotContainer.width());\n\n\t\t\t\t\t\t\tlet newStart = start + wheelStep * (end - start) * shiftY * position;\n\t\t\t\t\t\t\tlet newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);\n\n\t\t\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tif ((wheelX === \"panY\" || wheelX === \"panXY\") && shiftX != 0) {\n\t\t\t\t\tthis.yAxes.each((axis) => {\n\t\t\t\t\t\tif (axis.get(\"panY\")) {\n\t\t\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\t\t\t\t\t\t\tlet position = axis.fixPosition(plotPoint.y / plotContainer.height());\n\n\t\t\t\t\t\t\tlet newStart = start + wheelStep * (end - start) * shiftX * position;\n\t\t\t\t\t\t\tlet newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);\n\n\t\t\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tif ((wheelY === \"panY\" || wheelY === \"panXY\") && shiftY != 0) {\n\t\t\t\t\tthis.yAxes.each((axis) => {\n\t\t\t\t\t\tif (axis.get(\"panY\")) {\n\t\t\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\t\t\t\t\t\t\tlet position = axis.fixPosition(plotPoint.y / plotContainer.height());\n\n\t\t\t\t\t\t\tlet newStart = start + wheelStep * (end - start) * shiftY * position;\n\t\t\t\t\t\t\tlet newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);\n\n\t\t\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis._disposers.push(this._wheelDp);\n\t\t}\n\t\telse {\n\t\t\tif (this._wheelDp) {\n\t\t\t\tthis._wheelDp.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handlePlotDown(event: IPointerEvent) {\n\n\t\t// TODO: handle multitouch\n\t\tif (this.get(\"panX\") || this.get(\"panY\")) {\n\t\t\tconst plotContainer = this.plotContainer;\n\n\t\t\tlet local = plotContainer.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));\n\n\t\t\tif (local.x >= 0 && local.y >= 0 && local.x <= plotContainer.width() && local.y <= this.height()) {\n\t\t\t\tthis._downPoint = local;\n\n\t\t\t\tconst panX = this.get(\"panX\");\n\t\t\t\tconst panY = this.get(\"panY\");\n\n\t\t\t\tif (panX) {\n\t\t\t\t\tthis.xAxes.each((axis) => {\n\t\t\t\t\t\taxis._panStart = axis.get(\"start\")!;\n\t\t\t\t\t\taxis._panEnd = axis.get(\"end\")!;\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tif (panY) {\n\t\t\t\t\tthis.yAxes.each((axis) => {\n\t\t\t\t\t\taxis._panStart = axis.get(\"start\")!;\n\t\t\t\t\t\taxis._panEnd = axis.get(\"end\")!;\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tconst eventType = \"panstarted\";\n\t\t\t\tif (this.events.isEnabled(eventType)) {\n\t\t\t\t\tthis.events.dispatch(eventType, { type: eventType, target: this });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleWheelAnimation(animation?: Animation<any>) {\n\t\tif (animation) {\n\t\t\tanimation.events.on(\"stopped\", () => {\n\t\t\t\tthis._dispatchWheelAnimation();\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tthis._dispatchWheelAnimation();\n\t\t}\n\t}\n\n\tprotected _dispatchWheelAnimation() {\n\t\tconst eventType = \"wheelended\";\n\t\tif (this.events.isEnabled(eventType)) {\n\t\t\tthis.events.dispatch(eventType, { type: eventType, target: this });\n\t\t}\n\t}\n\n\tprotected _handlePlotUp(_event: IPointerEvent) {\n\n\t\tif (this._downPoint) {\n\t\t\tif (this.get(\"panX\") || this.get(\"panY\")) {\n\t\t\t\tconst eventType = \"panended\";\n\t\t\t\tif (this.events.isEnabled(eventType)) {\n\t\t\t\t\tthis.events.dispatch(eventType, { type: eventType, target: this });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// TODO: handle multitouch\n\t\tthis._downPoint = undefined;\n\t\tthis.xAxes.each((xAxis) => {\n\t\t\txAxis._isPanning = false;\n\t\t})\n\t\tthis.yAxes.each((yAxis) => {\n\t\t\tyAxis._isPanning = false;\n\t\t})\n\t}\n\n\tprotected _handlePlotMove(event: IPointerEvent) {\n\t\t// TODO: handle multitouch\n\t\tconst downPoint = this._downPoint!;\n\n\t\tif (downPoint) {\n\t\t\tconst plotContainer = this.plotContainer;\n\n\t\t\tlet local = plotContainer.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));\n\n\t\t\tconst panX = this.get(\"panX\");\n\t\t\tconst panY = this.get(\"panY\");\n\n\t\t\tif (panX) {\n\n\t\t\t\tlet scrollbarX = this.get(\"scrollbarX\");\n\t\t\t\tif (scrollbarX) {\n\t\t\t\t\tscrollbarX.events.disableType(\"rangechanged\");\n\t\t\t\t}\n\n\t\t\t\tthis.xAxes.each((axis) => {\n\t\t\t\t\tif (axis.get(\"panX\")) {\n\t\t\t\t\t\taxis._isPanning = true;\n\t\t\t\t\t\t//const maxDeviation = axis.get(\"maxDeviation\", 0);\n\t\t\t\t\t\tlet panStart = axis._panStart;\n\t\t\t\t\t\tlet panEnd = axis._panEnd;\n\t\t\t\t\t\tlet difference = (panEnd - panStart);\n\t\t\t\t\t\tlet deltaX = difference * (downPoint.x - local.x) / plotContainer.width();\n\n\t\t\t\t\t\tif (axis.get(\"renderer\").get(\"inversed\")) {\n\t\t\t\t\t\t\tdeltaX *= -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet start = panStart + deltaX;\n\t\t\t\t\t\tlet end = panEnd + deltaX;\n\n\t\t\t\t\t\tif (end - start < 1 + axis.get(\"maxDeviation\", 1) * 2) {\n\t\t\t\t\t\t\taxis.set(\"start\", start);\n\t\t\t\t\t\t\taxis.set(\"end\", end);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tif (scrollbarX) {\n\t\t\t\t\tscrollbarX.events.enableType(\"rangechanged\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (panY) {\n\n\t\t\t\tlet scrollbarY = this.get(\"scrollbarY\");\n\t\t\t\tif (scrollbarY) {\n\t\t\t\t\tscrollbarY.events.disableType(\"rangechanged\");\n\t\t\t\t}\n\n\t\t\t\tthis.yAxes.each((axis) => {\n\t\t\t\t\tif (axis.get(\"panY\")) {\n\t\t\t\t\t\taxis._isPanning = true;\n\t\t\t\t\t\t//const maxDeviation = axis.get(\"maxDeviation\", 0);\n\n\t\t\t\t\t\tlet panStart = axis._panStart;\n\t\t\t\t\t\tlet panEnd = axis._panEnd;\n\t\t\t\t\t\tlet difference = (panEnd - panStart);\n\t\t\t\t\t\tlet deltaY = difference * (downPoint.y - local.y) / plotContainer.height();\n\t\t\t\t\t\tif (axis.get(\"renderer\").get(\"inversed\")) {\n\t\t\t\t\t\t\tdeltaY *= -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet start = panStart - deltaY;\n\t\t\t\t\t\tlet end = panEnd - deltaY;\n\n\t\t\t\t\t\tif (end - start < 1 + axis.get(\"maxDeviation\", 1) * 2) {\n\t\t\t\t\t\t\taxis.set(\"start\", start);\n\t\t\t\t\t\t\taxis.set(\"end\", end);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tif (scrollbarY) {\n\t\t\t\t\tscrollbarY.events.enableType(\"rangechanged\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _handleCursorPosition() {\n\t\tconst cursor = this.get(\"cursor\");\n\t\tif (cursor) {\n\t\t\tconst cursorPoint = cursor.getPrivate(\"point\");\n\n\t\t\tconst snapToSeries = cursor.get(\"snapToSeries\");\n\t\t\tif (snapToSeries && cursorPoint) {\n\t\t\t\tconst dataItems: Array<DataItem<IXYSeriesDataItem>> = [];\n\t\t\t\t$array.each(snapToSeries, (series) => {\n\t\t\t\t\tif (!series.isHidden() && !series.isHiding()) {\n\t\t\t\t\t\tconst startIndex = series.getPrivate(\"startIndex\", 0);\n\t\t\t\t\t\tconst endIndex = series.getPrivate(\"endIndex\", series.dataItems.length - 1);\n\t\t\t\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\t\t\t\tconst dataItem = series.dataItems[i];\n\t\t\t\t\t\t\tif (dataItem && !dataItem.isHidden()) {\n\t\t\t\t\t\t\t\tdataItems.push(dataItem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tlet minDistance = Infinity;\n\t\t\t\tlet closestItem: DataItem<IXYSeriesDataItem> | undefined;\n\t\t\t\tconst snapToSeriesBy = cursor.get(\"snapToSeriesBy\");\n\t\t\t\t$array.each(dataItems, (dataItem) => {\n\t\t\t\t\tconst point = dataItem.get(\"point\");\n\n\t\t\t\t\tif (point) {\n\t\t\t\t\t\tlet distance = 0;\n\t\t\t\t\t\tif (snapToSeriesBy == \"x\") {\n\t\t\t\t\t\t\tdistance = Math.abs(cursorPoint.x - point.x);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (snapToSeriesBy == \"y\") {\n\t\t\t\t\t\t\tdistance = Math.abs(cursorPoint.y - point.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tdistance = Math.hypot(cursorPoint.x - point.x, cursorPoint.y - point.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (distance < minDistance) {\n\t\t\t\t\t\t\tminDistance = distance;\n\t\t\t\t\t\t\tclosestItem = dataItem;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\t$array.each(snapToSeries, (series) => {\n\t\t\t\t\tconst tooltip = series.get(\"tooltip\");\n\t\t\t\t\tif (tooltip) {\n\t\t\t\t\t\ttooltip._setDataItem(undefined);\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tif (closestItem) {\n\t\t\t\t\tlet series = closestItem.component as XYSeries;\n\t\t\t\t\tseries.showDataItemTooltip(closestItem);\n\t\t\t\t\tconst point = closestItem.get(\"point\");\n\t\t\t\t\tif (point) {\n\t\t\t\t\t\tcursor.handleMove(series.toGlobal(point), true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _updateCursor() {\n\t\tlet cursor = this.get(\"cursor\");\n\t\tif (cursor) {\n\t\t\tcursor.handleMove();\n\t\t}\n\t}\n\n\tprotected _addCursor(cursor: XYCursor) {\n\t\tthis.plotContainer.children.push(cursor);\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tthis.series.each((series) => {\n\t\t\tthis._colorize(series);\n\t\t})\n\n\t\tif (this.isDirty(\"wheelX\") || this.isDirty(\"wheelY\")) {\n\t\t\tthis._handleSetWheel();\n\t\t}\n\n\t\tif (this.isDirty(\"cursor\")) {\n\t\t\tconst previous = this._prevSettings.cursor;\n\t\t\tconst cursor = this.get(\"cursor\")!;\n\t\t\tif (cursor !== previous) {\n\t\t\t\tthis._disposeProperty(\"cursor\");\n\t\t\t\tif (previous) {\n\t\t\t\t\tprevious.dispose();\n\t\t\t\t}\n\t\t\t\tif (cursor) {\n\t\t\t\t\tcursor._setChart(this);\n\t\t\t\t\tthis._addCursor(cursor);\n\n\t\t\t\t\tthis._pushPropertyDisposer(\"cursor\", cursor.events.on(\"selectended\", () => {\n\t\t\t\t\t\tthis._handleCursorSelectEnd();\n\t\t\t\t\t}))\n\t\t\t\t}\n\n\t\t\t\t//this.setRaw(\"cursor\", cursor) // to reset previous value\n\t\t\t\tthis._prevSettings.cursor = cursor;\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"scrollbarX\")) {\n\t\t\tconst previous = this._prevSettings.scrollbarX;\n\t\t\tconst scrollbarX = this.get(\"scrollbarX\")!;\n\t\t\tif (scrollbarX !== previous) {\n\t\t\t\tthis._disposeProperty(\"scrollbarX\");\n\t\t\t\tif (previous) {\n\t\t\t\t\tprevious.dispose();\n\t\t\t\t}\n\t\t\t\tif (scrollbarX) {\n\t\t\t\t\tif (!scrollbarX.parent) {\n\t\t\t\t\t\tthis.topAxesContainer.children.push(scrollbarX);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._pushPropertyDisposer(\"scrollbarX\", scrollbarX.events.on(\"rangechanged\", (e) => {\n\t\t\t\t\t\tthis._handleScrollbar(this.xAxes, e.start, e.end);\n\t\t\t\t\t}))\n\n\t\t\t\t\t// Used to populate `ariaLabel` with meaningful values\n\t\t\t\t\tscrollbarX.setPrivate(\"positionTextFunction\", (position: number) => {\n\t\t\t\t\t\tconst axis = this.xAxes.getIndex(0);\n\t\t\t\t\t\treturn axis ? axis.getTooltipText(position) || \"\" : \"\";\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t\tthis._prevSettings.scrollbarX = scrollbarX;\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"scrollbarY\")) {\n\t\t\tconst previous = this._prevSettings.scrollbarY;\n\t\t\tconst scrollbarY = this.get(\"scrollbarY\")!;\n\t\t\tif (scrollbarY !== previous) {\n\t\t\t\tthis._disposeProperty(\"scrollbarY\");\n\t\t\t\tif (previous) {\n\t\t\t\t\tprevious.dispose();\n\t\t\t\t}\n\t\t\t\tif (scrollbarY) {\n\t\t\t\t\tif (!scrollbarY.parent) {\n\t\t\t\t\t\tthis.rightAxesContainer.children.push(scrollbarY);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._pushPropertyDisposer(\"scrollbarY\", scrollbarY.events.on(\"rangechanged\", (e) => {\n\t\t\t\t\t\tthis._handleScrollbar(this.yAxes, e.start, e.end);\n\t\t\t\t\t}))\n\n\t\t\t\t\t// Used to populate `ariaLabel` with meaningful values\n\t\t\t\t\tscrollbarY.setPrivate(\"positionTextFunction\", (position: number) => {\n\t\t\t\t\t\tconst axis = this.yAxes.getIndex(0);\n\t\t\t\t\t\treturn axis ? axis.getTooltipText(position) || \"\" : \"\";\n\t\t\t\t\t});\n\n\t\t\t\t}\n\t\t\t\tthis._prevSettings.scrollbarY = scrollbarY;\n\t\t\t}\n\t\t}\n\n\t\tthis._handleZoomOut();\n\t}\n\n\tprotected _processSeries(series: this[\"_seriesType\"]) {\n\t\tsuper._processSeries(series);\n\t\tthis._colorize(series);\n\t}\n\n\tprotected _colorize(series: this[\"_seriesType\"]) {\n\t\tconst colorSet = this.get(\"colors\")!;\n\t\tif (colorSet) {\n\t\t\tif (series.get(\"fill\") == null) {\n\t\t\t\tconst color = colorSet.next();\n\n\t\t\t\tseries._setSoft(\"stroke\", color);\n\t\t\t\tseries._setSoft(\"fill\", color);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleCursorSelectEnd() {\n\t\tconst cursor = this.get(\"cursor\")!;\n\t\tconst behavior = cursor.get(\"behavior\");\n\n\t\tconst downPositionX = cursor.getPrivate(\"downPositionX\", 0);\n\t\tconst downPositionY = cursor.getPrivate(\"downPositionY\", 0);\n\n\t\tconst positionX = cursor.getPrivate(\"positionX\", 0.5);\n\t\tconst positionY = cursor.getPrivate(\"positionY\", 0.5);\n\n\n\t\tthis.xAxes.each((axis) => {\n\t\t\tif (behavior === \"zoomX\" || behavior === \"zoomXY\") {\n\t\t\t\tlet position0 = axis.toAxisPosition(downPositionX);\n\t\t\t\tlet position1 = axis.toAxisPosition(positionX);\n\t\t\t\taxis.zoom(position0, position1);\n\t\t\t}\n\t\t\taxis.setPrivate(\"updateScrollbar\", true);\n\t\t})\n\n\t\tthis.yAxes.each((axis) => {\n\t\t\tif (behavior === \"zoomY\" || behavior === \"zoomXY\") {\n\t\t\t\tlet position0 = axis.toAxisPosition(downPositionY);\n\t\t\t\tlet position1 = axis.toAxisPosition(positionY);\n\t\t\t\taxis.zoom(position0, position1);\n\t\t\t}\n\t\t\taxis.setPrivate(\"updateScrollbar\", true);\n\t\t})\n\n\t}\n\n\tprotected _handleScrollbar(axes: ListAutoDispose<Axis<any>>, start: number, end: number) {\n\n\t\taxes.each((axis) => {\n\n\t\t\tlet axisStart = axis.fixPosition(start);\n\t\t\tlet axisEnd = axis.fixPosition(end);\n\n\t\t\tlet zoomAnimation = axis.zoom(axisStart, axisEnd);\n\n\t\t\tconst updateScrollbar = \"updateScrollbar\";\n\t\t\taxis.setPrivateRaw(updateScrollbar, false);\n\n\t\t\tif (zoomAnimation) {\n\t\t\t\tzoomAnimation.events.on(\"stopped\", () => {\n\t\t\t\t\taxis.setPrivateRaw(updateScrollbar, true);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\taxis.setPrivateRaw(updateScrollbar, true);\n\t\t\t}\n\t\t})\n\t}\n\n\n\tprotected _processAxis<R extends AxisRenderer>(axes: ListAutoDispose<Axis<R>>, container: Container): IDisposer {\n\t\treturn axes.events.onAll((change) => {\n\t\t\tif (change.type === \"clear\") {\n\t\t\t\t$array.each(change.oldValues, (axis) => {\n\t\t\t\t\tthis._removeAxis(axis);\n\t\t\t\t})\n\t\t\t} else if (change.type === \"push\") {\n\t\t\t\tcontainer.children.push(change.newValue);\n\t\t\t\tchange.newValue.processChart(this);\n\t\t\t} else if (change.type === \"setIndex\") {\n\t\t\t\tcontainer.children.setIndex(change.index, change.newValue);\n\t\t\t\tchange.newValue.processChart(this);\n\t\t\t} else if (change.type === \"insertIndex\") {\n\t\t\t\tcontainer.children.insertIndex(change.index, change.newValue);\n\t\t\t\tchange.newValue.processChart(this);\n\t\t\t} else if (change.type === \"removeIndex\") {\n\t\t\t\tthis._removeAxis(change.oldValue);\n\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unknown IListEvent type\");\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _removeAxis(axis: Axis<AxisRenderer>) {\n\t\tif (!axis.isDisposed()) {\n\t\t\tconst axisParent = axis.parent\n\t\t\tif (axisParent) {\n\t\t\t\taxisParent.children.removeValue(axis);\n\t\t\t}\n\n\t\t\tconst gridContainer = axis.gridContainer;\n\t\t\tconst gridParent = gridContainer.parent;\n\t\t\tif (gridParent) {\n\t\t\t\tgridParent.children.removeValue(gridContainer);\n\t\t\t}\n\n\t\t\tconst topGridContainer = axis.topGridContainer;\n\t\t\tconst topGridParent = topGridContainer.parent;\n\t\t\tif (topGridParent) {\n\t\t\t\ttopGridParent.children.removeValue(topGridContainer);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _updateChartLayout() {\n\t\tconst left = this.leftAxesContainer.width();\n\t\tconst right = this.rightAxesContainer.width();\n\n\t\tconst bottomAxesContainer = this.bottomAxesContainer;\n\t\tbottomAxesContainer.set(\"paddingLeft\", left);\n\t\tbottomAxesContainer.set(\"paddingRight\", right);\n\n\t\tconst topAxesContainer = this.topAxesContainer;\n\t\ttopAxesContainer.set(\"paddingLeft\", left);\n\t\ttopAxesContainer.set(\"paddingRight\", right);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis(_axis: Axis<AxisRenderer>) { };\n\n\tpublic _handleAxisSelection(axis: Axis<any>) {\n\n\t\tlet start = axis.fixPosition(axis.get(\"start\", 0));\n\t\tlet end = axis.fixPosition(axis.get(\"end\", 1));\n\n\t\tif (start > end) {\n\t\t\t[start, end] = [end, start];\n\t\t}\n\n\t\tif (this.xAxes.indexOf(axis) != -1) {\n\t\t\tif (axis.getPrivate(\"updateScrollbar\")) {\n\t\t\t\tlet scrollbarX = this.get(\"scrollbarX\");\n\t\t\t\tif (scrollbarX && !scrollbarX.getPrivate(\"isBusy\")) {\n\t\t\t\t\tscrollbarX.setRaw(\"start\", start);\n\t\t\t\t\tscrollbarX.setRaw(\"end\", end);\n\t\t\t\t\tscrollbarX.updateGrips();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.yAxes.indexOf(axis) != -1) {\n\t\t\tif (axis.getPrivate(\"updateScrollbar\")) {\n\t\t\t\tlet scrollbarY = this.get(\"scrollbarY\");\n\t\t\t\tif (scrollbarY && !scrollbarY.getPrivate(\"isBusy\")) {\n\t\t\t\t\tscrollbarY.setRaw(\"start\", start);\n\t\t\t\t\tscrollbarY.setRaw(\"end\", end);\n\t\t\t\t\tscrollbarY.updateGrips();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._handleZoomOut();\n\t}\n\n\tprotected _handleZoomOut() {\n\t\tlet zoomOutButton = this.zoomOutButton;\n\t\tif (zoomOutButton && zoomOutButton.parent) {\n\t\t\tlet visible = false;\n\t\t\tthis.xAxes.each((axis) => {\n\t\t\t\tif (axis.get(\"start\") != 0 || axis.get(\"end\") != 1) {\n\t\t\t\t\tvisible = true;\n\t\t\t\t}\n\t\t\t})\n\t\t\tthis.yAxes.each((axis) => {\n\t\t\t\tif (axis.get(\"start\") != 0 || axis.get(\"end\") != 1) {\n\t\t\t\t\tvisible = true;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tif (visible) {\n\t\t\t\tif (zoomOutButton.isHidden()) {\n\t\t\t\t\tzoomOutButton.show();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tzoomOutButton.hide();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if point is within plot area.\n\t *\n\t * @param   point  Reference point\n\t * @return         Is within plot area?\n\t */\n\tpublic inPlot(point: IPoint): boolean {\n\t\tconst plotContainer = this.plotContainer;\n\t\tconst otherCharts = this._otherCharts;\n\t\tconst global = plotContainer.toGlobal(point);\n\n\t\tif (point.x >= -0.1 && point.y >= -0.1 && point.x <= plotContainer.width() + 0.1 && point.y <= plotContainer.height() + 0.1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (otherCharts) {\n\t\t\tfor (let i = otherCharts.length - 1; i >= 0; i--) {\n\t\t\t\tconst chart = otherCharts[i];\n\t\t\t\tif (chart != this) {\n\t\t\t\t\tconst chartPlotContainer = chart.plotContainer;\n\t\t\t\t\tconst local = chartPlotContainer.toLocal(global);\n\t\t\t\t\tif (local.x >= -0.1 && local.y >= -0.1 && local.x <= chartPlotContainer.width() + 0.1 && local.y <= chartPlotContainer.height() + 0.1) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic arrangeTooltips() {\n\t\tconst plotContainer = this.plotContainer;\n\n\t\tconst w = plotContainer.width();\n\t\tconst h = plotContainer.height();\n\n\t\tlet plotT = plotContainer._display.toGlobal({ x: 0, y: 0 });\n\t\tlet plotB = plotContainer._display.toGlobal({ x: w, y: h });\n\n\t\tconst tooltips: Array<Tooltip> = [];\n\t\tlet sum = 0;\n\n\t\tlet minDistance = Infinity;\n\t\tlet movePoint = this._movePoint;\n\t\tlet maxTooltipDistance = this.get(\"maxTooltipDistance\");\n\t\tlet closest: XYSeries;\n\t\tlet closestPoint: IPoint;\n\n\t\tif ($type.isNumber(maxTooltipDistance)) {\n\t\t\tthis.series.each((series) => {\n\t\t\t\tconst tooltip = series.get(\"tooltip\");\n\t\t\t\tif (tooltip) {\n\t\t\t\t\tlet point = tooltip.get(\"pointTo\")!;\n\t\t\t\t\tif (point) {\n\t\t\t\t\t\tlet distance = Math.hypot(movePoint.x - point.x, movePoint.y - point.y);\n\t\t\t\t\t\tif (distance < minDistance) {\n\t\t\t\t\t\t\tminDistance = distance;\n\t\t\t\t\t\t\tclosest = series;\n\t\t\t\t\t\t\tclosestPoint = point;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tthis.series.each((series) => {\n\t\t\tconst tooltip = series.get(\"tooltip\")!;\n\n\t\t\tif (tooltip) {\n\t\t\t\tlet hidden = false;\n\t\t\t\tlet point = tooltip.get(\"pointTo\")!;\n\t\t\t\tif (point) {\n\t\t\t\t\tif (maxTooltipDistance >= 0) {\n\t\t\t\t\t\tlet point = tooltip.get(\"pointTo\")!;\n\t\t\t\t\t\tif (point) {\n\t\t\t\t\t\t\tif (series != closest) {\n\t\t\t\t\t\t\t\tlet distance = Math.hypot(closestPoint.x - point.x, closestPoint.y - point.y);\n\t\t\t\t\t\t\t\tif (distance > maxTooltipDistance) {\n\t\t\t\t\t\t\t\t\thidden = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (maxTooltipDistance == -1) {\n\t\t\t\t\t\tif (series != closest) {\n\t\t\t\t\t\t\thidden = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.inPlot(this._tooltipToLocal(point)) || !tooltip.dataItem) {\n\t\t\t\t\t\thidden = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!hidden) {\n\t\t\t\t\t\t\tsum += point.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hidden || series.isHidden() || series.isHiding()) {\n\t\t\t\t\t\ttooltip.hide(0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttooltip.show();\n\t\t\t\t\t\ttooltips.push(tooltip);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tif (this.get(\"arrangeTooltips\")) {\n\n\t\t\tconst tooltipContainer = this._root.tooltipContainer;\n\n\t\t\ttooltips.sort((a, b) => $order.compareNumber(a.get(\"pointTo\")!.y, b.get(\"pointTo\")!.y));\n\t\t\tconst count = tooltips.length;\n\t\t\tconst average = sum / count;\n\n\t\t\tif (average > h / 2 + plotT.y) {\n\t\t\t\ttooltips.reverse();\n\t\t\t\tlet prevY = plotB.y;\n\n\t\t\t\t$array.each(tooltips, (tooltip) => {\n\t\t\t\t\tlet height = tooltip.height();\n\t\t\t\t\tlet centerY = tooltip.get(\"centerY\");\n\t\t\t\t\tif (centerY instanceof Percent) {\n\t\t\t\t\t\theight *= centerY.value;\n\t\t\t\t\t}\n\t\t\t\t\theight += tooltip.get(\"marginBottom\", 0);\n\n\t\t\t\t\ttooltip.set(\"bounds\", { left: plotT.x, top: plotT.y, right: plotB.x, bottom: prevY })\n\n\t\t\t\t\tprevY = Math.min(prevY - height, tooltip._fy - height);\n\t\t\t\t\ttooltipContainer.children.moveValue(tooltip, 0);\n\t\t\t\t})\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet prevY = 0;\n\t\t\t\t$array.each(tooltips, (tooltip) => {\n\t\t\t\t\tlet height = tooltip.height();\n\t\t\t\t\tlet centerY = tooltip.get(\"centerY\");\n\t\t\t\t\tif (centerY instanceof Percent) {\n\t\t\t\t\t\theight *= centerY.value;\n\t\t\t\t\t}\n\t\t\t\t\theight += tooltip.get(\"marginBottom\", 0);\n\n\t\t\t\t\ttooltip.set(\"bounds\", { left: plotT.x, top: prevY, right: plotB.x, bottom: Math.max(plotT.y + h, prevY + height) })\n\t\t\t\t\ttooltipContainer.children.moveValue(tooltip, 0);\n\t\t\t\t\tprevY = Math.max(prevY + height, tooltip._fy + height);\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _tooltipToLocal(point: IPoint): IPoint {\n\t\treturn this.plotContainer.toLocal(point);\n\t}\n\n\t/**\n\t * Fully zooms out the chart.\n\t */\n\tpublic zoomOut() {\n\t\tthis.xAxes.each((axis) => {\n\t\t\taxis.setPrivate(\"updateScrollbar\", true);\n\t\t\taxis.zoom(0, 1);\n\t\t})\n\n\t\tthis.yAxes.each((axis) => {\n\t\t\taxis.setPrivate(\"updateScrollbar\", true);\n\t\t\taxis.zoom(0, 1);\n\t\t})\n\t}\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}