{"ast":null,"code":"import { range } from \"./Animation\";\nimport * as $utils from \"./Utils\";\nimport * as $type from \"./Type\";\n/**\r\n * @ignore\r\n */\n\nfunction string2hex(string) {\n  //string = cssColorNames[string.toLowerCase()] || string;\n  if (string[0] === \"#\") {\n    string = string.substr(1);\n  }\n\n  if (string.length == 3) {\n    string = string[0].repeat(2) + string[1].repeat(2) + string[2].repeat(2);\n  }\n\n  return parseInt(string, 16);\n}\n/**\r\n * @ignore\r\n */\n\n\nexport function rgba2hex(color) {\n  color = color.replace(/[ ]/g, \"\"); // Init\n\n  var matches = color.match(/^rgb\\(([0-9]*),([0-9]*),([0-9]*)\\)/i); // Try rgb() format\n\n  if (matches) {\n    matches.push(\"1\");\n  } else {\n    matches = color.match(/^rgba\\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\\)/i);\n\n    if (!matches) {\n      return 0x000000;\n    }\n  }\n\n  var hex = \"\";\n\n  for (var i = 1; i <= 3; i++) {\n    var val = parseInt(matches[i]).toString(16);\n\n    if (val.length == 1) {\n      val = \"0\" + val;\n    }\n\n    hex += val;\n  }\n\n  return string2hex(hex);\n}\n/**\r\n * Returns a new [[Color]] object base on input.\r\n *\r\n * Accepts parameters in CSS hex or rgb/rtba strings, or hex numbers.\r\n *\r\n * * `\"#f00\"`\r\n * * `\"#ff0000\"`\r\n * * `\"rgb(255, 0, 0)\"`\r\n * * `\"rgba(255, 0, 0, 1)\"`\r\n * * `0xff0000`\r\n *\r\n * @param   input  Input color\r\n * @return         Color\r\n */\n\nexport function color(input) {\n  return Color.fromAny(input);\n}\n/**\r\n * Wherever color needs to be specified in amCharts 5, `Color` object needs to\r\n * be used.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/} for more info\r\n * @important\r\n */\n\nvar Color =\n/** @class */\nfunction () {\n  function Color(hex) {\n    Object.defineProperty(this, \"_hex\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._hex = hex | 0;\n  }\n\n  Object.defineProperty(Color.prototype, \"hex\", {\n    /**\r\n     * Color numeric value.\r\n     */\n    get: function () {\n      return this._hex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"r\", {\n    /**\r\n     * Value of color's R channel.\r\n     * @return R value\r\n     */\n    get: function () {\n      return this._hex >>> 16;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"g\", {\n    /**\r\n     * Value of color's G channel.\r\n     * @return G value\r\n     */\n    get: function () {\n      return this._hex >> 8 & 0xFF;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"b\", {\n    /**\r\n     * Value of color's B channel.\r\n     * @return B value\r\n     */\n    get: function () {\n      return this._hex & 0xFF;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns color CSS representation in form of `rgba(r, g, b, a)` string.\r\n   *\r\n   * @param   alpha  Opacity\r\n   * @return         CSS string\r\n   */\n\n  Object.defineProperty(Color.prototype, \"toCSS\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (alpha) {\n      if (alpha === void 0) {\n        alpha = 1;\n      }\n\n      return \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + alpha + \")\";\n    }\n  });\n  /**\r\n   * Returns color CSS representation in form of `#rgb` string.\r\n   *\r\n   * @return         CSS string\r\n   */\n\n  Object.defineProperty(Color.prototype, \"toCSSHex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return \"#\" + $utils.padString(this.r.toString(16), 2) + $utils.padString(this.g.toString(16), 2) + $utils.padString(this.b.toString(16), 2);\n    }\n  });\n  /**\r\n   * Returns color's HSL info.\r\n   * @param   alpha Opacity\r\n   * @return        HSL info\r\n   */\n\n  Object.defineProperty(Color.prototype, \"toHSL\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (alpha) {\n      if (alpha === void 0) {\n        alpha = 1;\n      }\n\n      return $utils.rgbToHsl({\n        r: this.r,\n        g: this.g,\n        b: this.b,\n        a: alpha\n      });\n    }\n  });\n  /**\r\n   * Converts HSL values into a new [[Color]] object.\r\n   *\r\n   * @param   h H value\r\n   * @param   s S value\r\n   * @param   l L value\r\n   * @return    Color object\r\n   */\n\n  Object.defineProperty(Color, \"fromHSL\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (h, s, l) {\n      var rgb = $utils.hslToRgb({\n        h: h,\n        s: s,\n        l: l\n      });\n      return this.fromRGB(rgb.r, rgb.g, rgb.b);\n    }\n  });\n  Object.defineProperty(Color.prototype, \"toString\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this.toCSSHex();\n    }\n  });\n  /**\r\n   * Converts hex number into a new [[Color]] object.\r\n   *\r\n   * ```TypeScript\r\n   * Color.fromHex(0xff0000) // red\r\n   * ```\r\n   * ```JavaScript\r\n   * Color.fromHex(0xff0000) // red\r\n   * ```\r\n   *\r\n   * @param   hex  Hex color\r\n   * @return       Color\r\n   */\n\n  Object.defineProperty(Color, \"fromHex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (hex) {\n      return new Color(hex);\n    }\n  });\n  /**\r\n   * Converts RGB values to a new [[Color]] object.\r\n   *\r\n   * @param   r  R value\r\n   * @param   g  G value\r\n   * @param   b  B value\r\n   * @return     Color\r\n   */\n\n  Object.defineProperty(Color, \"fromRGB\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (r, g, b) {\n      return new Color((b | 0) + (g << 8) + (r << 16));\n    }\n  });\n  /**\r\n   * Converts RGB string to a new [[Color]] object.\r\n   *\r\n   * ```TypeScript\r\n   * Color.fromString(\"#ff0000\") // red\r\n   * ```\r\n   * ```JavaScript\r\n   * Color.fromString(\"#ff0000\") // red\r\n   * ```\r\n   *\r\n   * @param   s  RGB string\r\n   * @return     Color\r\n   */\n\n  Object.defineProperty(Color, \"fromString\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (s) {\n      return new Color(string2hex(s));\n    }\n  });\n  /**\r\n   * Converts CSS rgba() syntax to a new [[Color]] object.\r\n   *\r\n   * ```TypeScript\r\n   * Color.fromCSS(\"rgba(255, 0, 0, 1)\") // red\r\n   * ```\r\n   * ```JavaScript\r\n   * Color.fromCSS(\"rgba(255, 0, 0, 1)\") // red\r\n   * ```\r\n   *\r\n   * @param  {string} s [description]\r\n   * @return {Color}    [description]\r\n   */\n\n  Object.defineProperty(Color, \"fromCSS\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (s) {\n      return new Color(rgba2hex(s));\n    }\n  });\n  /**\r\n   * Convert to color from virtually anything.\r\n   *\r\n   * Will throw an exception if unable to resolve the color.\r\n   *\r\n   * @param   s  Source\r\n   * @return     Color\r\n   */\n\n  Object.defineProperty(Color, \"fromAny\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (s) {\n      if ($type.isString(s)) {\n        if (s[0] == \"#\") {\n          return Color.fromString(s);\n        } else if (s.substr(0, 3) == \"rgb\") {\n          return Color.fromCSS(s);\n        }\n      } else if ($type.isNumber(s)) {\n        return Color.fromHex(s);\n      } else if (s instanceof Color) {\n        return Color.fromHex(s.hex);\n      }\n\n      throw new Error(\"Unknown color syntax: \" + s);\n    }\n  });\n  /**\r\n   * Returns a new [[Color]] object based on either `lightAlternative` or\r\n   * `darkAlternative` depending on which one is more contrasting with\r\n   * the `color`.\r\n   *\r\n   * @param   color             Reference color\r\n   * @param   lightAlternative  Light color\r\n   * @param   darkAlternative   Dark color\r\n   * @return                    Alternative color\r\n   */\n\n  Object.defineProperty(Color, \"alternative\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (color, lightAlternative, darkAlternative) {\n      var rgb = $utils.alternativeColor({\n        r: color.r,\n        g: color.g,\n        b: color.b\n      }, lightAlternative ? {\n        r: lightAlternative.r,\n        g: lightAlternative.g,\n        b: lightAlternative.b\n      } : undefined, darkAlternative ? {\n        r: darkAlternative.r,\n        g: darkAlternative.g,\n        b: darkAlternative.b\n      } : undefined);\n      return this.fromRGB(rgb.r, rgb.g, rgb.b);\n    }\n  });\n  /**\r\n   * Returns an intermediate Color between two reference colors depending on\r\n   * the progress (`diff`) between the two.\r\n   *\r\n   * @param   diff  Progress\r\n   * @param   from  Source color\r\n   * @param   to    Target color\r\n   * @param   mode  Interpolation mode\r\n   * @return        Color\r\n   */\n\n  Object.defineProperty(Color, \"interpolate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (diff, from, to, mode) {\n      if (mode === void 0) {\n        mode = \"rgb\";\n      }\n\n      if (mode == \"hsl\") {\n        var fromHSL = from.toHSL();\n        var toHSL = to.toHSL();\n        return Color.fromHSL(range(diff, fromHSL.h, toHSL.h), range(diff, fromHSL.s, toHSL.s), range(diff, fromHSL.l, toHSL.l));\n      } else {\n        return Color.fromRGB(range(diff, from.r, to.r), range(diff, from.g, to.g), range(diff, from.b, to.b));\n      }\n    }\n  });\n  /**\r\n   * Returns a new [[Color]] lightened by `percent` value.\r\n   *\r\n   * Use negative value to darken the color.\r\n   *\r\n   * @param   color    Source color\r\n   * @param   percent  Percent\r\n   * @return           New color\r\n   */\n\n  Object.defineProperty(Color, \"lighten\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (color, percent) {\n      var rgb = $utils.lighten({\n        r: color.r,\n        g: color.g,\n        b: color.b\n      }, percent);\n      return Color.fromRGB(rgb.r, rgb.g, rgb.b);\n    }\n  });\n  /**\r\n   * Returns a new [[Color]] brightened by `percent` value.\r\n   *\r\n   * Use negative value to dim the color.\r\n   *\r\n   * @param   color    Source color\r\n   * @param   percent  Percent\r\n   * @return           New color\r\n   */\n\n  Object.defineProperty(Color, \"brighten\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (color, percent) {\n      var rgb = $utils.brighten({\n        r: color.r,\n        g: color.g,\n        b: color.b\n      }, percent);\n      return Color.fromRGB(rgb.r, rgb.g, rgb.b);\n    }\n  });\n  /**\r\n   * Returns a new [[Color]] saturated by `percent` value.\r\n   *\r\n   * Use negative value to desaturate the color.\r\n   *\r\n   * @param   color    Source color\r\n   * @param   percent  Percent\r\n   * @return           New color\r\n   */\n\n  Object.defineProperty(Color, \"saturate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (color, percent) {\n      var rgb = $utils.saturate({\n        r: color.r,\n        g: color.g,\n        b: color.b\n      }, percent);\n      return Color.fromRGB(rgb.r, rgb.g, rgb.b);\n    }\n  });\n  return Color;\n}();\n\nexport { Color };","map":{"version":3,"sources":["../../../../../src/.internal/core/util/Color.ts"],"names":[],"mappings":"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","sourcesContent":["import { range, Time } from \"./Animation\";\nimport * as $utils from \"./Utils\";\nimport * as $type from \"./Type\";\n\n/**\n * @ignore\n */\nfunction string2hex(string: string): number {\n\t//string = cssColorNames[string.toLowerCase()] || string;\n\n\tif (string[0] === \"#\") {\n\t\tstring = string.substr(1);\n\t}\n\tif (string.length == 3) {\n\t\tstring = string[0].repeat(2) + string[1].repeat(2) + string[2].repeat(2);\n\t}\n\n\treturn parseInt(string, 16);\n}\n\n/**\n * @ignore\n */\nexport function rgba2hex(color: string): number {\n\tcolor = color.replace(/[ ]/g, \"\");\n\n\t// Init\n\tlet matches: string[] | null = color.match(/^rgb\\(([0-9]*),([0-9]*),([0-9]*)\\)/i);\n\n\t// Try rgb() format\n\tif (matches) {\n\t\tmatches.push(\"1\");\n\n\t} else {\n\t\tmatches = color.match(/^rgba\\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\\)/i);\n\n\t\tif (!matches) {\n\t\t\treturn 0x000000;\n\t\t}\n\t}\n\n\tlet hex = \"\";\n\tfor (let i = 1; i <= 3; i++) {\n\t\tlet val = parseInt(matches[i]).toString(16);\n\t\tif (val.length == 1) {\n\t\t\tval = \"0\" + val;\n\t\t}\n\t\thex += val;\n\t}\n\n\treturn string2hex(hex);\n\n}\n\n/**\n * Returns a new [[Color]] object base on input.\n *\n * Accepts parameters in CSS hex or rgb/rtba strings, or hex numbers.\n *\n * * `\"#f00\"`\n * * `\"#ff0000\"`\n * * `\"rgb(255, 0, 0)\"`\n * * `\"rgba(255, 0, 0, 1)\"`\n * * `0xff0000`\n * \n * @param   input  Input color\n * @return         Color\n */\nexport function color(input: number | string): Color {\n\treturn Color.fromAny(input);\n}\n\n/**\n * Wherever color needs to be specified in amCharts 5, `Color` object needs to\n * be used.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/} for more info\n * @important\n */\nexport class Color {\n\tprotected _hex: number;\n\n\tprivate constructor(hex: number) {\n\t\tthis._hex = hex | 0;\n\t}\n\n\t/**\n\t * Color numeric value.\n\t */\n\tpublic get hex(): number {\n\t\treturn this._hex;\n\t}\n\n\t/**\n\t * Value of color's R channel.\n\t * @return R value\n\t */\n\tpublic get r(): number {\n\t\treturn this._hex >>> 16;\n\t}\n\n\t/**\n\t * Value of color's G channel.\n\t * @return G value\n\t */\n\tpublic get g(): number {\n\t\treturn (this._hex >> 8) & 0xFF;\n\t}\n\n\t/**\n\t * Value of color's B channel.\n\t * @return B value\n\t */\n\tpublic get b(): number {\n\t\treturn this._hex & 0xFF;\n\t}\n\n\t/**\n\t * Returns color CSS representation in form of `rgba(r, g, b, a)` string.\n\t * \n\t * @param   alpha  Opacity\n\t * @return         CSS string\n\t */\n\tpublic toCSS(alpha: number = 1): string {\n\t\treturn \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + alpha + \")\";\n\t}\n\n\t/**\n\t * Returns color CSS representation in form of `#rgb` string.\n\t * \n\t * @return         CSS string\n\t */\n\tpublic toCSSHex(): string {\n\t\treturn \"#\" + $utils.padString(this.r.toString(16), 2) + $utils.padString(this.g.toString(16), 2) + $utils.padString(this.b.toString(16), 2);\n\t}\n\n\t/**\n\t * Returns color's HSL info.\n\t * @param   alpha Opacity\n\t * @return        HSL info\n\t */\n\tpublic toHSL(alpha: number = 1): $utils.iHSL {\n\t\treturn $utils.rgbToHsl({\n\t\t\tr: this.r,\n\t\t\tg: this.g,\n\t\t\tb: this.b,\n\t\t\ta: alpha\n\t\t})\n\t}\n\n\t/**\n\t * Converts HSL values into a new [[Color]] object.\n\t *\n\t * @param   h H value\n\t * @param   s S value\n\t * @param   l L value\n\t * @return    Color object\n\t */\n\tpublic static fromHSL(h: number, s: number, l: number): Color {\n\t\tconst rgb = $utils.hslToRgb({\n\t\t\th: h,\n\t\t\ts: s,\n\t\t\tl: l\n\t\t});\n\t\treturn this.fromRGB(rgb.r, rgb.g, rgb.b);\n\t}\n\n\tpublic toString(): string {\n\t\treturn this.toCSSHex();\n\t}\n\n\t/**\n\t * Converts hex number into a new [[Color]] object.\n\t *\n\t * ```TypeScript\n\t * Color.fromHex(0xff0000) // red\n\t * ```\n\t * ```JavaScript\n\t * Color.fromHex(0xff0000) // red\n\t * ```\n\t *\n\t * @param   hex  Hex color\n\t * @return       Color\n\t */\n\tpublic static fromHex(hex: number): Color {\n\t\treturn new Color(hex);\n\t}\n\n\t/**\n\t * Converts RGB values to a new [[Color]] object.\n\t *\n\t * @param   r  R value\n\t * @param   g  G value\n\t * @param   b  B value\n\t * @return     Color\n\t */\n\tpublic static fromRGB(r: number, g: number, b: number): Color {\n\t\treturn new Color((b | 0) + (g << 8) + (r << 16));\n\t}\n\n\t/**\n\t * Converts RGB string to a new [[Color]] object.\n\t *\n\t * ```TypeScript\n\t * Color.fromString(\"#ff0000\") // red\n\t * ```\n\t * ```JavaScript\n\t * Color.fromString(\"#ff0000\") // red\n\t * ```\n\t *\n\t * @param   s  RGB string\n\t * @return     Color\n\t */\n\tpublic static fromString(s: string): Color {\n\t\treturn new Color(string2hex(s));\n\t}\n\n\t/**\n\t * Converts CSS rgba() syntax to a new [[Color]] object.\n\t *\n\t * ```TypeScript\n\t * Color.fromCSS(\"rgba(255, 0, 0, 1)\") // red\n\t * ```\n\t * ```JavaScript\n\t * Color.fromCSS(\"rgba(255, 0, 0, 1)\") // red\n\t * ```\n\t *\n\t * @param  {string} s [description]\n\t * @return {Color}    [description]\n\t */\n\tpublic static fromCSS(s: string): Color {\n\t\treturn new Color(rgba2hex(s));\n\t}\n\n\t/**\n\t * Convert to color from virtually anything.\n\t *\n\t * Will throw an exception if unable to resolve the color.\n\t *\n\t * @param   s  Source\n\t * @return     Color\n\t */\n\tpublic static fromAny(s: string | number | Color): Color {\n\t\tif ($type.isString(s)) {\n\t\t\tif (s[0] == \"#\") {\n\t\t\t\treturn Color.fromString(s);\n\t\t\t}\n\t\t\telse if (s.substr(0, 3) == \"rgb\") {\n\t\t\t\treturn Color.fromCSS(s);\n\t\t\t}\n\t\t}\n\t\telse if ($type.isNumber(s)) {\n\t\t\treturn Color.fromHex(s);\n\t\t}\n\t\telse if (s instanceof Color) {\n\t\t\treturn Color.fromHex(s.hex);\n\t\t}\n\n\t\tthrow new Error(\"Unknown color syntax: \" + s);\n\t}\n\n\t/**\n\t * Returns a new [[Color]] object based on either `lightAlternative` or\n\t * `darkAlternative` depending on which one is more contrasting with\n\t * the `color`.\n\t *\n\t * @param   color             Reference color\n\t * @param   lightAlternative  Light color\n\t * @param   darkAlternative   Dark color\n\t * @return                    Alternative color\n\t */\n\tpublic static alternative(color: Color, lightAlternative?: Color, darkAlternative?: Color): Color {\n\t\tconst rgb = $utils.alternativeColor(\n\t\t\t{ r: color.r, g: color.g, b: color.b },\n\t\t\tlightAlternative ? { r: lightAlternative.r, g: lightAlternative.g, b: lightAlternative.b } : undefined,\n\t\t\tdarkAlternative ? { r: darkAlternative.r, g: darkAlternative.g, b: darkAlternative.b } : undefined\n\t\t);\n\t\treturn this.fromRGB(rgb.r, rgb.g, rgb.b);\n\t}\n\n\t/**\n\t * Returns an intermediate Color between two reference colors depending on\n\t * the progress (`diff`) between the two.\n\t *\n\t * @param   diff  Progress\n\t * @param   from  Source color\n\t * @param   to    Target color\n\t * @param   mode  Interpolation mode\n\t * @return        Color\n\t */\n\tpublic static interpolate(diff: Time, from: Color, to: Color, mode: \"rgb\" | \"hsl\" = \"rgb\"): Color {\n\t\tif (mode == \"hsl\") {\n\t\t\tconst fromHSL = from.toHSL();\n\t\t\tconst toHSL = to.toHSL();\n\t\t\treturn Color.fromHSL(\n\t\t\t\trange(diff, fromHSL.h, toHSL.h),\n\t\t\t\trange(diff, fromHSL.s, toHSL.s),\n\t\t\t\trange(diff, fromHSL.l, toHSL.l)\n\t\t\t);\n\t\t}\n\t\telse {\n\t\t\treturn Color.fromRGB(\n\t\t\t\trange(diff, from.r, to.r),\n\t\t\t\trange(diff, from.g, to.g),\n\t\t\t\trange(diff, from.b, to.b)\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a new [[Color]] lightened by `percent` value.\n\t *\n\t * Use negative value to darken the color.\n\t *\n\t * @param   color    Source color\n\t * @param   percent  Percent\n\t * @return           New color\n\t */\n\tpublic static lighten(color: Color, percent: number): Color {\n\t\tconst rgb = $utils.lighten({ r: color.r, g: color.g, b: color.b }, percent);\n\t\treturn Color.fromRGB(rgb!.r, rgb!.g, rgb!.b);\n\t}\n\n\t/**\n\t * Returns a new [[Color]] brightened by `percent` value.\n\t *\n\t * Use negative value to dim the color.\n\t *\n\t * @param   color    Source color\n\t * @param   percent  Percent\n\t * @return           New color\n\t */\n\tpublic static brighten(color: Color, percent: number): Color {\n\t\tconst rgb = $utils.brighten({ r: color.r, g: color.g, b: color.b }, percent);\n\t\treturn Color.fromRGB(rgb!.r, rgb!.g, rgb!.b);\n\t}\n\n\t/**\n\t * Returns a new [[Color]] saturated by `percent` value.\n\t *\n\t * Use negative value to desaturate the color.\n\t *\n\t * @param   color    Source color\n\t * @param   percent  Percent\n\t * @return           New color\n\t */\n\tpublic static saturate(color: Color, percent: number): Color {\n\t\tconst rgb = $utils.saturate({ r: color.r, g: color.g, b: color.b }, percent);\n\t\treturn Color.fromRGB(rgb!.r, rgb!.g, rgb!.b);\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}