{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Layout } from \"./Layout\";\nimport * as $array from \"../util/Array\";\nimport * as $math from \"../util/Math\";\n/**\r\n * A grid children layout for [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\r\n */\nvar GridLayout = /** @class */function (_super) {\n  __extends(GridLayout, _super);\n  function GridLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(GridLayout.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._setRawDefault(\"maxColumns\", Number.MAX_VALUE);\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n  Object.defineProperty(GridLayout.prototype, \"updateContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (container) {\n      var paddingLeft = container.get(\"paddingLeft\", 0);\n      var paddingRight = container.get(\"paddingRight\", 0);\n      var paddingTop = container.get(\"paddingTop\", 0);\n      var availableWidth = container.maxWidth() - paddingLeft - paddingRight;\n      var minCellWidth = availableWidth;\n      var maxCellWidth = 1;\n      container.children.each(function (child) {\n        if (child.get(\"position\") != \"absolute\") {\n          var childWidth = child.width();\n          if (childWidth < minCellWidth) {\n            minCellWidth = childWidth;\n          }\n          if (childWidth > maxCellWidth) {\n            maxCellWidth = childWidth;\n          }\n        }\n      });\n      minCellWidth = $math.fitToRange(minCellWidth, 1, availableWidth);\n      maxCellWidth = $math.fitToRange(maxCellWidth, 1, availableWidth);\n      var columnCount = 1;\n      if (this.get(\"fixedWidthGrid\")) {\n        columnCount = availableWidth / maxCellWidth;\n      } else {\n        columnCount = availableWidth / minCellWidth;\n      }\n      columnCount = Math.max(1, Math.floor(columnCount));\n      columnCount = Math.min(this.get(\"maxColumns\", Number.MAX_VALUE), columnCount);\n      var columnWidths = this.getColumnWidths(container.children, columnCount, maxCellWidth, availableWidth);\n      var prevY = paddingTop;\n      var column = 0;\n      var maxColumnHeight = 0;\n      columnCount = columnWidths.length;\n      var prevX = paddingLeft;\n      container.children.each(function (child) {\n        if (child.get(\"position\") == \"relative\") {\n          var marginTop = child.get(\"marginTop\", 0);\n          var marginBottom = child.get(\"marginBottom\", 0);\n          var bounds = child.adjustedLocalBounds();\n          var marginLeft = child.get(\"marginLeft\", 0);\n          var marginRight = child.get(\"marginRight\", 0);\n          var x = prevX + marginLeft - bounds.left;\n          var y = prevY + marginTop - bounds.top;\n          child.setPrivate(\"x\", x);\n          child.setPrivate(\"y\", y);\n          prevX += columnWidths[column] + marginRight;\n          maxColumnHeight = Math.max(maxColumnHeight, child.height() + marginTop + marginBottom);\n          column++;\n          if (column >= columnCount) {\n            column = 0;\n            prevX = paddingLeft;\n            prevY += maxColumnHeight;\n          }\n        }\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n  Object.defineProperty(GridLayout.prototype, \"getColumnWidths\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (children, columnCount, maxCellWidth, availableWidth) {\n      var _this = this;\n      var totalWidth = 0;\n      var columnWidths = [];\n      var column = 0;\n      children.each(function (child) {\n        var bounds = child.adjustedLocalBounds();\n        if (child.get(\"position\") != \"absolute\") {\n          if (_this.get(\"fixedWidthGrid\")) {\n            columnWidths[column] = maxCellWidth;\n          } else {\n            columnWidths[column] = Math.max(columnWidths[column] | 0, bounds.right - bounds.left + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0));\n          }\n          if (column < children.length - 1) {\n            column++;\n            if (column == columnCount) {\n              column = 0;\n            }\n          }\n        }\n      });\n      $array.each(columnWidths, function (w) {\n        totalWidth += w;\n      });\n      if (totalWidth > availableWidth) {\n        if (columnCount > 2) {\n          columnCount -= 1;\n          return this.getColumnWidths(children, columnCount, maxCellWidth, availableWidth);\n        } else {\n          return [availableWidth];\n        }\n      }\n      return columnWidths;\n    }\n  });\n  Object.defineProperty(GridLayout, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"GridLayout\"\n  });\n  Object.defineProperty(GridLayout, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Layout.classNames.concat([GridLayout.className])\n  });\n  return GridLayout;\n}(Layout);\nexport { GridLayout };","map":{"version":3,"names":["Layout","$array","$math","GridLayout","_super","__extends","value","_setRawDefault","Number","MAX_VALUE","prototype","_afterNew","call","container","paddingLeft","get","paddingRight","paddingTop","availableWidth","maxWidth","minCellWidth","maxCellWidth","children","each","child","childWidth","width","fitToRange","columnCount","Math","max","floor","min","columnWidths","getColumnWidths","prevY","column","maxColumnHeight","length","prevX","marginTop","marginBottom","bounds","adjustedLocalBounds","marginLeft","marginRight","x","left","y","top","setPrivate","height","_this","totalWidth","right","w","Object","defineProperty","classNames","concat","className"],"sources":["../../../../../src/.internal/core/render/GridLayout.ts"],"sourcesContent":["import { Layout, ILayoutSettings, ILayoutPrivate } from \"./Layout\";\nimport * as $array from \"../util/Array\";\nimport * as $math from \"../util/Math\";\nimport type { Container } from \"./Container\";\nimport type { List } from \"../util/List\";\nimport type { Sprite } from \"./Sprite\";\n\n\nexport interface IGridLayoutSettings extends ILayoutSettings {\n\n\t/**\n\t * If set to `true` all columns in the grid will be equal width.\n\t *\n\t * @default false\n\t */\n\tfixedWidthGrid?: boolean;\n\n\t/**\n\t * Maximum number of columns in the grid.\n\t */\n\tmaxColumns?: number;\n\n}\n\nexport interface IGridLayoutPrivate extends ILayoutPrivate {\n}\n\n/**\n * A grid children layout for [[Container]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\n */\nexport class GridLayout extends Layout {\n\n\tpublic static className: string = \"GridLayout\";\n\tpublic static classNames: Array<string> = Layout.classNames.concat([GridLayout.className]);\n\n\tdeclare public _settings: IGridLayoutSettings;\n\tdeclare public _privateSettings: IGridLayoutPrivate;\n\n\n\tprotected _afterNew() {\n\t\tthis._setRawDefault(\"maxColumns\", Number.MAX_VALUE);\n\t\tsuper._afterNew();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateContainer(container: Container): void {\n\t\tlet paddingLeft = container.get(\"paddingLeft\", 0);\n\t\tlet paddingRight = container.get(\"paddingRight\", 0);\n\t\tlet paddingTop = container.get(\"paddingTop\", 0);\n\n\t\tlet availableWidth = container.maxWidth() - paddingLeft - paddingRight;\n\n\t\tlet minCellWidth = availableWidth;\n\t\tlet maxCellWidth = 1;\n\n\t\tcontainer.children.each((child) => {\n\t\t\tif (child.get(\"position\") != \"absolute\") {\n\t\t\t\tlet childWidth = child.width();\n\n\t\t\t\tif (childWidth < minCellWidth) {\n\t\t\t\t\tminCellWidth = childWidth;\n\t\t\t\t}\n\t\t\t\tif (childWidth > maxCellWidth) {\n\t\t\t\t\tmaxCellWidth = childWidth;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tminCellWidth = $math.fitToRange(minCellWidth, 1, availableWidth);\n\t\tmaxCellWidth = $math.fitToRange(maxCellWidth, 1, availableWidth);\n\n\t\tlet columnCount = 1;\n\t\tif (this.get(\"fixedWidthGrid\")) {\n\t\t\tcolumnCount = availableWidth / maxCellWidth;\n\t\t}\n\t\telse {\n\t\t\tcolumnCount = availableWidth / minCellWidth;\n\t\t}\n\n\t\tcolumnCount = Math.max(1, Math.floor(columnCount));\n\t\tcolumnCount = Math.min(this.get(\"maxColumns\", Number.MAX_VALUE), columnCount);\n\n\t\tlet columnWidths = this.getColumnWidths(container.children, columnCount, maxCellWidth, availableWidth);\n\n\t\tlet prevY = paddingTop;\n\n\t\tlet column = 0;\n\t\tlet maxColumnHeight = 0;\n\n\t\tcolumnCount = columnWidths.length;\n\n\t\tlet prevX = paddingLeft;\n\n\t\tcontainer.children.each((child) => {\n\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\tconst marginTop = child.get(\"marginTop\", 0);\n\t\t\t\tconst marginBottom = child.get(\"marginBottom\", 0);\n\n\t\t\t\tlet bounds = child.adjustedLocalBounds();\n\t\t\t\tlet marginLeft = child.get(\"marginLeft\", 0);\n\t\t\t\tlet marginRight = child.get(\"marginRight\", 0);\n\t\t\t\tlet x = prevX + marginLeft - bounds.left;\n\t\t\t\tlet y = prevY + marginTop - bounds.top;\n\n\t\t\t\tchild.setPrivate(\"x\", x);\n\t\t\t\tchild.setPrivate(\"y\", y);\n\n\t\t\t\tprevX += columnWidths[column] + marginRight;\n\n\t\t\t\tmaxColumnHeight = Math.max(maxColumnHeight, child.height() + marginTop + marginBottom);\n\n\t\t\t\tcolumn++;\n\n\t\t\t\tif (column >= columnCount) {\n\t\t\t\t\tcolumn = 0;\n\t\t\t\t\tprevX = paddingLeft;\n\t\t\t\t\tprevY += maxColumnHeight;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getColumnWidths(children: List<Sprite>, columnCount: number, maxCellWidth: number, availableWidth: number): number[] {\n\t\tlet totalWidth = 0;\n\t\tlet columnWidths: Array<number> = [];\n\t\tlet column = 0;\n\n\t\tchildren.each((child) => {\n\t\t\tlet bounds = child.adjustedLocalBounds();\n\t\t\tif (child.get(\"position\") != \"absolute\") {\n\t\t\t\tif (this.get(\"fixedWidthGrid\")) {\n\t\t\t\t\tcolumnWidths[column] = maxCellWidth;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcolumnWidths[column] = Math.max(columnWidths[column] | 0, bounds.right - bounds.left + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0));\n\t\t\t\t}\n\n\t\t\t\tif (column < children.length - 1) {\n\t\t\t\t\tcolumn++;\n\n\t\t\t\t\tif (column == columnCount) {\n\t\t\t\t\t\tcolumn = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t$array.each(columnWidths, (w) => {\n\t\t\ttotalWidth += w;\n\t\t})\n\n\t\tif (totalWidth > availableWidth) {\n\t\t\tif (columnCount > 2) {\n\t\t\t\tcolumnCount -= 1;\n\t\t\t\treturn this.getColumnWidths(children, columnCount, maxCellWidth, availableWidth);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn [availableWidth];\n\t\t\t}\n\t\t}\n\n\t\treturn columnWidths;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}