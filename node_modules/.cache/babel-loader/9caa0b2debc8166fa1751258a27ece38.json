{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\n/**\r\n * Used to render horizontal axis.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\r\n * @important\r\n */\n\nvar AxisRendererX =\n/** @class */\nfunction (_super) {\n  __extends(AxisRendererX, _super);\n\n  function AxisRendererX() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"thumb\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Rectangle.new(_this._root, {\n        width: p100,\n        themeTags: [\"axis\", \"x\", \"thumb\"]\n      })\n    });\n    return _this;\n  }\n\n  Object.defineProperty(AxisRendererX.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"x\"]);\n\n      _super.prototype._afterNew.call(this);\n\n      this.setPrivateRaw(\"letter\", \"X\");\n      var gridTemplate = this.grid.template;\n      gridTemplate.set(\"height\", p100);\n      gridTemplate.set(\"width\", 0);\n      gridTemplate.set(\"draw\", function (display, graphics) {\n        display.moveTo(0, 0);\n        display.lineTo(0, graphics.height());\n      });\n      this.set(\"draw\", function (display, graphics) {\n        display.moveTo(0, 0);\n        display.lineTo(graphics.width(), 0);\n      });\n    }\n  });\n  Object.defineProperty(AxisRendererX.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      _super.prototype._changed.call(this);\n\n      var axis = this.axis;\n\n      if (this.isDirty(\"inside\")) {\n        axis.markDirtySize();\n      }\n\n      var opposite = \"opposite\";\n\n      if (this.isDirty(opposite)) {\n        var chart = this.chart;\n\n        if (chart) {\n          var axisChildren = axis.children;\n\n          if (this.get(opposite)) {\n            var children = chart.topAxesContainer.children;\n\n            if (children.indexOf(axis) == -1) {\n              children.insertIndex(0, axis);\n            }\n\n            axisChildren.moveValue(this);\n            axis.addTag(opposite);\n          } else {\n            var children = chart.bottomAxesContainer.children;\n\n            if (children.indexOf(axis) == -1) {\n              children.moveValue(axis);\n            }\n\n            axisChildren.moveValue(this, 0);\n            axis.removeTag(opposite);\n          }\n\n          axis.markDirtySize();\n        }\n\n        axis.ghostLabel._applyThemes();\n      }\n\n      this.thumb.setPrivate(\"height\", axis.labelsContainer.height());\n    }\n  });\n  Object.defineProperty(AxisRendererX.prototype, \"_getPan\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(point1, point2) {\n      return (point2.x - point1.x) / this.width();\n    }\n  });\n  Object.defineProperty(AxisRendererX.prototype, \"toAxisPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(position) {\n      var start = this._start || 0;\n      var end = this._end || 1;\n      position -= this._ls;\n      position = position * (end - start) / this._lc;\n\n      if (!this.get(\"inversed\")) {\n        position = start + position;\n      } else {\n        position = end - position;\n      }\n\n      return position;\n    }\n  });\n  Object.defineProperty(AxisRendererX.prototype, \"_updateLC\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var axis = this.axis;\n      var parent = axis.parent;\n\n      if (parent) {\n        var w = parent.innerWidth();\n        this._lc = this.axisLength() / w;\n        this._ls = (axis.x() - parent.get(\"paddingLeft\", 0)) / w;\n      }\n    }\n  });\n  Object.defineProperty(AxisRendererX.prototype, \"_updatePositions\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var axis = this.axis;\n      axis.gridContainer.set(\"x\", axis.x() - $utils.relativeToValue(axis.get(\"centerX\", 0), axis.width()) - axis.parent.get(\"paddingLeft\", 0));\n      axis.bulletsContainer.set(\"y\", this.y());\n      var chart = axis.chart;\n\n      if (chart) {\n        var plotContainer = chart.plotContainer;\n        var axisHeader = axis.axisHeader;\n        var width = axis.get(\"marginLeft\", 0);\n        var x = axis.x() - width;\n        var parent_1 = axis.parent;\n\n        if (parent_1) {\n          x -= parent_1.get(\"paddingLeft\", 0);\n        }\n\n        if (axisHeader.children.length > 0) {\n          width = axis.axisHeader.width();\n          axis.set(\"marginLeft\", width);\n        } else {\n          axisHeader.set(\"width\", width);\n        }\n\n        axisHeader.setAll({\n          x: x,\n          y: -1,\n          height: plotContainer.height() + 2\n        });\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"processAxis\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      _super.prototype.processAxis.call(this);\n\n      var axis = this.axis;\n      axis.set(\"width\", p100);\n      var verticalLayout = this._root.verticalLayout;\n      axis.set(\"layout\", verticalLayout);\n      axis.labelsContainer.set(\"width\", p100);\n      axis.axisHeader.setAll({\n        layout: verticalLayout\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"axisLength\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      return this.axis.width();\n    }\n  });\n  /**\r\n   * Converts axis relative position to actual coordinate in pixels.\r\n   *\r\n   * @param   position  Position\r\n   * @return            Point\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"positionToPoint\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(position) {\n      return {\n        x: this.positionToCoordinate(position),\n        y: 0\n      };\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"updateTick\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(tick, position, endPosition, count) {\n      if (tick) {\n        if (!$type.isNumber(position)) {\n          position = 0;\n        }\n\n        var location_1 = 0.5;\n\n        if ($type.isNumber(count) && count > 1) {\n          location_1 = tick.get(\"multiLocation\", location_1);\n        } else {\n          location_1 = tick.get(\"location\", location_1);\n        }\n\n        if ($type.isNumber(endPosition) && endPosition != position) {\n          position = position + (endPosition - position) * location_1;\n        }\n\n        tick.set(\"x\", this.positionToCoordinate(position));\n        var length_1 = tick.get(\"length\", 0);\n        var inside = tick.get(\"inside\", this.get(\"inside\", false));\n\n        if (this.get(\"opposite\")) {\n          tick.set(\"y\", p100);\n\n          if (!inside) {\n            length_1 *= -1;\n          }\n        } else {\n          tick.set(\"y\", 0);\n\n          if (inside) {\n            length_1 *= -1;\n          }\n        }\n\n        tick.set(\"draw\", function (display) {\n          display.moveTo(0, 0);\n          display.lineTo(0, length_1);\n        });\n        this.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"updateLabel\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(label, position, endPosition, count) {\n      if (label) {\n        var location_2 = 0.5;\n\n        if ($type.isNumber(count) && count > 1) {\n          location_2 = label.get(\"multiLocation\", location_2);\n        } else {\n          location_2 = label.get(\"location\", location_2);\n        }\n\n        if (!$type.isNumber(position)) {\n          position = 0;\n        }\n\n        var inside = label.get(\"inside\", this.get(\"inside\", false));\n        var opposite = this.get(\"opposite\");\n\n        if (opposite) {\n          if (!inside) {\n            label.set(\"position\", \"relative\");\n            label.set(\"y\", p100);\n          } else {\n            label.set(\"position\", \"absolute\");\n            label.set(\"y\", 0);\n          }\n        } else {\n          if (!inside) {\n            label.set(\"y\", undefined);\n            label.set(\"position\", \"relative\");\n          } else {\n            label.set(\"y\", 0);\n            label.set(\"position\", \"absolute\");\n          }\n        }\n\n        if ($type.isNumber(endPosition) && endPosition != position) {\n          position = position + (endPosition - position) * location_2;\n        }\n\n        label.set(\"x\", this.positionToCoordinate(position));\n        this.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"updateGrid\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(grid, position, endPosition) {\n      if (grid) {\n        if (!$type.isNumber(position)) {\n          position = 0;\n        }\n\n        var location_3 = grid.get(\"location\", 0.5);\n\n        if ($type.isNumber(endPosition) && endPosition != position) {\n          position = position + (endPosition - position) * location_3;\n        }\n\n        grid.set(\"x\", Math.round(this.positionToCoordinate(position)));\n        this.toggleVisibility(grid, position, 0, 1);\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"updateBullet\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(bullet, position, endPosition) {\n      if (bullet) {\n        var sprite = bullet.get(\"sprite\");\n\n        if (sprite) {\n          if (!$type.isNumber(position)) {\n            position = 0;\n          }\n\n          var location_4 = bullet.get(\"location\", 0.5);\n\n          if ($type.isNumber(endPosition) && endPosition != position) {\n            position = position + (endPosition - position) * location_4;\n          }\n\n          sprite.set(\"x\", this.positionToCoordinate(position));\n          this.toggleVisibility(sprite, position, 0, 1);\n        }\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"updateFill\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(fill, position, endPosition) {\n      if (fill) {\n        if (!$type.isNumber(position)) {\n          position = 0;\n        }\n\n        if (!$type.isNumber(endPosition)) {\n          endPosition = 1;\n        }\n\n        var x0 = this.positionToCoordinate(position);\n        var x1 = this.positionToCoordinate(endPosition);\n        this.fillDrawMethod(fill, x0, x1);\n      }\n    }\n  });\n  Object.defineProperty(AxisRendererX.prototype, \"fillDrawMethod\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(fill, x0, x1) {\n      var _this = this;\n\n      fill.set(\"draw\", function (display) {\n        var _a; //display.drawRect(x0, 0, x1 - x0, this.axis!.gridContainer.height());\n        // using for holes, so can not be rectangle\n\n\n        var h = _this.axis.gridContainer.height();\n\n        var w = _this.width();\n\n        if (x1 < x0) {\n          _a = __read([x0, x1], 2), x1 = _a[0], x0 = _a[1];\n        }\n\n        if (x0 > w || x1 < 0) {\n          return;\n        }\n\n        x0 = Math.max(0, x0);\n        x1 = Math.min(w, x1);\n        display.moveTo(x0, 0);\n        display.lineTo(x1, 0);\n        display.lineTo(x1, h);\n        display.lineTo(x0, h);\n        display.lineTo(x0, 0);\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"positionTooltip\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(tooltip, position) {\n      this._positionTooltip(tooltip, {\n        x: this.positionToCoordinate(position),\n        y: 0\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"updateTooltipBounds\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(tooltip) {\n      var inside = this.get(\"inside\");\n      var num = 100000;\n\n      var global = this._display.toGlobal({\n        x: 0,\n        y: 0\n      });\n\n      var x = global.x;\n      var y = 0;\n      var w = this.axisLength();\n      var h = num;\n      var pointerOrientation = \"up\";\n\n      if (this.get(\"opposite\")) {\n        if (inside) {\n          pointerOrientation = \"up\";\n          y = global.y;\n          h = num;\n        } else {\n          pointerOrientation = \"down\";\n          y = global.y - num;\n          h = num;\n        }\n      } else {\n        if (inside) {\n          pointerOrientation = \"down\";\n          y = global.y - num;\n          h = num;\n        } else {\n          pointerOrientation = \"up\";\n          y = global.y;\n          h = num;\n        }\n      }\n\n      var bounds = {\n        left: x,\n        right: x + w,\n        top: y,\n        bottom: y + h\n      };\n      var oldBounds = tooltip.get(\"bounds\");\n\n      if (!$utils.sameBounds(bounds, oldBounds)) {\n        tooltip.set(\"bounds\", bounds);\n        tooltip.set(\"pointerOrientation\", pointerOrientation);\n      }\n    }\n  });\n  Object.defineProperty(AxisRendererX, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"AxisRendererX\"\n  });\n  Object.defineProperty(AxisRendererX, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: AxisRenderer.classNames.concat([AxisRendererX.className])\n  });\n  return AxisRendererX;\n}(AxisRenderer);\n\nexport { AxisRendererX };","map":{"version":3,"sources":["../../../../../../src/.internal/charts/xy/axes/AxisRendererX.ts"],"names":[],"mappings":"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","sourcesContent":["import { AxisRenderer, IAxisRendererSettings, IAxisRendererPrivate } from \"./AxisRenderer\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport type { IPoint } from \"../../../core/util/IPoint\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport type { AxisLabel } from \"./AxisLabel\";\nimport type { Grid } from \"./Grid\";\nimport type { AxisTick } from \"./AxisTick\";\nimport type { Graphics } from \"../../../core/render/Graphics\";\nimport type { Tooltip } from \"../../../core/render/Tooltip\";\nimport type { Template } from \"../../../core/util/Template\";\nimport type { AxisBullet } from \"./AxisBullet\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\n\n\nexport interface IAxisRendererXSettings extends IAxisRendererSettings {\n\n\t/**\n\t * If set to `true` the axis will be drawn on the opposite side of the plot\n\t * area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Axis_position} for more info\n\t * @default false\n\t */\n\topposite?: boolean;\n\n\t/**\n\t * If set to `true`, all axis elements (ticks, labels) will be drawn inside\n\t * plot area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Labels_ticks_inside_plot_area} for more info\n\t * @default false\n\t */\n\tinside?: boolean;\n}\n\nexport interface IAxisRendererXPrivate extends IAxisRendererPrivate {\n}\n\n/**\n * Used to render horizontal axis.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\n * @important\n */\nexport class AxisRendererX extends AxisRenderer {\n\n\tpublic static className: string = \"AxisRendererX\";\n\tpublic static classNames: Array<string> = AxisRenderer.classNames.concat([AxisRendererX.className]);\n\n\tdeclare public _settings: IAxisRendererXSettings;\n\tdeclare public _privateSettings: IAxisRendererXPrivate;\n\n\tdeclare public readonly labelTemplate: Template<AxisLabel>;\n\n\tpublic thumb: Rectangle = Rectangle.new(this._root, { width: p100, themeTags: [\"axis\", \"x\", \"thumb\"] });\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"x\"]);\n\n\t\tsuper._afterNew();\n\t\tthis.setPrivateRaw(\"letter\", \"X\");\n\n\t\tconst gridTemplate = this.grid.template;\n\t\tgridTemplate.set(\"height\", p100);\n\t\tgridTemplate.set(\"width\", 0);\n\t\tgridTemplate.set(\"draw\", (display, graphics) => {\n\t\t\tdisplay.moveTo(0, 0);\n\t\t\tdisplay.lineTo(0, graphics.height());\n\t\t});\n\n\t\tthis.set(\"draw\", (display, graphics) => {\n\t\t\tdisplay.moveTo(0, 0);\n\t\t\tdisplay.lineTo(graphics.width(), 0);\n\t\t});\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tconst axis = this.axis;\n\t\tif (this.isDirty(\"inside\")) {\n\t\t\taxis.markDirtySize();\n\t\t}\n\t\t\n\t\tconst opposite = \"opposite\"\n\n\t\tif (this.isDirty(opposite)) {\n\t\t\tconst chart = this.chart;\n\n\t\t\tif (chart) {\n\t\t\t\tconst axisChildren = axis.children;\n\t\t\t\tif (this.get(opposite)) {\n\t\t\t\t\tconst children = chart.topAxesContainer.children;\n\t\t\t\t\tif (children.indexOf(axis) == -1) {\n\t\t\t\t\t\tchildren.insertIndex(0, axis);\n\t\t\t\t\t}\n\t\t\t\t\taxisChildren.moveValue(this);\n\t\t\t\t\taxis.addTag(opposite);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst children = chart.bottomAxesContainer.children;\n\t\t\t\t\tif (children.indexOf(axis) == -1) {\n\t\t\t\t\t\tchildren.moveValue(axis);\n\t\t\t\t\t}\n\t\t\t\t\taxisChildren.moveValue(this, 0);\n\t\t\t\t\taxis.removeTag(opposite);\n\t\t\t\t}\n\t\t\t\taxis.markDirtySize();\n\t\t\t}\n\t\t\taxis.ghostLabel._applyThemes();\n\t\t}\t\n\n\t\tthis.thumb.setPrivate(\"height\", axis.labelsContainer.height());\t\n\t}\n\n\n\tprotected _getPan(point1: IPoint, point2: IPoint): number {\n\t\treturn (point2.x - point1.x) / this.width();\n\t}\n\n\n\tpublic toAxisPosition(position: number): number {\n\t\tconst start = this._start || 0;\n\t\tconst end = this._end || 1;\n\n\t\tposition -= this._ls;\n\n\t\tposition = position * (end - start) / this._lc;\n\t\tif (!this.get(\"inversed\")) {\n\t\t\tposition = start + position;\n\t\t}\n\t\telse {\n\t\t\tposition = end - position;\n\t\t}\n\n\t\treturn position;\n\t}\n\n\n\tpublic _updateLC() {\n\t\tconst axis = this.axis;\n\t\tconst parent = axis.parent;\n\t\tif (parent) {\n\t\t\tconst w = parent.innerWidth();\n\t\t\tthis._lc = this.axisLength() / w;\n\t\t\tthis._ls = (axis.x() - parent.get(\"paddingLeft\", 0)) / w;\n\t\t}\n\t}\n\n\tpublic _updatePositions() {\n\t\tconst axis = this.axis;\n\t\taxis.gridContainer.set(\"x\", axis.x() - $utils.relativeToValue(axis.get(\"centerX\", 0), axis.width()) - axis.parent!.get(\"paddingLeft\", 0));\n\t\taxis.bulletsContainer.set(\"y\", this.y());\n\n\t\tconst chart = axis.chart;\n\t\tif (chart) {\n\t\t\tconst plotContainer = chart.plotContainer;\n\t\t\tconst axisHeader = axis.axisHeader;\n\t\t\tlet width = axis.get(\"marginLeft\", 0);\n\n\t\t\tlet x = axis.x() - width;\n\n\t\t\tconst parent = axis.parent;\n\t\t\tif (parent) {\n\t\t\t\tx -= parent.get(\"paddingLeft\", 0);\n\t\t\t}\n\n\t\t\tif (axisHeader.children.length > 0) {\n\t\t\t\twidth = axis.axisHeader.width();\n\t\t\t\taxis.set(\"marginLeft\", width);\n\t\t\t}\n\t\t\telse {\n\t\t\t\taxisHeader.set(\"width\", width);\n\t\t\t}\n\t\t\taxisHeader.setAll({ x: x, y: -1, height: plotContainer.height() + 2 });\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis() {\n\t\tsuper.processAxis();\n\t\tconst axis = this.axis;\n\t\taxis.set(\"width\", p100);\n\t\tconst verticalLayout = this._root.verticalLayout;\n\t\taxis.set(\"layout\", verticalLayout);\n\t\taxis.labelsContainer.set(\"width\", p100);\n\t\taxis.axisHeader.setAll({ layout: verticalLayout });\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic axisLength(): number {\n\t\treturn this.axis.width();\n\t}\n\n\t/**\n\t * Converts axis relative position to actual coordinate in pixels.\n\t *\n\t * @param   position  Position\n\t * @return            Point\n\t */\n\tpublic positionToPoint(position: number): IPoint {\n\t\treturn { x: this.positionToCoordinate(position), y: 0 };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTick(tick?: AxisTick, position?: number, endPosition?: number, count?: number) {\n\t\tif (tick) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = tick.get(\"multiLocation\", location)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = tick.get(\"location\", location)\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\ttick.set(\"x\", this.positionToCoordinate(position));\n\n\t\t\tlet length = tick.get(\"length\", 0);\n\t\t\tconst inside = tick.get(\"inside\", this.get(\"inside\", false));\n\n\t\t\tif (this.get(\"opposite\")) {\n\t\t\t\ttick.set(\"y\", p100);\n\t\t\t\tif (!inside) {\n\t\t\t\t\tlength *= -1\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttick.set(\"y\", 0);\n\t\t\t\tif (inside) {\n\t\t\t\t\tlength *= -1\n\t\t\t\t}\n\t\t\t}\n\t\t\ttick.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(0, 0);\n\t\t\t\tdisplay.lineTo(0, length);\n\t\t\t})\n\n\t\t\tthis.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLabel(label?: AxisLabel, position?: number, endPosition?: number, count?: number) {\n\t\tif (label) {\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = label.get(\"multiLocation\", location)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = label.get(\"location\", location)\n\t\t\t}\n\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tconst inside = label.get(\"inside\", this.get(\"inside\", false));\n\n\t\t\tconst opposite = this.get(\"opposite\");\n\t\t\tif (opposite) {\n\t\t\t\tif (!inside) {\n\t\t\t\t\tlabel.set(\"position\", \"relative\");\n\t\t\t\t\tlabel.set(\"y\", p100);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlabel.set(\"position\", \"absolute\");\n\t\t\t\t\tlabel.set(\"y\", 0)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!inside) {\n\t\t\t\t\tlabel.set(\"y\", undefined);\n\t\t\t\t\tlabel.set(\"position\", \"relative\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlabel.set(\"y\", 0)\n\t\t\t\t\tlabel.set(\"position\", \"absolute\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tlabel.set(\"x\", this.positionToCoordinate(position));\n\t\t\tthis.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateGrid(grid?: Grid, position?: number, endPosition?: number) {\n\t\tif (grid) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = grid.get(\"location\", 0.5);\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tgrid.set(\"x\", Math.round(this.positionToCoordinate(position)));\n\n\t\t\tthis.toggleVisibility(grid, position, 0, 1);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateBullet(bullet?: AxisBullet, position?: number, endPosition?: number) {\n\t\tif (bullet) {\n\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\tif (sprite) {\n\t\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\t\tposition = 0;\n\t\t\t\t}\n\n\t\t\t\tlet location = bullet.get(\"location\", 0.5);\n\n\t\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t\t}\n\n\n\t\t\t\tsprite.set(\"x\", this.positionToCoordinate(position));\n\t\t\t\tthis.toggleVisibility(sprite, position, 0, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateFill(fill?: Graphics, position?: number, endPosition?: number) {\n\t\tif (fill) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\t\t\tif (!$type.isNumber(endPosition)) {\n\t\t\t\tendPosition = 1;\n\t\t\t}\n\n\t\t\tlet x0 = this.positionToCoordinate(position);\n\t\t\tlet x1 = this.positionToCoordinate(endPosition);\n\n\t\t\tthis.fillDrawMethod(fill, x0, x1);\n\t\t}\n\t}\n\n\tprotected fillDrawMethod(fill: Graphics, x0: number, x1: number) {\n\t\tfill.set(\"draw\", (display) => {\n\t\t\t//display.drawRect(x0, 0, x1 - x0, this.axis!.gridContainer.height());\n\t\t\t// using for holes, so can not be rectangle\n\t\t\tconst h = this.axis!.gridContainer.height();\n\t\t\tconst w = this.width();\n\n\t\t\tif (x1 < x0) {\n\t\t\t\t[x1, x0] = [x0, x1];\n\t\t\t}\n\t\t\tif (x0 > w || x1 < 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tx0 = Math.max(0, x0);\n\t\t\tx1 = Math.min(w, x1);\n\n\t\t\tdisplay.moveTo(x0, 0);\n\t\t\tdisplay.lineTo(x1, 0);\n\t\t\tdisplay.lineTo(x1, h);\n\t\t\tdisplay.lineTo(x0, h);\n\t\t\tdisplay.lineTo(x0, 0);\n\t\t})\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic positionTooltip(tooltip: Tooltip, position: number) {\n\t\tthis._positionTooltip(tooltip, { x: this.positionToCoordinate(position), y: 0 })\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTooltipBounds(tooltip: Tooltip) {\n\t\tconst inside = this.get(\"inside\");\n\t\tconst num = 100000;\n\n\t\tlet global = this._display.toGlobal({ x: 0, y: 0 });\n\t\tlet x = global.x;\n\t\tlet y = 0;\n\t\tlet w = this.axisLength();\n\t\tlet h = num;\n\n\t\tlet pointerOrientation: \"up\" | \"down\" = \"up\";\n\n\t\tif (this.get(\"opposite\")) {\n\t\t\tif (inside) {\n\t\t\t\tpointerOrientation = \"up\";\n\t\t\t\ty = global.y;\n\t\t\t\th = num;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpointerOrientation = \"down\";\n\t\t\t\ty = global.y - num;\n\t\t\t\th = num;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (inside) {\n\t\t\t\tpointerOrientation = \"down\";\n\t\t\t\ty = global.y - num;\n\t\t\t\th = num;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpointerOrientation = \"up\";\n\t\t\t\ty = global.y;\n\t\t\t\th = num;\n\t\t\t}\n\t\t}\n\n\t\tconst bounds = { left: x, right: x + w, top: y, bottom: y + h };\n\t\tconst oldBounds = tooltip.get(\"bounds\");\n\n\t\tif (!$utils.sameBounds(bounds, oldBounds)) {\n\t\t\ttooltip.set(\"bounds\", bounds);\n\t\t\ttooltip.set(\"pointerOrientation\", pointerOrientation);\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}