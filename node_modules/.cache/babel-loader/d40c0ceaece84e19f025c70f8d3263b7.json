{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Layout } from \"./Layout\";\nimport * as $array from \"../util/Array\";\nimport * as $math from \"../util/Math\";\n/**\r\n * A grid children layout for [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\r\n */\n\nvar GridLayout =\n/** @class */\nfunction (_super) {\n  __extends(GridLayout, _super);\n\n  function GridLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(GridLayout.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      this._setRawDefault(\"maxColumns\", Number.MAX_VALUE);\n\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(GridLayout.prototype, \"updateContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(container) {\n      var paddingLeft = container.get(\"paddingLeft\", 0);\n      var paddingRight = container.get(\"paddingRight\", 0);\n      var paddingTop = container.get(\"paddingTop\", 0);\n      var availableWidth = container.maxWidth() - paddingLeft - paddingRight;\n      var minCellWidth = availableWidth;\n      var maxCellWidth = 1;\n      container.children.each(function (child) {\n        if (child.get(\"position\") != \"absolute\") {\n          var childWidth = child.width();\n\n          if (childWidth < minCellWidth) {\n            minCellWidth = childWidth;\n          }\n\n          if (childWidth > maxCellWidth) {\n            maxCellWidth = childWidth;\n          }\n        }\n      });\n      minCellWidth = $math.fitToRange(minCellWidth, 1, availableWidth);\n      maxCellWidth = $math.fitToRange(maxCellWidth, 1, availableWidth);\n      var columnCount = 1;\n\n      if (this.get(\"fixedWidthGrid\")) {\n        columnCount = availableWidth / maxCellWidth;\n      } else {\n        columnCount = availableWidth / minCellWidth;\n      }\n\n      columnCount = Math.max(1, Math.floor(columnCount));\n      columnCount = Math.min(this.get(\"maxColumns\", Number.MAX_VALUE), columnCount);\n      var columnWidths = this.getColumnWidths(container.children, columnCount, maxCellWidth, availableWidth);\n      var prevY = paddingTop;\n      var column = 0;\n      var maxColumnHeight = 0;\n      columnCount = columnWidths.length;\n      var prevX = paddingLeft;\n      container.children.each(function (child) {\n        if (child.get(\"position\") == \"relative\") {\n          var marginTop = child.get(\"marginTop\", 0);\n          var marginBottom = child.get(\"marginBottom\", 0);\n          var bounds = child.adjustedLocalBounds();\n          var marginLeft = child.get(\"marginLeft\", 0);\n          var marginRight = child.get(\"marginRight\", 0);\n          var x = prevX + marginLeft - bounds.left;\n          var y = prevY + marginTop - bounds.top;\n          child.setPrivate(\"x\", x);\n          child.setPrivate(\"y\", y);\n          prevX += columnWidths[column] + marginRight;\n          maxColumnHeight = Math.max(maxColumnHeight, child.height() + marginTop + marginBottom);\n          column++;\n\n          if (column >= columnCount) {\n            column = 0;\n            prevX = paddingLeft;\n            prevY += maxColumnHeight;\n          }\n        }\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(GridLayout.prototype, \"getColumnWidths\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(children, columnCount, maxCellWidth, availableWidth) {\n      var _this = this;\n\n      var totalWidth = 0;\n      var columnWidths = [];\n      var column = 0;\n      children.each(function (child) {\n        var bounds = child.adjustedLocalBounds();\n\n        if (child.get(\"position\") != \"absolute\") {\n          if (_this.get(\"fixedWidthGrid\")) {\n            columnWidths[column] = maxCellWidth;\n          } else {\n            columnWidths[column] = Math.max(columnWidths[column] | 0, bounds.right - bounds.left + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0));\n          }\n\n          if (column < children.length - 1) {\n            column++;\n\n            if (column == columnCount) {\n              column = 0;\n            }\n          }\n        }\n      });\n      $array.each(columnWidths, function (w) {\n        totalWidth += w;\n      });\n\n      if (totalWidth > availableWidth) {\n        if (columnCount > 2) {\n          columnCount -= 1;\n          return this.getColumnWidths(children, columnCount, maxCellWidth, availableWidth);\n        } else {\n          return [availableWidth];\n        }\n      }\n\n      return columnWidths;\n    }\n  });\n  Object.defineProperty(GridLayout, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"GridLayout\"\n  });\n  Object.defineProperty(GridLayout, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Layout.classNames.concat([GridLayout.className])\n  });\n  return GridLayout;\n}(Layout);\n\nexport { GridLayout };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/GridLayout.ts"],"names":[],"mappings":"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","sourcesContent":["import { Layout, ILayoutSettings, ILayoutPrivate } from \"./Layout\";\nimport * as $array from \"../util/Array\";\nimport * as $math from \"../util/Math\";\nimport type { Container } from \"./Container\";\nimport type { List } from \"../util/List\";\nimport type { Sprite } from \"./Sprite\";\n\n\nexport interface IGridLayoutSettings extends ILayoutSettings {\n\n\t/**\n\t * If set to `true` all columns in the grid will be equal width.\n\t *\n\t * @default false\n\t */\n\tfixedWidthGrid?: boolean;\n\n\t/**\n\t * Maximum number of columns in the grid.\n\t */\n\tmaxColumns?: number;\n\n}\n\nexport interface IGridLayoutPrivate extends ILayoutPrivate {\n}\n\n/**\n * A grid children layout for [[Container]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\n */\nexport class GridLayout extends Layout {\n\n\tpublic static className: string = \"GridLayout\";\n\tpublic static classNames: Array<string> = Layout.classNames.concat([GridLayout.className]);\n\n\tdeclare public _settings: IGridLayoutSettings;\n\tdeclare public _privateSettings: IGridLayoutPrivate;\n\n\n\tprotected _afterNew() {\n\t\tthis._setRawDefault(\"maxColumns\", Number.MAX_VALUE);\n\t\tsuper._afterNew();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateContainer(container: Container): void {\n\t\tlet paddingLeft = container.get(\"paddingLeft\", 0);\n\t\tlet paddingRight = container.get(\"paddingRight\", 0);\n\t\tlet paddingTop = container.get(\"paddingTop\", 0);\n\n\t\tlet availableWidth = container.maxWidth() - paddingLeft - paddingRight;\n\n\t\tlet minCellWidth = availableWidth;\n\t\tlet maxCellWidth = 1;\n\n\t\tcontainer.children.each((child) => {\n\t\t\tif (child.get(\"position\") != \"absolute\") {\n\t\t\t\tlet childWidth = child.width();\n\n\t\t\t\tif (childWidth < minCellWidth) {\n\t\t\t\t\tminCellWidth = childWidth;\n\t\t\t\t}\n\t\t\t\tif (childWidth > maxCellWidth) {\n\t\t\t\t\tmaxCellWidth = childWidth;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tminCellWidth = $math.fitToRange(minCellWidth, 1, availableWidth);\n\t\tmaxCellWidth = $math.fitToRange(maxCellWidth, 1, availableWidth);\n\n\t\tlet columnCount = 1;\n\t\tif (this.get(\"fixedWidthGrid\")) {\n\t\t\tcolumnCount = availableWidth / maxCellWidth;\n\t\t}\n\t\telse {\n\t\t\tcolumnCount = availableWidth / minCellWidth;\n\t\t}\n\n\t\tcolumnCount = Math.max(1, Math.floor(columnCount));\n\t\tcolumnCount = Math.min(this.get(\"maxColumns\", Number.MAX_VALUE), columnCount);\n\n\t\tlet columnWidths = this.getColumnWidths(container.children, columnCount, maxCellWidth, availableWidth);\n\n\t\tlet prevY = paddingTop;\n\n\t\tlet column = 0;\n\t\tlet maxColumnHeight = 0;\n\n\t\tcolumnCount = columnWidths.length;\n\n\t\tlet prevX = paddingLeft;\n\n\t\tcontainer.children.each((child) => {\n\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\tconst marginTop = child.get(\"marginTop\", 0);\n\t\t\t\tconst marginBottom = child.get(\"marginBottom\", 0);\n\n\t\t\t\tlet bounds = child.adjustedLocalBounds();\n\t\t\t\tlet marginLeft = child.get(\"marginLeft\", 0);\n\t\t\t\tlet marginRight = child.get(\"marginRight\", 0);\n\t\t\t\tlet x = prevX + marginLeft - bounds.left;\n\t\t\t\tlet y = prevY + marginTop - bounds.top;\n\n\t\t\t\tchild.setPrivate(\"x\", x);\n\t\t\t\tchild.setPrivate(\"y\", y);\n\n\t\t\t\tprevX += columnWidths[column] + marginRight;\n\n\t\t\t\tmaxColumnHeight = Math.max(maxColumnHeight, child.height() + marginTop + marginBottom);\n\n\t\t\t\tcolumn++;\n\n\t\t\t\tif (column >= columnCount) {\n\t\t\t\t\tcolumn = 0;\n\t\t\t\t\tprevX = paddingLeft;\n\t\t\t\t\tprevY += maxColumnHeight;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getColumnWidths(children: List<Sprite>, columnCount: number, maxCellWidth: number, availableWidth: number): number[] {\n\t\tlet totalWidth = 0;\n\t\tlet columnWidths: Array<number> = [];\n\t\tlet column = 0;\n\n\t\tchildren.each((child) => {\n\t\t\tlet bounds = child.adjustedLocalBounds();\n\t\t\tif (child.get(\"position\") != \"absolute\") {\n\t\t\t\tif (this.get(\"fixedWidthGrid\")) {\n\t\t\t\t\tcolumnWidths[column] = maxCellWidth;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcolumnWidths[column] = Math.max(columnWidths[column] | 0, bounds.right - bounds.left + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0));\n\t\t\t\t}\n\n\t\t\t\tif (column < children.length - 1) {\n\t\t\t\t\tcolumn++;\n\n\t\t\t\t\tif (column == columnCount) {\n\t\t\t\t\t\tcolumn = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t$array.each(columnWidths, (w) => {\n\t\t\ttotalWidth += w;\n\t\t})\n\n\t\tif (totalWidth > availableWidth) {\n\t\t\tif (columnCount > 2) {\n\t\t\t\tcolumnCount -= 1;\n\t\t\t\treturn this.getColumnWidths(children, columnCount, maxCellWidth, availableWidth);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn [availableWidth];\n\t\t\t}\n\t\t}\n\n\t\treturn columnWidths;\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}