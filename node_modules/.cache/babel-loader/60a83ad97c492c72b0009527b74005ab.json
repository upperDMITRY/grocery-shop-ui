{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Gradient } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $math from \"../../util/Math\";\n/**\r\n * Linear gradient.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\r\n */\n\nvar LinearGradient =\n/** @class */\nfunction (_super) {\n  __extends(LinearGradient, _super);\n\n  function LinearGradient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(LinearGradient.prototype, \"getFill\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target) {\n      var rotation = this.get(\"rotation\", 0);\n      var bounds = this.getBounds(target);\n      var l = bounds.left || 0;\n      var r = bounds.right || 0;\n      var t = bounds.top || 0;\n      var b = bounds.bottom || 0;\n      var cos = $math.cos(rotation);\n      var sin = $math.sin(rotation);\n      var w = cos * (r - l);\n      var h = sin * (b - t);\n      var longer = Math.max(w, h);\n\n      var gradient = this._root._renderer.createLinearGradient(l, t, l + longer * cos, t + longer * sin);\n\n      var stops = this.get(\"stops\");\n\n      if (stops) {\n        var i_1 = 0;\n        $array.each(stops, function (stop) {\n          var offset = stop.offset;\n\n          if (!$type.isNumber(offset)) {\n            offset = i_1 / (stops.length - 1);\n          }\n\n          var opacity = stop.opacity;\n\n          if (!$type.isNumber(opacity)) {\n            opacity = 1;\n          }\n\n          var color = stop.color;\n\n          if (color) {\n            var lighten = stop.lighten;\n\n            if (lighten) {\n              color = Color.lighten(color, lighten);\n            }\n\n            var brighten = stop.brighten;\n\n            if (brighten) {\n              color = Color.brighten(color, brighten);\n            }\n\n            gradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n          }\n\n          i_1++;\n        });\n      }\n\n      return gradient;\n    }\n  });\n  Object.defineProperty(LinearGradient, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"LinearGradient\"\n  });\n  Object.defineProperty(LinearGradient, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Gradient.classNames.concat([LinearGradient.className])\n  });\n  return LinearGradient;\n}(Gradient);\n\nexport { LinearGradient };","map":{"version":3,"sources":["../../../../../../src/.internal/core/render/gradients/LinearGradient.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IGradient } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\n\nimport { Gradient, IGradientSettings, IGradientPrivate } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\n\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $math from \"../../util/Math\";\n\n\nexport interface ILinearGradientSettings extends IGradientSettings {\n\n\t/**\n\t * Gradient rotation, in degrees.\n\t *\n\t * @default 90\n\t */\n\trotation?: number;\n\n}\n\nexport interface ILinearGradientPrivate extends IGradientPrivate {\n}\n\n/**\n * Linear gradient.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport class LinearGradient extends Gradient {\n\n\tdeclare public _settings: ILinearGradientSettings;\n\tdeclare public _privateSettings: ILinearGradientPrivate;\n\n\tpublic static className: string = \"LinearGradient\";\n\tpublic static classNames: Array<string> = Gradient.classNames.concat([LinearGradient.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(target: Sprite): IGradient {\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet bounds = this.getBounds(target);\n\n\t\tlet l = bounds.left || 0;\n\t\tlet r = bounds.right || 0;\n\t\tlet t = bounds.top || 0;\n\t\tlet b = bounds.bottom || 0;\n\n\t\tlet cos = $math.cos(rotation);\n\t\tlet sin = $math.sin(rotation);\n\n\t\tlet w = cos * (r - l);\n\t\tlet h = sin * (b - t);\n\n\t\tlet longer = Math.max(w, h);\n\n\t\tconst gradient = this._root._renderer.createLinearGradient(\n\t\t\tl,\n\t\t\tt,\n\t\t\tl + longer * cos,\n\t\t\tt + longer * sin\n\t\t);\n\n\t\tconst stops = this.get(\"stops\")!;\n\t\tif (stops) {\n\t\t\tlet i = 0;\n\t\t\t$array.each(stops, (stop) => {\n\n\t\t\t\tlet offset = stop.offset;\n\n\t\t\t\tif (!$type.isNumber(offset)) {\n\t\t\t\t\toffset = i / (stops.length - 1);\n\t\t\t\t}\n\n\t\t\t\tlet opacity = stop.opacity;\n\n\t\t\t\tif (!$type.isNumber(opacity)) {\n\t\t\t\t\topacity = 1;\n\t\t\t\t}\n\n\t\t\t\tlet color = stop.color;\n\n\t\t\t\tif (color) {\n\n\t\t\t\t\tconst lighten = stop.lighten;\n\t\t\t\t\tif (lighten) {\n\t\t\t\t\t\tcolor = Color.lighten(color, lighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst brighten = stop.brighten;\n\t\t\t\t\tif (brighten) {\n\t\t\t\t\t\tcolor = Color.brighten(color, brighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tgradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t})\n\t\t}\n\t\treturn gradient;\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}