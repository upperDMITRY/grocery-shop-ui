{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { XYSeries } from \"./XYSeries\";\nimport { Graphics } from \"../../../core/render/Graphics\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $array from \"../../../core/util/Array\";\nimport { line, area } from \"d3-shape\";\nimport { Template } from \"../../../core/util/Template\";\nimport { ListTemplate } from \"../../../core/util/List\";\nimport { DataItem } from \"../../../core/render/Component\";\nimport * as $utils from \"../../../core/util/Utils\";\n/**\r\n * Used to plot line and/or area series.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/line-series/} for more info\r\n * @important\r\n */\n\nvar LineSeries =\n/** @class */\nfunction (_super) {\n  __extends(LineSeries, _super);\n\n  function LineSeries() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_endIndex\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_strokeGenerator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: line()\n    });\n    Object.defineProperty(_this, \"_fillGenerator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: area()\n    });\n    /**\r\n     * A [[TemplateList]] of all line segments in series.\r\n     *\r\n     * `strokes.template` can be used to set default settings for all line\r\n     * segments, or to change on existing ones.\r\n     *\r\n     * @default new ListTemplate<Graphics>\r\n     */\n\n    Object.defineProperty(_this, \"strokes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return Graphics._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.strokes.template.get(\"themeTags\", []), [\"line\", \"series\", \"stroke\"])\n        }, [_this.strokes.template]);\n      })\n    });\n    /**\r\n     * A [[TemplateList]] of all segment fills in series.\r\n     *\r\n     * `fills.template` can be used to set default settings for all segment\r\n     * fills, or to change on existing ones.\r\n     *\r\n     * @default new ListTemplate<Graphics>\r\n     */\n\n    Object.defineProperty(_this, \"fills\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return Graphics._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.strokes.template.get(\"themeTags\", []), [\"line\", \"series\", \"fill\"])\n        }, [_this.fills.template]);\n      })\n    }); // custom set from data\n\n    Object.defineProperty(_this, \"_fillTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_strokeTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(LineSeries.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      this._fillGenerator.y0(function (p) {\n        return p[3];\n      });\n\n      this._fillGenerator.x0(function (p) {\n        return p[2];\n      });\n\n      this._fillGenerator.y1(function (p) {\n        return p[1];\n      });\n\n      this._fillGenerator.x1(function (p) {\n        return p[0];\n      });\n\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(LineSeries.prototype, \"makeStroke\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(strokes) {\n      var stroke = this.mainContainer.children.push(strokes.make());\n      strokes.push(stroke);\n      return stroke;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(LineSeries.prototype, \"makeFill\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(fills) {\n      var fill = this.mainContainer.children.push(fills.make());\n      fills.push(fill);\n      return fill;\n    }\n  });\n  Object.defineProperty(LineSeries.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      this._strokeTemplate = undefined;\n      this._fillTemplate = undefined;\n      var xAxis = this.get(\"xAxis\");\n      var yAxis = this.get(\"yAxis\");\n\n      if (this.isDirty(\"stroke\")) {\n        this.strokes.template.set(\"stroke\", this.get(\"stroke\"));\n      }\n\n      if (this.isDirty(\"fill\")) {\n        this.fills.template.set(\"fill\", this.get(\"fill\"));\n      }\n\n      if (this.isDirty(\"curveFactory\")) {\n        var curveFactory = this.get(\"curveFactory\");\n\n        if (curveFactory) {\n          this._strokeGenerator.curve(curveFactory);\n\n          this._fillGenerator.curve(curveFactory);\n        }\n      }\n\n      if (xAxis.inited && yAxis.inited) {\n        if (this._axesDirty || this._valuesDirty || this._stackDirty || this.isDirty(\"vcx\") || this.isDirty(\"vcy\") || this._sizeDirty || this.isDirty(\"connect\") || this.isDirty(\"curveFactory\")) {\n          this.fills.each(function (fill) {\n            fill.setPrivate(\"visible\", false);\n          });\n          this.strokes.each(function (fill) {\n            fill.setPrivate(\"visible\", false);\n          });\n          this.axisRanges.each(function (axisRange) {\n            var fills = axisRange.fills;\n\n            if (fills) {\n              fills.each(function (fill) {\n                fill.setPrivate(\"visible\", false);\n              });\n            }\n\n            var strokes = axisRange.strokes;\n\n            if (strokes) {\n              strokes.each(function (stroke) {\n                stroke.setPrivate(\"visible\", false);\n              });\n            }\n          });\n          var startIndex = this.getPrivate(\"startIndex\", 0);\n          var strokeTemplateField = this.strokes.template.get(\"templateField\");\n          var fillTemplateField = this.fills.template.get(\"templateField\");\n          var strokeTemplateFound = true;\n          var fillTemplateFound = true;\n\n          if (strokeTemplateField) {\n            strokeTemplateFound = false;\n          }\n\n          if (fillTemplateField) {\n            fillTemplateFound = false;\n          }\n\n          var _loop_1 = function _loop_1(i) {\n            var dataItem = this_1.dataItems[i];\n            var hasValues = true;\n            var dataContext = dataItem.dataContext;\n\n            if (strokeTemplateField) {\n              if (dataContext[strokeTemplateField]) {\n                strokeTemplateFound = true;\n              }\n            }\n\n            if (fillTemplateField) {\n              if (dataContext[fillTemplateField]) {\n                fillTemplateFound = true;\n              }\n            }\n\n            $array.each(this_1._valueFields, function (field) {\n              if (!$type.isNumber(dataItem.get(field))) {\n                hasValues = false;\n              }\n            });\n\n            if (hasValues && strokeTemplateFound && fillTemplateFound) {\n              startIndex = i;\n              return \"break\";\n            }\n          };\n\n          var this_1 = this;\n\n          for (var i = startIndex - 1; i >= 0; i--) {\n            var state_1 = _loop_1(i);\n\n            if (state_1 === \"break\") break;\n          }\n\n          var len = this.dataItems.length;\n          var endIndex = this.getPrivate(\"endIndex\", len);\n\n          if (endIndex < len) {\n            endIndex++;\n\n            var _loop_2 = function _loop_2(i) {\n              var dataItem = this_2.dataItems[i];\n              var hasValues = true;\n              $array.each(this_2._valueFields, function (field) {\n                if (!$type.isNumber(dataItem.get(field))) {\n                  hasValues = false;\n                }\n              });\n\n              if (hasValues) {\n                endIndex = i + 1;\n                return \"break\";\n              }\n            };\n\n            var this_2 = this;\n\n            for (var i = endIndex; i < len; i++) {\n              var state_2 = _loop_2(i);\n\n              if (state_2 === \"break\") break;\n            }\n          }\n\n          this._endIndex = endIndex;\n          this.strokes.clear();\n          this.fills.clear();\n\n          this._startSegment(0, startIndex);\n        }\n      } else {\n        this._skipped = true;\n      }\n\n      _super.prototype._updateChildren.call(this);\n    }\n  });\n  Object.defineProperty(LineSeries.prototype, \"_startSegment\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(segmentIndex, dataItemIndex) {\n      var _this = this;\n\n      var endIndex = this._endIndex;\n      var currentEndIndex = endIndex;\n      var autoGapCount = this.get(\"autoGapCount\");\n      var connect = this.get(\"connect\");\n      var fill = this.makeFill(this.fills);\n      var fillTemplate = this._fillTemplate;\n      var originalTemplate = this.fills.template;\n\n      if (fillTemplate && fillTemplate != originalTemplate) {\n        fill.template = fillTemplate;\n      }\n\n      fill.setPrivate(\"visible\", true);\n      var stroke = this.makeStroke(this.strokes);\n      var strokeTemplate = this._strokeTemplate;\n\n      if (strokeTemplate && strokeTemplate != this.strokes.template) {\n        stroke.template = strokeTemplate;\n      }\n\n      stroke.setPrivate(\"visible\", true);\n      var xAxis = this.get(\"xAxis\");\n      var yAxis = this.get(\"yAxis\");\n      var baseAxis = this.get(\"baseAxis\");\n      var vcx = this.get(\"vcx\", 1);\n      var vcy = this.get(\"vcy\", 1);\n      var xField = this._xField;\n      var yField = this._yField;\n      var xOpenField = this._xOpenField;\n      var yOpenField = this._yOpenField;\n      var xOpenFieldValue = this.get(\"openValueXField\");\n      var yOpenFieldValue = this.get(\"openValueYField\");\n\n      if (!xOpenFieldValue) {\n        xOpenField = this._xField;\n      }\n\n      if (!yOpenFieldValue) {\n        yOpenField = this._yField;\n      }\n\n      var stacked = this.get(\"stacked\");\n      var basePosX = xAxis.basePosition();\n      var basePosY = yAxis.basePosition();\n      var baseField;\n\n      if (baseAxis === yAxis) {\n        baseField = this._yField;\n      } else {\n        baseField = this._xField;\n      }\n\n      var segments = [];\n      var points = [];\n      segments.push(points);\n      var strokeTemplateField = this.strokes.template.get(\"templateField\");\n      var fillTemplateField = this.fills.template.get(\"templateField\");\n      var locationX = this.get(\"locationX\", 0.5);\n      var locationY = this.get(\"locationY\", 0.5);\n      var openLocationX = this.get(\"openLocationX\", locationX);\n      var openLocationY = this.get(\"openLocationY\", locationY);\n      var i;\n      var fillVisible = this.fills.template.get(\"visible\");\n\n      if (this.axisRanges.length > 0) {\n        fillVisible = true;\n      }\n\n      var getOpen = false;\n\n      if (stacked || xOpenFieldValue || yOpenFieldValue) {\n        getOpen = true;\n      }\n\n      var o = {\n        points: points,\n        segments: segments,\n        stacked: stacked,\n        getOpen: getOpen,\n        basePosX: basePosX,\n        basePosY: basePosY,\n        fillVisible: fillVisible,\n        xField: xField,\n        yField: yField,\n        xOpenField: xOpenField,\n        yOpenField: yOpenField,\n        vcx: vcx,\n        vcy: vcy,\n        baseAxis: baseAxis,\n        xAxis: xAxis,\n        yAxis: yAxis,\n        locationX: locationX,\n        locationY: locationY,\n        openLocationX: openLocationX,\n        openLocationY: openLocationY\n      };\n\n      for (i = dataItemIndex; i < currentEndIndex; i++) {\n        var dataItem = this._dataItems[i];\n        var valueX = dataItem.get(xField);\n        var valueY = dataItem.get(yField);\n\n        if (valueX == null || valueY == null) {\n          if (!connect) {\n            points = [];\n            segments.push(points);\n            o.points = points;\n          }\n        } else {\n          this._getPoints(dataItem, o);\n        }\n\n        if (strokeTemplateField) {\n          var strokeTemplate_1 = dataItem.dataContext[strokeTemplateField];\n\n          if (strokeTemplate_1) {\n            if (!(strokeTemplate_1 instanceof Template)) {\n              strokeTemplate_1 = Template.new(strokeTemplate_1);\n            }\n\n            this._strokeTemplate = strokeTemplate_1;\n\n            if (i > dataItemIndex) {\n              currentEndIndex = i;\n              break;\n            } else {\n              stroke.template = strokeTemplate_1;\n            }\n          }\n        }\n\n        if (fillTemplateField) {\n          var fillTemplate_1 = dataItem.dataContext[fillTemplateField];\n\n          if (fillTemplate_1) {\n            if (!(fillTemplate_1 instanceof Template)) {\n              fillTemplate_1 = Template.new(fillTemplate_1);\n            }\n\n            this._fillTemplate = fillTemplate_1;\n\n            if (i > dataItemIndex) {\n              currentEndIndex = i;\n              break;\n            } else {\n              fill.template = fillTemplate_1;\n            }\n          }\n        }\n\n        if (!connect) {\n          var nextItem = this.dataItems[i + 1];\n\n          if (nextItem) {\n            if (baseAxis.shouldGap(dataItem, nextItem, autoGapCount, baseField)) {\n              points = [];\n              segments.push(points);\n              o.points = points;\n            }\n          }\n        }\n      }\n\n      if (i === endIndex) {\n        this._endLine(points, segments[0][0]);\n      }\n\n      if (stroke) {\n        this._drawStroke(stroke, segments);\n      }\n\n      if (fill) {\n        this._drawFill(fill, segments);\n      }\n\n      this.axisRanges.each(function (axisRange) {\n        var container = axisRange.container;\n        var fills = axisRange.fills;\n\n        var fill = _this.makeFill(fills);\n\n        if (container) {\n          container.children.push(fill);\n        }\n\n        fill.setPrivate(\"visible\", true);\n\n        _this._drawFill(fill, segments);\n\n        var strokes = axisRange.strokes;\n\n        var stroke = _this.makeStroke(strokes);\n\n        if (container) {\n          container.children.push(stroke);\n        }\n\n        stroke.setPrivate(\"visible\", true);\n\n        _this._drawStroke(stroke, segments);\n      });\n\n      if (currentEndIndex < endIndex) {\n        this._startSegment(segmentIndex + 1, currentEndIndex);\n      }\n    }\n  });\n  Object.defineProperty(LineSeries.prototype, \"_getPoints\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem, o) {\n      var points = o.points;\n      var itemLocationX = dataItem.get(\"locationX\", o.locationX);\n      var itemLocationY = dataItem.get(\"locationY\", o.locationY);\n      var xPos = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX, o.vcx);\n      var yPos = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY, o.vcy);\n\n      if (this._shouldInclude(xPos)) {\n        var iPoint = this.getPoint(xPos, yPos);\n        var point = [iPoint.x, iPoint.y];\n        iPoint.x += this._x;\n        iPoint.y += this._y;\n        dataItem.set(\"point\", iPoint);\n\n        if (o.fillVisible) {\n          var xPos0 = xPos;\n          var yPos0 = yPos;\n\n          if (o.baseAxis === o.xAxis) {\n            yPos0 = o.basePosY;\n          } else if (o.baseAxis === o.yAxis) {\n            xPos0 = o.basePosX;\n          }\n\n          if (o.getOpen) {\n            var valueX = dataItem.get(o.xOpenField);\n            var valueY = dataItem.get(o.yOpenField);\n\n            if (valueX != null && valueY != null) {\n              var itemLocationX_1 = dataItem.get(\"openLocationX\", o.openLocationX);\n              var itemLocationY_1 = dataItem.get(\"openLocationY\", o.openLocationY);\n\n              if (o.stacked) {\n                var stackToItemX = dataItem.get(\"stackToItemX\");\n                var stackToItemY = dataItem.get(\"stackToItemY\");\n\n                if (stackToItemX) {\n                  xPos0 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX_1, stackToItemX.component.get(\"vcx\"));\n\n                  if ($type.isNaN(xPos0)) {\n                    xPos0 = o.basePosX;\n                  }\n                } else {\n                  if (o.yAxis === o.baseAxis) {\n                    xPos0 = o.basePosX;\n                  } else {\n                    xPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX_1, o.vcx);\n                  }\n                }\n\n                if (stackToItemY) {\n                  yPos0 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY_1, stackToItemY.component.get(\"vcy\"));\n\n                  if ($type.isNaN(yPos0)) {\n                    yPos0 = o.basePosY;\n                  }\n                } else {\n                  if (o.xAxis === o.baseAxis) {\n                    yPos0 = o.basePosY;\n                  } else {\n                    yPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY_1, o.vcy);\n                  }\n                }\n              } else {\n                xPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX_1, o.vcx);\n                yPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY_1, o.vcy);\n              }\n            }\n          }\n\n          var closeIPoint = this.getPoint(xPos0, yPos0);\n          point[2] = closeIPoint.x;\n          point[3] = closeIPoint.y;\n        }\n\n        points.push(point);\n      }\n    }\n  });\n  Object.defineProperty(LineSeries.prototype, \"_endLine\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_points, _firstPoint) {}\n  });\n  Object.defineProperty(LineSeries.prototype, \"_drawStroke\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(graphics, segments) {\n      var _this = this;\n\n      if (graphics.get(\"visible\")) {\n        graphics.set(\"draw\", function (display) {\n          $array.each(segments, function (segment) {\n            _this._strokeGenerator.context(display);\n\n            _this._strokeGenerator(segment);\n          });\n        });\n      }\n    }\n  });\n  Object.defineProperty(LineSeries.prototype, \"_drawFill\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(graphics, segments) {\n      var _this = this;\n\n      if (graphics.get(\"visible\")) {\n        graphics.set(\"draw\", function (display) {\n          $array.each(segments, function (segment) {\n            _this._fillGenerator.context(display);\n\n            _this._fillGenerator(segment);\n          });\n        });\n      }\n    }\n  });\n  Object.defineProperty(LineSeries.prototype, \"_processAxisRange\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(axisRange) {\n      var _this = this;\n\n      _super.prototype._processAxisRange.call(this, axisRange);\n\n      axisRange.fills = new ListTemplate(Template.new({}), function () {\n        return Graphics._new(_this._root, {\n          themeTags: $utils.mergeTags(axisRange.fills.template.get(\"themeTags\", []), [\"line\", \"series\", \"fill\"])\n        }, [_this.fills.template, axisRange.fills.template]);\n      });\n      axisRange.strokes = new ListTemplate(Template.new({}), function () {\n        return Graphics._new(_this._root, {\n          themeTags: $utils.mergeTags(axisRange.strokes.template.get(\"themeTags\", []), [\"line\", \"series\", \"stroke\"])\n        }, [_this.strokes.template, axisRange.strokes.template]);\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(LineSeries.prototype, \"createLegendMarker\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(_dataItem) {\n      var legendDataItem = this.get(\"legendDataItem\");\n\n      if (legendDataItem) {\n        var marker = legendDataItem.get(\"marker\");\n        var markerRectangle = legendDataItem.get(\"markerRectangle\");\n\n        if (markerRectangle) {\n          markerRectangle.setPrivate(\"visible\", false);\n        }\n\n        var legendStroke = marker.children.push(Graphics._new(this._root, {\n          themeTags: [\"line\", \"series\", \"legend\", \"marker\", \"stroke\"]\n        }, [this.strokes.template]));\n        var legendFill = marker.children.push(Graphics._new(this._root, {\n          themeTags: [\"line\", \"series\", \"legend\", \"marker\", \"fill\"]\n        }, [this.fills.template]));\n\n        var disabledColor = this._root.interfaceColors.get(\"disabled\");\n\n        legendStroke.states.create(\"disabled\", {\n          fill: disabledColor,\n          stroke: disabledColor\n        });\n        legendFill.states.create(\"disabled\", {\n          fill: disabledColor,\n          stroke: disabledColor\n        });\n\n        if (this.bullets.length > 0) {\n          var bulletFunction = this.bullets.getIndex(0);\n\n          if (bulletFunction) {\n            var bullet = bulletFunction(this._root, this, new DataItem(this, {}, {}));\n\n            if (bullet) {\n              var sprite = bullet.get(\"sprite\");\n\n              if (sprite instanceof Graphics) {\n                sprite.states.create(\"disabled\", {\n                  fill: disabledColor,\n                  stroke: disabledColor\n                });\n              }\n\n              if (sprite) {\n                sprite.set(\"tooltipText\", undefined);\n                marker.children.push(sprite);\n                sprite.setAll({\n                  x: marker.width() / 2,\n                  y: marker.height() / 2\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(LineSeries, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"LineSeries\"\n  });\n  Object.defineProperty(LineSeries, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: XYSeries.classNames.concat([LineSeries.className])\n  });\n  return LineSeries;\n}(XYSeries);\n\nexport { LineSeries };","map":{"version":3,"sources":["../../../../../../src/.internal/charts/xy/series/LineSeries.ts"],"names":[],"mappings":";AAAA,SAAS,QAAT,QAAqG,YAArG;AACA,SAAS,QAAT,QAAyB,+BAAzB;AACA,OAAO,KAAK,KAAZ,MAAuB,yBAAvB;AACA,OAAO,KAAK,MAAZ,MAAwB,0BAAxB;AACA,SAAuB,IAAvB,EAA6B,IAA7B,QAAyC,UAAzC;AACA,SAAS,QAAT,QAAyB,6BAAzB;AACA,SAAS,YAAT,QAA6B,yBAA7B;AACA,SAAS,QAAT,QAAyB,gCAAzB;AAGA,OAAO,KAAK,MAAZ,MAAwB,0BAAxB;AAyDA;;;;;AAKG;;AACH,IAAA,UAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;;AAAhC,WAAA,UAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAUC,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,WAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AAEA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,kBAAA,EAAA;sBAAA;wBAAA;oBAAA;aAA6B,IAAI;AAAjC,KAAA;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,gBAAA,EAAA;sBAAA;wBAAA;oBAAA;aAA2B,IAAI;AAA/B,KAAA;AA+BA;;;;;;;AAOG;;AACH,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,SAAA,EAAA;sBAAA;wBAAA;oBAAA;aAAkD,IAAI,YAAJ,CACjD,QAAQ,CAAC,GAAT,CAAa,EAAb,CADiD,EAEjD,YAAA;AAAM,eAAA,QAAQ,CAAC,IAAT,CAAc,KAAI,CAAC,KAAnB,EAA0B;AAC/B,UAAA,SAAS,EAAE,MAAM,CAAC,SAAP,CAAiB,KAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,GAAtB,CAA0B,WAA1B,EAAuC,EAAvC,CAAjB,EAA6D,CAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,CAA7D;AADoB,SAA1B,EAEH,CAAC,KAAI,CAAC,OAAL,CAFE,QAEH,CAFG,CAAA;AAEqB,OAJsB;AAAlD,KAAA;AAgBA;;;;;;;AAOG;;AACH,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,OAAA,EAAA;sBAAA;wBAAA;oBAAA;aAAgD,IAAI,YAAJ,CAC/C,QAAQ,CAAC,GAAT,CAAa,EAAb,CAD+C,EAE/C,YAAA;AAAM,eAAA,QAAQ,CAAC,IAAT,CAAc,KAAI,CAAC,KAAnB,EAA0B;AAC/B,UAAA,SAAS,EAAE,MAAM,CAAC,SAAP,CAAiB,KAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,GAAtB,CAA0B,WAA1B,EAAuC,EAAvC,CAAjB,EAA6D,CAAC,MAAD,EAAS,QAAT,EAAmB,MAAnB,CAA7D;AADoB,SAA1B,EAEH,CAAC,KAAI,CAAC,KAAL,CAFE,QAEH,CAFG,CAAA;AAEmB,OAJsB;AAAhD,KAAA,EA5ED,CAmFC;;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,eAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,iBAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;;AA6fA;;;;;;WAnkBA,iBAAA;AACC,WAAK,cAAL,CAAoB,EAApB,CAAuB,UAAS,CAAT,EAAoB;AAC1C,eAAO,CAAC,CAAC,CAAD,CAAR;AACA,OAFD;;AAIA,WAAK,cAAL,CAAoB,EAApB,CAAuB,UAAS,CAAT,EAAoB;AAC1C,eAAO,CAAC,CAAC,CAAD,CAAR;AACA,OAFD;;AAIA,WAAK,cAAL,CAAoB,EAApB,CAAuB,UAAS,CAAT,EAAoB;AAC1C,eAAO,CAAC,CAAC,CAAD,CAAR;AACA,OAFD;;AAIA,WAAK,cAAL,CAAoB,EAApB,CAAuB,UAAS,CAAT,EAAoB;AAC1C,eAAO,CAAC,CAAC,CAAD,CAAR;AACA,OAFD;;AAIA,MAAA,MAAA,CAAA,SAAA,CAAM,SAAN,CAAe,IAAf,CAAe,IAAf;AACA;;AAED;;AAEG;;;;;;WACH,eAAkB,OAAlB,EAAiD;AAChD,UAAM,MAAM,GAAG,KAAK,aAAL,CAAmB,QAAnB,CAA4B,IAA5B,CAAiC,OAAO,CAAC,IAAR,EAAjC,CAAf;AACA,MAAA,OAAO,CAAC,IAAR,CAAa,MAAb;AACA,aAAO,MAAP;AACA;;AAiBD;;AAEG;;;;;;WACH,eAAgB,KAAhB,EAA6C;AAC5C,UAAM,IAAI,GAAG,KAAK,aAAL,CAAmB,QAAnB,CAA4B,IAA5B,CAAiC,KAAK,CAAC,IAAN,EAAjC,CAAb;AACA,MAAA,KAAK,CAAC,IAAN,CAAW,IAAX;AACA,aAAO,IAAP;AACA;;;;;;WAqBD,iBAAA;AAEC,WAAK,eAAL,GAAuB,SAAvB;AACA,WAAK,aAAL,GAAqB,SAArB;AAEA,UAAI,KAAK,GAAG,KAAK,GAAL,CAAS,OAAT,CAAZ;AACA,UAAI,KAAK,GAAG,KAAK,GAAL,CAAS,OAAT,CAAZ;;AAEA,UAAI,KAAK,OAAL,CAAa,QAAb,CAAJ,EAA4B;AAC3B,aAAK,OAAL,CAAa,QAAb,CAAsB,GAAtB,CAA0B,QAA1B,EAAoC,KAAK,GAAL,CAAS,QAAT,CAApC;AACA;;AACD,UAAI,KAAK,OAAL,CAAa,MAAb,CAAJ,EAA0B;AACzB,aAAK,KAAL,CAAW,QAAX,CAAoB,GAApB,CAAwB,MAAxB,EAAgC,KAAK,GAAL,CAAS,MAAT,CAAhC;AACA;;AAED,UAAI,KAAK,OAAL,CAAa,cAAb,CAAJ,EAAkC;AACjC,YAAM,YAAY,GAAG,KAAK,GAAL,CAAS,cAAT,CAArB;;AACA,YAAI,YAAJ,EAAkB;AACjB,eAAK,gBAAL,CAAsB,KAAtB,CAA4B,YAA5B;;AACA,eAAK,cAAL,CAAoB,KAApB,CAA0B,YAA1B;AACA;AACD;;AAED,UAAI,KAAK,CAAC,MAAN,IAAgB,KAAK,CAAC,MAA1B,EAAkC;AACjC,YAAI,KAAK,UAAL,IAAmB,KAAK,YAAxB,IAAwC,KAAK,WAA7C,IAA4D,KAAK,OAAL,CAAa,KAAb,CAA5D,IAAmF,KAAK,OAAL,CAAa,KAAb,CAAnF,IAA0G,KAAK,UAA/G,IAA6H,KAAK,OAAL,CAAa,SAAb,CAA7H,IAAwJ,KAAK,OAAL,CAAa,cAAb,CAA5J,EAA0L;AAEzL,eAAK,KAAL,CAAW,IAAX,CAAgB,UAAC,IAAD,EAAK;AACpB,YAAA,IAAI,CAAC,UAAL,CAAgB,SAAhB,EAA2B,KAA3B;AACA,WAFD;AAIA,eAAK,OAAL,CAAa,IAAb,CAAkB,UAAC,IAAD,EAAK;AACtB,YAAA,IAAI,CAAC,UAAL,CAAgB,SAAhB,EAA2B,KAA3B;AACA,WAFD;AAIA,eAAK,UAAL,CAAgB,IAAhB,CAAqB,UAAC,SAAD,EAAU;AAC9B,gBAAI,KAAK,GAAG,SAAS,CAAC,KAAtB;;AACA,gBAAI,KAAJ,EAAW;AACV,cAAA,KAAK,CAAC,IAAN,CAAW,UAAC,IAAD,EAAK;AACf,gBAAA,IAAI,CAAC,UAAL,CAAgB,SAAhB,EAA2B,KAA3B;AACA,eAFD;AAGA;;AAED,gBAAI,OAAO,GAAG,SAAS,CAAC,OAAxB;;AACA,gBAAI,OAAJ,EAAa;AACZ,cAAA,OAAO,CAAC,IAAR,CAAa,UAAC,MAAD,EAAO;AACnB,gBAAA,MAAM,CAAC,UAAP,CAAkB,SAAlB,EAA6B,KAA7B;AACA,eAFD;AAGA;AACD,WAdD;AAgBA,cAAI,UAAU,GAAG,KAAK,UAAL,CAAgB,YAAhB,EAA8B,CAA9B,CAAjB;AAEA,cAAI,mBAAmB,GAAG,KAAK,OAAL,CAAa,QAAb,CAAsB,GAAtB,CAA0B,eAA1B,CAA1B;AACA,cAAI,iBAAiB,GAAG,KAAK,KAAL,CAAW,QAAX,CAAoB,GAApB,CAAwB,eAAxB,CAAxB;AAEA,cAAI,mBAAmB,GAAG,IAA1B;AACA,cAAI,iBAAiB,GAAG,IAAxB;;AAEA,cAAI,mBAAJ,EAAyB;AACxB,YAAA,mBAAmB,GAAG,KAAtB;AACA;;AACD,cAAI,iBAAJ,EAAuB;AACtB,YAAA,iBAAiB,GAAG,KAApB;AACA;;yCAEQ,C,EAAC;AACT,gBAAI,QAAQ,GAAG,MAAA,CAAK,SAAL,CAAe,CAAf,CAAf;AACA,gBAAI,SAAS,GAAG,IAAhB;AACA,gBAAI,WAAW,GAAG,QAAQ,CAAC,WAA3B;;AACA,gBAAI,mBAAJ,EAAyB;AACxB,kBAAI,WAAW,CAAC,mBAAD,CAAf,EAAsC;AACrC,gBAAA,mBAAmB,GAAG,IAAtB;AACA;AACD;;AACD,gBAAI,iBAAJ,EAAuB;AACtB,kBAAI,WAAW,CAAC,iBAAD,CAAf,EAAoC;AACnC,gBAAA,iBAAiB,GAAG,IAApB;AACA;AACD;;AAED,YAAA,MAAM,CAAC,IAAP,CAAY,MAAA,CAAK,YAAjB,EAA+B,UAAC,KAAD,EAAM;AACpC,kBAAI,CAAC,KAAK,CAAC,QAAN,CAAe,QAAQ,CAAC,GAAT,CAAa,KAAb,CAAf,CAAL,EAAiD;AAChD,gBAAA,SAAS,GAAG,KAAZ;AACA;AACD,aAJD;;AAKA,gBAAI,SAAS,IAAI,mBAAb,IAAoC,iBAAxC,EAA2D;AAC1D,cAAA,UAAU,GAAG,CAAb;;AAEA;;;;;AAvBF,eAAK,IAAI,CAAC,GAAG,UAAU,GAAG,CAA1B,EAA6B,CAAC,IAAI,CAAlC,EAAqC,CAAC,EAAtC,EAAwC;kCAA/B,C;;;AAwBR;;AAED,cAAI,GAAG,GAAG,KAAK,SAAL,CAAe,MAAzB;AACA,cAAI,QAAQ,GAAG,KAAK,UAAL,CAAgB,UAAhB,EAA4B,GAA5B,CAAf;;AAEA,cAAI,QAAQ,GAAG,GAAf,EAAoB;AACnB,YAAA,QAAQ;;2CACC,C,EAAC;AACT,kBAAI,QAAQ,GAAG,MAAA,CAAK,SAAL,CAAe,CAAf,CAAf;AACA,kBAAI,SAAS,GAAG,IAAhB;AACA,cAAA,MAAM,CAAC,IAAP,CAAY,MAAA,CAAK,YAAjB,EAA+B,UAAC,KAAD,EAAM;AACpC,oBAAI,CAAC,KAAK,CAAC,QAAN,CAAe,QAAQ,CAAC,GAAT,CAAa,KAAb,CAAf,CAAL,EAAiD;AAChD,kBAAA,SAAS,GAAG,KAAZ;AACA;AACD,eAJD;;AAKA,kBAAI,SAAJ,EAAe;AACd,gBAAA,QAAQ,GAAG,CAAC,GAAG,CAAf;;AAEA;;;;;AAXF,iBAAK,IAAI,CAAC,GAAG,QAAb,EAAuB,CAAC,GAAG,GAA3B,EAAgC,CAAC,EAAjC,EAAmC;oCAA1B,C;;;AAYR;AACD;;AAED,eAAK,SAAL,GAAiB,QAAjB;AAEA,eAAK,OAAL,CAAa,KAAb;AACA,eAAK,KAAL,CAAW,KAAX;;AAEA,eAAK,aAAL,CAAmB,CAAnB,EAAsB,UAAtB;AACA;AACD,OA/FD,MAgGK;AACJ,aAAK,QAAL,GAAgB,IAAhB;AACA;;AAED,MAAA,MAAA,CAAA,SAAA,CAAM,eAAN,CAAqB,IAArB,CAAqB,IAArB;AACA;;;;;;WAED,eAAwB,YAAxB,EAA8C,aAA9C,EAAmE;AAAnE,UAAA,KAAA,GAAA,IAAA;;AACC,UAAI,QAAQ,GAAG,KAAK,SAApB;AACA,UAAI,eAAe,GAAG,QAAtB;AAEA,UAAM,YAAY,GAAG,KAAK,GAAL,CAAS,cAAT,CAArB;AACA,UAAM,OAAO,GAAG,KAAK,GAAL,CAAS,SAAT,CAAhB;AAEA,UAAM,IAAI,GAAG,KAAK,QAAL,CAAc,KAAK,KAAnB,CAAb;AAEA,UAAM,YAAY,GAAG,KAAK,aAA1B;AACA,UAAM,gBAAgB,GAAG,KAAK,KAAL,CAAW,QAApC;;AACA,UAAI,YAAY,IAAI,YAAY,IAAI,gBAApC,EAAsD;AACrD,QAAA,IAAI,CAAC,QAAL,GAAgB,YAAhB;AACA;;AAED,MAAA,IAAI,CAAC,UAAL,CAAgB,SAAhB,EAA2B,IAA3B;AAEA,UAAM,MAAM,GAAG,KAAK,UAAL,CAAgB,KAAK,OAArB,CAAf;AAEA,UAAM,cAAc,GAAG,KAAK,eAA5B;;AACA,UAAI,cAAc,IAAI,cAAc,IAAI,KAAK,OAAL,CAAa,QAArD,EAA+D;AAC9D,QAAA,MAAM,CAAC,QAAP,GAAkB,cAAlB;AACA;;AAED,MAAA,MAAM,CAAC,UAAP,CAAkB,SAAlB,EAA6B,IAA7B;AAEA,UAAI,KAAK,GAAG,KAAK,GAAL,CAAS,OAAT,CAAZ;AACA,UAAI,KAAK,GAAG,KAAK,GAAL,CAAS,OAAT,CAAZ;AACA,UAAI,QAAQ,GAAG,KAAK,GAAL,CAAS,UAAT,CAAf;AAEA,UAAI,GAAG,GAAG,KAAK,GAAL,CAAS,KAAT,EAAgB,CAAhB,CAAV;AACA,UAAI,GAAG,GAAG,KAAK,GAAL,CAAS,KAAT,EAAgB,CAAhB,CAAV;AAEA,UAAI,MAAM,GAAG,KAAK,OAAlB;AACA,UAAI,MAAM,GAAG,KAAK,OAAlB;AAEA,UAAI,UAAU,GAAG,KAAK,WAAtB;AACA,UAAI,UAAU,GAAG,KAAK,WAAtB;AAEA,UAAM,eAAe,GAAG,KAAK,GAAL,CAAS,iBAAT,CAAxB;AACA,UAAM,eAAe,GAAG,KAAK,GAAL,CAAS,iBAAT,CAAxB;;AAEA,UAAI,CAAC,eAAL,EAAsB;AACrB,QAAA,UAAU,GAAG,KAAK,OAAlB;AACA;;AAED,UAAI,CAAC,eAAL,EAAsB;AACrB,QAAA,UAAU,GAAG,KAAK,OAAlB;AACA;;AAED,UAAM,OAAO,GAAG,KAAK,GAAL,CAAS,SAAT,CAAhB;AAEA,UAAM,QAAQ,GAAG,KAAK,CAAC,YAAN,EAAjB;AACA,UAAM,QAAQ,GAAG,KAAK,CAAC,YAAN,EAAjB;AAEA,UAAI,SAAJ;;AACA,UAAI,QAAQ,KAAK,KAAjB,EAAwB;AACvB,QAAA,SAAS,GAAG,KAAK,OAAjB;AACA,OAFD,MAGK;AACJ,QAAA,SAAS,GAAG,KAAK,OAAjB;AACA;;AAED,UAAM,QAAQ,GAAgC,EAA9C;AACA,UAAI,MAAM,GAAyB,EAAnC;AACA,MAAA,QAAQ,CAAC,IAAT,CAAc,MAAd;AAEA,UAAM,mBAAmB,GAAG,KAAK,OAAL,CAAa,QAAb,CAAsB,GAAtB,CAA0B,eAA1B,CAA5B;AACA,UAAM,iBAAiB,GAAG,KAAK,KAAL,CAAW,QAAX,CAAoB,GAApB,CAAwB,eAAxB,CAA1B;AAEA,UAAI,SAAS,GAAG,KAAK,GAAL,CAAS,WAAT,EAAsB,GAAtB,CAAhB;AACA,UAAI,SAAS,GAAG,KAAK,GAAL,CAAS,WAAT,EAAsB,GAAtB,CAAhB;AAEA,UAAI,aAAa,GAAG,KAAK,GAAL,CAAS,eAAT,EAA0B,SAA1B,CAApB;AACA,UAAI,aAAa,GAAG,KAAK,GAAL,CAAS,eAAT,EAA0B,SAA1B,CAApB;AAEA,UAAI,CAAJ;AAEA,UAAI,WAAW,GAAG,KAAK,KAAL,CAAW,QAAX,CAAoB,GAApB,CAAwB,SAAxB,CAAlB;;AACA,UAAI,KAAK,UAAL,CAAgB,MAAhB,GAAyB,CAA7B,EAAgC;AAC/B,QAAA,WAAW,GAAG,IAAd;AACA;;AAED,UAAI,OAAO,GAAG,KAAd;;AACA,UAAI,OAAO,IAAI,eAAX,IAA8B,eAAlC,EAAmD;AAClD,QAAA,OAAO,GAAG,IAAV;AACA;;AAED,UAAM,CAAC,GAAG;AACT,QAAA,MAAM,EAAA,MADG;AACD,QAAA,QAAQ,EAAA,QADP;AACS,QAAA,OAAO,EAAA,OADhB;AACkB,QAAA,OAAO,EAAA,OADzB;AAC2B,QAAA,QAAQ,EAAA,QADnC;AACqC,QAAA,QAAQ,EAAA,QAD7C;AAC+C,QAAA,WAAW,EAAA,WAD1D;AAC4D,QAAA,MAAM,EAAA,MADlE;AACoE,QAAA,MAAM,EAAA,MAD1E;AAC4E,QAAA,UAAU,EAAA,UADtF;AACwF,QAAA,UAAU,EAAA,UADlG;AACoG,QAAA,GAAG,EAAA,GADvG;AACyG,QAAA,GAAG,EAAA,GAD5G;AAC8G,QAAA,QAAQ,EAAA,QADtH;AACwH,QAAA,KAAK,EAAA,KAD7H;AAC+H,QAAA,KAAK,EAAA,KADpI;AACsI,QAAA,SAAS,EAAA,SAD/I;AACiJ,QAAA,SAAS,EAAA,SAD1J;AAC4J,QAAA,aAAa,EAAA,aADzK;AAC2K,QAAA,aAAa,EAAA;AADxL,OAAV;;AAIA,WAAK,CAAC,GAAG,aAAT,EAAwB,CAAC,GAAG,eAA5B,EAA6C,CAAC,EAA9C,EAAkD;AACjD,YAAM,QAAQ,GAAG,KAAK,UAAL,CAAgB,CAAhB,CAAjB;AAEA,YAAI,MAAM,GAAG,QAAQ,CAAC,GAAT,CAAa,MAAb,CAAb;AACA,YAAI,MAAM,GAAG,QAAQ,CAAC,GAAT,CAAa,MAAb,CAAb;;AAEA,YAAI,MAAM,IAAI,IAAV,IAAkB,MAAM,IAAI,IAAhC,EAAsC;AACrC,cAAI,CAAC,OAAL,EAAc;AACb,YAAA,MAAM,GAAG,EAAT;AACA,YAAA,QAAQ,CAAC,IAAT,CAAc,MAAd;AACA,YAAA,CAAC,CAAC,MAAF,GAAW,MAAX;AACA;AACD,SAND,MAOK;AACJ,eAAK,UAAL,CAAgB,QAAhB,EAA0B,CAA1B;AACA;;AAED,YAAI,mBAAJ,EAAyB;AACxB,cAAI,gBAAc,GAAI,QAAQ,CAAC,WAAT,CAA6B,mBAA7B,CAAtB;;AACA,cAAI,gBAAJ,EAAoB;AACnB,gBAAI,EAAE,gBAAc,YAAY,QAA5B,CAAJ,EAA2C;AAC1C,cAAA,gBAAc,GAAG,QAAQ,CAAC,GAAT,CAAa,gBAAb,CAAjB;AACA;;AAED,iBAAK,eAAL,GAAuB,gBAAvB;;AACA,gBAAI,CAAC,GAAG,aAAR,EAAuB;AACtB,cAAA,eAAe,GAAG,CAAlB;AACA;AACA,aAHD,MAIK;AACJ,cAAA,MAAM,CAAC,QAAP,GAAkB,gBAAlB;AACA;AACD;AACD;;AAED,YAAI,iBAAJ,EAAuB;AACtB,cAAI,cAAY,GAAI,QAAQ,CAAC,WAAT,CAA6B,iBAA7B,CAApB;;AACA,cAAI,cAAJ,EAAkB;AACjB,gBAAI,EAAE,cAAY,YAAY,QAA1B,CAAJ,EAAyC;AACxC,cAAA,cAAY,GAAG,QAAQ,CAAC,GAAT,CAAa,cAAb,CAAf;AACA;;AAED,iBAAK,aAAL,GAAqB,cAArB;;AACA,gBAAI,CAAC,GAAG,aAAR,EAAuB;AACtB,cAAA,eAAe,GAAG,CAAlB;AACA;AACA,aAHD,MAIK;AACJ,cAAA,IAAI,CAAC,QAAL,GAAgB,cAAhB;AACA;AACD;AACD;;AAED,YAAI,CAAC,OAAL,EAAc;AACb,cAAI,QAAQ,GAAG,KAAK,SAAL,CAAe,CAAC,GAAG,CAAnB,CAAf;;AACA,cAAI,QAAJ,EAAc;AACb,gBAAI,QAAQ,CAAC,SAAT,CAAmB,QAAnB,EAA6B,QAA7B,EAAuC,YAAvC,EAAqD,SAArD,CAAJ,EAAqE;AACpE,cAAA,MAAM,GAAG,EAAT;AACA,cAAA,QAAQ,CAAC,IAAT,CAAc,MAAd;AACA,cAAA,CAAC,CAAC,MAAF,GAAW,MAAX;AACA;AACD;AACD;AACD;;AAGD,UAAI,CAAC,KAAK,QAAV,EAAoB;AACnB,aAAK,QAAL,CAAc,MAAd,EAAsB,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CAAtB;AACA;;AAED,UAAI,MAAJ,EAAY;AACX,aAAK,WAAL,CAAiB,MAAjB,EAAyB,QAAzB;AACA;;AAED,UAAI,IAAJ,EAAU;AACT,aAAK,SAAL,CAAe,IAAf,EAAqB,QAArB;AACA;;AAED,WAAK,UAAL,CAAgB,IAAhB,CAAqB,UAAC,SAAD,EAAU;AAC9B,YAAM,SAAS,GAAG,SAAS,CAAC,SAA5B;AACA,YAAM,KAAK,GAAG,SAAS,CAAC,KAAxB;;AACA,YAAI,IAAI,GAAG,KAAI,CAAC,QAAL,CAAc,KAAd,CAAX;;AACA,YAAI,SAAJ,EAAe;AACd,UAAA,SAAS,CAAC,QAAV,CAAmB,IAAnB,CAAwB,IAAxB;AACA;;AAED,QAAA,IAAI,CAAC,UAAL,CAAgB,SAAhB,EAA2B,IAA3B;;AACA,QAAA,KAAI,CAAC,SAAL,CAAe,IAAf,EAAqB,QAArB;;AAEA,YAAM,OAAO,GAAG,SAAS,CAAC,OAA1B;;AACA,YAAI,MAAM,GAAG,KAAI,CAAC,UAAL,CAAgB,OAAhB,CAAb;;AACA,YAAI,SAAJ,EAAe;AACd,UAAA,SAAS,CAAC,QAAV,CAAmB,IAAnB,CAAwB,MAAxB;AACA;;AAED,QAAA,MAAM,CAAC,UAAP,CAAkB,SAAlB,EAA6B,IAA7B;;AACA,QAAA,KAAI,CAAC,WAAL,CAAiB,MAAjB,EAAyB,QAAzB;AACA,OAnBD;;AAqBA,UAAI,eAAe,GAAG,QAAtB,EAAgC;AAC/B,aAAK,aAAL,CAAmB,YAAY,GAAG,CAAlC,EAAqC,eAArC;AACA;AACD;;;;;;WAED,eAAqB,QAArB,EAAoE,CAApE,EAA+f;AAC9f,UAAI,MAAM,GAAG,CAAC,CAAC,MAAf;AAEA,UAAI,aAAa,GAAG,QAAQ,CAAC,GAAT,CAAa,WAAb,EAA0B,CAAC,CAAC,SAA5B,CAApB;AACA,UAAI,aAAa,GAAG,QAAQ,CAAC,GAAT,CAAa,WAAb,EAA0B,CAAC,CAAC,SAA5B,CAApB;AAEA,UAAI,IAAI,GAAG,CAAC,CAAC,KAAF,CAAQ,oBAAR,CAA6B,QAA7B,EAAuC,CAAC,CAAC,MAAzC,EAAiD,aAAjD,EAAgE,CAAC,CAAC,GAAlE,CAAX;AACA,UAAI,IAAI,GAAG,CAAC,CAAC,KAAF,CAAQ,oBAAR,CAA6B,QAA7B,EAAuC,CAAC,CAAC,MAAzC,EAAiD,aAAjD,EAAgE,CAAC,CAAC,GAAlE,CAAX;;AAEA,UAAI,KAAK,cAAL,CAAoB,IAApB,CAAJ,EAA+B;AAE9B,YAAM,MAAM,GAAG,KAAK,QAAL,CAAc,IAAd,EAAoB,IAApB,CAAf;AACA,YAAM,KAAK,GAAG,CAAC,MAAM,CAAC,CAAR,EAAW,MAAM,CAAC,CAAlB,CAAd;AAEA,QAAA,MAAM,CAAC,CAAP,IAAY,KAAK,EAAjB;AACA,QAAA,MAAM,CAAC,CAAP,IAAY,KAAK,EAAjB;AAEA,QAAA,QAAQ,CAAC,GAAT,CAAa,OAAb,EAAsB,MAAtB;;AAEA,YAAI,CAAC,CAAC,WAAN,EAAmB;AAClB,cAAI,KAAK,GAAW,IAApB;AACA,cAAI,KAAK,GAAW,IAApB;;AAEA,cAAI,CAAC,CAAC,QAAF,KAAe,CAAC,CAAC,KAArB,EAA4B;AAC3B,YAAA,KAAK,GAAG,CAAC,CAAC,QAAV;AACA,WAFD,MAGK,IAAI,CAAC,CAAC,QAAF,KAAe,CAAC,CAAC,KAArB,EAA4B;AAChC,YAAA,KAAK,GAAG,CAAC,CAAC,QAAV;AACA;;AAED,cAAI,CAAC,CAAC,OAAN,EAAe;AACd,gBAAI,MAAM,GAAG,QAAQ,CAAC,GAAT,CAAa,CAAC,CAAC,UAAf,CAAb;AACA,gBAAI,MAAM,GAAG,QAAQ,CAAC,GAAT,CAAa,CAAC,CAAC,UAAf,CAAb;;AAEA,gBAAI,MAAM,IAAI,IAAV,IAAkB,MAAM,IAAI,IAAhC,EAAsC;AACrC,kBAAI,eAAa,GAAG,QAAQ,CAAC,GAAT,CAAa,eAAb,EAA8B,CAAC,CAAC,aAAhC,CAApB;AACA,kBAAI,eAAa,GAAG,QAAQ,CAAC,GAAT,CAAa,eAAb,EAA8B,CAAC,CAAC,aAAhC,CAApB;;AAEA,kBAAI,CAAC,CAAC,OAAN,EAAe;AACd,oBAAI,YAAY,GAAG,QAAQ,CAAC,GAAT,CAAa,cAAb,CAAnB;AACA,oBAAI,YAAY,GAAG,QAAQ,CAAC,GAAT,CAAa,cAAb,CAAnB;;AAEA,oBAAI,YAAJ,EAAkB;AACjB,kBAAA,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,oBAAR,CAA6B,YAA7B,EAA2C,CAAC,CAAC,MAA7C,EAAqD,eAArD,EAAqE,YAAY,CAAC,SAAb,CAAoC,GAApC,CAAwC,KAAxC,CAArE,CAAR;;AACA,sBAAG,KAAK,CAAC,KAAN,CAAY,KAAZ,CAAH,EAAsB;AACrB,oBAAA,KAAK,GAAG,CAAC,CAAC,QAAV;AACA;AACD,iBALD,MAMK;AACJ,sBAAI,CAAC,CAAC,KAAF,KAAY,CAAC,CAAC,QAAlB,EAA4B;AAC3B,oBAAA,KAAK,GAAG,CAAC,CAAC,QAAV;AACA,mBAFD,MAGK;AACJ,oBAAA,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,oBAAR,CAA6B,QAA7B,EAAuC,CAAC,CAAC,UAAzC,EAAqD,eAArD,EAAoE,CAAC,CAAC,GAAtE,CAAR;AACA;AACD;;AAED,oBAAI,YAAJ,EAAkB;AACjB,kBAAA,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,oBAAR,CAA6B,YAA7B,EAA2C,CAAC,CAAC,MAA7C,EAAqD,eAArD,EAAqE,YAAY,CAAC,SAAb,CAAoC,GAApC,CAAwC,KAAxC,CAArE,CAAR;;AACA,sBAAG,KAAK,CAAC,KAAN,CAAY,KAAZ,CAAH,EAAsB;AACrB,oBAAA,KAAK,GAAG,CAAC,CAAC,QAAV;AACA;AACD,iBALD,MAMK;AACJ,sBAAI,CAAC,CAAC,KAAF,KAAY,CAAC,CAAC,QAAlB,EAA4B;AAC3B,oBAAA,KAAK,GAAG,CAAC,CAAC,QAAV;AACA,mBAFD,MAGK;AACJ,oBAAA,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,oBAAR,CAA6B,QAA7B,EAAuC,CAAC,CAAC,UAAzC,EAAqD,eAArD,EAAoE,CAAC,CAAC,GAAtE,CAAR;AACA;AACD;AACD,eAjCD,MAkCK;AACJ,gBAAA,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,oBAAR,CAA6B,QAA7B,EAAuC,CAAC,CAAC,UAAzC,EAAqD,eAArD,EAAoE,CAAC,CAAC,GAAtE,CAAR;AACA,gBAAA,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,oBAAR,CAA6B,QAA7B,EAAuC,CAAC,CAAC,UAAzC,EAAqD,eAArD,EAAoE,CAAC,CAAC,GAAtE,CAAR;AACA;AACD;AACD;;AAED,cAAI,WAAW,GAAG,KAAK,QAAL,CAAc,KAAd,EAAqB,KAArB,CAAlB;AAEA,UAAA,KAAK,CAAC,CAAD,CAAL,GAAW,WAAW,CAAC,CAAvB;AACA,UAAA,KAAK,CAAC,CAAD,CAAL,GAAW,WAAW,CAAC,CAAvB;AACA;;AAED,QAAA,MAAM,CAAC,IAAP,CAAY,KAAZ;AACA;AACD;;;;;;WAGD,eAAmB,OAAnB,EAAkD,WAAlD,EAA4E,CAE3E;;;;;;WAED,eAAsB,QAAtB,EAA0C,QAA1C,EAAgE;AAAhE,UAAA,KAAA,GAAA,IAAA;;AACC,UAAI,QAAQ,CAAC,GAAT,CAAa,SAAb,CAAJ,EAA6B;AAC5B,QAAA,QAAQ,CAAC,GAAT,CAAa,MAAb,EAAqB,UAAC,OAAD,EAAQ;AAC5B,UAAA,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,UAAC,OAAD,EAAQ;AAC7B,YAAA,KAAI,CAAC,gBAAL,CAAsB,OAAtB,CAA8B,OAA9B;;AACA,YAAA,KAAI,CAAC,gBAAL,CAAsB,OAAtB;AACA,WAHD;AAIA,SALD;AAMA;AACD;;;;;;WAED,eAAoB,QAApB,EAAwC,QAAxC,EAA8D;AAA9D,UAAA,KAAA,GAAA,IAAA;;AACC,UAAI,QAAQ,CAAC,GAAT,CAAa,SAAb,CAAJ,EAA6B;AAC5B,QAAA,QAAQ,CAAC,GAAT,CAAa,MAAb,EAAqB,UAAC,OAAD,EAAQ;AAC5B,UAAA,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,UAAC,OAAD,EAAQ;AAC7B,YAAA,KAAI,CAAC,cAAL,CAAoB,OAApB,CAA4B,OAA5B;;AACA,YAAA,KAAI,CAAC,cAAL,CAAoB,OAApB;AACA,WAHD;AAIA,SALD;AAMA;AACD;;;;;;WAED,eAA4B,SAA5B,EAA6D;AAA7D,UAAA,KAAA,GAAA,IAAA;;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,EAAwB,SAAxB;;AACA,MAAA,SAAS,CAAC,KAAV,GAAkB,IAAI,YAAJ,CACjB,QAAQ,CAAC,GAAT,CAAa,EAAb,CADiB,EAEjB,YAAA;AAAM,eAAA,QAAQ,CAAC,IAAT,CAAc,KAAI,CAAC,KAAnB,EAA0B;AAC/B,UAAA,SAAS,EAAE,MAAM,CAAC,SAAP,CAAiB,SAAS,CAAC,KAAV,CAAiB,QAAjB,CAA0B,GAA1B,CAA8B,WAA9B,EAA2C,EAA3C,CAAjB,EAAiE,CAAC,MAAD,EAAS,QAAT,EAAmB,MAAnB,CAAjE;AADoB,SAA1B,EAEH,CAAC,KAAI,CAAC,KAAL,CAAW,QAAZ,EAAsB,SAAS,CAAC,KAAV,CAFnB,QAEH,CAFG,CAAA;AAE8C,OAJnC,CAAlB;AAOA,MAAA,SAAS,CAAC,OAAV,GAAoB,IAAI,YAAJ,CACnB,QAAQ,CAAC,GAAT,CAAa,EAAb,CADmB,EAEnB,YAAA;AAAM,eAAA,QAAQ,CAAC,IAAT,CAAc,KAAI,CAAC,KAAnB,EAA0B;AAC/B,UAAA,SAAS,EAAE,MAAM,CAAC,SAAP,CAAiB,SAAS,CAAC,OAAV,CAAmB,QAAnB,CAA4B,GAA5B,CAAgC,WAAhC,EAA6C,EAA7C,CAAjB,EAAmE,CAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,CAAnE;AADoB,SAA1B,EAEH,CAAC,KAAI,CAAC,OAAL,CAAa,QAAd,EAAwB,SAAS,CAAC,OAAV,CAFrB,QAEH,CAFG,CAAA;AAEkD,OAJrC,CAApB;AAMA;;AAED;;AAEG;;;;;;WACH,eAA0B,SAA1B,EAAyE;AAExE,UAAM,cAAc,GAAG,KAAK,GAAL,CAAS,gBAAT,CAAvB;;AAEA,UAAI,cAAJ,EAAoB;AACnB,YAAM,MAAM,GAAG,cAAc,CAAC,GAAf,CAAmB,QAAnB,CAAf;AAEA,YAAM,eAAe,GAAG,cAAc,CAAC,GAAf,CAAmB,iBAAnB,CAAxB;;AACA,YAAI,eAAJ,EAAqB;AACpB,UAAA,eAAe,CAAC,UAAhB,CAA2B,SAA3B,EAAsC,KAAtC;AACA;;AAED,YAAM,YAAY,GAAG,MAAM,CAAC,QAAP,CAAgB,IAAhB,CAAqB,QAAQ,CAAC,IAAT,CAAc,KAAK,KAAnB,EAA0B;AACnE,UAAA,SAAS,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,EAA6B,QAA7B,EAAuC,QAAvC;AADwD,SAA1B,EAEvC,CAAC,KAAK,OAAL,CAAa,QAAd,CAFuC,CAArB,CAArB;AAIA,YAAM,UAAU,GAAG,MAAM,CAAC,QAAP,CAAgB,IAAhB,CAAqB,QAAQ,CAAC,IAAT,CAAc,KAAK,KAAnB,EAA0B;AACjE,UAAA,SAAS,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,EAA6B,QAA7B,EAAuC,MAAvC;AADsD,SAA1B,EAErC,CAAC,KAAK,KAAL,CAAW,QAAZ,CAFqC,CAArB,CAAnB;;AAIA,YAAM,aAAa,GAAG,KAAK,KAAL,CAAW,eAAX,CAA2B,GAA3B,CAA+B,UAA/B,CAAtB;;AAEA,QAAA,YAAY,CAAC,MAAb,CAAoB,MAApB,CAA2B,UAA3B,EAAuC;AAAE,UAAA,IAAI,EAAE,aAAR;AAAuB,UAAA,MAAM,EAAE;AAA/B,SAAvC;AACA,QAAA,UAAU,CAAC,MAAX,CAAkB,MAAlB,CAAyB,UAAzB,EAAqC;AAAE,UAAA,IAAI,EAAE,aAAR;AAAuB,UAAA,MAAM,EAAE;AAA/B,SAArC;;AAEA,YAAI,KAAK,OAAL,CAAa,MAAb,GAAsB,CAA1B,EAA6B;AAC5B,cAAM,cAAc,GAAG,KAAK,OAAL,CAAa,QAAb,CAAsB,CAAtB,CAAvB;;AACA,cAAI,cAAJ,EAAoB;AACnB,gBAAM,MAAM,GAAG,cAAc,CAAC,KAAK,KAAN,EAAa,IAAb,EAAmB,IAAI,QAAJ,CAAa,IAAb,EAAmB,EAAnB,EAAuB,EAAvB,CAAnB,CAA7B;;AACA,gBAAG,MAAH,EAAU;AACT,kBAAM,MAAM,GAAG,MAAM,CAAC,GAAP,CAAW,QAAX,CAAf;;AAEA,kBAAI,MAAM,YAAY,QAAtB,EAAgC;AAC/B,gBAAA,MAAM,CAAC,MAAP,CAAc,MAAd,CAAqB,UAArB,EAAiC;AAAE,kBAAA,IAAI,EAAE,aAAR;AAAuB,kBAAA,MAAM,EAAE;AAA/B,iBAAjC;AACA;;AAID,kBAAI,MAAJ,EAAY;AACX,gBAAA,MAAM,CAAC,GAAP,CAAW,aAAX,EAA0B,SAA1B;AAEA,gBAAA,MAAM,CAAC,QAAP,CAAgB,IAAhB,CAAqB,MAArB;AACA,gBAAA,MAAM,CAAC,MAAP,CAAc;AAAE,kBAAA,CAAC,EAAE,MAAM,CAAC,KAAP,KAAiB,CAAtB;AAAyB,kBAAA,CAAC,EAAE,MAAM,CAAC,MAAP,KAAkB;AAA9C,iBAAd;AACA;AACD;AACD;AACD;AACD;AACD;;AA1kBD,EAAA,MAAA,CAAA,cAAA,CAAA,UAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,UAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,QAAQ,CAAC,UAAT,CAAoB,MAApB,CAA2B,CAAC,UAAU,CAAC,SAAZ,CAA3B;AAA1C,GAAA;AA0kBD,SAAA,UAAA;AAAC,CAllBD,CAAgC,QAAhC,CAAA;;SAAa,U","sourcesContent":["import { XYSeries, IXYSeriesPrivate, IXYSeriesSettings, IXYSeriesDataItem, IXYSeriesAxisRange } from \"./XYSeries\";\nimport { Graphics } from \"../../../core/render/Graphics\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $array from \"../../../core/util/Array\";\nimport { CurveFactory, line, area } from \"d3-shape\";\nimport { Template } from \"../../../core/util/Template\";\nimport { ListTemplate } from \"../../../core/util/List\";\nimport { DataItem } from \"../../../core/render/Component\";\nimport type { Axis } from \"../axes/Axis\";\nimport type { AxisRenderer } from \"../axes/AxisRenderer\";\nimport * as $utils from \"../../../core/util/Utils\";\n\nexport interface IPointOptions {\n}\n\nexport interface ILineSeriesDataItem extends IXYSeriesDataItem {\n}\n\nexport interface ILineSeriesSettings extends IXYSeriesSettings {\n\n\t/**\n\t * If set to `true` the line will connect over \"gaps\" - categories or time\n\t * intervals with no data.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/line-series/#Gaps} for more info\n\t * @default true\n\t */\n\tconnect?: boolean;\n\n\t/**\n\t * If there are more than `autoGapCount` base time intervals (e.g. days) with\n\t * no data, the line will break and will display gap.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/line-series/#Auto_gaps_with_dates} for more info\n\t * @default 1.1\n\t */\n\tautoGapCount?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tcurveFactory?: CurveFactory;\n}\n\nexport interface ILineSeriesPrivate extends IXYSeriesPrivate {\n}\n\n/**\n * Interface representing a [[LineSeries]] axis range.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/#Series_axis_ranges} for more info\n */\nexport interface ILineSeriesAxisRange extends IXYSeriesAxisRange {\n\n\t/**\n\t * A list template to use when applying line settings to the line segments covered\n\t * by an axis range.\n\t */\n\tstrokes?: ListTemplate<Graphics>;\n\n\t/**\n\t * A list template to use when applying fill settings to the fill segments covered\n\t * by an axis range.\n\t */\n\tfills?: ListTemplate<Graphics>;\n}\n\n/**\n * Used to plot line and/or area series.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/line-series/} for more info\n * @important\n */\nexport class LineSeries extends XYSeries {\n\n\tdeclare public _settings: ILineSeriesSettings;\n\tdeclare public _privateSettings: ILineSeriesPrivate;\n\tdeclare public _dataItemSettings: ILineSeriesDataItem;\n\tdeclare public _axisRangeType: ILineSeriesAxisRange;\n\n\tpublic static className: string = \"LineSeries\";\n\tpublic static classNames: Array<string> = XYSeries.classNames.concat([LineSeries.className]);\n\n\tprotected _endIndex!: number;\n\n\tprotected _strokeGenerator = line();\n\tprotected _fillGenerator = area();\n\n\tprotected _afterNew() {\n\t\tthis._fillGenerator.y0(function(p: number[]) {\n\t\t\treturn p[3];\n\t\t});\n\n\t\tthis._fillGenerator.x0(function(p: number[]) {\n\t\t\treturn p[2];\n\t\t});\n\n\t\tthis._fillGenerator.y1(function(p: number[]) {\n\t\t\treturn p[1];\n\t\t});\n\n\t\tthis._fillGenerator.x1(function(p: number[]) {\n\t\t\treturn p[0];\n\t\t});\n\n\t\tsuper._afterNew();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeStroke(strokes: ListTemplate<Graphics>): Graphics {\n\t\tconst stroke = this.mainContainer.children.push(strokes.make());\n\t\tstrokes.push(stroke);\n\t\treturn stroke;\n\t}\n\n\t/**\n\t * A [[TemplateList]] of all line segments in series.\n\t *\n\t * `strokes.template` can be used to set default settings for all line\n\t * segments, or to change on existing ones.\n\t *\n\t * @default new ListTemplate<Graphics>\n\t */\n\tpublic readonly strokes: ListTemplate<Graphics> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Graphics._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.strokes.template.get(\"themeTags\", []), [\"line\", \"series\", \"stroke\"])\n\t\t}, [this.strokes.template]),\n\t);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeFill(fills: ListTemplate<Graphics>): Graphics {\n\t\tconst fill = this.mainContainer.children.push(fills.make());\n\t\tfills.push(fill);\n\t\treturn fill;\n\t}\n\n\t/**\n\t * A [[TemplateList]] of all segment fills in series.\n\t *\n\t * `fills.template` can be used to set default settings for all segment\n\t * fills, or to change on existing ones.\n\t *\n\t * @default new ListTemplate<Graphics>\n\t */\n\tpublic readonly fills: ListTemplate<Graphics> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Graphics._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.strokes.template.get(\"themeTags\", []), [\"line\", \"series\", \"fill\"])\n\t\t}, [this.fills.template]),\n\t);\n\n\t// custom set from data\n\tprotected _fillTemplate: Template<Graphics> | undefined;\n\tprotected _strokeTemplate: Template<Graphics> | undefined;\n\n\tpublic _updateChildren() {\n\n\t\tthis._strokeTemplate = undefined;\n\t\tthis._fillTemplate = undefined;\n\n\t\tlet xAxis = this.get(\"xAxis\");\n\t\tlet yAxis = this.get(\"yAxis\");\n\n\t\tif (this.isDirty(\"stroke\")) {\n\t\t\tthis.strokes.template.set(\"stroke\", this.get(\"stroke\"));\n\t\t}\n\t\tif (this.isDirty(\"fill\")) {\n\t\t\tthis.fills.template.set(\"fill\", this.get(\"fill\"));\n\t\t}\n\n\t\tif (this.isDirty(\"curveFactory\")) {\n\t\t\tconst curveFactory = this.get(\"curveFactory\")!;\n\t\t\tif (curveFactory) {\n\t\t\t\tthis._strokeGenerator.curve(curveFactory);\n\t\t\t\tthis._fillGenerator.curve(curveFactory);\n\t\t\t}\n\t\t}\n\n\t\tif (xAxis.inited && yAxis.inited) {\n\t\t\tif (this._axesDirty || this._valuesDirty || this._stackDirty || this.isDirty(\"vcx\") || this.isDirty(\"vcy\") || this._sizeDirty || this.isDirty(\"connect\") || this.isDirty(\"curveFactory\")) {\n\n\t\t\t\tthis.fills.each((fill) => {\n\t\t\t\t\tfill.setPrivate(\"visible\", false);\n\t\t\t\t})\n\n\t\t\t\tthis.strokes.each((fill) => {\n\t\t\t\t\tfill.setPrivate(\"visible\", false);\n\t\t\t\t})\n\n\t\t\t\tthis.axisRanges.each((axisRange) => {\n\t\t\t\t\tlet fills = axisRange.fills;\n\t\t\t\t\tif (fills) {\n\t\t\t\t\t\tfills.each((fill) => {\n\t\t\t\t\t\t\tfill.setPrivate(\"visible\", false);\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\n\t\t\t\t\tlet strokes = axisRange.strokes;\n\t\t\t\t\tif (strokes) {\n\t\t\t\t\t\tstrokes.each((stroke) => {\n\t\t\t\t\t\t\tstroke.setPrivate(\"visible\", false);\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tlet startIndex = this.getPrivate(\"startIndex\", 0);\n\n\t\t\t\tlet strokeTemplateField = this.strokes.template.get(\"templateField\");\n\t\t\t\tlet fillTemplateField = this.fills.template.get(\"templateField\");\n\n\t\t\t\tlet strokeTemplateFound = true;\n\t\t\t\tlet fillTemplateFound = true;\n\n\t\t\t\tif (strokeTemplateField) {\n\t\t\t\t\tstrokeTemplateFound = false;\n\t\t\t\t}\n\t\t\t\tif (fillTemplateField) {\n\t\t\t\t\tfillTemplateFound = false;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = startIndex - 1; i >= 0; i--) {\n\t\t\t\t\tlet dataItem = this.dataItems[i];\n\t\t\t\t\tlet hasValues = true;\n\t\t\t\t\tlet dataContext = dataItem.dataContext as any;\n\t\t\t\t\tif (strokeTemplateField) {\n\t\t\t\t\t\tif (dataContext[strokeTemplateField]) {\n\t\t\t\t\t\t\tstrokeTemplateFound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (fillTemplateField) {\n\t\t\t\t\t\tif (dataContext[fillTemplateField]) {\n\t\t\t\t\t\t\tfillTemplateFound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$array.each(this._valueFields, (field) => {\n\t\t\t\t\t\tif (!$type.isNumber(dataItem.get(field as any))) {\n\t\t\t\t\t\t\thasValues = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\tif (hasValues && strokeTemplateFound && fillTemplateFound) {\n\t\t\t\t\t\tstartIndex = i;\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet len = this.dataItems.length;\n\t\t\t\tlet endIndex = this.getPrivate(\"endIndex\", len);\n\n\t\t\t\tif (endIndex < len) {\n\t\t\t\t\tendIndex++;\n\t\t\t\t\tfor (let i = endIndex; i < len; i++) {\n\t\t\t\t\t\tlet dataItem = this.dataItems[i];\n\t\t\t\t\t\tlet hasValues = true;\n\t\t\t\t\t\t$array.each(this._valueFields, (field) => {\n\t\t\t\t\t\t\tif (!$type.isNumber(dataItem.get(field as any))) {\n\t\t\t\t\t\t\t\thasValues = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif (hasValues) {\n\t\t\t\t\t\t\tendIndex = i + 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._endIndex = endIndex;\n\n\t\t\t\tthis.strokes.clear();\n\t\t\t\tthis.fills.clear();\n\n\t\t\t\tthis._startSegment(0, startIndex);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis._skipped = true;\n\t\t}\n\n\t\tsuper._updateChildren();\n\t}\n\n\tprotected _startSegment(segmentIndex: number, dataItemIndex: number) {\n\t\tlet endIndex = this._endIndex;\n\t\tlet currentEndIndex = endIndex;\n\n\t\tconst autoGapCount = this.get(\"autoGapCount\")!;\n\t\tconst connect = this.get(\"connect\");\n\n\t\tconst fill = this.makeFill(this.fills);\n\n\t\tconst fillTemplate = this._fillTemplate;\n\t\tconst originalTemplate = this.fills.template;\n\t\tif (fillTemplate && fillTemplate != originalTemplate) {\n\t\t\tfill.template = fillTemplate;\n\t\t}\n\n\t\tfill.setPrivate(\"visible\", true);\n\n\t\tconst stroke = this.makeStroke(this.strokes);\n\n\t\tconst strokeTemplate = this._strokeTemplate;\n\t\tif (strokeTemplate && strokeTemplate != this.strokes.template) {\n\t\t\tstroke.template = strokeTemplate;\n\t\t}\n\n\t\tstroke.setPrivate(\"visible\", true);\n\n\t\tlet xAxis = this.get(\"xAxis\");\n\t\tlet yAxis = this.get(\"yAxis\");\n\t\tlet baseAxis = this.get(\"baseAxis\")!;\n\n\t\tlet vcx = this.get(\"vcx\", 1);\n\t\tlet vcy = this.get(\"vcy\", 1);\n\n\t\tlet xField = this._xField;\n\t\tlet yField = this._yField;\n\n\t\tlet xOpenField = this._xOpenField;\n\t\tlet yOpenField = this._yOpenField;\n\n\t\tconst xOpenFieldValue = this.get(\"openValueXField\");\n\t\tconst yOpenFieldValue = this.get(\"openValueYField\");\n\n\t\tif (!xOpenFieldValue) {\n\t\t\txOpenField = this._xField;\n\t\t}\n\n\t\tif (!yOpenFieldValue) {\n\t\t\tyOpenField = this._yField;\n\t\t}\n\n\t\tconst stacked = this.get(\"stacked\");\n\n\t\tconst basePosX = xAxis.basePosition();\n\t\tconst basePosY = yAxis.basePosition();\n\n\t\tlet baseField: string;\n\t\tif (baseAxis === yAxis) {\n\t\t\tbaseField = this._yField;\n\t\t}\n\t\telse {\n\t\t\tbaseField = this._xField;\n\t\t}\n\n\t\tconst segments: Array<Array<Array<number>>> = [];\n\t\tlet points: Array<Array<number>> = [];\n\t\tsegments.push(points);\n\n\t\tconst strokeTemplateField = this.strokes.template.get(\"templateField\");\n\t\tconst fillTemplateField = this.fills.template.get(\"templateField\");\n\n\t\tlet locationX = this.get(\"locationX\", 0.5);\n\t\tlet locationY = this.get(\"locationY\", 0.5);\n\n\t\tlet openLocationX = this.get(\"openLocationX\", locationX);\n\t\tlet openLocationY = this.get(\"openLocationY\", locationY);\n\n\t\tlet i: number;\n\n\t\tlet fillVisible = this.fills.template.get(\"visible\");\n\t\tif (this.axisRanges.length > 0) {\n\t\t\tfillVisible = true;\n\t\t}\n\n\t\tlet getOpen = false;\n\t\tif (stacked || xOpenFieldValue || yOpenFieldValue) {\n\t\t\tgetOpen = true;\n\t\t}\n\n\t\tconst o = {\n\t\t\tpoints, segments, stacked, getOpen, basePosX, basePosY, fillVisible, xField, yField, xOpenField, yOpenField, vcx, vcy, baseAxis, xAxis, yAxis, locationX, locationY, openLocationX, openLocationY\n\t\t}\n\n\t\tfor (i = dataItemIndex; i < currentEndIndex; i++) {\n\t\t\tconst dataItem = this._dataItems[i];\n\n\t\t\tlet valueX = dataItem.get(xField as any);\n\t\t\tlet valueY = dataItem.get(yField as any);\n\n\t\t\tif (valueX == null || valueY == null) {\n\t\t\t\tif (!connect) {\n\t\t\t\t\tpoints = [];\n\t\t\t\t\tsegments.push(points);\n\t\t\t\t\to.points = points;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._getPoints(dataItem, o);\n\t\t\t}\n\n\t\t\tif (strokeTemplateField) {\n\t\t\t\tlet strokeTemplate = (dataItem.dataContext as any)[strokeTemplateField]\n\t\t\t\tif (strokeTemplate) {\n\t\t\t\t\tif (!(strokeTemplate instanceof Template)) {\n\t\t\t\t\t\tstrokeTemplate = Template.new(strokeTemplate);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._strokeTemplate = strokeTemplate;\n\t\t\t\t\tif (i > dataItemIndex) {\n\t\t\t\t\t\tcurrentEndIndex = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tstroke.template = strokeTemplate;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (fillTemplateField) {\n\t\t\t\tlet fillTemplate = (dataItem.dataContext as any)[fillTemplateField]\n\t\t\t\tif (fillTemplate) {\n\t\t\t\t\tif (!(fillTemplate instanceof Template)) {\n\t\t\t\t\t\tfillTemplate = Template.new(fillTemplate);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._fillTemplate = fillTemplate;\n\t\t\t\t\tif (i > dataItemIndex) {\n\t\t\t\t\t\tcurrentEndIndex = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tfill.template = fillTemplate;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!connect) {\n\t\t\t\tlet nextItem = this.dataItems[i + 1];\n\t\t\t\tif (nextItem) {\n\t\t\t\t\tif (baseAxis.shouldGap(dataItem, nextItem, autoGapCount, baseField)) {\n\t\t\t\t\t\tpoints = [];\n\t\t\t\t\t\tsegments.push(points);\n\t\t\t\t\t\to.points = points;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tif (i === endIndex) {\n\t\t\tthis._endLine(points, segments[0][0]);\n\t\t}\n\n\t\tif (stroke) {\n\t\t\tthis._drawStroke(stroke, segments);\n\t\t}\n\n\t\tif (fill) {\n\t\t\tthis._drawFill(fill, segments);\n\t\t}\n\n\t\tthis.axisRanges.each((axisRange) => {\n\t\t\tconst container = axisRange.container;\n\t\t\tconst fills = axisRange.fills!;\n\t\t\tlet fill = this.makeFill(fills);\n\t\t\tif (container) {\n\t\t\t\tcontainer.children.push(fill);\n\t\t\t}\n\n\t\t\tfill.setPrivate(\"visible\", true);\n\t\t\tthis._drawFill(fill, segments);\n\n\t\t\tconst strokes = axisRange.strokes!;\n\t\t\tlet stroke = this.makeStroke(strokes);\n\t\t\tif (container) {\n\t\t\t\tcontainer.children.push(stroke);\n\t\t\t}\n\n\t\t\tstroke.setPrivate(\"visible\", true);\n\t\t\tthis._drawStroke(stroke, segments);\n\t\t})\n\n\t\tif (currentEndIndex < endIndex) {\n\t\t\tthis._startSegment(segmentIndex + 1, currentEndIndex);\n\t\t}\n\t}\n\n\tprotected _getPoints(dataItem: DataItem<this[\"_dataItemSettings\"]>, o: { points: Array<Array<number>>, segments: number[][][], stacked: boolean | undefined, getOpen: boolean, basePosX: number, basePosY: number, fillVisible: boolean | undefined, xField: string, yField: string, xOpenField: string, yOpenField: string, vcx: number, vcy: number, baseAxis: Axis<AxisRenderer>, xAxis: Axis<AxisRenderer>, yAxis: Axis<AxisRenderer>, locationX: number, locationY: number, openLocationX: number, openLocationY: number }) {\n\t\tlet points = o.points;\n\n\t\tlet itemLocationX = dataItem.get(\"locationX\", o.locationX);\n\t\tlet itemLocationY = dataItem.get(\"locationY\", o.locationY);\n\n\t\tlet xPos = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX, o.vcx);\n\t\tlet yPos = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY, o.vcy);\n\n\t\tif (this._shouldInclude(xPos)) {\n\n\t\t\tconst iPoint = this.getPoint(xPos, yPos);\n\t\t\tconst point = [iPoint.x, iPoint.y];\n\n\t\t\tiPoint.x += this._x;\n\t\t\tiPoint.y += this._y;\n\n\t\t\tdataItem.set(\"point\", iPoint);\n\n\t\t\tif (o.fillVisible) {\n\t\t\t\tlet xPos0: number = xPos;\n\t\t\t\tlet yPos0: number = yPos;\n\n\t\t\t\tif (o.baseAxis === o.xAxis) {\n\t\t\t\t\tyPos0 = o.basePosY;\n\t\t\t\t}\n\t\t\t\telse if (o.baseAxis === o.yAxis) {\n\t\t\t\t\txPos0 = o.basePosX;\n\t\t\t\t}\n\n\t\t\t\tif (o.getOpen) {\n\t\t\t\t\tlet valueX = dataItem.get(o.xOpenField as any);\n\t\t\t\t\tlet valueY = dataItem.get(o.yOpenField as any);\n\n\t\t\t\t\tif (valueX != null && valueY != null) {\n\t\t\t\t\t\tlet itemLocationX = dataItem.get(\"openLocationX\", o.openLocationX);\n\t\t\t\t\t\tlet itemLocationY = dataItem.get(\"openLocationY\", o.openLocationY);\n\n\t\t\t\t\t\tif (o.stacked) {\n\t\t\t\t\t\t\tlet stackToItemX = dataItem.get(\"stackToItemX\")!;\n\t\t\t\t\t\t\tlet stackToItemY = dataItem.get(\"stackToItemY\")!;\n\n\t\t\t\t\t\t\tif (stackToItemX) {\n\t\t\t\t\t\t\t\txPos0 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX, (stackToItemX.component as XYSeries).get(\"vcx\"));\n\t\t\t\t\t\t\t\tif($type.isNaN(xPos0)){\n\t\t\t\t\t\t\t\t\txPos0 = o.basePosX;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (o.yAxis === o.baseAxis) {\n\t\t\t\t\t\t\t\t\txPos0 = o.basePosX;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\txPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX, o.vcx);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (stackToItemY) {\n\t\t\t\t\t\t\t\tyPos0 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY, (stackToItemY.component as XYSeries).get(\"vcy\"));\n\t\t\t\t\t\t\t\tif($type.isNaN(yPos0)){\n\t\t\t\t\t\t\t\t\tyPos0 = o.basePosY;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (o.xAxis === o.baseAxis) {\n\t\t\t\t\t\t\t\t\tyPos0 = o.basePosY;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tyPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY, o.vcy);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\txPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX, o.vcx);\n\t\t\t\t\t\t\tyPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY, o.vcy);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet closeIPoint = this.getPoint(xPos0, yPos0);\n\n\t\t\t\tpoint[2] = closeIPoint.x;\n\t\t\t\tpoint[3] = closeIPoint.y;\n\t\t\t}\n\n\t\t\tpoints.push(point);\n\t\t}\n\t}\n\n\n\tprotected _endLine(_points: Array<Array<number>>, _firstPoint: Array<number>) {\n\n\t}\n\n\tprotected _drawStroke(graphics: Graphics, segments: number[][][]) {\n\t\tif (graphics.get(\"visible\")) {\n\t\t\tgraphics.set(\"draw\", (display) => {\n\t\t\t\t$array.each(segments, (segment) => {\n\t\t\t\t\tthis._strokeGenerator.context(display as any);\n\t\t\t\t\tthis._strokeGenerator(segment as [number, number][]);\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _drawFill(graphics: Graphics, segments: number[][][]) {\n\t\tif (graphics.get(\"visible\")) {\n\t\t\tgraphics.set(\"draw\", (display) => {\n\t\t\t\t$array.each(segments, (segment) => {\n\t\t\t\t\tthis._fillGenerator.context(display as any);\n\t\t\t\t\tthis._fillGenerator(segment as [number, number][]);\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _processAxisRange(axisRange: this[\"_axisRangeType\"]) {\n\t\tsuper._processAxisRange(axisRange);\n\t\taxisRange.fills = new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Graphics._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(axisRange.fills!.template.get(\"themeTags\", []), [\"line\", \"series\", \"fill\"]),\n\t\t\t}, [this.fills.template, axisRange.fills!.template]),\n\t\t);\n\n\t\taxisRange.strokes = new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Graphics._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(axisRange.strokes!.template.get(\"themeTags\", []), [\"line\", \"series\", \"stroke\"]),\n\t\t\t}, [this.strokes.template, axisRange.strokes!.template])\n\t\t);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic createLegendMarker(_dataItem?: DataItem<this[\"_dataItemSettings\"]>) {\n\n\t\tconst legendDataItem = this.get(\"legendDataItem\");\n\n\t\tif (legendDataItem) {\n\t\t\tconst marker = legendDataItem.get(\"marker\");\n\n\t\t\tconst markerRectangle = legendDataItem.get(\"markerRectangle\");\n\t\t\tif (markerRectangle) {\n\t\t\t\tmarkerRectangle.setPrivate(\"visible\", false);\n\t\t\t}\n\n\t\t\tconst legendStroke = marker.children.push(Graphics._new(this._root, {\n\t\t\t\tthemeTags: [\"line\", \"series\", \"legend\", \"marker\", \"stroke\"]\n\t\t\t}, [this.strokes.template]));\n\n\t\t\tconst legendFill = marker.children.push(Graphics._new(this._root, {\n\t\t\t\tthemeTags: [\"line\", \"series\", \"legend\", \"marker\", \"fill\"]\n\t\t\t}, [this.fills.template]));\n\n\t\t\tconst disabledColor = this._root.interfaceColors.get(\"disabled\");\n\n\t\t\tlegendStroke.states.create(\"disabled\", { fill: disabledColor, stroke: disabledColor });\n\t\t\tlegendFill.states.create(\"disabled\", { fill: disabledColor, stroke: disabledColor });\n\n\t\t\tif (this.bullets.length > 0) {\n\t\t\t\tconst bulletFunction = this.bullets.getIndex(0);\n\t\t\t\tif (bulletFunction) {\n\t\t\t\t\tconst bullet = bulletFunction(this._root, this, new DataItem(this, {}, {}));\n\t\t\t\t\tif(bullet){\n\t\t\t\t\t\tconst sprite = bullet.get(\"sprite\");\n\n\t\t\t\t\t\tif (sprite instanceof Graphics) {\n\t\t\t\t\t\t\tsprite.states.create(\"disabled\", { fill: disabledColor, stroke: disabledColor });\n\t\t\t\t\t\t}\n\n\n\n\t\t\t\t\t\tif (sprite) {\n\t\t\t\t\t\t\tsprite.set(\"tooltipText\", undefined);\n\n\t\t\t\t\t\t\tmarker.children.push(sprite);\n\t\t\t\t\t\t\tsprite.setAll({ x: marker.width() / 2, y: marker.height() / 2 });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}