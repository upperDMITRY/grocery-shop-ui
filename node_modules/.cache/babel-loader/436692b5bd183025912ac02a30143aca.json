{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Gradient } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\n/**\r\n * Radial gradient.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\r\n */\n\nvar RadialGradient =\n/** @class */\nfunction (_super) {\n  __extends(RadialGradient, _super);\n\n  function RadialGradient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(RadialGradient.prototype, \"getFill\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target) {\n      var bounds = this.getBounds(target);\n      var x = 0;\n      var y = 0;\n      var l = bounds.left || 0;\n      var r = bounds.right || 0;\n      var t = bounds.top || 0;\n      var b = bounds.bottom || 0;\n      var width = r - l;\n      var height = b - t;\n      var radius = target.get(\"radius\");\n\n      if ($type.isNumber(radius)) {\n        x = 0;\n        y = 0;\n      } else {\n        radius = Math.min(width, height) / 2;\n        x = width / 2;\n        y = height / 2;\n      }\n\n      var gradient = this._root._renderer.createRadialGradient(x, y, 0, x, y, radius);\n\n      var stops = this.get(\"stops\");\n\n      if (stops) {\n        var i_1 = 0;\n        $array.each(stops, function (stop) {\n          var offset = stop.offset;\n\n          if (!$type.isNumber(offset)) {\n            offset = i_1 / (stops.length - 1);\n          }\n\n          var opacity = stop.opacity;\n\n          if (!$type.isNumber(opacity)) {\n            opacity = 1;\n          }\n\n          var color = stop.color;\n\n          if (color) {\n            var lighten = stop.lighten;\n\n            if (lighten) {\n              color = Color.lighten(color, lighten);\n            }\n\n            var brighten = stop.brighten;\n\n            if (brighten) {\n              color = Color.brighten(color, brighten);\n            }\n\n            gradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n          }\n\n          i_1++;\n        });\n      }\n\n      return gradient;\n    }\n  });\n  Object.defineProperty(RadialGradient, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"RadialGradient\"\n  });\n  Object.defineProperty(RadialGradient, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Gradient.classNames.concat([RadialGradient.className])\n  });\n  return RadialGradient;\n}(Gradient);\n\nexport { RadialGradient };","map":{"version":3,"sources":["../../../../../../src/.internal/core/render/gradients/RadialGradient.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IGradient } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\nimport type { Percent } from \"../../util/Percent\";\n\nimport { Gradient, IGradientSettings, IGradientPrivate } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\n\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\n\n\nexport interface IRadialGradientSettings extends IGradientSettings {\n\n\t/**\n\t * Gradient radius in pixels or percent (relative to the `target`).\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * X position.\n\t */\n\tx?: number | Percent;\n\n\t/**\n\t * Y position.\n\t */\n\ty?: number | Percent;\n\n}\n\nexport interface IRadialGradientPrivate extends IGradientPrivate {\n}\n\n/**\n * Radial gradient.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport class RadialGradient extends Gradient {\n\n\tdeclare public _settings: IRadialGradientSettings;\n\tdeclare public _privateSettings: IRadialGradientPrivate;\n\n\tpublic static className: string = \"RadialGradient\";\n\tpublic static classNames: Array<string> = Gradient.classNames.concat([RadialGradient.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(target: Sprite): IGradient {\n\t\tconst bounds = this.getBounds(target);\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tlet l = bounds.left || 0;\n\t\tlet r = bounds.right || 0;\n\t\tlet t = bounds.top || 0;\n\t\tlet b = bounds.bottom || 0;\n\n\t\tconst width = r - l;\n\t\tconst height = b - t;\n\n\t\tlet radius = target.get(\"radius\" as any);\n\t\tif ($type.isNumber(radius)) {\n\t\t\tx = 0;\n\t\t\ty = 0;\n\t\t}\n\t\telse {\n\t\t\tradius = Math.min(width, height) / 2;\n\t\t\tx = width / 2;\n\t\t\ty = height / 2;\n\t\t}\n\n\t\tconst gradient = this._root._renderer.createRadialGradient(x, y, 0, x, y, radius);\n\t\tconst stops = this.get(\"stops\")!;\n\t\tif (stops) {\n\t\t\tlet i = 0;\n\t\t\t$array.each(stops, (stop) => {\n\n\t\t\t\tlet offset = stop.offset;\n\n\t\t\t\tif (!$type.isNumber(offset)) {\n\t\t\t\t\toffset = i / (stops.length - 1);\n\t\t\t\t}\n\n\t\t\t\tlet opacity = stop.opacity;\n\n\t\t\t\tif (!$type.isNumber(opacity)) {\n\t\t\t\t\topacity = 1;\n\t\t\t\t}\n\n\t\t\t\tlet color = stop.color;\n\n\t\t\t\tif (color) {\n\n\t\t\t\t\tconst lighten = stop.lighten;\n\t\t\t\t\tif (lighten) {\n\t\t\t\t\t\tcolor = Color.lighten(color, lighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst brighten = stop.brighten;\n\t\t\t\t\tif (brighten) {\n\t\t\t\t\t\tcolor = Color.brighten(color, brighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tgradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t})\n\t\t}\n\n\t\treturn gradient\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}