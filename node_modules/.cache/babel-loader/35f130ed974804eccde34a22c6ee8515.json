{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Gradient } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $math from \"../../util/Math\";\n/**\r\n * Linear gradient.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\r\n */\nvar LinearGradient = /** @class */function (_super) {\n  __extends(LinearGradient, _super);\n  function LinearGradient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @ignore\r\n   */\n  Object.defineProperty(LinearGradient.prototype, \"getFill\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target) {\n      var rotation = this.get(\"rotation\", 0);\n      var bounds = this.getBounds(target);\n      var l = bounds.left || 0;\n      var r = bounds.right || 0;\n      var t = bounds.top || 0;\n      var b = bounds.bottom || 0;\n      var cos = $math.cos(rotation);\n      var sin = $math.sin(rotation);\n      var w = cos * (r - l);\n      var h = sin * (b - t);\n      var longer = Math.max(w, h);\n      var gradient = this._root._renderer.createLinearGradient(l, t, l + longer * cos, t + longer * sin);\n      var stops = this.get(\"stops\");\n      if (stops) {\n        var i_1 = 0;\n        $array.each(stops, function (stop) {\n          var offset = stop.offset;\n          if (!$type.isNumber(offset)) {\n            offset = i_1 / (stops.length - 1);\n          }\n          var opacity = stop.opacity;\n          if (!$type.isNumber(opacity)) {\n            opacity = 1;\n          }\n          var color = stop.color;\n          if (color) {\n            var lighten = stop.lighten;\n            if (lighten) {\n              color = Color.lighten(color, lighten);\n            }\n            var brighten = stop.brighten;\n            if (brighten) {\n              color = Color.brighten(color, brighten);\n            }\n            gradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n          }\n          i_1++;\n        });\n      }\n      return gradient;\n    }\n  });\n  Object.defineProperty(LinearGradient, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"LinearGradient\"\n  });\n  Object.defineProperty(LinearGradient, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Gradient.classNames.concat([LinearGradient.className])\n  });\n  return LinearGradient;\n}(Gradient);\nexport { LinearGradient };","map":{"version":3,"names":["Gradient","Color","$array","$type","$math","LinearGradient","_super","__extends","value","target","rotation","get","bounds","getBounds","l","left","r","right","t","top","b","bottom","cos","sin","w","h","longer","Math","max","gradient","_root","_renderer","createLinearGradient","stops","i_1","each","stop","offset","isNumber","length","opacity","color","lighten","brighten","addColorStop","g","Object","defineProperty","classNames","concat","className"],"sources":["../../../../../../src/.internal/core/render/gradients/LinearGradient.ts"],"sourcesContent":["import type { IGradient } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\n\nimport { Gradient, IGradientSettings, IGradientPrivate } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\n\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $math from \"../../util/Math\";\n\n\nexport interface ILinearGradientSettings extends IGradientSettings {\n\n\t/**\n\t * Gradient rotation, in degrees.\n\t *\n\t * @default 90\n\t */\n\trotation?: number;\n\n}\n\nexport interface ILinearGradientPrivate extends IGradientPrivate {\n}\n\n/**\n * Linear gradient.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport class LinearGradient extends Gradient {\n\n\tdeclare public _settings: ILinearGradientSettings;\n\tdeclare public _privateSettings: ILinearGradientPrivate;\n\n\tpublic static className: string = \"LinearGradient\";\n\tpublic static classNames: Array<string> = Gradient.classNames.concat([LinearGradient.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(target: Sprite): IGradient {\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet bounds = this.getBounds(target);\n\n\t\tlet l = bounds.left || 0;\n\t\tlet r = bounds.right || 0;\n\t\tlet t = bounds.top || 0;\n\t\tlet b = bounds.bottom || 0;\n\n\t\tlet cos = $math.cos(rotation);\n\t\tlet sin = $math.sin(rotation);\n\n\t\tlet w = cos * (r - l);\n\t\tlet h = sin * (b - t);\n\n\t\tlet longer = Math.max(w, h);\n\n\t\tconst gradient = this._root._renderer.createLinearGradient(\n\t\t\tl,\n\t\t\tt,\n\t\t\tl + longer * cos,\n\t\t\tt + longer * sin\n\t\t);\n\n\t\tconst stops = this.get(\"stops\")!;\n\t\tif (stops) {\n\t\t\tlet i = 0;\n\t\t\t$array.each(stops, (stop) => {\n\n\t\t\t\tlet offset = stop.offset;\n\n\t\t\t\tif (!$type.isNumber(offset)) {\n\t\t\t\t\toffset = i / (stops.length - 1);\n\t\t\t\t}\n\n\t\t\t\tlet opacity = stop.opacity;\n\n\t\t\t\tif (!$type.isNumber(opacity)) {\n\t\t\t\t\topacity = 1;\n\t\t\t\t}\n\n\t\t\t\tlet color = stop.color;\n\n\t\t\t\tif (color) {\n\n\t\t\t\t\tconst lighten = stop.lighten;\n\t\t\t\t\tif (lighten) {\n\t\t\t\t\t\tcolor = Color.lighten(color, lighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst brighten = stop.brighten;\n\t\t\t\t\tif (brighten) {\n\t\t\t\t\t\tcolor = Color.brighten(color, brighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tgradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t})\n\t\t}\n\t\treturn gradient;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}