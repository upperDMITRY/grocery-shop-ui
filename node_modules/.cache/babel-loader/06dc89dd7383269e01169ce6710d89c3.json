{"ast":null,"code":"var _jsxFileName = \"/Users/dcurchin/Desktop/final/grocery-shop-ui/src/components/adminPanel/products/editAndAddNewProduct/Sizes.jsx\",\n    _s = $RefreshSig$();\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Box, TextField, FormControl, MenuItem } from '@mui/material';\nimport { setSizes } from '../../../../redux/slices/adminProducts';\nimport { memo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NUMBER_OF_SIZES = [0, 1, 2];\nconst SIZE_OPTIONS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst sizesContainerStyle = {\n  display: 'flex',\n  gap: 3,\n  flexGrow: 1\n};\nconst sizeContainerStyle = {\n  width: 'calc(100% / 3)'\n};\nconst Sizes = /*#__PURE__*/memo(_c = _s(() => {\n  _s();\n\n  const sizes = useSelector(state => state.adminProducts.sizes);\n  const dispatch = useDispatch();\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: sizesContainerStyle,\n    children: NUMBER_OF_SIZES.map(i => /*#__PURE__*/_jsxDEV(FormControl, {\n      sx: sizeContainerStyle,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        label: `Size ${i + 1}`,\n        value: sizes[i],\n        onChange: e => {\n          const newSizes = [...sizes.slice(0, i), e.target.value, ...sizes.slice(i + 1)];\n          dispatch(setSizes(newSizes));\n        },\n        children: SIZE_OPTIONS.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: option,\n          children: option\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}, \"botiie+sV4qTt+I+gnr14eUxxf8=\", false, function () {\n  return [useSelector, useDispatch];\n}));\n_c2 = Sizes;\nexport default Sizes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Sizes$memo\");\n$RefreshReg$(_c2, \"Sizes\");","map":{"version":3,"sources":["/Users/dcurchin/Desktop/final/grocery-shop-ui/src/components/adminPanel/products/editAndAddNewProduct/Sizes.jsx"],"names":["useSelector","useDispatch","Box","TextField","FormControl","MenuItem","setSizes","memo","NUMBER_OF_SIZES","SIZE_OPTIONS","sizesContainerStyle","display","gap","flexGrow","sizeContainerStyle","width","Sizes","sizes","state","adminProducts","dispatch","map","i","e","newSizes","slice","target","value","option"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,WAAzB,EAAsCC,QAAtC,QAAsD,eAAtD;AACA,SAASC,QAAT,QAAyB,wCAAzB;AACA,SAASC,IAAT,QAAqB,OAArB;;AAEA,MAAMC,eAAe,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAxB;AACA,MAAMC,YAAY,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,EAA5B,CAArB;AAEA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,MAAX;AAAmBC,EAAAA,GAAG,EAAE,CAAxB;AAA2BC,EAAAA,QAAQ,EAAE;AAArC,CAA5B;AAEA,MAAMC,kBAAkB,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA3B;AAEA,MAAMC,KAAK,gBAAGT,IAAI,SAAC,MAAM;AAAA;;AACvB,QAAMU,KAAK,GAAGjB,WAAW,CAAEkB,KAAD,IAAWA,KAAK,CAACC,aAAN,CAAoBF,KAAhC,CAAzB;AACA,QAAMG,QAAQ,GAAGnB,WAAW,EAA5B;AAEA,sBACE,QAAC,GAAD;AAAK,IAAA,EAAE,EAAES,mBAAT;AAAA,cACGF,eAAe,CAACa,GAAhB,CAAqBC,CAAD,iBACnB,QAAC,WAAD;AAAqB,MAAA,EAAE,EAAER,kBAAzB;AAAA,6BACE,QAAC,SAAD;AACE,QAAA,MAAM,MADR;AAEE,QAAA,KAAK,EAAG,QAAOQ,CAAC,GAAG,CAAE,EAFvB;AAGE,QAAA,KAAK,EAAEL,KAAK,CAACK,CAAD,CAHd;AAIE,QAAA,QAAQ,EAAGC,CAAD,IAAO;AACf,gBAAMC,QAAQ,GAAG,CACf,GAAGP,KAAK,CAACQ,KAAN,CAAY,CAAZ,EAAeH,CAAf,CADY,EAEfC,CAAC,CAACG,MAAF,CAASC,KAFM,EAGf,GAAGV,KAAK,CAACQ,KAAN,CAAYH,CAAC,GAAG,CAAhB,CAHY,CAAjB;AAKAF,UAAAA,QAAQ,CAACd,QAAQ,CAACkB,QAAD,CAAT,CAAR;AACD,SAXH;AAAA,kBAaGf,YAAY,CAACY,GAAb,CAAkBO,MAAD,iBAChB,QAAC,QAAD;AAAuB,UAAA,KAAK,EAAEA,MAA9B;AAAA,oBACGA;AADH,WAAeA,MAAf;AAAA;AAAA;AAAA;AAAA,gBADD;AAbH;AAAA;AAAA;AAAA;AAAA;AADF,OAAkBN,CAAlB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CA/BiB;AAAA,UACFtB,WADE,EAECC,WAFD;AAAA,GAAlB;MAAMe,K;AAiCN,eAAeA,KAAf","sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\nimport { Box, TextField, FormControl, MenuItem } from '@mui/material';\nimport { setSizes } from '../../../../redux/slices/adminProducts';\nimport { memo } from 'react';\n\nconst NUMBER_OF_SIZES = [0, 1, 2];\nconst SIZE_OPTIONS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst sizesContainerStyle = { display: 'flex', gap: 3, flexGrow: 1 };\n\nconst sizeContainerStyle = { width: 'calc(100% / 3)' };\n\nconst Sizes = memo(() => {\n  const sizes = useSelector((state) => state.adminProducts.sizes);\n  const dispatch = useDispatch();\n\n  return (\n    <Box sx={sizesContainerStyle}>\n      {NUMBER_OF_SIZES.map((i) => (\n        <FormControl key={i} sx={sizeContainerStyle}>\n          <TextField\n            select\n            label={`Size ${i + 1}`}\n            value={sizes[i]}\n            onChange={(e) => {\n              const newSizes = [\n                ...sizes.slice(0, i),\n                e.target.value,\n                ...sizes.slice(i + 1),\n              ];\n              dispatch(setSizes(newSizes));\n            }}\n          >\n            {SIZE_OPTIONS.map((option) => (\n              <MenuItem key={option} value={option}>\n                {option}\n              </MenuItem>\n            ))}\n          </TextField>\n        </FormControl>\n      ))}\n    </Box>\n  );\n});\n\nexport default Sizes;\n"]},"metadata":{},"sourceType":"module"}