{"ast":null,"code":"/**\r\n * Event Dispatcher module is used for registering listeners and dispatching\r\n * events across amCharts system.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Disposer, MultiDisposer } from \"./Disposer\";\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n/**\r\n * Universal Event Dispatcher.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/events/} for more info\r\n */\n\nvar EventDispatcher =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   */\n  function EventDispatcher() {\n    Object.defineProperty(this, \"_listeners\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_killed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_disabled\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_iterating\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_enabled\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._listeners = [];\n    this._killed = [];\n    this._disabled = {};\n    this._iterating = 0;\n    this._enabled = true;\n    this._disposed = false;\n  }\n  /**\r\n   * Returns if this object has been already disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n\n\n  Object.defineProperty(EventDispatcher.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._disposed;\n    }\n  });\n  /**\r\n   * Dispose (destroy) this object.\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._disposed) {\n        this._disposed = true;\n        var a = this._listeners;\n        this._iterating = 1;\n        this._listeners = null;\n        this._disabled = null;\n\n        try {\n          $array.each(a, function (x) {\n            x.disposer.dispose();\n          });\n        } finally {\n          this._killed = null;\n          this._iterating = null;\n        }\n      }\n    }\n  });\n  /**\r\n   * Checks if this particular event dispatcher has any listeners set.\r\n   *\r\n   * @return Has listeners?\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"hasListeners\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._listeners.length !== 0;\n    }\n  });\n  /**\r\n   * Checks if this particular event dispatcher has any particular listeners set.\r\n   *\r\n   * @return Has particular event listeners?\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"hasListenersByType\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (type) {\n      return $array.any(this._listeners, function (x) {\n        return (x.type === null || x.type === type) && !x.killed;\n      });\n    }\n  });\n  /**\r\n   * Enable dispatching of events if they were previously disabled by\r\n   * `disable()`.\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"enable\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._enabled = true;\n    }\n  });\n  /**\r\n   * Disable dispatching of events until re-enabled by `enable()`.\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"disable\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._enabled = false;\n    }\n  });\n  /**\r\n   * Enable dispatching particular event, if it was disabled before by\r\n   * `disableType()`.\r\n   *\r\n   * @param type Event type\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"enableType\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (type) {\n      delete this._disabled[type];\n    }\n  });\n  /**\r\n   * Disable dispatching of events for a certain event type.\r\n   *\r\n   * Optionally, can set how many dispatches to skip before automatically\r\n   * re-enabling the dispatching.\r\n   *\r\n   * @param type    Event type\r\n   * @param amount  Number of event dispatches to skip\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"disableType\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (type, amount) {\n      if (amount === void 0) {\n        amount = Infinity;\n      }\n\n      this._disabled[type] = amount;\n    }\n  });\n  /**\r\n   * Removes listener from dispatcher.\r\n   *\r\n   * Will throw an exception if such listener does not exists.\r\n   *\r\n   * @param listener Listener to remove\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"_removeListener\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (listener) {\n      if (this._iterating === 0) {\n        var index = this._listeners.indexOf(listener);\n\n        if (index === -1) {\n          throw new Error(\"Invalid state: could not remove listener\");\n        }\n\n        this._listeners.splice(index, 1);\n      } else {\n        this._killed.push(listener);\n      }\n    }\n  });\n  /**\r\n   * Removes existing listener by certain parameters.\r\n   *\r\n   * @param once         Listener's once setting\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"_removeExistingListener\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (once, type, callback, context) {\n      if (this._disposed) {\n        throw new Error(\"EventDispatcher is disposed\");\n      }\n\n      this._eachListener(function (info) {\n        if (info.once === once && // TODO is this correct ?\n        info.type === type && (callback === undefined || info.callback === callback) && info.context === context) {\n          info.disposer.dispose();\n        }\n      });\n    }\n  });\n  /**\r\n   * Checks if dispatching for particular event type is enabled.\r\n   *\r\n   * @param type  Event type\r\n   * @return Enabled?\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"isEnabled\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (type) {\n      if (this._disposed) {\n        throw new Error(\"EventDispatcher is disposed\");\n      } // TODO is this check correct ?\n\n\n      return this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] === undefined;\n    }\n  });\n  /**\r\n   * Checks if there's already a listener with specific parameters.\r\n   *\r\n   * @param type      Listener's type\r\n   * @param callback  Callback function\r\n   * @param context   Callback context\r\n   * @return Has listener?\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"has\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (type, callback, context) {\n      var index = $array.findIndex(this._listeners, function (info) {\n        return info.once !== true && // Ignoring \"once\" listeners\n        info.type === type && (callback === undefined || info.callback === callback) && info.context === context;\n      });\n      return index !== -1;\n    }\n  });\n  /**\r\n   * Checks whether event of the particular type should be dispatched.\r\n   *\r\n   * @param type  Event type\r\n   * @return Dispatch?\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"_shouldDispatch\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (type) {\n      if (this._disposed) {\n        throw new Error(\"EventDispatcher is disposed\");\n      }\n\n      var count = this._disabled[type];\n\n      if (!$type.isNumber(count)) {\n        return this._enabled;\n      } else {\n        if (count <= 1) {\n          delete this._disabled[type];\n        } else {\n          --this._disabled[type];\n        }\n\n        return false;\n      }\n    }\n  });\n  /**\r\n   * [_eachListener description]\r\n   *\r\n   * All of this extra code is needed when a listener is removed while iterating\r\n   *\r\n   * @todo Description\r\n   * @param fn [description]\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"_eachListener\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (fn) {\n      var _this = this;\n\n      ++this._iterating;\n\n      try {\n        $array.each(this._listeners, fn);\n      } finally {\n        --this._iterating; // TODO should this be inside or outside the finally ?\n\n        if (this._iterating === 0 && this._killed.length !== 0) {\n          // Remove killed listeners\n          $array.each(this._killed, function (killed) {\n            _this._removeListener(killed);\n          });\n          this._killed.length = 0;\n        }\n      }\n    }\n  });\n  /**\r\n   * Dispatches an event immediately without waiting for next cycle.\r\n   *\r\n   * @param type   Event type\r\n   * @param event  Event object\r\n   * @todo automatically add in type and target properties if they are missing\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"dispatch\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (type, event) {\n      if (this._shouldDispatch(type)) {\n        // TODO check if it's faster to use an object of listeners rather than a single big array\n        // TODO if the function throws, maybe it should keep going ?\n        this._eachListener(function (listener) {\n          if (!listener.killed && (listener.type === null || listener.type === type)) {\n            listener.dispatch(type, event);\n          }\n        });\n      }\n    }\n  });\n  /**\r\n   * Shelves the event to be dispatched within next update cycle.\r\n   *\r\n   * @param type   Event type\r\n   * @param event  Event object\r\n   * @todo automatically add in type and target properties if they are missing\r\n   */\n\n  /*public dispatchLater<Key extends keyof T>(type: Key, event: T[Key]): void {\r\n      if (this._shouldDispatch(type)) {\r\n          this._eachListener((listener) => {\r\n              // TODO check if it's faster to use an object of listeners rather than a single big array\r\n              if (!listener.killed && (listener.type === null || listener.type === type)) {\r\n                  // TODO if the function throws, maybe it should keep going ?\r\n                  // TODO dispatch during the update cycle, rather than using whenIdle\r\n                  $async.whenIdle(() => {\r\n                      if (!listener.killed) {\r\n                          listener.dispatch(type, event);\r\n                      }\r\n                  });\r\n              }\r\n          });\r\n      }\r\n  }*/\n\n  /**\r\n   * Creates, catalogs and returns an [[EventListener]].\r\n   *\r\n   * Event listener can be disposed.\r\n   *\r\n   * @param once         Listener's once setting\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @param dispatch\r\n   * @returns An event listener\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"_on\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (once, type, callback, context, shouldClone, dispatch) {\n      var _this = this;\n\n      if (this._disposed) {\n        throw new Error(\"EventDispatcher is disposed\");\n      }\n\n      this._removeExistingListener(once, type, callback, context);\n\n      var info = {\n        type: type,\n        callback: callback,\n        context: context,\n        shouldClone: shouldClone,\n        dispatch: dispatch,\n        killed: false,\n        once: once,\n        disposer: new Disposer(function () {\n          info.killed = true;\n\n          _this._removeListener(info);\n        })\n      };\n\n      this._listeners.push(info);\n\n      return info;\n    }\n  });\n  /**\r\n   * Creates an event listener to be invoked on **any** event.\r\n   *\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @returns A disposable event listener\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"onAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (callback, context, shouldClone) {\n      if (shouldClone === void 0) {\n        shouldClone = true;\n      }\n\n      return this._on(false, null, callback, context, shouldClone, function (_type, event) {\n        return callback.call(context, event);\n      }).disposer;\n    }\n  });\n  /**\r\n   * Creates an event listener to be invoked on a specific event type.\r\n   *\r\n   * ```TypeScript\r\n   * button.events.once(\"click\", (ev) => {\r\n   *   console.log(\"Button clicked\");\r\n   * }, this);\r\n   * ```\r\n   * ```JavaScript\r\n   * button.events.once(\"click\", (ev) => {\r\n   *   console.log(\"Button clicked\");\r\n   * }, this);\r\n   * ```\r\n   *\r\n   * The above will invoke our custom event handler whenever series we put\r\n   * event on is hidden.\r\n   *\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @returns A disposable event listener\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"on\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (type, callback, context, shouldClone) {\n      if (shouldClone === void 0) {\n        shouldClone = true;\n      }\n\n      return this._on(false, type, callback, context, shouldClone, function (_type, event) {\n        return callback.call(context, event);\n      }).disposer;\n    }\n  });\n  /**\r\n   * Creates an event listener to be invoked on a specific event type once.\r\n   *\r\n   * Once the event listener is invoked, it is automatically disposed.\r\n   *\r\n   * ```TypeScript\r\n   * button.events.once(\"click\", (ev) => {\r\n   *   console.log(\"Button clicked\");\r\n   * }, this);\r\n   * ```\r\n   * ```JavaScript\r\n   * button.events.once(\"click\", (ev) => {\r\n   *   console.log(\"Button clicked\");\r\n   * }, this);\r\n   * ```\r\n   *\r\n   * The above will invoke our custom event handler the first time series we\r\n   * put event on is hidden.\r\n   *\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @returns A disposable event listener\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"once\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (type, callback, context, shouldClone) {\n      if (shouldClone === void 0) {\n        shouldClone = true;\n      }\n\n      var x = this._on(true, type, callback, context, shouldClone, function (_type, event) {\n        x.disposer.dispose();\n        callback.call(context, event);\n      }); // TODO maybe this should return a different Disposer ?\n\n\n      return x.disposer;\n    }\n  });\n  /**\r\n   * Removes the event listener with specific parameters.\r\n   *\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"off\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (type, callback, context) {\n      this._removeExistingListener(false, type, callback, context);\n    }\n  });\n  /**\r\n   * Copies all dispatcher parameters, including listeners, from another event\r\n   * dispatcher.\r\n   *\r\n   * @param source Source event dispatcher\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(EventDispatcher.prototype, \"copyFrom\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (source) {\n      var _this = this;\n\n      if (this._disposed) {\n        throw new Error(\"EventDispatcher is disposed\");\n      }\n\n      if (source === this) {\n        throw new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\n      }\n\n      var disposers = [];\n      $array.each(source._listeners, function (x) {\n        // TODO is this correct ?\n        if (!x.killed && x.shouldClone) {\n          if (x.type === null) {\n            disposers.push(_this.onAll(x.callback, x.context));\n          } else if (x.once) {\n            disposers.push(_this.once(x.type, x.callback, x.context));\n          } else {\n            disposers.push(_this.on(x.type, x.callback, x.context));\n          }\n        }\n      });\n      return new MultiDisposer(disposers);\n    }\n  });\n  return EventDispatcher;\n}();\n\nexport { EventDispatcher };\n/**\r\n * A version of the [[EventDispatcher]] that dispatches events for a specific\r\n * target object.\r\n *\r\n * @ignore\r\n */\n\nvar TargetedEventDispatcher =\n/** @class */\nfunction (_super) {\n  __extends(TargetedEventDispatcher, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param target Event dispatcher target\r\n   */\n\n\n  function TargetedEventDispatcher(target) {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A target object which is originating events using this dispatcher.\r\n     */\n\n\n    Object.defineProperty(_this, \"target\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    _this.target = target;\n    return _this;\n  }\n  /**\r\n   * Copies all dispatcher parameters, including listeners, from another event\r\n   * dispatcher.\r\n   *\r\n   * @param source Source event dispatcher\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(TargetedEventDispatcher.prototype, \"copyFrom\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (source) {\n      var _this = this;\n\n      if (this._disposed) {\n        throw new Error(\"EventDispatcher is disposed\");\n      }\n\n      if (source === this) {\n        throw new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\n      }\n\n      var disposers = [];\n      $array.each(source._listeners, function (x) {\n        // TODO very hacky\n        if (x.context === source.target) {\n          return;\n        } // TODO is this correct ?\n\n\n        if (!x.killed && x.shouldClone) {\n          if (x.type === null) {\n            disposers.push(_this.onAll(x.callback, x.context));\n          } else if (x.once) {\n            disposers.push(_this.once(x.type, x.callback, x.context));\n          } else {\n            disposers.push(_this.on(x.type, x.callback, x.context));\n          }\n        }\n      });\n      return new MultiDisposer(disposers);\n    }\n  });\n  return TargetedEventDispatcher;\n}(EventDispatcher);\n\nexport { TargetedEventDispatcher };","map":{"version":3,"sources":["../../../../../src/.internal/core/util/EventDispatcher.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Event Dispatcher module is used for registering listeners and dispatching\n * events across amCharts system.\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { Disposer, IDisposer, MultiDisposer } from \"./Disposer\";\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n\n/**\n * @ignore\n */\nexport type Events<Target, T> = {\n\t[K in keyof T]: T[K] & { type: K, target: Target }\n};\n\n/**\n * A universal interface for event listeners.\n *\n * @ignore\n */\nexport interface EventListener {\n\tkilled: boolean;\n\tonce: boolean;\n\ttype: any | null;\n\tcallback: (event: any) => void;\n\tcontext: unknown;\n\tshouldClone: boolean;\n\tdispatch: (type: any, event: any) => void;\n\tdisposer: IDisposer;\n}\n\n/**\n * Universal Event Dispatcher.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/events/} for more info\n */\nexport class EventDispatcher<T> implements IDisposer {\n\tprotected _listeners: Array<EventListener>;\n\tprotected _killed: Array<EventListener>;\n\tprotected _disabled: { [key in keyof T]?: number };\n\tprotected _iterating: number;\n\tprotected _enabled: boolean;\n\tprotected _disposed: boolean;\n\n\n\t/**\n\t * Constructor\n\t */\n\tconstructor() {\n\t\tthis._listeners = [];\n\t\tthis._killed = [];\n\t\tthis._disabled = {};\n\t\tthis._iterating = 0;\n\t\tthis._enabled = true;\n\t\tthis._disposed = false;\n\t}\n\n\t/**\n\t * Returns if this object has been already disposed.\n\t *\n\t * @return Disposed?\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Dispose (destroy) this object.\n\t */\n\tpublic dispose(): void {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\n\t\t\tconst a = this._listeners;\n\n\t\t\tthis._iterating = 1;\n\t\t\tthis._listeners = <any>null;\n\t\t\tthis._disabled = <any>null;\n\n\t\t\ttry {\n\t\t\t\t$array.each(a, (x) => {\n\t\t\t\t\tx.disposer.dispose();\n\t\t\t\t});\n\n\t\t\t} finally {\n\t\t\t\tthis._killed = <any>null;\n\t\t\t\tthis._iterating = <any>null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if this particular event dispatcher has any listeners set.\n\t *\n\t * @return Has listeners?\n\t */\n\tpublic hasListeners(): boolean {\n\t\treturn this._listeners.length !== 0;\n\t}\n\n\t/**\n\t * Checks if this particular event dispatcher has any particular listeners set.\n\t *\n\t * @return Has particular event listeners?\n\t */\n\tpublic hasListenersByType<Key extends keyof T>(type: Key): boolean {\n\t\treturn $array.any(this._listeners, (x) => (x.type === null || x.type === type) && !x.killed);\n\t}\n\n\t/**\n\t * Enable dispatching of events if they were previously disabled by\n\t * `disable()`.\n\t */\n\tpublic enable(): void {\n\t\tthis._enabled = true;\n\t}\n\n\t/**\n\t * Disable dispatching of events until re-enabled by `enable()`.\n\t */\n\tpublic disable(): void {\n\t\tthis._enabled = false;\n\t}\n\n\t/**\n\t * Enable dispatching particular event, if it was disabled before by\n\t * `disableType()`.\n\t *\n\t * @param type Event type\n\t */\n\tpublic enableType<Key extends keyof T>(type: Key): void {\n\t\tdelete this._disabled[type];\n\t}\n\n\t/**\n\t * Disable dispatching of events for a certain event type.\n\t *\n\t * Optionally, can set how many dispatches to skip before automatically\n\t * re-enabling the dispatching.\n\t *\n\t * @param type    Event type\n\t * @param amount  Number of event dispatches to skip\n\t */\n\tpublic disableType<Key extends keyof T>(type: Key, amount: number = Infinity): void {\n\t\tthis._disabled[type] = amount;\n\t}\n\n\t/**\n\t * Removes listener from dispatcher.\n\t *\n\t * Will throw an exception if such listener does not exists.\n\t *\n\t * @param listener Listener to remove\n\t */\n\tprotected _removeListener(listener: EventListener): void {\n\t\tif (this._iterating === 0) {\n\t\t\tconst index = this._listeners.indexOf(listener);\n\n\t\t\tif (index === -1) {\n\t\t\t\tthrow new Error(\"Invalid state: could not remove listener\");\n\t\t\t}\n\n\t\t\tthis._listeners.splice(index, 1);\n\n\t\t} else {\n\t\t\tthis._killed.push(listener);\n\t\t}\n\t}\n\n\t/**\n\t * Removes existing listener by certain parameters.\n\t *\n\t * @param once         Listener's once setting\n\t * @param type         Listener's type\n\t * @param callback     Callback function\n\t * @param context      Callback context\n\t */\n\tprotected _removeExistingListener<C, Key extends keyof T>(once: boolean, type: Key | null, callback?: (this: C, event: T[Key]) => void, context?: C): void {\n\t\tif (this._disposed) {\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\n\t\t}\n\n\t\tthis._eachListener((info) => {\n\t\t\tif (info.once === once && // TODO is this correct ?\n\t\t\t\tinfo.type === type &&\n\t\t\t\t(callback === undefined || info.callback === callback) &&\n\t\t\t\tinfo.context === context) {\n\t\t\t\tinfo.disposer.dispose();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Checks if dispatching for particular event type is enabled.\n\t *\n\t * @param type  Event type\n\t * @return Enabled?\n\t */\n\tpublic isEnabled<Key extends keyof T>(type: Key): boolean {\n\t\tif (this._disposed) {\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\n\t\t}\n\n\t\t// TODO is this check correct ?\n\t\treturn this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] === undefined;\n\t}\n\n\t/**\n\t * Checks if there's already a listener with specific parameters.\n\t *\n\t * @param type      Listener's type\n\t * @param callback  Callback function\n\t * @param context   Callback context\n\t * @return Has listener?\n\t */\n\tpublic has<C, Key extends keyof T>(type: Key, callback?: (this: C, event: T[Key]) => void, context?: C): boolean {\n\t\tconst index = $array.findIndex(this._listeners, (info) => {\n\t\t\treturn info.once !== true && // Ignoring \"once\" listeners\n\t\t\t\tinfo.type === type &&\n\t\t\t\t(callback === undefined || info.callback === callback) &&\n\t\t\t\tinfo.context === context;\n\t\t});\n\n\t\treturn index !== -1;\n\t}\n\n\t/**\n\t * Checks whether event of the particular type should be dispatched.\n\t *\n\t * @param type  Event type\n\t * @return Dispatch?\n\t */\n\tprotected _shouldDispatch<Key extends keyof T>(type: Key): boolean {\n\t\tif (this._disposed) {\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\n\t\t}\n\n\t\tconst count = this._disabled[type];\n\n\t\tif (!$type.isNumber(count)) {\n\t\t\treturn this._enabled;\n\n\t\t} else {\n\t\t\tif (count <= 1) {\n\t\t\t\tdelete this._disabled[type];\n\n\t\t\t} else {\n\t\t\t\t--this._disabled[type]!;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * [_eachListener description]\n\t *\n\t * All of this extra code is needed when a listener is removed while iterating\n\t *\n\t * @todo Description\n\t * @param fn [description]\n\t */\n\tprotected _eachListener(fn: (listener: EventListener) => void): void {\n\t\t++this._iterating;\n\n\t\ttry {\n\t\t\t$array.each(this._listeners, fn);\n\n\t\t} finally {\n\t\t\t--this._iterating;\n\n\t\t\t// TODO should this be inside or outside the finally ?\n\t\t\tif (this._iterating === 0 && this._killed.length !== 0) {\n\t\t\t\t// Remove killed listeners\n\t\t\t\t$array.each(this._killed, (killed) => {\n\t\t\t\t\tthis._removeListener(killed);\n\t\t\t\t});\n\n\t\t\t\tthis._killed.length = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Dispatches an event immediately without waiting for next cycle.\n\t *\n\t * @param type   Event type\n\t * @param event  Event object\n\t * @todo automatically add in type and target properties if they are missing\n\t */\n\tpublic dispatch<Key extends keyof T>(type: Key, event: T[Key]): void {\n\t\tif (this._shouldDispatch(type)) {\n\t\t\t// TODO check if it's faster to use an object of listeners rather than a single big array\n\t\t\t// TODO if the function throws, maybe it should keep going ?\n\t\t\tthis._eachListener((listener) => {\n\t\t\t\tif (!listener.killed && (listener.type === null || listener.type === type)) {\n\t\t\t\t\tlistener.dispatch(type, event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Shelves the event to be dispatched within next update cycle.\n\t *\n\t * @param type   Event type\n\t * @param event  Event object\n\t * @todo automatically add in type and target properties if they are missing\n\t */\n\t/*public dispatchLater<Key extends keyof T>(type: Key, event: T[Key]): void {\n\t\tif (this._shouldDispatch(type)) {\n\t\t\tthis._eachListener((listener) => {\n\t\t\t\t// TODO check if it's faster to use an object of listeners rather than a single big array\n\t\t\t\tif (!listener.killed && (listener.type === null || listener.type === type)) {\n\t\t\t\t\t// TODO if the function throws, maybe it should keep going ?\n\t\t\t\t\t// TODO dispatch during the update cycle, rather than using whenIdle\n\t\t\t\t\t$async.whenIdle(() => {\n\t\t\t\t\t\tif (!listener.killed) {\n\t\t\t\t\t\t\tlistener.dispatch(type, event);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}*/\n\n\t/**\n\t * Creates, catalogs and returns an [[EventListener]].\n\t *\n\t * Event listener can be disposed.\n\t *\n\t * @param once         Listener's once setting\n\t * @param type         Listener's type\n\t * @param callback     Callback function\n\t * @param context      Callback context\n\t * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\n\t * @param dispatch\n\t * @returns An event listener\n\t */\n\tprotected _on<C, Key extends keyof T>(once: boolean, type: Key | null, callback: any, context: C, shouldClone: boolean, dispatch: (type: Key, event: T[Key]) => void): EventListener {\n\t\tif (this._disposed) {\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\n\t\t}\n\n\t\tthis._removeExistingListener(once, type, callback, context);\n\n\t\tconst info: EventListener = {\n\t\t\ttype: type,\n\t\t\tcallback: callback,\n\t\t\tcontext: context,\n\t\t\tshouldClone: shouldClone,\n\t\t\tdispatch: <any>dispatch,\n\t\t\tkilled: false,\n\t\t\tonce: once,\n\t\t\tdisposer: new Disposer(() => {\n\t\t\t\tinfo.killed = true;\n\t\t\t\tthis._removeListener(info);\n\t\t\t})\n\t\t};\n\n\t\tthis._listeners.push(info);\n\n\t\treturn info;\n\t}\n\n\t/**\n\t * Creates an event listener to be invoked on **any** event.\n\t *\n\t * @param callback     Callback function\n\t * @param context      Callback context\n\t * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\n\t * @returns A disposable event listener\n\t */\n\tpublic onAll<C, K extends keyof T>(callback: (this: C, event: T[K]) => void, context?: C, shouldClone: boolean = true): IDisposer {\n\t\treturn this._on(false, null, callback, context, shouldClone, (_type, event) => (<any>callback).call(context, event as any)).disposer;\n\t}\n\n\t/**\n\t * Creates an event listener to be invoked on a specific event type.\n\t *\n\t * ```TypeScript\n\t * button.events.once(\"click\", (ev) => {\n\t *   console.log(\"Button clicked\");\n\t * }, this);\n\t * ```\n\t * ```JavaScript\n\t * button.events.once(\"click\", (ev) => {\n\t *   console.log(\"Button clicked\");\n\t * }, this);\n\t * ```\n\t *\n\t * The above will invoke our custom event handler whenever series we put\n\t * event on is hidden.\n\t *\n\t * @param type         Listener's type\n\t * @param callback     Callback function\n\t * @param context      Callback context\n\t * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\n\t * @returns A disposable event listener\n\t */\n\tpublic on<C, Key extends keyof T>(type: Key, callback: (this: C | undefined, event: T[Key]) => void, context?: C, shouldClone: boolean = true): IDisposer {\n\t\treturn this._on(false, type, callback, context, shouldClone, (_type, event) => callback.call(context, event)).disposer;\n\t}\n\n\t/**\n\t * Creates an event listener to be invoked on a specific event type once.\n\t *\n\t * Once the event listener is invoked, it is automatically disposed.\n\t *\n\t * ```TypeScript\n\t * button.events.once(\"click\", (ev) => {\n\t *   console.log(\"Button clicked\");\n\t * }, this);\n\t * ```\n\t * ```JavaScript\n\t * button.events.once(\"click\", (ev) => {\n\t *   console.log(\"Button clicked\");\n\t * }, this);\n\t * ```\n\t *\n\t * The above will invoke our custom event handler the first time series we\n\t * put event on is hidden.\n\t *\n\t * @param type         Listener's type\n\t * @param callback     Callback function\n\t * @param context      Callback context\n\t * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\n\t * @returns A disposable event listener\n\t */\n\tpublic once<C, Key extends keyof T>(type: Key, callback: (this: C | undefined, event: T[Key]) => void, context?: C, shouldClone: boolean = true): IDisposer {\n\t\tconst x = this._on(true, type, callback, context, shouldClone, (_type, event) => {\n\t\t\tx.disposer.dispose();\n\t\t\tcallback.call(context, event)\n\t\t});\n\n\t\t// TODO maybe this should return a different Disposer ?\n\t\treturn x.disposer;\n\t}\n\n\t/**\n\t * Removes the event listener with specific parameters.\n\t *\n\t * @param type         Listener's type\n\t * @param callback     Callback function\n\t * @param context      Callback context\n\t */\n\tpublic off<C, Key extends keyof T>(type: Key, callback?: (this: C, event: T[Key]) => void, context?: C): void {\n\t\tthis._removeExistingListener(false, type, callback, context);\n\t}\n\n\n\t/**\n\t * Copies all dispatcher parameters, including listeners, from another event\n\t * dispatcher.\n\t *\n\t * @param source Source event dispatcher\n\t * @ignore\n\t */\n\tpublic copyFrom(source: this): IDisposer {\n\t\tif (this._disposed) {\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\n\t\t}\n\n\t\tif (source === this) {\n\t\t\tthrow new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\n\t\t}\n\n\t\tconst disposers: Array<IDisposer> = [];\n\n\t\t$array.each(source._listeners, (x) => {\n\t\t\t// TODO is this correct ?\n\t\t\tif (!x.killed && x.shouldClone) {\n\t\t\t\tif (x.type === null) {\n\t\t\t\t\tdisposers.push(this.onAll(x.callback as any, x.context));\n\n\t\t\t\t} else if (x.once) {\n\t\t\t\t\tdisposers.push(this.once(x.type, x.callback, x.context));\n\n\t\t\t\t} else {\n\t\t\t\t\tdisposers.push(this.on(x.type, x.callback, x.context));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn new MultiDisposer(disposers);\n\t}\n\n}\n\n/**\n * A version of the [[EventDispatcher]] that dispatches events for a specific\n * target object.\n *\n * @ignore\n */\nexport class TargetedEventDispatcher<Target, T> extends EventDispatcher<T> {\n\n\t/**\n\t * A target object which is originating events using this dispatcher.\n\t */\n\tpublic target: Target;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param target Event dispatcher target\n\t */\n\tconstructor(target: Target) {\n\t\tsuper();\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * Copies all dispatcher parameters, including listeners, from another event\n\t * dispatcher.\n\t *\n\t * @param source Source event dispatcher\n\t * @ignore\n\t */\n\tpublic copyFrom(source: this): IDisposer {\n\t\tif (this._disposed) {\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\n\t\t}\n\n\t\tif (source === this) {\n\t\t\tthrow new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\n\t\t}\n\n\t\tconst disposers: Array<IDisposer> = [];\n\n\t\t$array.each(source._listeners, (x) => {\n\t\t\t// TODO very hacky\n\t\t\tif (x.context === source.target) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// TODO is this correct ?\n\t\t\tif (!x.killed && x.shouldClone) {\n\t\t\t\tif (x.type === null) {\n\t\t\t\t\tdisposers.push(this.onAll(x.callback as any, x.context));\n\n\t\t\t\t} else if (x.once) {\n\t\t\t\t\tdisposers.push(this.once(x.type, x.callback, x.context));\n\n\t\t\t\t} else {\n\t\t\t\t\tdisposers.push(this.on(x.type, x.callback, x.context));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn new MultiDisposer(disposers);\n\t}\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}