{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Sprite } from \"./Sprite\";\nimport { populateString } from \"../util/PopulateString\";\nimport * as $array from \"../util/Array\";\n/**\r\n * @ignore Text is an internal class. Use Label instead.\r\n */\nvar Text = /** @class */function (_super) {\n  __extends(Text, _super);\n  function Text() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    Object.defineProperty(_this, \"textStyle\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeTextStyle()\n    });\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeText(\"\", _this.textStyle)\n    });\n    Object.defineProperty(_this, \"_textStyles\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"textAlign\", \"fontFamily\", \"fontSize\", \"fontStyle\", \"fontWeight\", \"fontStyle\", \"fontVariant\", \"shadowColor\", \"shadowBlur\", \"shadowOffsetX\", \"shadowOffsetY\", \"shadowOpacity\",\n      // \"leading\",\n      // \"letterSpacing\",\n      \"lineHeight\", \"baselineRatio\",\n      //\"padding\",\n      // \"stroke\",\n      // \"strokeThickness\",\n      // \"trim\",\n      // \"wordWrap\",\n      \"direction\", \"textBaseline\", \"oversizedBehavior\", \"breakWords\", \"ellipsis\", \"minScale\"]\n    });\n    Object.defineProperty(_this, \"_originalScale\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n  Object.defineProperty(Text.prototype, \"_updateBounds\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this.get(\"text\")) {\n        var newBounds = {\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0\n        };\n        this._adjustedLocalBounds = newBounds;\n      } else {\n        _super.prototype._updateBounds.call(this);\n      }\n    }\n  });\n  Object.defineProperty(Text.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n      _super.prototype._changed.call(this);\n      this._display.clear();\n      var textStyle = this.textStyle;\n      if (this.isDirty(\"opacity\")) {\n        var opacity = this.get(\"opacity\", 1);\n        this._display.alpha = opacity;\n      }\n      if (this.isDirty(\"text\") || this.isDirty(\"populateText\")) {\n        this._display.text = this._getText();\n        this.markDirtyBounds();\n        if (this.get(\"role\") == \"tooltip\") {\n          this._root.updateTooltip(this);\n        }\n      }\n      if (this.isDirty(\"width\")) {\n        textStyle.wordWrapWidth = this.width();\n        this.markDirtyBounds();\n      }\n      if (this.isDirty(\"oversizedBehavior\")) {\n        textStyle.oversizedBehavior = this.get(\"oversizedBehavior\", \"none\");\n        this.markDirtyBounds();\n      }\n      if (this.isDirty(\"breakWords\")) {\n        textStyle.breakWords = this.get(\"breakWords\", false);\n        this.markDirtyBounds();\n      }\n      if (this.isDirty(\"ellipsis\")) {\n        textStyle.ellipsis = this.get(\"ellipsis\");\n        this.markDirtyBounds();\n      }\n      if (this.isDirty(\"ignoreFormatting\")) {\n        textStyle.ignoreFormatting = this.get(\"ignoreFormatting\", false);\n        this.markDirtyBounds();\n      }\n      if (this.isDirty(\"minScale\")) {\n        textStyle.minScale = this.get(\"minScale\", 0);\n        this.markDirtyBounds();\n      }\n      if (this.isDirty(\"fill\")) {\n        var fill = this.get(\"fill\");\n        if (fill) {\n          textStyle.fill = fill;\n        }\n      }\n      if (this.isDirty(\"maxWidth\")) {\n        textStyle.maxWidth = this.get(\"maxWidth\");\n        this.markDirtyBounds();\n      }\n      if (this.isDirty(\"maxHeight\")) {\n        textStyle.maxHeight = this.get(\"maxHeight\");\n        this.markDirtyBounds();\n      }\n      $array.each(this._textStyles, function (styleName) {\n        if (_this._dirty[styleName]) {\n          textStyle[styleName] = _this.get(styleName);\n          _this.markDirtyBounds();\n        }\n      });\n      textStyle[\"fontSize\"] = this.get(\"fontSize\");\n      textStyle[\"fontFamily\"] = this.get(\"fontFamily\");\n      this._display.style = textStyle;\n      if (this.isDirty(\"role\") && this.get(\"role\") == \"tooltip\") {\n        this._root.updateTooltip(this);\n      }\n    }\n  });\n  Object.defineProperty(Text.prototype, \"_getText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var text = this.get(\"text\", \"\");\n      return this.get(\"populateText\") ? populateString(this, text) : text;\n    }\n  });\n  Object.defineProperty(Text.prototype, \"markDirtyText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._display.text = this._getText();\n      if (this.get(\"role\") == \"tooltip\") {\n        this._root.updateTooltip(this);\n      }\n      this.markDirtyBounds();\n      this.markDirty();\n    }\n  });\n  Object.defineProperty(Text.prototype, \"_setDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      _super.prototype._setDataItem.call(this, dataItem);\n      if (this.get(\"populateText\")) {\n        this.markDirtyText();\n      }\n    }\n  });\n  Object.defineProperty(Text, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Text\"\n  });\n  Object.defineProperty(Text, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Sprite.classNames.concat([Text.className])\n  });\n  return Text;\n}(Sprite);\nexport { Text };","map":{"version":3,"names":["Sprite","populateString","$array","Text","_super","__extends","_this","apply","arguments","Object","defineProperty","_root","_renderer","makeTextStyle","makeText","textStyle","value","get","newBounds","left","right","top","bottom","_adjustedLocalBounds","prototype","_updateBounds","call","_changed","_display","clear","isDirty","opacity","alpha","text","_getText","markDirtyBounds","updateTooltip","wordWrapWidth","width","oversizedBehavior","breakWords","ellipsis","ignoreFormatting","minScale","fill","maxWidth","maxHeight","each","_textStyles","styleName","_dirty","style","markDirty","dataItem","_setDataItem","markDirtyText","classNames","concat","className"],"sources":["../../../../../src/.internal/core/render/Text.ts"],"sourcesContent":["import type { Color } from \"../util/Color\";\nimport type { Percent } from \"../util/Percent\";\nimport type { IText } from \"./backend/Renderer\";\nimport type { IBounds } from \"../util/IBounds\";\nimport type { DataItem, IComponentDataItem } from \"./Component\";\n\nimport { Sprite, ISpriteSettings, ISpritePrivate } from \"./Sprite\";\nimport { populateString } from \"../util/PopulateString\";\n\nimport * as $array from \"../util/Array\";\n\n/**\n * @ignore Text is an internal class. Use Label instead.\n */\nexport interface ITextSettings extends ISpriteSettings {\n\ttext?: string;\n\tfill?: Color;\n\ttextAlign?: \"start\" | \"end\" | \"left\" | \"right\" | \"center\";\n\tfontFamily?: string;\n\tfontSize?: string | number;\n\tfontWeight?: \"normal\" | \"bold\" | \"bolder\" | \"lighter\" | \"100\" | \"200\" | \"300\" | \"400\" | \"500\" | \"600\" | \"700\" | \"800\" | \"900\"\n\tfontStyle?: \"normal\" | \"italic\" | \"oblique\";\n\tfontVariant?: \"normal\" | \"small-caps\";\n\tshadowColor?: Color | null;\n\tshadowBlur?: number;\n\tshadowOffsetX?: number;\n\tshadowOffsetY?: number;\n\tshadowOpacity?: number;\n\t// leading?: number;\n\t// letterSpacing?: number;\n\tlineHeight?: Percent | number;\n\tbaselineRatio?: number;\n\t// stroke?: number;\n\t// strokeThickness?: number;\n\t// trim?: number;\n\t// wordWrap?: boolean;\n\topacity?: number;\n\tdirection?: \"ltr\" | \"rtl\";\n\ttextBaseline?: \"top\" | \"hanging\" | \"middle\" | \"alphabetic\" | \"ideographic\" | \"bottom\";\n\toversizedBehavior?: \"none\" | \"hide\" | \"fit\" | \"wrap\" | \"truncate\";\n\tbreakWords?: boolean;\n\tellipsis?: string;\n\tminScale?: number;\n\tpopulateText?: boolean;\n\tignoreFormatting?: boolean;\n}\n\n/**\n * @ignore\n */\nexport interface ITextPrivate extends ISpritePrivate {\n\n\t/**\n\t * @ignore\n\t */\n\ttooltipElement?: HTMLDivElement;\n\n}\n\n/**\n * @ignore Text is an internal class. Use Label instead.\n */\nexport class Text extends Sprite {\n\n\tdeclare public _settings: ITextSettings;\n\tdeclare public _privateSettings: ITextPrivate;\n\n\tpublic textStyle = this._root._renderer.makeTextStyle();\n\n\tpublic _display: IText = this._root._renderer.makeText(\"\", this.textStyle);\n\n\tprotected _textStyles: Array<keyof ITextSettings> = [\n\t\t\"textAlign\",\n\t\t\"fontFamily\",\n\t\t\"fontSize\",\n\t\t\"fontStyle\",\n\t\t\"fontWeight\",\n\t\t\"fontStyle\",\n\t\t\"fontVariant\",\n\t\t\"shadowColor\",\n\t\t\"shadowBlur\",\n\t\t\"shadowOffsetX\",\n\t\t\"shadowOffsetY\",\n\t\t\"shadowOpacity\",\n\t\t// \"leading\",\n\t\t// \"letterSpacing\",\n\t\t\"lineHeight\",\n\t\t\"baselineRatio\",\n\t\t//\"padding\",\n\t\t// \"stroke\",\n\t\t// \"strokeThickness\",\n\t\t// \"trim\",\n\t\t// \"wordWrap\",\n\t\t\"direction\",\n\t\t\"textBaseline\",\n\t\t\"oversizedBehavior\",\n\t\t\"breakWords\",\n\t\t\"ellipsis\",\n\t\t\"minScale\"\n\t];\n\n\tprotected _originalScale: number | undefined;\n\n\tpublic static className: string = \"Text\";\n\tpublic static classNames: Array<string> = Sprite.classNames.concat([Text.className]);\n\n\tpublic _updateBounds(): void {\n\t\tif (!this.get(\"text\")) {\n\n\t\t\tlet newBounds: IBounds = {\n\t\t\t\tleft: 0,\n\t\t\t\tright: 0,\n\t\t\t\ttop: 0,\n\t\t\t\tbottom: 0,\n\t\t\t};\n\t\t\tthis._adjustedLocalBounds = newBounds;\n\t\t}\n\t\telse {\n\t\t\tsuper._updateBounds();\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tthis._display.clear();\n\n\t\tlet textStyle = <any>this.textStyle;\n\n\t\tif (this.isDirty(\"opacity\")) {\n\t\t\tlet opacity = this.get(\"opacity\", 1);\n\t\t\tthis._display.alpha = opacity;\n\t\t}\n\n\t\tif (this.isDirty(\"text\") || this.isDirty(\"populateText\")) {\n\t\t\tthis._display.text = this._getText();\n\n\t\t\tthis.markDirtyBounds();\n\t\t\tif (this.get(\"role\") == \"tooltip\") {\n\t\t\t\tthis._root.updateTooltip(this);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"width\")) {\n\t\t\ttextStyle.wordWrapWidth = this.width();\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"oversizedBehavior\")) {\n\t\t\ttextStyle.oversizedBehavior = this.get(\"oversizedBehavior\", \"none\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"breakWords\")) {\n\t\t\ttextStyle.breakWords = this.get(\"breakWords\", false);\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"ellipsis\")) {\n\t\t\ttextStyle.ellipsis = this.get(\"ellipsis\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"ignoreFormatting\")) {\n\t\t\ttextStyle.ignoreFormatting = this.get(\"ignoreFormatting\", false);\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"minScale\")) {\n\t\t\ttextStyle.minScale = this.get(\"minScale\", 0);\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"fill\")) {\n\t\t\tlet fill = this.get(\"fill\");\n\t\t\tif (fill) {\n\t\t\t\ttextStyle.fill = fill;\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"maxWidth\")) {\n\t\t\ttextStyle.maxWidth = this.get(\"maxWidth\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"maxHeight\")) {\n\t\t\ttextStyle.maxHeight = this.get(\"maxHeight\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\t$array.each(this._textStyles, (styleName) => {\n\t\t\tif (this._dirty[styleName]) {\n\t\t\t\ttextStyle[styleName] = this.get(styleName);\n\t\t\t\tthis.markDirtyBounds();\n\t\t\t}\n\t\t})\n\n\t\ttextStyle[\"fontSize\"] = this.get(\"fontSize\");\n\t\ttextStyle[\"fontFamily\"] = this.get(\"fontFamily\");\n\t\tthis._display.style = textStyle;\n\n\t\tif (this.isDirty(\"role\") && this.get(\"role\") == \"tooltip\") {\n\t\t\tthis._root.updateTooltip(this);\n\t\t}\n\t}\n\n\tpublic _getText(): string {\n\t\tconst text = this.get(\"text\", \"\");\n\t\treturn this.get(\"populateText\") ? populateString(this, text) : text;\n\t}\n\n\tpublic markDirtyText(): void {\n\t\tthis._display.text = this._getText();\n\t\tif (this.get(\"role\") == \"tooltip\") {\n\t\t\tthis._root.updateTooltip(this);\n\t\t}\n\t\tthis.markDirtyBounds();\n\t\tthis.markDirty();\n\t}\n\n\tpublic _setDataItem(dataItem?: DataItem<IComponentDataItem>): void {\n\t\tsuper._setDataItem(dataItem);\n\t\tif (this.get(\"populateText\")) {\n\t\t\tthis.markDirtyText();\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}