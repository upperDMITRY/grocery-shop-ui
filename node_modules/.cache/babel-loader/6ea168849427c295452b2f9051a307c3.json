{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { RoundedRectangle } from \"../render/RoundedRectangle\";\nimport { Container } from \"./Container\";\nimport * as $utils from \"../../core/util/Utils\";\n/**\r\n * Draws an interactive button.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/buttons/} for more info\r\n * @important\r\n */\n\nvar Button =\n/** @class */\nfunction (_super) {\n  __extends(Button, _super);\n\n  function Button() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(Button.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"button\"]);\n\n      _super.prototype._afterNew.call(this);\n\n      if (!this._settings.background) {\n        this.set(\"background\", RoundedRectangle.new(this._root, {\n          themeTags: $utils.mergeTags(this._settings.themeTags, [\"background\"])\n        }));\n      }\n    }\n  });\n  Object.defineProperty(Button.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._prepareChildren.call(this);\n\n      if (this.isDirty(\"icon\")) {\n        var previous = this._prevSettings.icon;\n        var icon = this.get(\"icon\");\n\n        if (icon !== previous) {\n          this._disposeProperty(\"icon\");\n\n          if (previous) {\n            previous.dispose();\n          }\n\n          if (icon) {\n            this.children.push(icon);\n          }\n\n          this._prevSettings.icon = icon;\n        }\n      }\n\n      if (this.isDirty(\"label\")) {\n        var previous = this._prevSettings.label;\n        var label = this.get(\"label\");\n\n        if (label !== previous) {\n          this._disposeProperty(\"label\");\n\n          if (previous) {\n            previous.dispose();\n          }\n\n          if (label) {\n            this.children.push(label);\n          }\n\n          this._prevSettings.label = label;\n        }\n      }\n    }\n  });\n  Object.defineProperty(Button, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Button\"\n  });\n  Object.defineProperty(Button, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Container.classNames.concat([Button.className])\n  });\n  return Button;\n}(Container);\n\nexport { Button };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/Button.ts"],"names":[],"mappings":";AAGA,SAAS,gBAAT,QAAiC,4BAAjC;AACA,SAAS,SAAT,QAAiE,aAAjE;AAEA,OAAO,KAAK,MAAZ,MAAwB,uBAAxB;AAmBA;;;;;AAKG;;AACH,IAAA,MAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4B,EAAA,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA;;AAA5B,WAAA,MAAA,GAAA;;AAwDC;;;;;;WAvDA,YAAA;AACC,WAAK,SAAL,CAAe,SAAf,GAA2B,MAAM,CAAC,SAAP,CAAiB,KAAK,SAAL,CAAe,SAAhC,EAA2C,CAAC,QAAD,CAA3C,CAA3B;;AAEA,MAAA,MAAA,CAAA,SAAA,CAAM,SAAN,CAAe,IAAf,CAAe,IAAf;;AAEA,UAAI,CAAC,KAAK,SAAL,CAAe,UAApB,EAAgC;AAC/B,aAAK,GAAL,CAAS,YAAT,EAAuB,gBAAgB,CAAC,GAAjB,CAAqB,KAAK,KAA1B,EAAiC;AACvD,UAAA,SAAS,EAAE,MAAM,CAAC,SAAP,CAAiB,KAAK,SAAL,CAAe,SAAhC,EAA2C,CAAC,YAAD,CAA3C;AAD4C,SAAjC,CAAvB;AAGA;AACD;;;;;;WAQD,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,gBAAN,CAAsB,IAAtB,CAAsB,IAAtB;;AAEA,UAAI,KAAK,OAAL,CAAa,MAAb,CAAJ,EAA0B;AACzB,YAAM,QAAQ,GAAG,KAAK,aAAL,CAAmB,IAApC;AACA,YAAM,IAAI,GAAG,KAAK,GAAL,CAAS,MAAT,CAAb;;AACA,YAAI,IAAI,KAAK,QAAb,EAAuB;AACtB,eAAK,gBAAL,CAAsB,MAAtB;;AAEA,cAAI,QAAJ,EAAc;AACb,YAAA,QAAQ,CAAC,OAAT;AACA;;AACD,cAAI,IAAJ,EAAU;AACT,iBAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB;AACA;;AAED,eAAK,aAAL,CAAmB,IAAnB,GAA0B,IAA1B;AACA;AACD;;AAED,UAAI,KAAK,OAAL,CAAa,OAAb,CAAJ,EAA2B;AAC1B,YAAM,QAAQ,GAAG,KAAK,aAAL,CAAmB,KAApC;AACA,YAAM,KAAK,GAAG,KAAK,GAAL,CAAS,OAAT,CAAd;;AACA,YAAI,KAAK,KAAK,QAAd,EAAwB;AACvB,eAAK,gBAAL,CAAsB,OAAtB;;AACA,cAAI,QAAJ,EAAc;AACb,YAAA,QAAQ,CAAC,OAAT;AACA;;AAED,cAAI,KAAJ,EAAW;AACV,iBAAK,QAAL,CAAc,IAAd,CAAmB,KAAnB;AACA;;AAED,eAAK,aAAL,CAAmB,KAAnB,GAA2B,KAA3B;AACA;AACD;AACD;;AAvCD,EAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,SAAS,CAAC,UAAV,CAAqB,MAArB,CAA4B,CAAC,MAAM,CAAC,SAAR,CAA5B;AAA1C,GAAA;AAuCD,SAAA,MAAA;AAAC,CAxDD,CAA4B,SAA5B,CAAA;;SAAa,M","sourcesContent":["import type { Label } from \"../render/Label\";\nimport type { Graphics } from \"../render/Graphics\";\n\nimport { RoundedRectangle } from \"../render/RoundedRectangle\";\nimport { Container, IContainerPrivate, IContainerSettings } from \"./Container\";\n\nimport * as $utils from \"../../core/util/Utils\";\n\nexport interface IButtonSettings extends IContainerSettings {\n\n\t/**\n\t * A [[Label]] element for the button to show as a label.\n\t */\n\tlabel?: Label;\n\n\t/**\n\t * A [[Graphics]] element for the button to show as icon.\n\t */\n\ticon?: Graphics;\n\n}\n\nexport interface IButtonPrivate extends IContainerPrivate {\n}\n\n/**\n * Draws an interactive button.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/buttons/} for more info\n * @important\n */\nexport class Button extends Container {\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"button\"]);\n\n\t\tsuper._afterNew();\n\n\t\tif (!this._settings.background) {\n\t\t\tthis.set(\"background\", RoundedRectangle.new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this._settings.themeTags, [\"background\"])\n\t\t\t}));\n\t\t}\n\t}\n\n\tdeclare public _settings: IButtonSettings;\n\tdeclare public _privateSettings: IButtonPrivate;\n\n\tpublic static className: string = \"Button\";\n\tpublic static classNames: Array<string> = Container.classNames.concat([Button.className]);\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isDirty(\"icon\")) {\n\t\t\tconst previous = this._prevSettings.icon;\n\t\t\tconst icon = this.get(\"icon\")!;\n\t\t\tif (icon !== previous) {\n\t\t\t\tthis._disposeProperty(\"icon\");\n\n\t\t\t\tif (previous) {\n\t\t\t\t\tprevious.dispose();\n\t\t\t\t}\n\t\t\t\tif (icon) {\n\t\t\t\t\tthis.children.push(icon);\n\t\t\t\t}\n\n\t\t\t\tthis._prevSettings.icon = icon;\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"label\")) {\n\t\t\tconst previous = this._prevSettings.label;\n\t\t\tconst label = this.get(\"label\")!;\n\t\t\tif (label !== previous) {\n\t\t\t\tthis._disposeProperty(\"label\");\n\t\t\t\tif (previous) {\n\t\t\t\t\tprevious.dispose();\n\t\t\t\t}\n\n\t\t\t\tif (label) {\n\t\t\t\t\tthis.children.push(label);\n\t\t\t\t}\n\n\t\t\t\tthis._prevSettings.label = label;\n\t\t\t}\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}