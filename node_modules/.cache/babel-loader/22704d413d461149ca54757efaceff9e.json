{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Entity } from \"./Entity\";\n/**\r\n * Presets for common UI elements.\r\n */\nvar InterfaceColors = /** @class */function (_super) {\n  __extends(InterfaceColors, _super);\n  function InterfaceColors() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(InterfaceColors, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"InterfaceColors\"\n  });\n  Object.defineProperty(InterfaceColors, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Entity.classNames.concat([InterfaceColors.className])\n  });\n  return InterfaceColors;\n}(Entity);\nexport { InterfaceColors };","map":{"version":3,"names":["Entity","InterfaceColors","_super","__extends","Object","defineProperty","classNames","concat","className"],"sources":["../../../../../src/.internal/core/util/InterfaceColors.ts"],"sourcesContent":["import type { Color } from \"./Color\"\n\nimport { Entity, IEntitySettings } from \"./Entity\"\n\n\nexport interface IInterfaceColorsSettings extends IEntitySettings {\n\n\t/**\n\t * Used for generic outlines.\n\t */\n\tstroke?: Color,\n\n\t/**\n\t * Used for genmeric fills.\n\t */\n\tfill?: Color,\n\n\t/**\n\t * Primary button fill color.\n\t */\n\tprimaryButton?: Color,\n\n\t/**\n\t * Primary button fill color on hover.\n\t */\n\tprimaryButtonHover?: Color,\n\n\t/**\n\t * Primary button fill color when pressing down on it.\n\t */\n\tprimaryButtonDown?: Color,\n\n\t/**\n\t * Primary button fill color when it is set as active.\n\t */\n\tprimaryButtonActive?: Color,\n\n\t/**\n\t * Primary button text color.\n\t */\n\tprimaryButtonText?: Color,\n\n\t/**\n\t * Primary button stroke (outline) color.\n\t */\n\tprimaryButtonStroke?: Color,\n\n\t/**\n\t * Secondary button fill color.\n\t */\n\tsecondaryButton?: Color,\n\n\t/**\n\t * Secondary button fill color on hover.\n\t */\n\tsecondaryButtonHover?: Color,\n\n\t/**\n\t * Secondary button fill color when pressing down on it.\n\t */\n\tsecondaryButtonDown?: Color,\n\n\t/**\n\t * Secondary button fill color when it is set as active.\n\t */\n\tsecondaryButtonActive?: Color,\n\n\t/**\n\t * Secondary button text color.\n\t */\n\tsecondaryButtonText?: Color,\n\n\t/**\n\t * Secondary button stroke (outline) color.\n\t */\n\tsecondaryButtonStroke?: Color,\n\n\t/**\n\t * Grid color.\n\t */\n\tgrid?: Color,\n\n\t/**\n\t * Chart background color.\n\t */\n\tbackground?: Color,\n\n\t/**\n\t * Alternative background, for elements that need to contrast with primary\n\t * background.\n\t */\n\talternativeBackground?: Color,\n\n\t/**\n\t * Label text color.\n\t */\n\ttext?: Color,\n\n\t/**\n\t * Alternative text color, used for inverted (dark) backgrounds.\n\t * @type {[type]}\n\t */\n\talternativeText?: Color,\n\n\t/**\n\t * Color for disabled elements.\n\t */\n\tdisabled?: Color,\n\n\t/**\n\t * Color to indicate positive value.\n\t */\n\tpositive?: Color,\n\n\t/**\n\t * Color to indicate negative value.\n\t */\n\tnegative?: Color\n\n}\n\n\n/**\n * Presets for common UI elements.\n */\nexport class InterfaceColors extends Entity {\n\tpublic static className: string = \"InterfaceColors\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([InterfaceColors.className]);\n\n\tdeclare public _settings: IInterfaceColorsSettings;\n}\n"],"mappings":";AAEA,SAASA,MAAM,QAAyB,UAAU;AAwHlD;;;AAGA,IAAAC,eAAA,0BAAAC,MAAA;EAAqCC,SAAA,CAAAF,eAAA,EAAAC,MAAA;EAArC,SAAAD,gBAAA;;EAKA;EAJCG,MAAA,CAAAC,cAAA,CAAAJ,eAAA;;;;WAAkC;;EAClCG,MAAA,CAAAC,cAAA,CAAAJ,eAAA;;;;WAA0CD,MAAM,CAACM,UAAU,CAACC,MAAM,CAAC,CAACN,eAAe,CAACO,SAAS,CAAC;;EAG/F,OAAAP,eAAC;CAAA,CALoCD,MAAM;SAA9BC,eAAe"},"metadata":{},"sourceType":"module"}