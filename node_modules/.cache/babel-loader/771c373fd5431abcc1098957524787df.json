{"ast":null,"code":"/** @ignore */\n\n/** */\nimport * as $array from \"./Array\";\n/**\r\n * @ignore\r\n */\n\nvar Native =\n/** @class */\nfunction () {\n  function Native() {\n    var _this = this;\n\n    Object.defineProperty(this, \"_observer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_targets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    this._observer = new ResizeObserver(function (entries) {\n      $array.each(entries, function (entry) {\n        $array.each(_this._targets, function (x) {\n          if (x.target === entry.target) {\n            x.callback();\n          }\n        });\n      });\n    });\n  }\n\n  Object.defineProperty(Native.prototype, \"addTarget\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(target, callback) {\n      this._observer.observe(target, {\n        box: \"content-box\"\n      });\n\n      this._targets.push({\n        target: target,\n        callback: callback\n      });\n    }\n  });\n  Object.defineProperty(Native.prototype, \"removeTarget\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(target) {\n      this._observer.unobserve(target);\n\n      $array.keepIf(this._targets, function (x) {\n        return x.target !== target;\n      });\n    }\n  });\n  return Native;\n}();\n/**\r\n * @ignore\r\n */\n\n\nvar Raf =\n/** @class */\nfunction () {\n  function Raf() {\n    Object.defineProperty(this, \"_timer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, \"_targets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n  }\n\n  Object.defineProperty(Raf.prototype, \"addTarget\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(target, callback) {\n      var _this = this;\n\n      if (this._timer === null) {\n        var lastTime_1 = null;\n\n        var loop_1 = function loop_1() {\n          var currentTime = Date.now();\n\n          if (lastTime_1 === null || currentTime > lastTime_1 + Raf.delay) {\n            lastTime_1 = currentTime;\n            $array.each(_this._targets, function (x) {\n              var newSize = x.target.getBoundingClientRect();\n\n              if (newSize.width !== x.size.width || newSize.height !== x.size.height) {\n                x.size = newSize;\n                x.callback();\n              }\n            });\n          }\n\n          if (_this._targets.length === 0) {\n            _this._timer = null;\n          } else {\n            _this._timer = requestAnimationFrame(loop_1);\n          }\n        };\n\n        this._timer = requestAnimationFrame(loop_1);\n      } // We start off with fake bounds so that sensor always kicks in\n      //let size = target.getBoundingClientRect();\n\n\n      var size = {\n        width: 0,\n        height: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      };\n\n      this._targets.push({\n        target: target,\n        callback: callback,\n        size: size\n      });\n    }\n  });\n  Object.defineProperty(Raf.prototype, \"removeTarget\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(target) {\n      $array.keepIf(this._targets, function (x) {\n        return x.target !== target;\n      });\n\n      if (this._targets.length === 0) {\n        if (this._timer !== null) {\n          cancelAnimationFrame(this._timer);\n          this._timer = null;\n        }\n      }\n    }\n  });\n  Object.defineProperty(Raf, \"delay\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 200\n  });\n  return Raf;\n}();\n/**\r\n * @ignore\r\n */\n\n\nvar observer = null;\n/**\r\n * @ignore\r\n */\n\nfunction makeSensor() {\n  if (observer === null) {\n    if (typeof ResizeObserver !== \"undefined\") {\n      observer = new Native();\n    } else {\n      observer = new Raf();\n    }\n  }\n\n  return observer;\n}\n/**\r\n * @ignore\r\n */\n\n\nvar ResizeSensor =\n/** @class */\nfunction () {\n  function ResizeSensor(element, callback) {\n    Object.defineProperty(this, \"_sensor\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_element\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    this._sensor = makeSensor();\n    this._element = element;\n\n    this._sensor.addTarget(element, callback);\n  }\n\n  Object.defineProperty(ResizeSensor.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      return this._disposed;\n    }\n  });\n  Object.defineProperty(ResizeSensor.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      if (!this._disposed) {\n        this._disposed = true;\n\n        this._sensor.removeTarget(this._element);\n      }\n    }\n  });\n  Object.defineProperty(ResizeSensor.prototype, \"sensor\", {\n    get: function get() {\n      return this._sensor;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ResizeSensor;\n}();\n\nexport { ResizeSensor };","map":{"version":3,"sources":["../../../../../src/.internal/core/util/ResizeSensor.ts"],"names":[],"mappings":"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","sourcesContent":["/** @ignore *//** */\n\nimport type { IDisposer } from \"./Disposer\";\nimport * as $array from \"./Array\";\n\n/**\n * @ignore\n */\ninterface Sensor {\n\taddTarget(target: Element, callback: () => void): void;\n\tremoveTarget(target: Element): void;\n}\n\n/**\n * @ignore\n */\ndeclare const ResizeObserver: any;\n\n/**\n * @ignore\n */\nclass Native implements Sensor {\n\tprivate _observer: any;\n\tprivate _targets: Array<{ target: Element, callback: () => void }> = [];\n\n\tconstructor() {\n\t\tthis._observer = new ResizeObserver((entries: Array<any>) => {\n\t\t\t$array.each(entries, (entry) => {\n\t\t\t\t$array.each(this._targets, (x) => {\n\t\t\t\t\tif (x.target === entry.target) {\n\t\t\t\t\t\tx.callback();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\taddTarget(target: Element, callback: () => void) {\n\t\tthis._observer.observe(target, { box: \"content-box\" });\n\t\tthis._targets.push({ target, callback });\n\t}\n\n\tremoveTarget(target: Element) {\n\t\tthis._observer.unobserve(target);\n\n\t\t$array.keepIf(this._targets, (x) => {\n\t\t\treturn x.target !== target;\n\t\t});\n\t}\n}\n\n/**\n * @ignore\n */\nclass Raf implements Sensor {\n\tpublic static delay: number = 200;\n\n\tprivate _timer: number | null = null;\n\tprivate _targets: Array<{ target: Element, callback: () => void, size: ClientRect | DOMRect }> = [];\n\n\taddTarget(target: Element, callback: () => void) {\n\t\tif (this._timer === null) {\n\t\t\tlet lastTime: number | null = null;\n\n\t\t\tconst loop = () => {\n\t\t\t\tconst currentTime = Date.now();\n\n\t\t\t\tif (lastTime === null || currentTime > (lastTime + Raf.delay)) {\n\t\t\t\t\tlastTime = currentTime;\n\n\t\t\t\t\t$array.each(this._targets, (x) => {\n\t\t\t\t\t\tlet newSize = x.target.getBoundingClientRect();\n\n\t\t\t\t\t\tif (newSize.width !== x.size.width || newSize.height !== x.size.height) {\n\t\t\t\t\t\t\tx.size = newSize;\n\t\t\t\t\t\t\tx.callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (this._targets.length === 0) {\n\t\t\t\t\tthis._timer = null;\n\n\t\t\t\t} else {\n\t\t\t\t\tthis._timer = requestAnimationFrame(loop);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis._timer = requestAnimationFrame(loop);\n\t\t}\n\n\t\t// We start off with fake bounds so that sensor always kicks in\n\t\t//let size = target.getBoundingClientRect();\n\t\tlet size = { width: 0, height: 0, left: 0, right: 0, top: 0, bottom: 0 };\n\t\tthis._targets.push({ target, callback, size });\n\t}\n\n\tremoveTarget(target: Element) {\n\t\t$array.keepIf(this._targets, (x) => {\n\t\t\treturn x.target !== target;\n\t\t});\n\n\t\tif (this._targets.length === 0) {\n\t\t\tif (this._timer !== null) {\n\t\t\t\tcancelAnimationFrame(this._timer);\n\t\t\t\tthis._timer = null;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * @ignore\n */\nlet observer: Sensor | null = null;\n\n/**\n * @ignore\n */\nfunction makeSensor(): Sensor {\n\tif (observer === null) {\n\t\tif (typeof ResizeObserver !== \"undefined\") {\n\t\t\tobserver = new Native();\n\n\t\t} else {\n\t\t\tobserver = new Raf();\n\t\t}\n\t}\n\n\treturn observer;\n}\n\n/**\n * @ignore\n */\nexport class ResizeSensor implements IDisposer {\n\tprivate _sensor: Sensor;\n\tprivate _element: Element;\n\tprivate _disposed: boolean = false;\n\n\tconstructor(element: Element, callback: () => void) {\n\t\tthis._sensor = makeSensor();\n\t\tthis._element = element;\n\t\tthis._sensor.addTarget(element, callback);\n\t}\n\n\tpublic isDisposed() {\n\t\treturn this._disposed;\n\t}\n\n\tpublic dispose() {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\t\t\tthis._sensor.removeTarget(this._element);\n\t\t}\n\t}\n\n\tpublic get sensor(): Sensor {\n\t\treturn this._sensor;\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}