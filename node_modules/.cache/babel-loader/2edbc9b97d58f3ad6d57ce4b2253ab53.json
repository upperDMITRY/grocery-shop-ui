{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Sprite } from \"./Sprite\";\nimport { populateString } from \"../util/PopulateString\";\nimport * as $array from \"../util/Array\";\n/**\r\n * @ignore Text is an internal class. Use Label instead.\r\n */\n\nvar Text =\n/** @class */\nfunction (_super) {\n  __extends(Text, _super);\n\n  function Text() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"textStyle\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeTextStyle()\n    });\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeText(\"\", _this.textStyle)\n    });\n    Object.defineProperty(_this, \"_textStyles\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"textAlign\", \"fontFamily\", \"fontSize\", \"fontStyle\", \"fontWeight\", \"fontStyle\", \"fontVariant\", \"shadowColor\", \"shadowBlur\", \"shadowOffsetX\", \"shadowOffsetY\", \"shadowOpacity\", // \"leading\",\n      // \"letterSpacing\",\n      \"lineHeight\", \"baselineRatio\", //\"padding\",\n      // \"stroke\",\n      // \"strokeThickness\",\n      // \"trim\",\n      // \"wordWrap\",\n      \"direction\", \"textBaseline\", \"oversizedBehavior\", \"breakWords\", \"ellipsis\", \"minScale\"]\n    });\n    Object.defineProperty(_this, \"_originalScale\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Text.prototype, \"_updateBounds\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      if (!this.get(\"text\")) {\n        var newBounds = {\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0\n        };\n        this._adjustedLocalBounds = newBounds;\n      } else {\n        _super.prototype._updateBounds.call(this);\n      }\n    }\n  });\n  Object.defineProperty(Text.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n\n      _super.prototype._changed.call(this);\n\n      this._display.clear();\n\n      var textStyle = this.textStyle;\n\n      if (this.isDirty(\"opacity\")) {\n        var opacity = this.get(\"opacity\", 1);\n        this._display.alpha = opacity;\n      }\n\n      if (this.isDirty(\"text\") || this.isDirty(\"populateText\")) {\n        this._display.text = this._getText();\n        this.markDirtyBounds();\n\n        if (this.get(\"role\") == \"tooltip\") {\n          this._root.updateTooltip(this);\n        }\n      }\n\n      if (this.isDirty(\"width\")) {\n        textStyle.wordWrapWidth = this.width();\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"oversizedBehavior\")) {\n        textStyle.oversizedBehavior = this.get(\"oversizedBehavior\", \"none\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"breakWords\")) {\n        textStyle.breakWords = this.get(\"breakWords\", false);\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"ellipsis\")) {\n        textStyle.ellipsis = this.get(\"ellipsis\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"ignoreFormatting\")) {\n        textStyle.ignoreFormatting = this.get(\"ignoreFormatting\", false);\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"minScale\")) {\n        textStyle.minScale = this.get(\"minScale\", 0);\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"fill\")) {\n        var fill = this.get(\"fill\");\n\n        if (fill) {\n          textStyle.fill = fill;\n        }\n      }\n\n      if (this.isDirty(\"maxWidth\")) {\n        textStyle.maxWidth = this.get(\"maxWidth\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"maxHeight\")) {\n        textStyle.maxHeight = this.get(\"maxHeight\");\n        this.markDirtyBounds();\n      }\n\n      $array.each(this._textStyles, function (styleName) {\n        if (_this._dirty[styleName]) {\n          textStyle[styleName] = _this.get(styleName);\n\n          _this.markDirtyBounds();\n        }\n      });\n      textStyle[\"fontSize\"] = this.get(\"fontSize\");\n      textStyle[\"fontFamily\"] = this.get(\"fontFamily\");\n      this._display.style = textStyle;\n\n      if (this.isDirty(\"role\") && this.get(\"role\") == \"tooltip\") {\n        this._root.updateTooltip(this);\n      }\n    }\n  });\n  Object.defineProperty(Text.prototype, \"_getText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var text = this.get(\"text\", \"\");\n      return this.get(\"populateText\") ? populateString(this, text) : text;\n    }\n  });\n  Object.defineProperty(Text.prototype, \"markDirtyText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      this._display.text = this._getText();\n\n      if (this.get(\"role\") == \"tooltip\") {\n        this._root.updateTooltip(this);\n      }\n\n      this.markDirtyBounds();\n      this.markDirty();\n    }\n  });\n  Object.defineProperty(Text.prototype, \"_setDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(dataItem) {\n      _super.prototype._setDataItem.call(this, dataItem);\n\n      if (this.get(\"populateText\")) {\n        this.markDirtyText();\n      }\n    }\n  });\n  Object.defineProperty(Text, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Text\"\n  });\n  Object.defineProperty(Text, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Sprite.classNames.concat([Text.className])\n  });\n  return Text;\n}(Sprite);\n\nexport { Text };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/Text.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Color } from \"../util/Color\";\nimport type { Percent } from \"../util/Percent\";\nimport type { IText } from \"./backend/Renderer\";\nimport type { IBounds } from \"../util/IBounds\";\nimport type { DataItem, IComponentDataItem } from \"./Component\";\n\nimport { Sprite, ISpriteSettings, ISpritePrivate } from \"./Sprite\";\nimport { populateString } from \"../util/PopulateString\";\n\nimport * as $array from \"../util/Array\";\n\n/**\n * @ignore Text is an internal class. Use Label instead.\n */\nexport interface ITextSettings extends ISpriteSettings {\n\ttext?: string;\n\tfill?: Color;\n\ttextAlign?: \"start\" | \"end\" | \"left\" | \"right\" | \"center\";\n\tfontFamily?: string;\n\tfontSize?: string | number;\n\tfontWeight?: \"normal\" | \"bold\" | \"bolder\" | \"lighter\" | \"100\" | \"200\" | \"300\" | \"400\" | \"500\" | \"600\" | \"700\" | \"800\" | \"900\"\n\tfontStyle?: \"normal\" | \"italic\" | \"oblique\";\n\tfontVariant?: \"normal\" | \"small-caps\";\n\tshadowColor?: Color | null;\n\tshadowBlur?: number;\n\tshadowOffsetX?: number;\n\tshadowOffsetY?: number;\n\tshadowOpacity?: number;\n\t// leading?: number;\n\t// letterSpacing?: number;\n\tlineHeight?: Percent | number;\n\tbaselineRatio?: number;\n\t// stroke?: number;\n\t// strokeThickness?: number;\n\t// trim?: number;\n\t// wordWrap?: boolean;\n\topacity?: number;\n\tdirection?: \"ltr\" | \"rtl\";\n\ttextBaseline?: \"top\" | \"hanging\" | \"middle\" | \"alphabetic\" | \"ideographic\" | \"bottom\";\n\toversizedBehavior?: \"none\" | \"hide\" | \"fit\" | \"wrap\" | \"truncate\";\n\tbreakWords?: boolean;\n\tellipsis?: string;\n\tminScale?: number;\n\tpopulateText?: boolean;\n\tignoreFormatting?: boolean;\n}\n\n/**\n * @ignore\n */\nexport interface ITextPrivate extends ISpritePrivate {\n\n\t/**\n\t * @ignore\n\t */\n\ttooltipElement?: HTMLDivElement;\n\n}\n\n/**\n * @ignore Text is an internal class. Use Label instead.\n */\nexport class Text extends Sprite {\n\n\tdeclare public _settings: ITextSettings;\n\tdeclare public _privateSettings: ITextPrivate;\n\n\tpublic textStyle = this._root._renderer.makeTextStyle();\n\n\tpublic _display: IText = this._root._renderer.makeText(\"\", this.textStyle);\n\n\tprotected _textStyles: Array<keyof ITextSettings> = [\n\t\t\"textAlign\",\n\t\t\"fontFamily\",\n\t\t\"fontSize\",\n\t\t\"fontStyle\",\n\t\t\"fontWeight\",\n\t\t\"fontStyle\",\n\t\t\"fontVariant\",\n\t\t\"shadowColor\",\n\t\t\"shadowBlur\",\n\t\t\"shadowOffsetX\",\n\t\t\"shadowOffsetY\",\n\t\t\"shadowOpacity\",\n\t\t// \"leading\",\n\t\t// \"letterSpacing\",\n\t\t\"lineHeight\",\n\t\t\"baselineRatio\",\n\t\t//\"padding\",\n\t\t// \"stroke\",\n\t\t// \"strokeThickness\",\n\t\t// \"trim\",\n\t\t// \"wordWrap\",\n\t\t\"direction\",\n\t\t\"textBaseline\",\n\t\t\"oversizedBehavior\",\n\t\t\"breakWords\",\n\t\t\"ellipsis\",\n\t\t\"minScale\"\n\t];\n\n\tprotected _originalScale: number | undefined;\n\n\tpublic static className: string = \"Text\";\n\tpublic static classNames: Array<string> = Sprite.classNames.concat([Text.className]);\n\n\tpublic _updateBounds(): void {\n\t\tif (!this.get(\"text\")) {\n\n\t\t\tlet newBounds: IBounds = {\n\t\t\t\tleft: 0,\n\t\t\t\tright: 0,\n\t\t\t\ttop: 0,\n\t\t\t\tbottom: 0,\n\t\t\t};\n\t\t\tthis._adjustedLocalBounds = newBounds;\n\t\t}\n\t\telse {\n\t\t\tsuper._updateBounds();\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tthis._display.clear();\n\n\t\tlet textStyle = <any>this.textStyle;\n\n\t\tif (this.isDirty(\"opacity\")) {\n\t\t\tlet opacity = this.get(\"opacity\", 1);\n\t\t\tthis._display.alpha = opacity;\n\t\t}\n\n\t\tif (this.isDirty(\"text\") || this.isDirty(\"populateText\")) {\n\t\t\tthis._display.text = this._getText();\n\n\t\t\tthis.markDirtyBounds();\n\t\t\tif (this.get(\"role\") == \"tooltip\") {\n\t\t\t\tthis._root.updateTooltip(this);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"width\")) {\n\t\t\ttextStyle.wordWrapWidth = this.width();\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"oversizedBehavior\")) {\n\t\t\ttextStyle.oversizedBehavior = this.get(\"oversizedBehavior\", \"none\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"breakWords\")) {\n\t\t\ttextStyle.breakWords = this.get(\"breakWords\", false);\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"ellipsis\")) {\n\t\t\ttextStyle.ellipsis = this.get(\"ellipsis\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"ignoreFormatting\")) {\n\t\t\ttextStyle.ignoreFormatting = this.get(\"ignoreFormatting\", false);\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"minScale\")) {\n\t\t\ttextStyle.minScale = this.get(\"minScale\", 0);\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"fill\")) {\n\t\t\tlet fill = this.get(\"fill\");\n\t\t\tif (fill) {\n\t\t\t\ttextStyle.fill = fill;\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"maxWidth\")) {\n\t\t\ttextStyle.maxWidth = this.get(\"maxWidth\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"maxHeight\")) {\n\t\t\ttextStyle.maxHeight = this.get(\"maxHeight\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\t$array.each(this._textStyles, (styleName) => {\n\t\t\tif (this._dirty[styleName]) {\n\t\t\t\ttextStyle[styleName] = this.get(styleName);\n\t\t\t\tthis.markDirtyBounds();\n\t\t\t}\n\t\t})\n\n\t\ttextStyle[\"fontSize\"] = this.get(\"fontSize\");\n\t\ttextStyle[\"fontFamily\"] = this.get(\"fontFamily\");\n\t\tthis._display.style = textStyle;\n\n\t\tif (this.isDirty(\"role\") && this.get(\"role\") == \"tooltip\") {\n\t\t\tthis._root.updateTooltip(this);\n\t\t}\n\t}\n\n\tpublic _getText(): string {\n\t\tconst text = this.get(\"text\", \"\");\n\t\treturn this.get(\"populateText\") ? populateString(this, text) : text;\n\t}\n\n\tpublic markDirtyText(): void {\n\t\tthis._display.text = this._getText();\n\t\tif (this.get(\"role\") == \"tooltip\") {\n\t\t\tthis._root.updateTooltip(this);\n\t\t}\n\t\tthis.markDirtyBounds();\n\t\tthis.markDirty();\n\t}\n\n\tpublic _setDataItem(dataItem?: DataItem<IComponentDataItem>): void {\n\t\tsuper._setDataItem(dataItem);\n\t\tif (this.get(\"populateText\")) {\n\t\t\tthis.markDirtyText();\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}