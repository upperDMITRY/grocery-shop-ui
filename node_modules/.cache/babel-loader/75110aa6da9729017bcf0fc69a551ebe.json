{"ast":null,"code":"/**\r\n * Modified from Pixi:\r\n *\r\n * The MIT License\r\n *\r\n * Copyright (c) 2013-2017 Mathew Groves, Chad Engler\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\n\n/**\r\n * @ignore\r\n */\nvar Matrix =\n/** @class */\nfunction () {\n  function Matrix(a, b, c, d, tx, ty) {\n    if (a === void 0) {\n      a = 1;\n    }\n\n    if (b === void 0) {\n      b = 0;\n    }\n\n    if (c === void 0) {\n      c = 0;\n    }\n\n    if (d === void 0) {\n      d = 1;\n    }\n\n    if (tx === void 0) {\n      tx = 0;\n    }\n\n    if (ty === void 0) {\n      ty = 0;\n    }\n\n    Object.defineProperty(this, \"a\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"b\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"c\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"d\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"tx\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"ty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n  }\n  /**\r\n   * Sets the matrix based on all the available properties\r\n   */\n\n\n  Object.defineProperty(Matrix.prototype, \"setTransform\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (x, y, pivotX, pivotY, rotation, scale) {\n      if (scale === void 0) {\n        scale = 1;\n      }\n\n      this.a = Math.cos(rotation) * scale;\n      this.b = Math.sin(rotation) * scale;\n      this.c = -Math.sin(rotation) * scale;\n      this.d = Math.cos(rotation) * scale;\n      this.tx = x - (pivotX * this.a + pivotY * this.c);\n      this.ty = y - (pivotX * this.b + pivotY * this.d);\n    }\n  });\n  /**\r\n   * Get a new position with the current transformation applied.\r\n   * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\r\n   */\n\n  Object.defineProperty(Matrix.prototype, \"apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (origin) {\n      return {\n        x: this.a * origin.x + this.c * origin.y + this.tx,\n        y: this.b * origin.x + this.d * origin.y + this.ty\n      };\n    }\n  });\n  /**\r\n   * Get a new position with the inverse of the current transformation applied.\r\n   * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\r\n   */\n\n  Object.defineProperty(Matrix.prototype, \"applyInverse\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (origin) {\n      var id = 1 / (this.a * this.d + this.c * -this.b);\n      return {\n        x: this.d * id * origin.x + -this.c * id * origin.y + (this.ty * this.c - this.tx * this.d) * id,\n        y: this.a * id * origin.y + -this.b * id * origin.x + (-this.ty * this.a + this.tx * this.b) * id\n      };\n    }\n  });\n  /**\r\n   * Appends the given Matrix to this Matrix.\r\n   */\n\n  Object.defineProperty(Matrix.prototype, \"append\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (matrix) {\n      var a1 = this.a;\n      var b1 = this.b;\n      var c1 = this.c;\n      var d1 = this.d;\n      this.a = matrix.a * a1 + matrix.b * c1;\n      this.b = matrix.a * b1 + matrix.b * d1;\n      this.c = matrix.c * a1 + matrix.d * c1;\n      this.d = matrix.c * b1 + matrix.d * d1;\n      this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n      this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n    }\n  });\n  /**\r\n   * Prepends the given Matrix to this Matrix.\r\n   */\n\n  Object.defineProperty(Matrix.prototype, \"prepend\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (matrix) {\n      var tx1 = this.tx;\n\n      if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n        var a1 = this.a;\n        var c1 = this.c;\n        this.a = a1 * matrix.a + this.b * matrix.c;\n        this.b = a1 * matrix.b + this.b * matrix.d;\n        this.c = c1 * matrix.a + this.d * matrix.c;\n        this.d = c1 * matrix.b + this.d * matrix.d;\n      }\n\n      this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;\n      this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;\n    }\n  });\n  /**\r\n   * Copies the other matrix's properties into this matrix\r\n   */\n\n  Object.defineProperty(Matrix.prototype, \"copyFrom\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (matrix) {\n      this.a = matrix.a;\n      this.b = matrix.b;\n      this.c = matrix.c;\n      this.d = matrix.d;\n      this.tx = matrix.tx;\n      this.ty = matrix.ty;\n    }\n  });\n  return Matrix;\n}();\n\nexport { Matrix };","map":{"version":3,"sources":["../../../../../src/.internal/core/util/Matrix.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Modified from Pixi:\n *\n * The MIT License\n *\n * Copyright (c) 2013-2017 Mathew Groves, Chad Engler\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport type { IPoint } from \"./IPoint\";\n\n/**\n * @ignore\n */\nexport class Matrix {\n\tpublic a: number;\n\tpublic b: number;\n\tpublic c: number;\n\tpublic d: number;\n\tpublic tx: number;\n\tpublic ty: number;\n\n\tconstructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\t\tthis.d = d;\n\t\tthis.tx = tx;\n\t\tthis.ty = ty;\n\t}\n\n\t/**\n\t * Sets the matrix based on all the available properties\n\t */\n\tsetTransform(x: number, y: number, pivotX: number, pivotY: number, rotation: number, scale: number = 1): void {\n\t\tthis.a = Math.cos(rotation) * scale;\n\t\tthis.b = Math.sin(rotation) * scale;\n\t\tthis.c = -Math.sin(rotation) * scale;\n\t\tthis.d = Math.cos(rotation) * scale;\n\t\tthis.tx = x - ((pivotX * this.a) + (pivotY * this.c));\n\t\tthis.ty = y - ((pivotX * this.b) + (pivotY * this.d));\n\t}\n\n\t/**\n\t * Get a new position with the current transformation applied.\n\t * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n\t */\n\tapply(origin: IPoint): IPoint {\n\t\treturn {\n\t\t\tx: (this.a * origin.x) + (this.c * origin.y) + this.tx,\n\t\t\ty: (this.b * origin.x) + (this.d * origin.y) + this.ty\n\t\t};\n\t}\n\n\t/**\n\t * Get a new position with the inverse of the current transformation applied.\n\t * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n\t */\n\tapplyInverse(origin: IPoint): IPoint {\n\t\tconst id = 1 / ((this.a * this.d) + (this.c * -this.b));\n\n\t\treturn {\n\t\t\tx: (this.d * id * origin.x) + (-this.c * id * origin.y) + (((this.ty * this.c) - (this.tx * this.d)) * id),\n\t\t\ty: (this.a * id * origin.y) + (-this.b * id * origin.x) + (((-this.ty * this.a) + (this.tx * this.b)) * id)\n\t\t};\n\t}\n\n\t/**\n\t * Appends the given Matrix to this Matrix.\n\t */\n\tappend(matrix: Matrix): void {\n\t\tconst a1 = this.a;\n\t\tconst b1 = this.b;\n\t\tconst c1 = this.c;\n\t\tconst d1 = this.d;\n\t\tthis.a = (matrix.a * a1) + (matrix.b * c1);\n\t\tthis.b = (matrix.a * b1) + (matrix.b * d1);\n\t\tthis.c = (matrix.c * a1) + (matrix.d * c1);\n\t\tthis.d = (matrix.c * b1) + (matrix.d * d1);\n\t\tthis.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;\n\t\tthis.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;\n\t}\n\n\t/**\n\t * Prepends the given Matrix to this Matrix.\n\t */\n\tprepend(matrix: Matrix): void {\n\t\tconst tx1 = this.tx;\n\t\tif (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n\t\t\tconst a1 = this.a;\n\t\t\tconst c1 = this.c;\n\t\t\tthis.a = (a1 * matrix.a) + (this.b * matrix.c);\n\t\t\tthis.b = (a1 * matrix.b) + (this.b * matrix.d);\n\t\t\tthis.c = (c1 * matrix.a) + (this.d * matrix.c);\n\t\t\tthis.d = (c1 * matrix.b) + (this.d * matrix.d);\n\t\t}\n\t\tthis.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;\n\t\tthis.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;\n\t}\n\n\t/**\n\t * Copies the other matrix's properties into this matrix\n\t */\n\tcopyFrom(matrix: Matrix): void {\n\t\tthis.a = matrix.a;\n\t\tthis.b = matrix.b;\n\t\tthis.c = matrix.c;\n\t\tthis.d = matrix.d;\n\t\tthis.tx = matrix.tx;\n\t\tthis.ty = matrix.ty;\n\t}\n}\n\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}