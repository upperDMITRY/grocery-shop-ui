{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Pattern } from \"./Pattern\";\nimport * as $math from \"../../util/Math\";\n/**\r\n * Circle pattern.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\n\nvar CirclePattern =\n/** @class */\nfunction (_super) {\n  __extends(CirclePattern, _super);\n\n  function CirclePattern() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(CirclePattern.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"gap\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(CirclePattern.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._draw.call(this);\n\n      var checkered = this.get(\"checkered\", false);\n      var centered = this.get(\"centered\", true);\n      var gap = this.get(\"gap\", 0);\n      var rotation = this.get(\"rotation\", 0);\n      var w = this.get(\"width\", 100);\n      var h = this.get(\"height\", 100);\n      var radius = this.get(\"radius\", 3);\n      var cellW = radius * 2 + gap;\n      var cellH = radius * 2 + gap;\n      var cols = Math.round(w / cellW);\n      var rows = Math.round(h / cellH);\n      cellW = w / cols;\n      cellH = h / rows;\n\n      if (rotation != 0) {\n        // @todo this is probably not right\n        this._display.x = cellW * $math.cos(rotation);\n        this._display.y = cellH * $math.sin(rotation);\n      }\n\n      var color = this.get(\"color\");\n      var colorOpacity = this.get(\"colorOpacity\");\n\n      if (color || colorOpacity) {\n        this._display.beginFill(color, colorOpacity);\n      }\n\n      for (var r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n        for (var c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n          if (!checkered || (r & 1) != 1 && (c & 1) != 1 || (r & 1) == 1 && (c & 1) == 1) {\n            var x = c * cellW;\n            var y = r * cellH;\n\n            if (centered) {\n              x += cellW + gap / 2;\n              y += cellH + gap / 2;\n            }\n\n            this._display.drawCircle(x - radius, y - radius, radius);\n          }\n        }\n      }\n\n      if (checkered) {\n        w = w / 2 - gap * 2;\n        h = h / 2 - gap * 2;\n      } else {\n        w -= gap;\n        h -= gap;\n      }\n\n      if (color || colorOpacity) {\n        this._display.endFill();\n      }\n    }\n  });\n  Object.defineProperty(CirclePattern, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"CirclePattern\"\n  });\n  Object.defineProperty(CirclePattern, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Pattern.classNames.concat([CirclePattern.className])\n  });\n  return CirclePattern;\n}(Pattern);\n\nexport { CirclePattern };","map":{"version":3,"sources":["../../../../../../src/.internal/core/render/patterns/CirclePattern.ts"],"names":[],"mappings":"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","sourcesContent":["import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\n\nimport * as $math from \"../../util/Math\";\n\nexport interface ICirclePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between circles, in pixels.\n\t *\n\t * @default 3\n\t */\n\tgap?: number;\n\n\t/**\n\t * Radius of the circles, in pixels.\n\t *\n\t * @default 3\n\t */\n\tradius?: number;\n\n\t/**\n\t * If set to `true`, will place every second circle, creating checkered\n\t * pattern.\n\t *\n\t * @default false\n\t */\n\tcheckered?: boolean;\n\n\t/**\n\t * Center circles.\n\t *\n\t * @default true\n\t */\n\tcentered?: boolean;\n\n}\n\nexport interface ICirclePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Circle pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class CirclePattern extends Pattern {\n\n\tdeclare public _settings: ICirclePatternSettings;\n\tdeclare public _privateSettings: ICirclePatternPrivate;\n\n\tpublic static className: string = \"CirclePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([CirclePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst checkered = this.get(\"checkered\", false);\n\t\tconst centered = this.get(\"centered\", true);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet w = this.get(\"width\", 100);\n\t\tlet h = this.get(\"height\", 100);\n\t\tlet radius = this.get(\"radius\", 3);\n\n\t\tlet cellW = radius * 2 + gap;\n\t\tlet cellH = radius * 2 + gap;\n\n\t\tlet cols = Math.round(w / cellW);\n\t\tlet rows = Math.round(h / cellH);\n\n\t\tcellW = w / cols;\n\t\tcellH = h / rows;\n\n\t\tif (rotation != 0) {\n\t\t\t// @todo this is probably not right\n\t\t\tthis._display.x = cellW * $math.cos(rotation);\n\t\t\tthis._display.y = cellH * $math.sin(rotation);\n\t\t}\n\n\t\tconst color = this.get(\"color\");\n\t\tconst colorOpacity = this.get(\"colorOpacity\");\n\t\tif (color || colorOpacity) {\n\t\t\tthis._display.beginFill(color, colorOpacity);\n\t\t}\n\n\t\tfor (let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n\t\t\tfor (let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n\t\t\t\tif (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {\n\t\t\t\t\tlet x = c * cellW;\n\t\t\t\t\tlet y = r * cellH;\n\t\t\t\t\tif (centered) {\n\t\t\t\t\t\tx += cellW + gap / 2;\n\t\t\t\t\t\ty += cellH + gap / 2;\n\t\t\t\t\t}\n\t\t\t\t\tthis._display.drawCircle(x - radius, y - radius, radius);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (checkered) {\n\t\t\tw = w / 2 - gap * 2;\n\t\t\th = h / 2 - gap * 2;\n\t\t}\n\t\telse {\n\t\t\tw -= gap;\n\t\t\th -= gap;\n\t\t}\n\n\t\tif (color || colorOpacity) {\n\t\t\tthis._display.endFill();\n\t\t}\n\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}