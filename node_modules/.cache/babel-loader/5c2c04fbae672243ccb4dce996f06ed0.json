{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Entity } from \"../../core/util/Entity\";\n/**\r\n * A universal placeholder for bullet elements.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/} for more info\r\n */\n\nvar Bullet =\n/** @class */\nfunction (_super) {\n  __extends(Bullet, _super);\n\n  function Bullet() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // used by MapPolygons where one data item can have multiple bullets of the same kind\n\n\n    Object.defineProperty(_this, \"_index\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * Target series object if it's a bullet for series.\r\n     */\n\n    Object.defineProperty(_this, \"series\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Bullet.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      // Applying themes because bullet will not have parent\n      _super.prototype._afterNewApplyThemes.call(this);\n    }\n  });\n  Object.defineProperty(Bullet.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"sprite\")) {\n        var sprite = this.get(\"sprite\");\n\n        if (sprite) {\n          sprite.setAll({\n            position: \"absolute\",\n            role: \"figure\"\n          });\n\n          this._disposers.push(sprite);\n        }\n      }\n\n      if (this.isDirty(\"locationX\") || this.isDirty(\"locationY\")) {\n        if (this.series) {\n          this.series._positionBullet(this);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Bullet, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Bullet\"\n  });\n  Object.defineProperty(Bullet, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Entity.classNames.concat([Bullet.className])\n  });\n  return Bullet;\n}(Entity);\n\nexport { Bullet };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/Bullet.ts"],"names":[],"mappings":";AAAA,SAAS,MAAT,QAAwD,wBAAxD;AAwDA;;;;AAIG;;AACH,IAAA,MAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4B,EAAA,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA;;AAA5B,WAAA,MAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA,CAAA,CAOC;;;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,QAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AAEA;;AAEG;;AACH,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,QAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;;AAwBA;;;;;;WAtBA,YAAA;AACC;AACA,MAAA,MAAA,CAAA,SAAA,CAAM,oBAAN,CAA0B,IAA1B,CAA0B,IAA1B;AACA;;;;;;WAED,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB;;AAEA,UAAI,KAAK,OAAL,CAAa,QAAb,CAAJ,EAA4B;AAC3B,YAAM,MAAM,GAAG,KAAK,GAAL,CAAS,QAAT,CAAf;;AACA,YAAI,MAAJ,EAAY;AACX,UAAA,MAAM,CAAC,MAAP,CAAc;AAAE,YAAA,QAAQ,EAAE,UAAZ;AAAwB,YAAA,IAAI,EAAE;AAA9B,WAAd;;AACA,eAAK,UAAL,CAAgB,IAAhB,CAAqB,MAArB;AACA;AACD;;AAED,UAAI,KAAK,OAAL,CAAa,WAAb,KAA6B,KAAK,OAAL,CAAa,WAAb,CAAjC,EAA4D;AAC3D,YAAI,KAAK,MAAT,EAAiB;AAChB,eAAK,MAAL,CAAY,eAAZ,CAA4B,IAA5B;AACA;AACD;AACD;;AAnCD,EAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,MAAM,CAAC,UAAP,CAAkB,MAAlB,CAAyB,CAAC,MAAM,CAAC,SAAR,CAAzB;AAA1C,GAAA;AAmCD,SAAA,MAAA;AAAC,CArCD,CAA4B,MAA5B,CAAA;;SAAa,M","sourcesContent":["import { Entity, IEntitySettings, IEntityPrivate } from \"../../core/util/Entity\";\nimport type { Sprite } from \"../../core/render/Sprite\";\nimport type { Series } from \"../../core/render/Series\";\n\nexport interface IBulletSettings extends IEntitySettings {\n\n\t/**\n\t * Horizontal location within target element.\n\t *\n\t * 0 - left, 1 - right, or anything inbetweeen.\n\t */\n\tlocationX?: number;\n\n\t/**\n\t * Vertical location within target element.\n\t *\n\t * 0 - top, 1 - bottom, or anything inbetweeen.\n\t */\n\tlocationY?: number;\n\n\t/**\n\t * A visual element of the bullet.\n\t */\n\tsprite: Sprite;\n\n\t/**\n\t * If set to `true`, the bullet will redraw its `sprite` element whenever\n\t * anything in its parent series changes.\n\t *\n\t * @default false\n\t */\n\tdynamic?: boolean;\n\n\t/**\n\t * If set to `true`, the bullet will be automatically rotated to face\n\t * direction of line it is attached to.\n\t *\n\t * NOTE: Works only in  [[Flow]] and [[MapPointSeries]] (when [[MapPoint]] is\n\t * attached to a [[MapLine]]).\n\t *\n\t * @default false\n\t */\n\tautoRotate?: boolean;\n\n\t/**\n\t * If `autoRotate` is set to `true`, value of `autoRotateAngle` will be added\n\t * to the automatically-calculated angle.\n\t */\n\tautoRotateAngle?: number;\n\n}\n\nexport interface IBulletPrivate extends IEntityPrivate {\n\thidden?:boolean;\n}\n\n/**\n * A universal placeholder for bullet elements.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/} for more info\n */\nexport class Bullet extends Entity {\n\tpublic static className: string = \"Bullet\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([Bullet.className]);\n\n\tdeclare public _settings: IBulletSettings;\n\tdeclare public _privateSettings: IBulletPrivate;\n\n\t// used by MapPolygons where one data item can have multiple bullets of the same kind\n\tpublic _index?: number;\n\n\t/**\n\t * Target series object if it's a bullet for series.\n\t */\n\tpublic series: Series | undefined;\n\n\tprotected _afterNew() {\n\t\t// Applying themes because bullet will not have parent\n\t\tsuper._afterNewApplyThemes();\n\t}\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"sprite\")) {\n\t\t\tconst sprite = this.get(\"sprite\");\n\t\t\tif (sprite) {\n\t\t\t\tsprite.setAll({ position: \"absolute\", role: \"figure\" });\n\t\t\t\tthis._disposers.push(sprite);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"locationX\") || this.isDirty(\"locationY\")) {\n\t\t\tif (this.series) {\n\t\t\t\tthis.series._positionBullet(this);\n\t\t\t}\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}