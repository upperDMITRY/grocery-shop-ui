{"ast":null,"code":"/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Represents a relative value (percent).\r\n *\r\n * The Percent object, can be instantiated using two ways:\r\n *\r\n * * Via `new Percent(X)`.\r\n * * Via `am5.percent(X)`.\r\n *\r\n * You can also use shortcut functions for `0%`, `50%`, and `100%`:\r\n * * `am5.p0`\r\n * * `am5.p50`\r\n * * `am5.p1000`\r\n */\nvar Percent = /** @class */function () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param percent  Percent value\r\n   */\n  function Percent(percent) {\n    /**\r\n     * Value in percent.\r\n     */\n    Object.defineProperty(this, \"_value\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._value = percent;\n  }\n  Object.defineProperty(Percent.prototype, \"value\", {\n    /**\r\n     * Relative value.\r\n     *\r\n     * E.g. 100% is 1, 50% is 0.5, etc.\r\n     *\r\n     * This is useful to apply transformations to other values. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * let value = 256;\r\n     * let percent = new am5.p50;\r\n     * console.log(value * percent.value); // outputs 128\r\n     * ```\r\n     * ```JavaScript\r\n     * var value = 256;\r\n     * var percent = new am5.p50;\r\n     * console.log(value * percent.value); // outputs 128\r\n     * ```\r\n     *\r\n     * Alternatively, you can use `am5.percent()` helper function:\r\n     *\r\n     * ```TypeScript\r\n     * let value = 256;\r\n     * let percent = am5.p50;\r\n     * console.log(value * percent.value); // outputs 128\r\n     * ```\r\n     * ```JavaScript\r\n     * var value = 256;\r\n     * var percent = am5.p50;\r\n     * console.log(value * percent.value); // outputs 128\r\n     * ```\r\n     *\r\n     * @readonly\r\n     * @return Relative value\r\n     */\n    get: function () {\n      return this._value / 100;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Percent.prototype, \"percent\", {\n    /**\r\n     * Value in percent.\r\n     *\r\n     * @return Percent\r\n     */\n    get: function () {\n      return this._value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Percent.prototype, \"toString\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return \"\" + this._value + \"%\";\n    }\n  });\n  Object.defineProperty(Percent.prototype, \"interpolate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (min, max) {\n      return min + this.value * (max - min);\n    }\n  });\n  Object.defineProperty(Percent, \"normalize\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (percent, min, max) {\n      if (percent instanceof Percent) {\n        return percent;\n      } else {\n        if (min === max) {\n          return new Percent(0);\n        } else {\n          return new Percent(Math.min(Math.max((percent - min) * (1 / (max - min)), 0), 1) * 100);\n        }\n      }\n    }\n  });\n  return Percent;\n}();\nexport { Percent };\n/**\r\n * Converts numeric percent value to a proper [[Percent]] object.\r\n *\r\n * ```TypeScript\r\n * pieSeries.set(\"radius\", am5.percent(80));\r\n * ```\r\n * ```JavaScript\r\n * pieSeries.set(\"radius\", am5.percent(80));\r\n * ```\r\n *\r\n * @param value  Percent\r\n * @return Percent object\r\n */\nexport function percent(value) {\n  return new Percent(value);\n}\n/**\r\n * A shortcut function to `am5.percent(0)`.\r\n */\nexport var p0 = percent(0);\n/**\r\n * A shortcut function to `am5.percent(100)`.\r\n */\nexport var p100 = percent(100);\n/**\r\n * A shortcut function to `am5.percent(50)`.\r\n */\nexport var p50 = percent(50);\n/**\r\n * Checks if value is a [[Percent]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value  Input value\r\n * @return Is percent?\r\n */\nexport function isPercent(value) {\n  return value instanceof Percent;\n}","map":{"version":3,"names":["Percent","percent","Object","defineProperty","_value","prototype","get","value","min","max","Math","p0","p100","p50","isPercent"],"sources":["../../../../../src/.internal/core/util/Percent.ts"],"sourcesContent":["/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Represents a relative value (percent).\n *\n * The Percent object, can be instantiated using two ways:\n *\n * * Via `new Percent(X)`.\n * * Via `am5.percent(X)`.\n *\n * You can also use shortcut functions for `0%`, `50%`, and `100%`:\n * * `am5.p0`\n * * `am5.p50`\n * * `am5.p1000`\n */\nexport class Percent {\n\n\t/**\n\t * Value in percent.\n\t */\n\tprotected _value: number;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param percent  Percent value\n\t */\n\tconstructor(percent: number) {\n\t\tthis._value = percent;\n\t}\n\n\t/**\n\t * Relative value.\n\t *\n\t * E.g. 100% is 1, 50% is 0.5, etc.\n\t *\n\t * This is useful to apply transformations to other values. E.g.:\n\t *\n\t * ```TypeScript\n\t * let value = 256;\n\t * let percent = new am5.p50;\n\t * console.log(value * percent.value); // outputs 128\n\t * ```\n\t * ```JavaScript\n\t * var value = 256;\n\t * var percent = new am5.p50;\n\t * console.log(value * percent.value); // outputs 128\n\t * ```\n\t *\n\t * Alternatively, you can use `am5.percent()` helper function:\n\t *\n\t * ```TypeScript\n\t * let value = 256;\n\t * let percent = am5.p50;\n\t * console.log(value * percent.value); // outputs 128\n\t * ```\n\t * ```JavaScript\n\t * var value = 256;\n\t * var percent = am5.p50;\n\t * console.log(value * percent.value); // outputs 128\n\t * ```\n\t *\n\t * @readonly\n\t * @return Relative value\n\t */\n\tpublic get value(): number {\n\t\treturn this._value / 100;\n\t}\n\n\t/**\n\t * Value in percent.\n\t *\n\t * @return Percent\n\t */\n\tpublic get percent(): number {\n\t\treturn this._value;\n\t}\n\n\tpublic toString(): string {\n\t\treturn \"\" + this._value + \"%\";\n\t}\n\n\tpublic interpolate(min: number, max: number): number {\n\t\treturn min + (this.value * (max - min));\n\t}\n\n\tstatic normalize(percent: Percent | number, min: number, max: number): Percent {\n\t\tif (percent instanceof Percent) {\n\t\t\treturn percent;\n\n\t\t} else {\n\t\t\tif (min === max) {\n\t\t\t\treturn new Percent(0);\n\n\t\t\t} else {\n\t\t\t\treturn new Percent(Math.min(Math.max((percent - min) * (1 / (max - min)), 0), 1) * 100);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*public toNumber(): number {\n\t\treturn this.percent;\n\t}*/\n\n}\n\n\n/**\n * Converts numeric percent value to a proper [[Percent]] object.\n *\n * ```TypeScript\n * pieSeries.set(\"radius\", am5.percent(80));\n * ```\n * ```JavaScript\n * pieSeries.set(\"radius\", am5.percent(80));\n * ```\n *\n * @param value  Percent\n * @return Percent object\n */\nexport function percent(value: number): Percent {\n\treturn new Percent(value);\n}\n\n/**\n * A shortcut function to `am5.percent(0)`.\n */\nexport const p0 = percent(0);\n\n/**\n * A shortcut function to `am5.percent(100)`.\n */\nexport const p100 = percent(100);\n\n/**\n * A shortcut function to `am5.percent(50)`.\n */\nexport const p50 = percent(50);\n\n\n/**\n * Checks if value is a [[Percent]] object.\n *\n * @ignore Exclude from docs\n * @param value  Input value\n * @return Is percent?\n */\nexport function isPercent(value: any): boolean {\n\treturn value instanceof Percent;\n}\n"],"mappings":"AAAA;;;;;;AAOA;;;;;;;;;;;;;AAaA,IAAAA,OAAA;EAOC;;;;;EAKA,SAAAA,QAAYC,OAAe;IAV3B;;;IAGAC,MAAA,CAAAC,cAAA;;;;;;IAQC,IAAI,CAACC,MAAM,GAAGH,OAAO;EACtB;EAoCAC,MAAA,CAAAC,cAAA,CAAWH,OAAA,CAAAK,SAAA,SAAK;IAlChB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAkCA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACF,MAAM,GAAG,GAAG;IACzB,CAAC;;;;EAODF,MAAA,CAAAC,cAAA,CAAWH,OAAA,CAAAK,SAAA,WAAO;IALlB;;;;;SAKA,SAAAC,CAAA;MACC,OAAO,IAAI,CAACF,MAAM;IACnB,CAAC;;;;;;;;WAED,SAAAG,CAAA;MACC,OAAO,EAAE,GAAG,IAAI,CAACH,MAAM,GAAG,GAAG;IAC9B;;;;;;WAEA,SAAAG,CAAmBC,GAAW,EAAEC,GAAW;MAC1C,OAAOD,GAAG,GAAI,IAAI,CAACD,KAAK,IAAIE,GAAG,GAAGD,GAAG,CAAE;IACxC;;;;;;WAEA,SAAAD,CAAiBN,OAAyB,EAAEO,GAAW,EAAEC,GAAW;MACnE,IAAIR,OAAO,YAAYD,OAAO,EAAE;QAC/B,OAAOC,OAAO;OAEd,MAAM;QACN,IAAIO,GAAG,KAAKC,GAAG,EAAE;UAChB,OAAO,IAAIT,OAAO,CAAC,CAAC,CAAC;SAErB,MAAM;UACN,OAAO,IAAIA,OAAO,CAACU,IAAI,CAACF,GAAG,CAACE,IAAI,CAACD,GAAG,CAAC,CAACR,OAAO,GAAGO,GAAG,KAAK,CAAC,IAAIC,GAAG,GAAGD,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;;;IAG1F;;EAMD,OAAAR,OAAC;AAAD,CAAC,CAzFD;;AA4FA;;;;;;;;;;;;;AAaA,OAAM,SAAUC,OAAOA,CAACM,KAAa;EACpC,OAAO,IAAIP,OAAO,CAACO,KAAK,CAAC;AAC1B;AAEA;;;AAGA,OAAO,IAAMI,EAAE,GAAGV,OAAO,CAAC,CAAC,CAAC;AAE5B;;;AAGA,OAAO,IAAMW,IAAI,GAAGX,OAAO,CAAC,GAAG,CAAC;AAEhC;;;AAGA,OAAO,IAAMY,GAAG,GAAGZ,OAAO,CAAC,EAAE,CAAC;AAG9B;;;;;;;AAOA,OAAM,SAAUa,SAASA,CAACP,KAAU;EACnC,OAAOA,KAAK,YAAYP,OAAO;AAChC"},"metadata":{},"sourceType":"module"}