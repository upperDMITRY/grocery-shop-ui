{"ast":null,"code":"import { __extends, __generator } from \"tslib\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param index  Index\r\n * @param len    Length\r\n * @ignore\r\n */\n\nfunction checkBounds(index, len) {\n  if (!(index >= 0 && index < len)) {\n    throw new Error(\"Index out of bounds: \" + index);\n  }\n}\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\n\n\nvar List =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param initial  Inital list of values to add to list\r\n   */\n  function List(initial) {\n    if (initial === void 0) {\n      initial = [];\n    }\n    /**\r\n     * List values.\r\n     */\n\n\n    Object.defineProperty(this, \"_values\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new EventDispatcher()\n    });\n    this._values = initial;\n  }\n\n  Object.defineProperty(List.prototype, \"values\", {\n    /**\r\n     * An array of values in the list.\r\n     *\r\n     * Do not use this property to add values. Rather use dedicated methods, like\r\n     * `push()`, `removeIndex()`, etc.\r\n     *\r\n     * @readonly\r\n     * @return List values\r\n     */\n    get: function () {\n      return this._values;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Checks if list contains specific item reference.\r\n   *\r\n   * @param item  Item to search for\r\n   * @return `true` if found, `false` if not found\r\n   */\n\n  Object.defineProperty(List.prototype, \"contains\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      return this._values.indexOf(value) !== -1;\n    }\n  });\n  /**\r\n   * Removes specific item from the list.\r\n   *\r\n   * @param item An item to remove\r\n   */\n\n  Object.defineProperty(List.prototype, \"removeValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      var i = 0;\n      var length = this._values.length;\n\n      while (i < length) {\n        // TODO handle NaN\n        if (this._values[i] === value) {\n          this.removeIndex(i);\n          --length;\n        } else {\n          ++i;\n        }\n      }\n    }\n  });\n  /**\r\n   * Searches the list for specific item and returns its index.\r\n   *\r\n   * @param item  An item to search for\r\n   * @return Index or -1 if not found\r\n   */\n\n  Object.defineProperty(List.prototype, \"indexOf\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      return $array.indexOf(this._values, value);\n    }\n  });\n  Object.defineProperty(List.prototype, \"length\", {\n    /**\r\n     * Number of items in list.\r\n     *\r\n     * @readonly\r\n     * @return Number of items\r\n     */\n    get: function () {\n      return this._values.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Checks if there's a value at specific index.\r\n   *\r\n   * @param index  Index\r\n   * @return Value exists?\r\n   */\n\n  Object.defineProperty(List.prototype, \"hasIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      return index >= 0 && index < this._values.length;\n    }\n  });\n  /**\r\n   * Returns an item at specified index.\r\n   *\r\n   * @param index  Index\r\n   * @return List item\r\n   */\n\n  Object.defineProperty(List.prototype, \"getIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      return this._values[index];\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onPush\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (newValue) {\n      if (this.events.isEnabled(\"push\")) {\n        this.events.dispatch(\"push\", {\n          type: \"push\",\n          target: this,\n          newValue: newValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onInsertIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, newValue) {\n      if (this.events.isEnabled(\"insertIndex\")) {\n        this.events.dispatch(\"insertIndex\", {\n          type: \"insertIndex\",\n          target: this,\n          index: index,\n          newValue: newValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onSetIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue, newValue) {\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatch(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue,\n          newValue: newValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onRemoveIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue) {\n      if (this.events.isEnabled(\"removeIndex\")) {\n        this.events.dispatch(\"removeIndex\", {\n          type: \"removeIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onClear\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (oldValues) {\n      if (this.events.isEnabled(\"clear\")) {\n        this.events.dispatch(\"clear\", {\n          type: \"clear\",\n          target: this,\n          oldValues: oldValues\n        });\n      }\n    }\n  });\n  /**\r\n   * Sets value at specific index.\r\n   *\r\n   * If there's already a value at the index, it is overwritten.\r\n   *\r\n   * @param index  Index\r\n   * @param value  New value\r\n   * @return New value\r\n   */\n\n  Object.defineProperty(List.prototype, \"setIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, value) {\n      checkBounds(index, this._values.length);\n      var oldValue = this._values[index]; // Do nothing if the old value and the new value are the same\n\n      if (oldValue !== value) {\n        this._values[index] = value;\n\n        this._onSetIndex(index, oldValue, value);\n      }\n\n      return oldValue;\n    }\n  });\n  /**\r\n   * Adds an item to the list at a specific index, which pushes all the other\r\n   * items further down the list.\r\n   *\r\n   * @param index Index\r\n   * @param item  An item to add\r\n   */\n\n  Object.defineProperty(List.prototype, \"insertIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, value) {\n      checkBounds(index, this._values.length + 1);\n      $array.insertIndex(this._values, index, value);\n\n      this._onInsertIndex(index, value);\n\n      return value;\n    }\n  });\n  /**\r\n   * Swaps indexes of two items in the list.\r\n   *\r\n   * @param a  Item 1\r\n   * @param b  Item 2\r\n   */\n\n  Object.defineProperty(List.prototype, \"swap\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (a, b) {\n      var len = this._values.length;\n      checkBounds(a, len);\n      checkBounds(b, len);\n\n      if (a !== b) {\n        var value_a = this._values[a];\n        var value_b = this._values[b];\n        this._values[a] = value_b;\n\n        this._onSetIndex(a, value_a, value_b);\n\n        this._values[b] = value_a;\n\n        this._onSetIndex(b, value_b, value_a);\n      }\n    }\n  });\n  /**\r\n   * Removes a value at specific index.\r\n   *\r\n   * @param index  Index of value to remove\r\n   * @return Removed value\r\n   */\n\n  Object.defineProperty(List.prototype, \"removeIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      checkBounds(index, this._values.length);\n      var oldValue = this._values[index];\n      $array.removeIndex(this._values, index);\n\n      this._onRemoveIndex(index, oldValue);\n\n      return oldValue;\n    }\n  });\n  /**\r\n   * Moves an item to a specific index within the list.\r\n   *\r\n   * If the index is not specified it will move the item to the end of the\r\n   * list.\r\n   *\r\n   * @param value  Item to move\r\n   * @param index  Index to place item at\r\n   */\n\n  Object.defineProperty(List.prototype, \"moveValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, toIndex) {\n      // TODO don't do anything if the desired index is the same as the current index\n      var index = this.indexOf(value); // TODO remove all old values rather than only the first ?\n\n      if (index !== -1) {\n        var oldValue = this._values[index];\n        $array.removeIndex(this._values, index);\n\n        this._onRemoveIndex(index, oldValue);\n      }\n\n      if (toIndex == null) {\n        this._values.push(value);\n\n        this._onPush(value);\n      } else {\n        $array.insertIndex(this._values, toIndex, value);\n\n        this._onInsertIndex(toIndex, value);\n      }\n\n      return value;\n    }\n  });\n  /**\r\n   * Adds an item to the end of the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n\n  Object.defineProperty(List.prototype, \"push\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      this._values.push(value);\n\n      this._onPush(value);\n\n      return value;\n    }\n  });\n  /**\r\n   * Adds an item as a first item in the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n\n  Object.defineProperty(List.prototype, \"unshift\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      this.insertIndex(0, value);\n      return value;\n    }\n  });\n  /**\r\n   * Adds multiple items to the list.\r\n   *\r\n   * @param items  An Array of items to add\r\n   */\n\n  Object.defineProperty(List.prototype, \"pushAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (values) {\n      var _this = this;\n\n      $array.each(values, function (value) {\n        _this.push(value);\n      });\n    }\n  });\n  /**\r\n   * Copies and adds items from abother list.\r\n   *\r\n   * @param source  A list top copy items from\r\n   */\n\n  Object.defineProperty(List.prototype, \"copyFrom\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (source) {\n      this.pushAll(source._values);\n    }\n  });\n  /**\r\n   * Returns the last item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n\n  Object.defineProperty(List.prototype, \"pop\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var index = this._values.length - 1;\n      return index < 0 ? undefined : this.removeIndex(this._values.length - 1);\n    }\n  });\n  /**\r\n   * Returns the first item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n\n  Object.defineProperty(List.prototype, \"shift\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._values.length ? this.removeIndex(0) : undefined;\n    }\n  });\n  /**\r\n   * Sets multiple items to the list.\r\n   *\r\n   * All current items are removed.\r\n   *\r\n   * @param newArray  New items\r\n   */\n\n  Object.defineProperty(List.prototype, \"setAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (newArray) {\n      var _this = this;\n\n      var old = this._values;\n      this._values = [];\n\n      this._onClear(old);\n\n      $array.each(newArray, function (value) {\n        _this._values.push(value);\n\n        _this._onPush(value);\n      });\n    }\n  });\n  /**\r\n   * Removes all items from the list.\r\n   */\n\n  Object.defineProperty(List.prototype, \"clear\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.setAll([]);\n    }\n  });\n  /**\r\n   * Returns an ES6 iterator for the list.\r\n   */\n\n  Object.defineProperty(List.prototype, Symbol.iterator, {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var length, i;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            length = this._values.length;\n            i = 0;\n            _a.label = 1;\n\n          case 1:\n            if (!(i < length)) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this._values[i]];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            ++i;\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    }\n  });\n  /**\r\n   * Calls `f` for each element in the list.\r\n   *\r\n   * `f` should have at least one parameter defined which will get a current\r\n   * item, with optional second argument - index.\r\n   */\n\n  Object.defineProperty(List.prototype, \"each\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (f) {\n      $array.each(this._values, f);\n    }\n  });\n  return List;\n}();\n\nexport { List };\n/**\r\n * A version of a [[List]] where the elements are disposed automatically when\r\n * removed from the list, unless `autoDispose` is set to `false`.\r\n */\n\nvar ListAutoDispose =\n/** @class */\nfunction (_super) {\n  __extends(ListAutoDispose, _super);\n\n  function ListAutoDispose() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Automatically disposes elements that are removed from the list.\r\n     *\r\n     * @default true\r\n     */\n\n\n    Object.defineProperty(_this, \"autoDispose\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(_this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    return _this;\n  }\n\n  Object.defineProperty(ListAutoDispose.prototype, \"_onSetIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue, newValue) {\n      if (this.autoDispose) {\n        oldValue.dispose();\n      }\n\n      _super.prototype._onSetIndex.call(this, index, oldValue, newValue);\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"_onRemoveIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue) {\n      if (this.autoDispose) {\n        oldValue.dispose();\n      }\n\n      _super.prototype._onRemoveIndex.call(this, index, oldValue);\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"_onClear\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (oldValues) {\n      if (this.autoDispose) {\n        $array.each(oldValues, function (x) {\n          x.dispose();\n        });\n      }\n\n      _super.prototype._onClear.call(this, oldValues);\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._disposed;\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._disposed) {\n        this._disposed = true;\n\n        if (this.autoDispose) {\n          $array.each(this._values, function (x) {\n            x.dispose();\n          });\n        }\n      }\n    }\n  });\n  return ListAutoDispose;\n}(List);\n\nexport { ListAutoDispose };\n/**\r\n * A version of a [[List]] that is able to create new elements as well as\r\n * apply additional settings to newly created items.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/list-templates/} for more info\r\n */\n\nvar ListTemplate =\n/** @class */\nfunction (_super) {\n  __extends(ListTemplate, _super);\n\n  function ListTemplate(template, make) {\n    var _this = _super.call(this) || this;\n\n    Object.defineProperty(_this, \"template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"make\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    _this.template = template;\n    _this.make = make;\n    return _this;\n  }\n\n  return ListTemplate;\n}(ListAutoDispose);\n\nexport { ListTemplate };","map":{"version":3,"sources":["../../../../../src/.internal/core/util/List.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport type { Entity } from \"./Entity\";\nimport type { Template } from \"./Template\";\nimport type { IDisposer } from \"./Disposer\";\nimport { EventDispatcher, Events } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\nimport type { Optional } from \"./Type\";\n\n\n/**\n * Checks if specific index fits into length.\n *\n * @param index  Index\n * @param len    Length\n * @ignore\n */\nfunction checkBounds(index: number, len: number): void {\n\tif (!(index >= 0 && index < len)) {\n\t\tthrow new Error(\"Index out of bounds: \" + index);\n\t}\n}\n\n\nexport interface IListEvents<A> {\n\tclear: {\n\t\toldValues: Array<A>,\n\t};\n\tpush: {\n\t\tnewValue: A,\n\t};\n\tinsertIndex: {\n\t\tindex: number,\n\t\tnewValue: A,\n\t};\n\tsetIndex: {\n\t\tindex: number,\n\t\toldValue: A,\n\t\tnewValue: A,\n\t};\n\tremoveIndex: {\n\t\tindex: number,\n\t\toldValue: A,\n\t};\n}\n\n\n/**\n * A List class is used to hold a number of indexed items of the same type.\n */\nexport class List<T> {\n\n\t/**\n\t * List values.\n\t */\n\tprotected _values: Array<T>;\n\n\tpublic events = new EventDispatcher<Events<this, IListEvents<T>>>();\n\n\t/**\n\t * Constructor\n\t *\n\t * @param initial  Inital list of values to add to list\n\t */\n\tconstructor(initial: Array<T> = []) {\n\t\tthis._values = initial;\n\t}\n\n\t/**\n\t * An array of values in the list.\n\t *\n\t * Do not use this property to add values. Rather use dedicated methods, like\n\t * `push()`, `removeIndex()`, etc.\n\t *\n\t * @readonly\n\t * @return List values\n\t */\n\tpublic get values(): Array<T> {\n\t\treturn this._values;\n\t}\n\n\t/**\n\t * Checks if list contains specific item reference.\n\t *\n\t * @param item  Item to search for\n\t * @return `true` if found, `false` if not found\n\t */\n\tpublic contains(value: T): boolean {\n\t\treturn this._values.indexOf(value) !== -1;\n\t}\n\n\t/**\n\t * Removes specific item from the list.\n\t *\n\t * @param item An item to remove\n\t */\n\tpublic removeValue(value: T): void {\n\t\tlet i = 0;\n\t\tlet length = this._values.length;\n\n\t\twhile (i < length) {\n\t\t\t// TODO handle NaN\n\t\t\tif (this._values[i] === value) {\n\t\t\t\tthis.removeIndex(i);\n\t\t\t\t--length;\n\n\t\t\t} else {\n\t\t\t\t++i;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Searches the list for specific item and returns its index.\n\t *\n\t * @param item  An item to search for\n\t * @return Index or -1 if not found\n\t */\n\tpublic indexOf(value: T): number {\n\t\treturn $array.indexOf(this._values, value);\n\t}\n\n\t/**\n\t * Number of items in list.\n\t *\n\t * @readonly\n\t * @return Number of items\n\t */\n\tpublic get length(): number {\n\t\treturn this._values.length;\n\t}\n\n\t/**\n\t * Checks if there's a value at specific index.\n\t *\n\t * @param index  Index\n\t * @return Value exists?\n\t */\n\tpublic hasIndex(index: number): boolean {\n\t\treturn index >= 0 && index < this._values.length;\n\t}\n\n\t/**\n\t * Returns an item at specified index.\n\t *\n\t * @param index  Index\n\t * @return List item\n\t */\n\tpublic getIndex(index: number): T | undefined {\n\t\treturn this._values[index];\n\t}\n\n\tprotected _onPush(newValue: T) {\n\t\tif (this.events.isEnabled(\"push\")) {\n\t\t\tthis.events.dispatch(\"push\", {\n\t\t\t\ttype: \"push\",\n\t\t\t\ttarget: this,\n\t\t\t\tnewValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onInsertIndex(index: number, newValue: T) {\n\t\tif (this.events.isEnabled(\"insertIndex\")) {\n\t\t\tthis.events.dispatch(\"insertIndex\", {\n\t\t\t\ttype: \"insertIndex\",\n\t\t\t\ttarget: this,\n\t\t\t\tindex,\n\t\t\t\tnewValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onSetIndex(index: number, oldValue: T, newValue: T) {\n\t\tif (this.events.isEnabled(\"setIndex\")) {\n\t\t\tthis.events.dispatch(\"setIndex\", {\n\t\t\t\ttype: \"setIndex\",\n\t\t\t\ttarget: this,\n\t\t\t\tindex,\n\t\t\t\toldValue,\n\t\t\t\tnewValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onRemoveIndex(index: number, oldValue: T) {\n\t\tif (this.events.isEnabled(\"removeIndex\")) {\n\t\t\tthis.events.dispatch(\"removeIndex\", {\n\t\t\t\ttype: \"removeIndex\",\n\t\t\t\ttarget: this,\n\t\t\t\tindex,\n\t\t\t\toldValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onClear(oldValues: Array<T>) {\n\t\tif (this.events.isEnabled(\"clear\")) {\n\t\t\tthis.events.dispatch(\"clear\", {\n\t\t\t\ttype: \"clear\",\n\t\t\t\ttarget: this,\n\t\t\t\toldValues\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Sets value at specific index.\n\t *\n\t * If there's already a value at the index, it is overwritten.\n\t *\n\t * @param index  Index\n\t * @param value  New value\n\t * @return New value\n\t */\n\tpublic setIndex(index: number, value: T): T {\n\t\tcheckBounds(index, this._values.length);\n\n\t\tconst oldValue = this._values[index];\n\n\t\t// Do nothing if the old value and the new value are the same\n\t\tif (oldValue !== value) {\n\t\t\tthis._values[index] = value;\n\t\t\tthis._onSetIndex(index, oldValue, value);\n\t\t}\n\n\t\treturn oldValue;\n\t}\n\n\t/**\n\t * Adds an item to the list at a specific index, which pushes all the other\n\t * items further down the list.\n\t *\n\t * @param index Index\n\t * @param item  An item to add\n\t */\n\tpublic insertIndex<K extends T>(index: number, value: K): K {\n\t\tcheckBounds(index, this._values.length + 1);\n\n\t\t$array.insertIndex(this._values, index, value);\n\t\tthis._onInsertIndex(index, value);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Swaps indexes of two items in the list.\n\t *\n\t * @param a  Item 1\n\t * @param b  Item 2\n\t */\n\tpublic swap(a: number, b: number): void {\n\t\tconst len = this._values.length;\n\n\t\tcheckBounds(a, len);\n\t\tcheckBounds(b, len);\n\n\t\tif (a !== b) {\n\t\t\tconst value_a = this._values[a];\n\t\t\tconst value_b = this._values[b];\n\n\t\t\tthis._values[a] = value_b;\n\t\t\tthis._onSetIndex(a, value_a, value_b);\n\n\t\t\tthis._values[b] = value_a;\n\t\t\tthis._onSetIndex(b, value_b, value_a);\n\t\t}\n\t}\n\n\t/**\n\t * Removes a value at specific index.\n\t *\n\t * @param index  Index of value to remove\n\t * @return Removed value\n\t */\n\tpublic removeIndex(index: number): T {\n\t\tcheckBounds(index, this._values.length);\n\n\t\tconst oldValue = this._values[index];\n\n\t\t$array.removeIndex(this._values, index);\n\t\tthis._onRemoveIndex(index, oldValue);\n\n\t\treturn oldValue;\n\t}\n\n\t/**\n\t * Moves an item to a specific index within the list.\n\t *\n\t * If the index is not specified it will move the item to the end of the\n\t * list.\n\t *\n\t * @param value  Item to move\n\t * @param index  Index to place item at\n\t */\n\tpublic moveValue<K extends T>(value: K, toIndex?: number): K {\n\t\t// TODO don't do anything if the desired index is the same as the current index\n\t\tlet index = this.indexOf(value);\n\n\t\t// TODO remove all old values rather than only the first ?\n\t\tif (index !== -1) {\n\t\t\tconst oldValue = this._values[index];\n\n\t\t\t$array.removeIndex(this._values, index);\n\t\t\tthis._onRemoveIndex(index, oldValue);\n\t\t}\n\n\t\tif (toIndex == null) {\n\t\t\tthis._values.push(value);\n\t\t\tthis._onPush(value);\n\n\t\t} else {\n\t\t\t$array.insertIndex(this._values, toIndex, value);\n\t\t\tthis._onInsertIndex(toIndex, value);\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Adds an item to the end of the list.\n\t *\n\t * @param item  An item to add\n\t */\n\tpublic push<K extends T>(value: K): K {\n\t\tthis._values.push(value);\n\t\tthis._onPush(value);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Adds an item as a first item in the list.\n\t *\n\t * @param item  An item to add\n\t */\n\tpublic unshift<K extends T>(value: K): K {\n\t\tthis.insertIndex(0, value);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Adds multiple items to the list.\n\t *\n\t * @param items  An Array of items to add\n\t */\n\tpublic pushAll(values: Array<T>): void {\n\t\t$array.each(values, (value) => {\n\t\t\tthis.push(value);\n\t\t});\n\t}\n\n\t/**\n\t * Copies and adds items from abother list.\n\t *\n\t * @param source  A list top copy items from\n\t */\n\tpublic copyFrom(source: this): void {\n\t\tthis.pushAll(source._values);\n\t}\n\n\t/**\n\t * Returns the last item from the list, and removes it.\n\t *\n\t * @return Item\n\t */\n\tpublic pop(): Optional<T> {\n\t\tlet index = this._values.length - 1;\n\t\treturn index < 0 ? undefined : this.removeIndex(this._values.length - 1);\n\t}\n\n\t/**\n\t * Returns the first item from the list, and removes it.\n\t *\n\t * @return Item\n\t */\n\tpublic shift(): Optional<T> {\n\t\treturn this._values.length ? this.removeIndex(0) : undefined;\n\t}\n\n\t/**\n\t * Sets multiple items to the list.\n\t *\n\t * All current items are removed.\n\t *\n\t * @param newArray  New items\n\t */\n\tpublic setAll(newArray: Array<T>): void {\n\t\tconst old = this._values;\n\t\tthis._values = [];\n\t\tthis._onClear(old);\n\n\t\t$array.each(newArray, (value) => {\n\t\t\tthis._values.push(value);\n\t\t\tthis._onPush(value);\n\t\t});\n\t}\n\n\t/**\n\t * Removes all items from the list.\n\t */\n\tpublic clear(): void {\n\t\tthis.setAll([]);\n\t}\n\n\t/**\n\t * Returns an ES6 iterator for the list.\n\t */\n\tpublic *[Symbol.iterator](): Iterator<T> {\n\t\tconst length = this._values.length;\n\n\t\tfor (let i = 0; i < length; ++i) {\n\t\t\tyield this._values[i];\n\t\t}\n\t}\n\n\t/**\n\t * Calls `f` for each element in the list.\n\t *\n\t * `f` should have at least one parameter defined which will get a current\n\t * item, with optional second argument - index.\n\t */\n\tpublic each(f: (value: T, index: number) => void): void {\n\t\t$array.each(this._values, f);\n\t}\n}\n\n\n/**\n * A version of a [[List]] where the elements are disposed automatically when\n * removed from the list, unless `autoDispose` is set to `false`.\n */\nexport class ListAutoDispose<A extends IDisposer> extends List<A> implements IDisposer {\n\t/**\n\t * Automatically disposes elements that are removed from the list.\n\t *\n\t * @default true\n\t */\n\tpublic autoDispose: boolean = true;\n\n\tprivate _disposed: boolean = false;\n\n\tprotected _onSetIndex(index: number, oldValue: A, newValue: A) {\n\t\tif (this.autoDispose) {\n\t\t\toldValue.dispose();\n\t\t}\n\n\t\tsuper._onSetIndex(index, oldValue, newValue);\n\t}\n\n\tprotected _onRemoveIndex(index: number, oldValue: A) {\n\t\tif (this.autoDispose) {\n\t\t\toldValue.dispose();\n\t\t}\n\n\t\tsuper._onRemoveIndex(index, oldValue);\n\t}\n\n\tprotected _onClear(oldValues: Array<A>) {\n\t\tif (this.autoDispose) {\n\t\t\t$array.each(oldValues, (x) => {\n\t\t\t\tx.dispose();\n\t\t\t});\n\t\t}\n\n\t\tsuper._onClear(oldValues);\n\t}\n\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\tpublic dispose(): void {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\n\t\t\tif (this.autoDispose) {\n\t\t\t\t$array.each(this._values, (x) => {\n\t\t\t\t\tx.dispose();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * A version of a [[List]] that is able to create new elements as well as\n * apply additional settings to newly created items.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/list-templates/} for more info\n */\nexport class ListTemplate<A extends Entity> extends ListAutoDispose<A> {\n\tpublic template: Template<A>;\n\tpublic make: () => A;\n\n\tconstructor(template: Template<A>, make: () => A) {\n\t\tsuper();\n\t\tthis.template = template;\n\t\tthis.make = make;\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}